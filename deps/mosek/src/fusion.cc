#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {}
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; }
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; }
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr;
  size_t sz0, sz1;
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {}
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T>
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow;
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_add(int a, int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, int b) { return safe_add_<long long int>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow;
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, int b) { return safe_mul_<long long int>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _157,    std::shared_ptr< monty::ndarray< long long,1 > > _158,    int _159,    int _160,    int _161,    std::shared_ptr< monty::ndarray< long long,1 > > _162) { mosek::fusion::p_Sort::argTransposeSort(_157,_158,_159,_160,_161,_162); }void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< long long,1 > > _157,std::shared_ptr< monty::ndarray< long long,1 > > _158,int _159,int _160,int _161,std::shared_ptr< monty::ndarray< long long,1 > > _162){
  _checked_ptr_1<long long> _ptr__157(_157 ? _157->raw() : nullptr, _157 ? _157->size(0) : 0);
  _checked_ptr_1<long long> _ptr__158(_158 ? _158->raw() : nullptr, _158 ? _158->size(0) : 0);
  _checked_ptr_1<long long> _ptr__162(_162 ? _162->raw() : nullptr, _162 ? _162->size(0) : 0);
  int _8623 = (int)0;
  int _8624 = safe_add( safe_mul( _159,_161 ),(int)1 );
  for (int _163 = _8623; _163 < _8624; ++_163)
  {
    {
      _ptr__158[_163] = (int)0;
    }
  }
  int _8625 = (int)0;
  int _8626 = (int)((_162)->size(0));
  for (int _164 = _8625; _164 < _8626; ++_164)
  {
    {
      ++ _ptr__158[safe_add( safe_add( safe_mul( (_ptr__162[_ptr__157[_164]] / safe_mul( _160,_161 )),_161 ),(_ptr__162[_ptr__157[_164]] % _161) ),(int)1 )];
    }
  }
  int _8627 = (int)0;
  int _8628 = safe_mul( _159,_161 );
  for (int _165 = _8627; _165 < _8628; ++_165)
  {
    {
      _ptr__158[safe_add( _165,(int)1 )] = safe_add( _ptr__158[safe_add( _165,(int)1 )],_ptr__158[_165] );
    }
  }
  std::vector<long long> _8629;
  for (int _167 = (int)0, _8630 = (int)((_157)->size(0)); _167 < _8630 ; ++_167)
  {
    _8629.push_back(_ptr__157[_167]);
  }
  auto _8631 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8629.size()),_8629.begin(),_8629.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _166 = _8631;
  _checked_ptr_1<long long> _ptr__166(_166 ? _166->raw() : nullptr,_166 ? _166->size(0) : 0);
  long long _8632 = (long long)0;
  long long _8633 = (long long)((_162)->size(0));
  for (long long _168 = _8632; _168 < _8633; ++_168)
  {
    {
      long long _169 = safe_add( safe_mul( (_ptr__162[_ptr__166[_168]] / safe_mul( _160,_161 )),_161 ),(_ptr__162[_ptr__166[_168]] % _161) );
      _ptr__157[_ptr__158[_169]] = _ptr__166[_168];
      ++ _ptr__158[_169];
    }
  }
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _170,    std::shared_ptr< monty::ndarray< long long,1 > > _171) { mosek::fusion::p_Sort::argsort(_170,_171); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _170,std::shared_ptr< monty::ndarray< long long,1 > > _171){
  _checked_ptr_1<long long> _ptr__170(_170 ? _170->raw() : nullptr, _170 ? _170->size(0) : 0);
  _checked_ptr_1<long long> _ptr__171(_171 ? _171->raw() : nullptr, _171 ? _171->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_170,_171,(long long)((int)0),(long long)((int)((_170)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _172,    std::shared_ptr< monty::ndarray< int,1 > > _173) { mosek::fusion::p_Sort::argsort(_172,_173); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _172,std::shared_ptr< monty::ndarray< int,1 > > _173){
  _checked_ptr_1<long long> _ptr__172(_172 ? _172->raw() : nullptr, _172 ? _172->size(0) : 0);
  _checked_ptr_1<int> _ptr__173(_173 ? _173->raw() : nullptr, _173 ? _173->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_172,_173,(long long)((int)0),(long long)((int)((_172)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    std::shared_ptr< monty::ndarray< long long,1 > > _176) { mosek::fusion::p_Sort::argsort(_174,_175,_176); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,std::shared_ptr< monty::ndarray< long long,1 > > _176){
  _checked_ptr_1<long long> _ptr__174(_174 ? _174->raw() : nullptr, _174 ? _174->size(0) : 0);
  _checked_ptr_1<long long> _ptr__175(_175 ? _175->raw() : nullptr, _175 ? _175->size(0) : 0);
  _checked_ptr_1<long long> _ptr__176(_176 ? _176->raw() : nullptr, _176 ? _176->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_174,_175,_176,(long long)((int)0),(long long)((int)((_174)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _177,    std::shared_ptr< monty::ndarray< int,1 > > _178,    std::shared_ptr< monty::ndarray< int,1 > > _179) { mosek::fusion::p_Sort::argsort(_177,_178,_179); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _177,std::shared_ptr< monty::ndarray< int,1 > > _178,std::shared_ptr< monty::ndarray< int,1 > > _179){
  _checked_ptr_1<long long> _ptr__177(_177 ? _177->raw() : nullptr, _177 ? _177->size(0) : 0);
  _checked_ptr_1<int> _ptr__178(_178 ? _178->raw() : nullptr, _178 ? _178->size(0) : 0);
  _checked_ptr_1<int> _ptr__179(_179 ? _179->raw() : nullptr, _179 ? _179->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_177,_178,_179,(long long)((int)0),(long long)((int)((_177)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _180,    std::shared_ptr< monty::ndarray< long long,1 > > _181,    long long _182,    long long _183) { mosek::fusion::p_Sort::argsort(_180,_181,_182,_183); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _180,std::shared_ptr< monty::ndarray< long long,1 > > _181,long long _182,long long _183){
  _checked_ptr_1<long long> _ptr__180(_180 ? _180->raw() : nullptr, _180 ? _180->size(0) : 0);
  _checked_ptr_1<long long> _ptr__181(_181 ? _181->raw() : nullptr, _181 ? _181->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_180,_181,_182,_183,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _184,    std::shared_ptr< monty::ndarray< int,1 > > _185,    long long _186,    long long _187) { mosek::fusion::p_Sort::argsort(_184,_185,_186,_187); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _184,std::shared_ptr< monty::ndarray< int,1 > > _185,long long _186,long long _187){
  _checked_ptr_1<long long> _ptr__184(_184 ? _184->raw() : nullptr, _184 ? _184->size(0) : 0);
  _checked_ptr_1<int> _ptr__185(_185 ? _185->raw() : nullptr, _185 ? _185->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_184,_185,_186,_187,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _188,    std::shared_ptr< monty::ndarray< long long,1 > > _189,    std::shared_ptr< monty::ndarray< long long,1 > > _190,    long long _191,    long long _192) { mosek::fusion::p_Sort::argsort(_188,_189,_190,_191,_192); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _188,std::shared_ptr< monty::ndarray< long long,1 > > _189,std::shared_ptr< monty::ndarray< long long,1 > > _190,long long _191,long long _192){
  _checked_ptr_1<long long> _ptr__188(_188 ? _188->raw() : nullptr, _188 ? _188->size(0) : 0);
  _checked_ptr_1<long long> _ptr__189(_189 ? _189->raw() : nullptr, _189 ? _189->size(0) : 0);
  _checked_ptr_1<long long> _ptr__190(_190 ? _190->raw() : nullptr, _190 ? _190->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_188,_189,_190,_191,_192,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _193,    std::shared_ptr< monty::ndarray< int,1 > > _194,    std::shared_ptr< monty::ndarray< int,1 > > _195,    long long _196,    long long _197) { mosek::fusion::p_Sort::argsort(_193,_194,_195,_196,_197); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _193,std::shared_ptr< monty::ndarray< int,1 > > _194,std::shared_ptr< monty::ndarray< int,1 > > _195,long long _196,long long _197){
  _checked_ptr_1<long long> _ptr__193(_193 ? _193->raw() : nullptr, _193 ? _193->size(0) : 0);
  _checked_ptr_1<int> _ptr__194(_194 ? _194->raw() : nullptr, _194 ? _194->size(0) : 0);
  _checked_ptr_1<int> _ptr__195(_195 ? _195->raw() : nullptr, _195 ? _195->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_193,_194,_195,_196,_197,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _198,    std::shared_ptr< monty::ndarray< long long,1 > > _199,    long long _200,    long long _201,    bool _202) { mosek::fusion::p_Sort::argsort(_198,_199,_200,_201,_202); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _198,std::shared_ptr< monty::ndarray< long long,1 > > _199,long long _200,long long _201,bool _202){
  _checked_ptr_1<long long> _ptr__198(_198 ? _198->raw() : nullptr, _198 ? _198->size(0) : 0);
  _checked_ptr_1<long long> _ptr__199(_199 ? _199->raw() : nullptr, _199 ? _199->size(0) : 0);
  if (((!_202) || ((_201 - _200) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_198,_199,_200,_201,_202)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _203 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__203(_203 ? _203->raw() : nullptr,_203 ? _203->size(0) : 0);
      int _204 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_198,_199,nullptr,_200,_201,_203);
      if (((_ptr__203[(int)1] - _ptr__203[(int)0]) < safe_mul( _204,(_201 - _200) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_198,_199,_200,_201,_ptr__203[(int)0],_ptr__203[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _205,    std::shared_ptr< monty::ndarray< int,1 > > _206,    long long _207,    long long _208,    bool _209) { mosek::fusion::p_Sort::argsort(_205,_206,_207,_208,_209); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _205,std::shared_ptr< monty::ndarray< int,1 > > _206,long long _207,long long _208,bool _209){
  _checked_ptr_1<long long> _ptr__205(_205 ? _205->raw() : nullptr, _205 ? _205->size(0) : 0);
  _checked_ptr_1<int> _ptr__206(_206 ? _206->raw() : nullptr, _206 ? _206->size(0) : 0);
  if (((!_209) || ((_208 - _207) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_205,_206,_207,_208,_209)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _210 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__210(_210 ? _210->raw() : nullptr,_210 ? _210->size(0) : 0);
      int _211 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_205,_206,nullptr,_207,_208,_210);
      if (((_ptr__210[(int)1] - _ptr__210[(int)0]) < safe_mul( _211,(_208 - _207) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_205,_206,_207,_208,_ptr__210[(int)0],_ptr__210[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _212,    std::shared_ptr< monty::ndarray< long long,1 > > _213,    std::shared_ptr< monty::ndarray< long long,1 > > _214,    long long _215,    long long _216,    bool _217) { mosek::fusion::p_Sort::argsort(_212,_213,_214,_215,_216,_217); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _212,std::shared_ptr< monty::ndarray< long long,1 > > _213,std::shared_ptr< monty::ndarray< long long,1 > > _214,long long _215,long long _216,bool _217){
  _checked_ptr_1<long long> _ptr__212(_212 ? _212->raw() : nullptr, _212 ? _212->size(0) : 0);
  _checked_ptr_1<long long> _ptr__213(_213 ? _213->raw() : nullptr, _213 ? _213->size(0) : 0);
  _checked_ptr_1<long long> _ptr__214(_214 ? _214->raw() : nullptr, _214 ? _214->size(0) : 0);
  if (((!_217) || ((_216 - _215) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_212,_213,_214,_215,_216);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_212,_213,_214,_215,_216,_217)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _218 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__218(_218 ? _218->raw() : nullptr,_218 ? _218->size(0) : 0);
      int _219 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_212,_213,_214,_215,_216,_218);
      if ((((_ptr__218[(int)1] - _ptr__218[(int)0]) < safe_mul( _219,(_216 - _215) )) && ((_ptr__218[(int)3] - _ptr__218[(int)2]) < safe_mul( _219,(_216 - _215) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_212,_214,_215,_216,_ptr__218[(int)2],_ptr__218[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_212,_213,_215,_216,_ptr__218[(int)0],_ptr__218[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_212,_213,_214,_215,_216);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _220,    std::shared_ptr< monty::ndarray< int,1 > > _221,    std::shared_ptr< monty::ndarray< int,1 > > _222,    long long _223,    long long _224,    bool _225) { mosek::fusion::p_Sort::argsort(_220,_221,_222,_223,_224,_225); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _220,std::shared_ptr< monty::ndarray< int,1 > > _221,std::shared_ptr< monty::ndarray< int,1 > > _222,long long _223,long long _224,bool _225){
  _checked_ptr_1<long long> _ptr__220(_220 ? _220->raw() : nullptr, _220 ? _220->size(0) : 0);
  _checked_ptr_1<int> _ptr__221(_221 ? _221->raw() : nullptr, _221 ? _221->size(0) : 0);
  _checked_ptr_1<int> _ptr__222(_222 ? _222->raw() : nullptr, _222 ? _222->size(0) : 0);
  if (((!_225) || ((_224 - _223) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_220,_221,_222,_223,_224);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_220,_221,_222,_223,_224,_225)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _226 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__226(_226 ? _226->raw() : nullptr,_226 ? _226->size(0) : 0);
      int _227 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_220,_221,_222,_223,_224,_226);
      if ((((_ptr__226[(int)1] - _ptr__226[(int)0]) < safe_mul( _227,(_224 - _223) )) && ((_ptr__226[(int)3] - _ptr__226[(int)2]) < safe_mul( _227,(_224 - _223) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_220,_222,_223,_224,_ptr__226[(int)2],_ptr__226[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_220,_221,_223,_224,_ptr__226[(int)0],_ptr__226[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_220,_221,_222,_223,_224);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _228,    std::shared_ptr< monty::ndarray< long long,1 > > _229,    long long _230,    long long _231,    long long _232,    long long _233) { mosek::fusion::p_Sort::argbucketsort(_228,_229,_230,_231,_232,_233); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _228,std::shared_ptr< monty::ndarray< long long,1 > > _229,long long _230,long long _231,long long _232,long long _233){
  _checked_ptr_1<long long> _ptr__228(_228 ? _228->raw() : nullptr, _228 ? _228->size(0) : 0);
  _checked_ptr_1<long long> _ptr__229(_229 ? _229->raw() : nullptr, _229 ? _229->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_228,_230,_231,_229,_232,_233);
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _234,    std::shared_ptr< monty::ndarray< int,1 > > _235,    long long _236,    long long _237,    int _238,    int _239) { mosek::fusion::p_Sort::argbucketsort(_234,_235,_236,_237,_238,_239); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _234,std::shared_ptr< monty::ndarray< int,1 > > _235,long long _236,long long _237,int _238,int _239){
  _checked_ptr_1<long long> _ptr__234(_234 ? _234->raw() : nullptr, _234 ? _234->size(0) : 0);
  _checked_ptr_1<int> _ptr__235(_235 ? _235->raw() : nullptr, _235 ? _235->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_234,_236,_237,_235,_238,_239);
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _240,    std::shared_ptr< monty::ndarray< long long,1 > > _241,    std::shared_ptr< monty::ndarray< long long,1 > > _242,    long long _243,    long long _244,    std::shared_ptr< monty::ndarray< long long,1 > > _245) { mosek::fusion::p_Sort::getminmax(_240,_241,_242,_243,_244,_245); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _240,std::shared_ptr< monty::ndarray< long long,1 > > _241,std::shared_ptr< monty::ndarray< long long,1 > > _242,long long _243,long long _244,std::shared_ptr< monty::ndarray< long long,1 > > _245){
  _checked_ptr_1<long long> _ptr__240(_240 ? _240->raw() : nullptr, _240 ? _240->size(0) : 0);
  _checked_ptr_1<long long> _ptr__241(_241 ? _241->raw() : nullptr, _241 ? _241->size(0) : 0);
  _checked_ptr_1<long long> _ptr__242(_242 ? _242->raw() : nullptr, _242 ? _242->size(0) : 0);
  _checked_ptr_1<long long> _ptr__245(_245 ? _245->raw() : nullptr, _245 ? _245->size(0) : 0);
  _ptr__245[(int)0] = _ptr__241[_ptr__240[_243]];
  _ptr__245[(int)1] = _ptr__241[_ptr__240[_243]];
  long long _8634 = safe_add( _243,(int)1 );
  long long _8635 = _244;
  for (long long _246 = _8634; _246 < _8635; ++_246)
  {
    {
      if ((_ptr__245[(int)0] > _ptr__241[_ptr__240[_246]]))
      {
        {
          _ptr__245[(int)0] = _ptr__241[_ptr__240[_246]];
        }
      }
      {}
      if ((_ptr__245[(int)1] < _ptr__241[_ptr__240[_246]]))
      {
        {
          _ptr__245[(int)1] = _ptr__241[_ptr__240[_246]];
        }
      }
      {}
    }
  }
  if ((NULL != _242.get()))
  {
    {
      _ptr__245[(int)2] = _ptr__242[_ptr__240[_243]];
      _ptr__245[(int)3] = _ptr__242[_ptr__240[_243]];
      long long _8636 = safe_add( _243,(int)1 );
      long long _8637 = _244;
      for (long long _247 = _8636; _247 < _8637; ++_247)
      {
        {
          if ((_ptr__245[(int)2] > _ptr__242[_ptr__240[_247]]))
          {
            {
              _ptr__245[(int)2] = _ptr__242[_ptr__240[_247]];
            }
          }
          {}
          if ((_ptr__245[(int)3] < _ptr__242[_ptr__240[_247]]))
          {
            {
              _ptr__245[(int)3] = _ptr__242[_ptr__240[_247]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _248,    std::shared_ptr< monty::ndarray< int,1 > > _249,    std::shared_ptr< monty::ndarray< int,1 > > _250,    long long _251,    long long _252,    std::shared_ptr< monty::ndarray< int,1 > > _253) { mosek::fusion::p_Sort::getminmax(_248,_249,_250,_251,_252,_253); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _248,std::shared_ptr< monty::ndarray< int,1 > > _249,std::shared_ptr< monty::ndarray< int,1 > > _250,long long _251,long long _252,std::shared_ptr< monty::ndarray< int,1 > > _253){
  _checked_ptr_1<long long> _ptr__248(_248 ? _248->raw() : nullptr, _248 ? _248->size(0) : 0);
  _checked_ptr_1<int> _ptr__249(_249 ? _249->raw() : nullptr, _249 ? _249->size(0) : 0);
  _checked_ptr_1<int> _ptr__250(_250 ? _250->raw() : nullptr, _250 ? _250->size(0) : 0);
  _checked_ptr_1<int> _ptr__253(_253 ? _253->raw() : nullptr, _253 ? _253->size(0) : 0);
  _ptr__253[(int)0] = _ptr__249[_ptr__248[_251]];
  _ptr__253[(int)1] = _ptr__249[_ptr__248[_251]];
  long long _8638 = safe_add( _251,(int)1 );
  long long _8639 = _252;
  for (long long _254 = _8638; _254 < _8639; ++_254)
  {
    {
      if ((_ptr__253[(int)0] > _ptr__249[_ptr__248[_254]]))
      {
        {
          _ptr__253[(int)0] = _ptr__249[_ptr__248[_254]];
        }
      }
      {}
      if ((_ptr__253[(int)1] < _ptr__249[_ptr__248[_254]]))
      {
        {
          _ptr__253[(int)1] = _ptr__249[_ptr__248[_254]];
        }
      }
      {}
    }
  }
  if ((NULL != _250.get()))
  {
    {
      _ptr__253[(int)2] = _ptr__250[_ptr__248[_251]];
      _ptr__253[(int)3] = _ptr__250[_ptr__248[_251]];
      long long _8640 = safe_add( _251,(int)1 );
      long long _8641 = _252;
      for (long long _255 = _8640; _255 < _8641; ++_255)
      {
        {
          if ((_ptr__253[(int)2] > _ptr__250[_ptr__248[_255]]))
          {
            {
              _ptr__253[(int)2] = _ptr__250[_ptr__248[_255]];
            }
          }
          {}
          if ((_ptr__253[(int)3] < _ptr__250[_ptr__248[_255]]))
          {
            {
              _ptr__253[(int)3] = _ptr__250[_ptr__248[_255]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _256,    std::shared_ptr< monty::ndarray< long long,1 > > _257,    long long _258,    long long _259,    bool _260) { return mosek::fusion::p_Sort::issorted(_256,_257,_258,_259,_260); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _256,std::shared_ptr< monty::ndarray< long long,1 > > _257,long long _258,long long _259,bool _260){
  _checked_ptr_1<long long> _ptr__256(_256 ? _256->raw() : nullptr, _256 ? _256->size(0) : 0);
  _checked_ptr_1<long long> _ptr__257(_257 ? _257->raw() : nullptr, _257 ? _257->size(0) : 0);
  long long _8642 = _258;
  long long _8643 = (_259 - (int)1);
  for (long long _261 = _8642; _261 < _8643; ++_261)
  {
    {
      if ((_ptr__257[_ptr__256[_261]] > _ptr__257[_ptr__256[safe_add( _261,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _262,    std::shared_ptr< monty::ndarray< int,1 > > _263,    long long _264,    long long _265,    bool _266) { return mosek::fusion::p_Sort::issorted(_262,_263,_264,_265,_266); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _262,std::shared_ptr< monty::ndarray< int,1 > > _263,long long _264,long long _265,bool _266){
  _checked_ptr_1<long long> _ptr__262(_262 ? _262->raw() : nullptr, _262 ? _262->size(0) : 0);
  _checked_ptr_1<int> _ptr__263(_263 ? _263->raw() : nullptr, _263 ? _263->size(0) : 0);
  long long _8644 = _264;
  long long _8645 = (_265 - (int)1);
  for (long long _267 = _8644; _267 < _8645; ++_267)
  {
    {
      if ((_ptr__263[_ptr__262[_267]] > _ptr__263[_ptr__262[safe_add( _267,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _268,    std::shared_ptr< monty::ndarray< long long,1 > > _269,    std::shared_ptr< monty::ndarray< long long,1 > > _270,    long long _271,    long long _272,    bool _273) { return mosek::fusion::p_Sort::issorted(_268,_269,_270,_271,_272,_273); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _268,std::shared_ptr< monty::ndarray< long long,1 > > _269,std::shared_ptr< monty::ndarray< long long,1 > > _270,long long _271,long long _272,bool _273){
  _checked_ptr_1<long long> _ptr__268(_268 ? _268->raw() : nullptr, _268 ? _268->size(0) : 0);
  _checked_ptr_1<long long> _ptr__269(_269 ? _269->raw() : nullptr, _269 ? _269->size(0) : 0);
  _checked_ptr_1<long long> _ptr__270(_270 ? _270->raw() : nullptr, _270 ? _270->size(0) : 0);
  long long _8646 = _271;
  long long _8647 = (_272 - (int)1);
  for (long long _274 = _8646; _274 < _8647; ++_274)
  {
    {
      if (((_ptr__269[_ptr__268[_274]] > _ptr__269[_ptr__268[safe_add( _274,(int)1 )]]) || ((_ptr__269[_ptr__268[safe_add( _274,(int)1 )]] == _ptr__269[_ptr__268[_274]]) && (_ptr__270[_ptr__268[_274]] > _ptr__270[_ptr__268[safe_add( _274,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _275,    std::shared_ptr< monty::ndarray< int,1 > > _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    long long _278,    long long _279,    bool _280) { return mosek::fusion::p_Sort::issorted(_275,_276,_277,_278,_279,_280); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _275,std::shared_ptr< monty::ndarray< int,1 > > _276,std::shared_ptr< monty::ndarray< int,1 > > _277,long long _278,long long _279,bool _280){
  _checked_ptr_1<long long> _ptr__275(_275 ? _275->raw() : nullptr, _275 ? _275->size(0) : 0);
  _checked_ptr_1<int> _ptr__276(_276 ? _276->raw() : nullptr, _276 ? _276->size(0) : 0);
  _checked_ptr_1<int> _ptr__277(_277 ? _277->raw() : nullptr, _277 ? _277->size(0) : 0);
  long long _8648 = _278;
  long long _8649 = (_279 - (int)1);
  for (long long _281 = _8648; _281 < _8649; ++_281)
  {
    {
      if (((_ptr__276[_ptr__275[_281]] > _ptr__276[_ptr__275[safe_add( _281,(int)1 )]]) || ((_ptr__276[_ptr__275[_281]] == _ptr__276[_ptr__275[safe_add( _281,(int)1 )]]) && (_ptr__277[_ptr__275[_281]] > _ptr__277[_ptr__275[safe_add( _281,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _282){ return new mosek::fusion::IndexCounter(_282); }mosek::fusion::IndexCounter::IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _282) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_282); }void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _282){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__282(_282 ? _282->raw() : nullptr, _282 ? _282->size(0) : 0);
    n = (int)((_282)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    start = (long long)0;
    strides = ::mosek::fusion::p_Set::strides(_282);
    std::vector<int> _8650;
    for (int _283 = (int)0, _8651 = (int)((_282)->size(0)); _283 < _8651 ; ++_283)
    {
      _8650.push_back(_ptr__282[_283]);
    }
    auto _8652 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8650.size()),_8650.begin(),_8650.end()));
    dims = _8652;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286){ return new mosek::fusion::IndexCounter(_284,_285,_286); }mosek::fusion::IndexCounter::IndexCounter  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_284,_285,_286); }void mosek::fusion::p_IndexCounter::_initialize  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__285(_285 ? _285->raw() : nullptr, _285 ? _285->size(0) : 0);
    _checked_ptr_1<int> _ptr__286(_286 ? _286->raw() : nullptr, _286 ? _286->size(0) : 0);
    int _287 = (int)((_286)->size(0));
    n = (int)((_285)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _8653 = (int)0;
    int _8654 = n;
    for (int _288 = _8653; _288 < _8654; ++_288)
    {
      {
        ((*st)(_288)) = _284;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_286);
    dims = _285;
    start = _284;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291){ return new mosek::fusion::IndexCounter(_289,_290,_291); }mosek::fusion::IndexCounter::IndexCounter  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_289,_290,_291); }void mosek::fusion::p_IndexCounter::_initialize  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__290(_290 ? _290->raw() : nullptr, _290 ? _290->size(0) : 0);
    _checked_ptr_1<long long> _ptr__291(_291 ? _291->raw() : nullptr, _291 ? _291->size(0) : 0);
    n = (int)((_290)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _8655 = (int)0;
    int _8656 = n;
    for (int _292 = _8655; _292 < _8656; ++_292)
    {
      {
        ((*st)(_292)) = _289;
      }
    }
    strides = _291;
    dims = _290;
    start = _289;
  }
}bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd(){
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex(){
  return ii;
}
long long mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next(){
  long long _293 = _pubthis->get();
  _pubthis->inc();
  return _293;
}
long long mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get(){
  return ((*st)((int)0));
}
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc(){
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int _294;
  {
    _294 = (int)0;
    for(;((_294 < (n - (int)1)) && (((*ii)(_294)) == ((*dims)(((n - _294) - (int)1)))));++ _294)
    {
      {
        ((*ii)(_294)) = (int)0;
        ++ ((*ii)(safe_add( _294,(int)1 )));
        ((*st)(safe_add( _294,(int)1 ))) = safe_add( ((*st)(safe_add( _294,(int)1 ))),((*strides)(((n - _294) - (int)2))) );
      }
    }
  }
  int _8657 = (int)0;
  int _8658 = _294;
  for (int _295 = _8657; _295 < _8658; ++_295)
  {
    {
      ((*st)(_295)) = ((*st)(_294));
    }
  }
}
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset(){
  st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
  int _8659 = (int)0;
  int _8660 = n;
  for (int _296 = _8659; _296 < _8660; ++_296)
  {
    {
      ((*st)(_296)) = start;
    }
  }
}
void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< long long,1 > > _297,    int _298) { return mosek::fusion::p_CommonTools::resize(_297,_298); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< long long,1 > > _297,int _298){
  _checked_ptr_1<long long> _ptr__297(_297 ? _297->raw() : nullptr, _297 ? _297->size(0) : 0);
  if ((_298 == (int)((_297)->size(0))))
  {
    {
      return _297;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _299 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_298)));
      _checked_ptr_1<long long> _ptr__299(_299 ? _299->raw() : nullptr,_299 ? _299->size(0) : 0);
      if ((_298 > (int)((_297)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,(int)((_297)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,_298);
        }
      }
      return _299;
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< int,1 > > _300,    int _301) { return mosek::fusion::p_CommonTools::resize(_300,_301); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int,1 > > _300,int _301){
  _checked_ptr_1<int> _ptr__300(_300 ? _300->raw() : nullptr, _300 ? _300->size(0) : 0);
  if ((_301 == (int)((_300)->size(0))))
  {
    {
      return _300;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_301)));
      _checked_ptr_1<int> _ptr__302(_302 ? _302->raw() : nullptr,_302 ? _302->size(0) : 0);
      if ((_301 > (int)((_300)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,(int)((_300)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,_301);
        }
      }
      return _302;
    }
  }
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< double,1 > > _303,    int _304) { return mosek::fusion::p_CommonTools::resize(_303,_304); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _303,int _304){
  _checked_ptr_1<double> _ptr__303(_303 ? _303->raw() : nullptr, _303 ? _303->size(0) : 0);
  if ((_304 == (int)((_303)->size(0))))
  {
    {
      return _303;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _305 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_304)));
      _checked_ptr_1<double> _ptr__305(_305 ? _305->raw() : nullptr,_305 ? _305->size(0) : 0);
      if ((_304 > (int)((_303)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_303,(int)0,_305,(int)0,(int)((_303)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_303,(int)0,_305,(int)0,_304);
        }
      }
      return _305;
    }
  }
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< int,1 > > _306,    int _307) { return mosek::fusion::p_CommonTools::binarySearch(_306,_307); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int,1 > > _306,int _307){
  _checked_ptr_1<int> _ptr__306(_306 ? _306->raw() : nullptr, _306 ? _306->size(0) : 0);
  int _308 = (int)0;
  int _309 = (int)((_306)->size(0));
  if ((_ptr__306[_308] == _307))
  {
    {
      return _308;
    }
  }
  else if((_ptr__306[(_309 - (int)1)] == _307))
  {
    {
      return (_309 - (int)1);
    }
  }
  {}
  while ( (_308 < (_309 - (int)1)) )
  {
    {
      int _310 = ((_309 - _308) / (int)2);
      if ((_307 < _ptr__306[_310]))
      {
        {
          _308 = safe_add( _310,(int)1 );
        }
      }
      else if((_307 > _ptr__306[_310]))
      {
        {
          _309 = _310;
        }
      }
      else
      {
        {
          return _310;
        }
      }
    }
  }
  return (-(int)1);
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< long long,1 > > _311,    long long _312) { return mosek::fusion::p_CommonTools::binarySearch(_311,_312); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< long long,1 > > _311,long long _312){
  _checked_ptr_1<long long> _ptr__311(_311 ? _311->raw() : nullptr, _311 ? _311->size(0) : 0);
  int _313 = ::mosek::fusion::p_CommonTools::binarySearchL(_311,_312);
  if (((_313 < (int)((_311)->size(0))) && (_ptr__311[_313] == _312)))
  {
    {
      return _313;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
int mosek::fusion::CommonTools::binarySearchR  ( std::shared_ptr< monty::ndarray< long long,1 > > _314,    long long _315) { return mosek::fusion::p_CommonTools::binarySearchR(_314,_315); }int mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< long long,1 > > _314,long long _315){
  _checked_ptr_1<long long> _ptr__314(_314 ? _314->raw() : nullptr, _314 ? _314->size(0) : 0);
  int _316 = (int)0;
  int _317 = (int)((_314)->size(0));
  if ((_ptr__314[_316] > _315))
  {
    {
      return _316;
    }
  }
  {}
  while ( (_316 < (_317 - (int)1)) )
  {
    {
      int _318 = (safe_add( _317,_316 ) / (int)2);
      if ((_315 >= _ptr__314[_318]))
      {
        {
          _316 = _318;
        }
      }
      else
      {
        {
          _317 = _318;
        }
      }
    }
  }
  return _317;
}
int mosek::fusion::CommonTools::binarySearchL  ( std::shared_ptr< monty::ndarray< long long,1 > > _319,    long long _320) { return mosek::fusion::p_CommonTools::binarySearchL(_319,_320); }int mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< long long,1 > > _319,long long _320){
  _checked_ptr_1<long long> _ptr__319(_319 ? _319->raw() : nullptr, _319 ? _319->size(0) : 0);
  int _321 = (int)0;
  int _322 = (int)((_319)->size(0));
  if ((_320 <= _ptr__319[_321]))
  {
    {
      return _321;
    }
  }
  {}
  while ( (_321 < (_322 - (int)1)) )
  {
    {
      int _323 = (safe_add( _322,_321 ) / (int)2);
      if ((_ptr__319[_323] < _320))
      {
        {
          _321 = _323;
        }
      }
      else
      {
        {
          _322 = _323;
        }
      }
    }
  }
  return _322;
}
void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _324,    std::shared_ptr< monty::ndarray< int,1 > > _325,    std::shared_ptr< monty::ndarray< int,1 > > _326) { mosek::fusion::p_CommonTools::ndIncr(_324,_325,_326); }void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int,1 > > _324,std::shared_ptr< monty::ndarray< int,1 > > _325,std::shared_ptr< monty::ndarray< int,1 > > _326){
  _checked_ptr_1<int> _ptr__324(_324 ? _324->raw() : nullptr, _324 ? _324->size(0) : 0);
  _checked_ptr_1<int> _ptr__325(_325 ? _325->raw() : nullptr, _325 ? _325->size(0) : 0);
  _checked_ptr_1<int> _ptr__326(_326 ? _326->raw() : nullptr, _326 ? _326->size(0) : 0);
  int _327 = ((int)((_324)->size(0)) - (int)1);
  ++ _ptr__324[_327];
  while ( ((_327 > (int)0) && (_ptr__324[_327] >= _ptr__326[_327])) )
  {
    {
      _ptr__324[_327] = _ptr__325[_327];
      ++ _ptr__324[(_327 - (int)1)];
    }
  }
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _328,    std::shared_ptr< monty::ndarray< int,1 > > _329,    std::shared_ptr< monty::ndarray< double,1 > > _330,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _331,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _332,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _333,    long long _334,    int _335,    int _336) { mosek::fusion::p_CommonTools::transposeTriplets(_328,_329,_330,_331,_332,_333,_334,_335,_336); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _328,std::shared_ptr< monty::ndarray< int,1 > > _329,std::shared_ptr< monty::ndarray< double,1 > > _330,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _331,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _332,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _333,long long _334,int _335,int _336){
  _checked_ptr_1<int> _ptr__328(_328 ? _328->raw() : nullptr, _328 ? _328->size(0) : 0);
  _checked_ptr_1<int> _ptr__329(_329 ? _329->raw() : nullptr, _329 ? _329->size(0) : 0);
  _checked_ptr_1<double> _ptr__330(_330 ? _330->raw() : nullptr, _330 ? _330->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _335,(int)2 ))));
  _checked_ptr_1<long long> _ptr__337(_337 ? _337->raw() : nullptr,_337 ? _337->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _338 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _336,(int)2 ))));
  _checked_ptr_1<long long> _ptr__338(_338 ? _338->raw() : nullptr,_338 ? _338->size(0) : 0);
  {
    long long _339 = (long long)0;
    for(;(_339 < _334);++ _339)
    {
      {
        _ptr__338[safe_add( _ptr__329[_339],(int)2 )] = safe_add( _ptr__338[safe_add( _ptr__329[_339],(int)2 )],(int)1 );
        _ptr__337[safe_add( _ptr__328[_339],(int)2 )] = safe_add( _ptr__337[safe_add( _ptr__328[_339],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _340 = (int)1;
    for(;(_340 < _335);++ _340)
    {
      {
        _ptr__337[safe_add( _340,(int)1 )] = safe_add( _ptr__337[safe_add( _340,(int)1 )],_ptr__337[_340] );
      }
    }
  }
  {
    int _341 = (int)1;
    for(;(_341 < _336);++ _341)
    {
      {
        _ptr__338[safe_add( _341,(int)1 )] = safe_add( _ptr__338[safe_add( _341,(int)1 )],_ptr__338[_341] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _342 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_334)));
  _checked_ptr_1<long long> _ptr__342(_342 ? _342->raw() : nullptr,_342 ? _342->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _343 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_334)));
  _checked_ptr_1<long long> _ptr__343(_343 ? _343->raw() : nullptr,_343 ? _343->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _344 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_334)));
  _checked_ptr_1<double> _ptr__344(_344 ? _344->raw() : nullptr,_344 ? _344->size(0) : 0);
  int _8661 = (int)0;
  int _8662 = _335;
  for (int _345 = _8661; _345 < _8662; ++_345)
  {
    {
      {
        long long _346 = _ptr__337[_345];
        for(;(_346 < _ptr__337[safe_add( _345,(int)1 )]);++ _346)
        {
          {
            int _347 = _ptr__329[_346];
            long long _348 = _ptr__338[_347];
            _ptr__342[_348] = _345;
            _ptr__343[_348] = _347;
            _ptr__344[_348] = _ptr__330[_346];
            _ptr__338[_347] = safe_add( _348,(int)1 );
          }
        }
      }
    }
  }
  ((*_331)((int)0)) = _343;
  ((*_332)((int)0)) = _342;
  ((*_333)((int)0)) = _344;
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _349,    std::shared_ptr< monty::ndarray< int,1 > > _350,    std::shared_ptr< monty::ndarray< double,1 > > _351,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _352,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _353,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _354,    long long _355,    int _356,    int _357) { mosek::fusion::p_CommonTools::transposeTriplets(_349,_350,_351,_352,_353,_354,_355,_356,_357); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _349,std::shared_ptr< monty::ndarray< int,1 > > _350,std::shared_ptr< monty::ndarray< double,1 > > _351,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _352,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _353,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _354,long long _355,int _356,int _357){
  _checked_ptr_1<int> _ptr__349(_349 ? _349->raw() : nullptr, _349 ? _349->size(0) : 0);
  _checked_ptr_1<int> _ptr__350(_350 ? _350->raw() : nullptr, _350 ? _350->size(0) : 0);
  _checked_ptr_1<double> _ptr__351(_351 ? _351->raw() : nullptr, _351 ? _351->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _358 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _356,(int)2 ))));
  _checked_ptr_1<long long> _ptr__358(_358 ? _358->raw() : nullptr,_358 ? _358->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _359 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _357,(int)2 ))));
  _checked_ptr_1<long long> _ptr__359(_359 ? _359->raw() : nullptr,_359 ? _359->size(0) : 0);
  {
    long long _360 = (long long)0;
    for(;(_360 < _355);++ _360)
    {
      {
        _ptr__359[safe_add( _ptr__350[_360],(int)2 )] = safe_add( _ptr__359[safe_add( _ptr__350[_360],(int)2 )],(int)1 );
        _ptr__358[safe_add( _ptr__349[_360],(int)2 )] = safe_add( _ptr__358[safe_add( _ptr__349[_360],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _361 = (int)1;
    for(;(_361 < _356);++ _361)
    {
      {
        _ptr__358[safe_add( _361,(int)1 )] = safe_add( _ptr__358[safe_add( _361,(int)1 )],_ptr__358[_361] );
      }
    }
  }
  {
    int _362 = (int)1;
    for(;(_362 < _357);++ _362)
    {
      {
        _ptr__359[safe_add( _362,(int)1 )] = safe_add( _ptr__359[safe_add( _362,(int)1 )],_ptr__359[_362] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _363 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_355)));
  _checked_ptr_1<int> _ptr__363(_363 ? _363->raw() : nullptr,_363 ? _363->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _364 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_355)));
  _checked_ptr_1<int> _ptr__364(_364 ? _364->raw() : nullptr,_364 ? _364->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _365 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_355)));
  _checked_ptr_1<double> _ptr__365(_365 ? _365->raw() : nullptr,_365 ? _365->size(0) : 0);
  {
    int _366 = (int)0;
    for(;(_366 < _356);++ _366)
    {
      {
        long long _8663 = _ptr__358[_366];
        long long _8664 = _ptr__358[safe_add( _366,(int)1 )];
        for (long long _367 = _8663; _367 < _8664; ++_367)
        {
          {
            int _368 = _ptr__350[_367];
            long long _369 = _ptr__359[_368];
            _ptr__363[_369] = _366;
            _ptr__364[_369] = _368;
            _ptr__365[_369] = _ptr__351[_367];
            _ptr__359[_368] = safe_add( _369,(int)1 );
          }
        }
      }
    }
  }
  ((*_352)((int)0)) = _364;
  ((*_353)((int)0)) = _363;
  ((*_354)((int)0)) = _365;
}
void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _370,    std::shared_ptr< monty::ndarray< int,1 > > _371,    std::shared_ptr< monty::ndarray< double,1 > > _372,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _373,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _374,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _375,    long long _376,    int _377,    int _378) { mosek::fusion::p_CommonTools::tripletSort(_370,_371,_372,_373,_374,_375,_376,_377,_378); }void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int,1 > > _370,std::shared_ptr< monty::ndarray< int,1 > > _371,std::shared_ptr< monty::ndarray< double,1 > > _372,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _373,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _374,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _375,long long _376,int _377,int _378){
  _checked_ptr_1<int> _ptr__370(_370 ? _370->raw() : nullptr, _370 ? _370->size(0) : 0);
  _checked_ptr_1<int> _ptr__371(_371 ? _371->raw() : nullptr, _371 ? _371->size(0) : 0);
  _checked_ptr_1<double> _ptr__372(_372 ? _372->raw() : nullptr, _372 ? _372->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_376)));
  _checked_ptr_1<int> _ptr__379(_379 ? _379->raw() : nullptr,_379 ? _379->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _380 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _378,(int)2 ))));
  _checked_ptr_1<long long> _ptr__380(_380 ? _380->raw() : nullptr,_380 ? _380->size(0) : 0);
  long long _8665 = (long long)0;
  long long _8666 = _376;
  for (long long _381 = _8665; _381 < _8666; ++_381)
  {
    {
      _ptr__380[safe_add( _ptr__371[_381],(int)2 )] = safe_add( _ptr__380[safe_add( _ptr__371[_381],(int)2 )],(int)1 );
    }
  }
  int _8667 = (int)1;
  int _8668 = _378;
  for (int _382 = _8667; _382 < _8668; ++_382)
  {
    {
      _ptr__380[safe_add( _382,(int)1 )] = safe_add( _ptr__380[safe_add( _382,(int)1 )],_ptr__380[_382] );
    }
  }
  int _8669 = (int)0;
  int _8670 = (int)_376;
  for (int _383 = _8669; _383 < _8670; ++_383)
  {
    {
      int _384 = _ptr__371[_383];
      _ptr__379[_ptr__380[safe_add( _384,(int)1 )]] = _383;
      _ptr__380[safe_add( _384,(int)1 )] = safe_add( _ptr__380[safe_add( _384,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _385 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _377,(int)2 ))));
  _checked_ptr_1<long long> _ptr__385(_385 ? _385->raw() : nullptr,_385 ? _385->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _386 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_376)));
  _checked_ptr_1<int> _ptr__386(_386 ? _386->raw() : nullptr,_386 ? _386->size(0) : 0);
  {
    int _387 = (int)0;
    for(;(_387 < _376);++ _387)
    {
      {
        _ptr__385[safe_add( _ptr__370[_387],(int)2 )] = safe_add( _ptr__385[safe_add( _ptr__370[_387],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _388 = (int)1;
    for(;(_388 < _377);++ _388)
    {
      {
        _ptr__385[safe_add( _388,(int)1 )] = safe_add( _ptr__385[safe_add( _388,(int)1 )],_ptr__385[_388] );
      }
    }
  }
  {
    int _389 = (int)0;
    for(;(_389 < _378);++ _389)
    {
      {
        {
          long long _390 = _ptr__380[_389];
          for(;(_390 < _ptr__380[safe_add( _389,(int)1 )]);++ _390)
          {
            {
              int _391 = _ptr__370[_ptr__379[_390]];
              _ptr__386[_ptr__385[safe_add( _391,(int)1 )]] = _ptr__379[_390];
              _ptr__385[safe_add( _391,(int)1 )] = safe_add( _ptr__385[safe_add( _391,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int _392 = (int)1;
  {
    int _393 = _ptr__370[_ptr__386[(int)0]];
    int _394 = _ptr__371[_ptr__386[(int)0]];
    {
      int _395 = (int)1;
      for(;(_395 < _376);++ _395)
      {
        {
          int _396 = _ptr__386[_395];
          if (((_393 != _ptr__370[_396]) || (_394 != _ptr__371[_396])))
          {
            {
              _393 = _ptr__370[_396];
              _394 = _ptr__371[_396];
              ++ _392;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _397 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_392)));
  _checked_ptr_1<int> _ptr__397(_397 ? _397->raw() : nullptr,_397 ? _397->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _398 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_392)));
  _checked_ptr_1<int> _ptr__398(_398 ? _398->raw() : nullptr,_398 ? _398->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _399 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)));
  _checked_ptr_1<double> _ptr__399(_399 ? _399->raw() : nullptr,_399 ? _399->size(0) : 0);
  {
    int _400 = _ptr__386[(int)0];
    _ptr__397[(int)0] = _ptr__370[_400];
    _ptr__398[(int)0] = _ptr__371[_400];
    _ptr__399[(int)0] = _ptr__372[_400];
  }
  int _401 = (int)1;
  int _8671 = (int)1;
  long long _8672 = _376;
  for (long long _402 = _8671; _402 < _8672; ++_402)
  {
    {
      int _403 = _ptr__386[_402];
      if (((_ptr__397[(_401 - (int)1)] == _ptr__370[_403]) && (_ptr__398[(_401 - (int)1)] == _ptr__371[_403])))
      {
        {
          _ptr__399[(_401 - (int)1)] = (_ptr__399[(_401 - (int)1)] + _ptr__372[_403]);
        }
      }
      else
      {
        {
          _ptr__397[_401] = _ptr__370[_403];
          _ptr__398[_401] = _ptr__371[_403];
          _ptr__399[_401] = _ptr__372[_403];
          ++ _401;
        }
      }
    }
  }
  ((*_373)((int)0)) = _397;
  ((*_374)((int)0)) = _398;
  ((*_375)((int)0)) = _399;
}
void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _404,    std::shared_ptr< monty::ndarray< int,1 > > _405) { mosek::fusion::p_CommonTools::argMSort(_404,_405); }void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int,1 > > _404,std::shared_ptr< monty::ndarray< int,1 > > _405){
  _checked_ptr_1<int> _ptr__404(_404 ? _404->raw() : nullptr, _404 ? _404->size(0) : 0);
  _checked_ptr_1<int> _ptr__405(_405 ? _405->raw() : nullptr, _405 ? _405->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _406 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_404)->size(0)))));
  _checked_ptr_1<int> _ptr__406(_406 ? _406->raw() : nullptr,_406 ? _406->size(0) : 0);
  bool _407 = false;
  {
    int _408 = (int)1;
    for(;(_408 < (int)((_404)->size(0)));_408 *= (int)2)
    {
      {
        _407 = (!_407);
        int _8673 = (int)0;
        int _8674 = (int)((_404)->size(0));
        int _8675 = safe_mul( _408,(int)2 );
        for (int _409 = _8673; _409 < _8674; _409 += _8675)
        {
          {
            if (_407)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_404,_406,_405,_409,safe_add( _409,_408 ),safe_add( _409,safe_mul( (int)2,_408 ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_406,_404,_405,_409,safe_add( _409,_408 ),safe_add( _409,safe_mul( (int)2,_408 ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_407)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_406,(int)0,_404,(int)0,(int)((_404)->size(0)));
    }
  }
  {}
}
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int,1 > > _410,std::shared_ptr< monty::ndarray< int,1 > > _411,std::shared_ptr< monty::ndarray< int,1 > > _412,int _413,int _414,int _415){
  _checked_ptr_1<int> _ptr__410(_410 ? _410->raw() : nullptr, _410 ? _410->size(0) : 0);
  _checked_ptr_1<int> _ptr__411(_411 ? _411->raw() : nullptr, _411 ? _411->size(0) : 0);
  _checked_ptr_1<int> _ptr__412(_412 ? _412->raw() : nullptr, _412 ? _412->size(0) : 0);
  int _8676;
  bool _8677 = (_415 > (int)((_410)->size(0)));
  if (_8677)
  {
    _8676 = (int)((_410)->size(0));
  }
  else
  {
    _8676 = _415;
  }
  int _416 = _8676;
  int _8678;
  bool _8679 = (_414 > _416);
  if (_8679)
  {
    _8678 = _416;
  }
  else
  {
    _8678 = _414;
  }
  int _417 = _8678;
  if ((_417 == _416))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_410,_413,_411,_413,(_417 - _413));
    }
  }
  else
  {
    {
      int _418 = _413;
      int _419 = _417;
      int _420;
      {
        _420 = _413;
        for(;((_418 < _417) && (_419 < _416));++ _420)
        {
          {
            if ((_ptr__412[_ptr__410[_418]] < _ptr__412[_ptr__410[_419]]))
            {
              {
                _ptr__411[_420] = _ptr__410[_418];
                ++ _418;
              }
            }
            else
            {
              {
                _ptr__411[_420] = _ptr__410[_419];
                ++ _419;
              }
            }
          }
        }
      }
      while ( (_418 < _417) )
      {
        {
          _ptr__411[_420] = _ptr__410[_418];
          ++ _418;
          ++ _420;
        }
      }
      while ( (_419 < _416) )
      {
        {
          _ptr__411[_420] = _ptr__410[_419];
          ++ _419;
          ++ _420;
        }
      }
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _421,    std::shared_ptr< monty::ndarray< long long,1 > > _422,    std::shared_ptr< monty::ndarray< long long,1 > > _423,    long long _424,    long long _425) { mosek::fusion::p_CommonTools::argQsort(_421,_422,_423,_424,_425); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _421,std::shared_ptr< monty::ndarray< long long,1 > > _422,std::shared_ptr< monty::ndarray< long long,1 > > _423,long long _424,long long _425){
  _checked_ptr_1<long long> _ptr__421(_421 ? _421->raw() : nullptr, _421 ? _421->size(0) : 0);
  _checked_ptr_1<long long> _ptr__422(_422 ? _422->raw() : nullptr, _422 ? _422->size(0) : 0);
  _checked_ptr_1<long long> _ptr__423(_423 ? _423->raw() : nullptr, _423 ? _423->size(0) : 0);
  if ((NULL == _423.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_421,_422,_424,_425);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_421,_422,_423,_424,_425);
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _426,    std::shared_ptr< monty::ndarray< int,1 > > _427,    std::shared_ptr< monty::ndarray< int,1 > > _428,    long long _429,    long long _430) { mosek::fusion::p_CommonTools::argQsort(_426,_427,_428,_429,_430); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _426,std::shared_ptr< monty::ndarray< int,1 > > _427,std::shared_ptr< monty::ndarray< int,1 > > _428,long long _429,long long _430){
  _checked_ptr_1<long long> _ptr__426(_426 ? _426->raw() : nullptr, _426 ? _426->size(0) : 0);
  _checked_ptr_1<int> _ptr__427(_427 ? _427->raw() : nullptr, _427 ? _427->size(0) : 0);
  _checked_ptr_1<int> _ptr__428(_428 ? _428->raw() : nullptr, _428 ? _428->size(0) : 0);
  if ((NULL == _428.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_426,_427,_429,_430);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_426,_427,_428,_429,_430);
    }
  }
}
void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_snx() { return _impl->snx; }
void mosek::fusion::SolutionStruct::set_snx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->snx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int _val) { _impl->sol_numbarvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcone() { return _impl->sol_numcone; }
void mosek::fusion::SolutionStruct::set_sol_numcone(int _val) { _impl->sol_numcone = _val; }
int mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int _val) { _impl->sol_numvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int _val) { _impl->sol_numcon = _val; }
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _431,    int _432,    int _433,    int _434){ return new mosek::fusion::SolutionStruct(_431,_432,_433,_434); }mosek::fusion::SolutionStruct::SolutionStruct  (int _431,    int _432,    int _433,    int _434) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_431,_432,_433,_434); }void mosek::fusion::p_SolutionStruct::_initialize  (int _431,    int _432,    int _433,    int _434){monty::rc_reserve __reserve_this(_pubthis);   {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _431;
    sol_numcon = _432;
    sol_numcone = _433;
    sol_numbarvar = _434;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    snx = nullptr;
    barx = nullptr;
    bars = nullptr;
    if ((_431 > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
      }
    }
    {}
    if ((_434 > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_434)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_434)));
      }
    }
    {}
    if ((_432 > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
      }
    }
    {}
    if ((_433 > (int)0))
    {
      {
        snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
      }
    }
    {}
  }
}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435){ return new mosek::fusion::SolutionStruct(_435); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_435); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435){monty::rc_reserve __reserve_this(_pubthis);   {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numvar;
    sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numcone;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numbarvar;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_435)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_435)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _8680;
    bool _8681 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->xc.get());
    if (_8681)
    {
      _8680 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->xc);
    }
    else
    {
      _8680 = nullptr;
    }
    xc = _8680;
    std::shared_ptr< monty::ndarray< double,1 > > _8682;
    bool _8683 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->xx.get());
    if (_8683)
    {
      _8682 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->xx);
    }
    else
    {
      _8682 = nullptr;
    }
    xx = _8682;
    std::shared_ptr< monty::ndarray< double,1 > > _8684;
    bool _8685 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->yx.get());
    if (_8685)
    {
      _8684 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->yx);
    }
    else
    {
      _8684 = nullptr;
    }
    yx = _8684;
    std::shared_ptr< monty::ndarray< double,1 > > _8686;
    bool _8687 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->slc.get());
    if (_8687)
    {
      _8686 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx);
    }
    else
    {
      _8686 = nullptr;
    }
    slc = _8686;
    std::shared_ptr< monty::ndarray< double,1 > > _8688;
    bool _8689 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->suc.get());
    if (_8689)
    {
      _8688 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux);
    }
    else
    {
      _8688 = nullptr;
    }
    suc = _8688;
    std::shared_ptr< monty::ndarray< double,1 > > _8690;
    bool _8691 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->y.get());
    if (_8691)
    {
      _8690 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->y);
    }
    else
    {
      _8690 = nullptr;
    }
    y = _8690;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _8692;
    bool _8693 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx.get());
    if (_8693)
    {
      _8692 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx);
    }
    else
    {
      _8692 = nullptr;
    }
    slx = _8692;
    std::shared_ptr< monty::ndarray< double,1 > > _8694;
    bool _8695 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux.get());
    if (_8695)
    {
      _8694 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux);
    }
    else
    {
      _8694 = nullptr;
    }
    sux = _8694;
    std::shared_ptr< monty::ndarray< double,1 > > _8696;
    bool _8697 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->snx.get());
    if (_8697)
    {
      _8696 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->snx);
    }
    else
    {
      _8696 = nullptr;
    }
    snx = _8696;
  }
}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone(){
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
void mosek::fusion::SolutionStruct :: resize(int _436,int _437,int _438,int _439) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_436,_437,_438,_439); }void mosek::fusion::p_SolutionStruct::resize(int _436,int _437,int _438,int _439){
  if ((_439 < (int)0))
  {
    {
    }
  }
  else if((_439 <= sol_numbarvar))
  {
    {
      sol_numbarvar = _439;
    }
  }
  else if((_439 <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int _440;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _439,(int)100 )))
      {
        {
          _440 = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _440 = safe_add( _439,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_440);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_440);
      sol_numbarvar = _440;
    }
  }
  if ((_436 < (int)0))
  {
    {
    }
  }
  else if((_436 <= sol_numvar))
  {
    {
      sol_numvar = _436;
    }
  }
  else if((_436 <= (int)((xx)->size(0))))
  {
    {
      int _8698 = sol_numvar;
      int _8699 = _436;
      for (int _441 = _8698; _441 < _8699; ++_441)
      {
        {
          ((*slx)(_441)) = 0.0;
          ((*sux)(_441)) = 0.0;
          ((*xx)(_441)) = 0.0;
          ((*yx)(_441)) = 0.0;
        }
      }
      sol_numvar = _436;
    }
  }
  else
  {
    {
      int _442;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _436,(int)100 )))
      {
        {
          _442 = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _442 = safe_add( _436,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _443 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__443(_443 ? _443->raw() : nullptr,_443 ? _443->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_443,(int)0,(int)((slx)->size(0)));
      slx = _443;
      std::shared_ptr< monty::ndarray< double,1 > > _444 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__444(_444 ? _444->raw() : nullptr,_444 ? _444->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_444,(int)0,(int)((sux)->size(0)));
      sux = _444;
      std::shared_ptr< monty::ndarray< double,1 > > _445 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__445(_445 ? _445->raw() : nullptr,_445 ? _445->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_445,(int)0,(int)((xx)->size(0)));
      xx = _445;
      std::shared_ptr< monty::ndarray< double,1 > > _446 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__446(_446 ? _446->raw() : nullptr,_446 ? _446->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_446,(int)0,(int)((yx)->size(0)));
      yx = _446;
      {
        int _447 = sol_numvar;
        for(;(_447 < _436);++ _447)
        {
          {
            ((*slx)(_447)) = 0.0;
            ((*sux)(_447)) = 0.0;
            ((*xx)(_447)) = 0.0;
          }
        }
      }
      sol_numvar = _436;
    }
  }
  if ((_437 < (int)0))
  {
    {
    }
  }
  else if((_437 <= sol_numcon))
  {
    {
      sol_numcon = _437;
    }
  }
  else if((_437 <= (int)((xx)->size(0))))
  {
    {
      int _8700 = sol_numcon;
      int _8701 = _437;
      for (int _448 = _8700; _448 < _8701; ++_448)
      {
        {
          ((*slc)(_448)) = 0.0;
          ((*suc)(_448)) = 0.0;
          ((*xc)(_448)) = 0.0;
          ((*y)(_448)) = 0.0;
        }
      }
      sol_numcon = _437;
    }
  }
  else
  {
    {
      int _449;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _437,(int)100 )))
      {
        {
          _449 = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _449 = safe_add( _437,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _450 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__450(_450 ? _450->raw() : nullptr,_450 ? _450->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_450,(int)0,(int)((slc)->size(0)));
      slc = _450;
      std::shared_ptr< monty::ndarray< double,1 > > _451 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__451(_451 ? _451->raw() : nullptr,_451 ? _451->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_451,(int)0,(int)((suc)->size(0)));
      suc = _451;
      std::shared_ptr< monty::ndarray< double,1 > > _452 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__452(_452 ? _452->raw() : nullptr,_452 ? _452->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_452,(int)0,(int)((xc)->size(0)));
      xc = _452;
      std::shared_ptr< monty::ndarray< double,1 > > _453 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__453(_453 ? _453->raw() : nullptr,_453 ? _453->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_453,(int)0,(int)((y)->size(0)));
      y = _453;
      int _8702 = sol_numcon;
      int _8703 = _437;
      for (int _454 = _8702; _454 < _8703; ++_454)
      {
        {
          ((*slc)(_454)) = 0.0;
          ((*suc)(_454)) = 0.0;
          ((*xc)(_454)) = 0.0;
          ((*y)(_454)) = 0.0;
        }
      }
      sol_numcon = _437;
    }
  }
  if ((_438 < (int)0))
  {
    {
    }
  }
  else if((_438 <= sol_numcone))
  {
    {
      sol_numcone = _438;
    }
  }
  else if((_438 <= (int)((xx)->size(0))))
  {
    {
      int _8704 = sol_numcone;
      int _8705 = _438;
      for (int _455 = _8704; _455 < _8705; ++_455)
      {
        {
          ((*snx)(_455)) = 0.0;
        }
      }
      sol_numcone = _438;
    }
  }
  else
  {
    {
      int _456;
      if ((safe_mul( sol_numcone,(int)2 ) > safe_add( _438,(int)100 )))
      {
        {
          _456 = safe_mul( sol_numcone,(int)2 );
        }
      }
      else
      {
        {
          _456 = safe_add( _438,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _457 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_456)));
      _checked_ptr_1<double> _ptr__457(_457 ? _457->raw() : nullptr,_457 ? _457->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_457,(int)0,(int)((snx)->size(0)));
      snx = _457;
      {
        int _458 = sol_numcone;
        for(;(_458 < _438);++ _458)
        {
          {
            ((*snx)(_458)) = 0.0;
          }
        }
      }
      sol_numcone = _438;
    }
  }
}
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _459) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_459); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _459){
  return isAcceptable(dstatus,_459);
}
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _460) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_460); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _460){
  return isAcceptable(pstatus,_460);
}
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _461,mosek::fusion::AccSolutionStatus _462){
  if ((_462 == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_461 == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_461 == ::mosek::fusion::SolutionStatus::Optimal) || (_461 == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_461 == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
void mosek::fusion::p_SolutionStruct::destroy(){yx.reset();snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barmidx() { return _impl->barmidx; }
void mosek::fusion::ConNZStruct::set_barmidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConNZStruct::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConNZStruct::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConNZStruct::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_cof() { return _impl->cof; }
void mosek::fusion::ConNZStruct::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_subj() { return _impl->subj; }
void mosek::fusion::ConNZStruct::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::ConNZStruct::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::ConNZStruct::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469){ return new mosek::fusion::ConNZStruct(_463,_464,_465,_466,_467,_468,_469); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_463,_464,_465,_466,_467,_468,_469); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__463(_463 ? _463->raw() : nullptr, _463 ? _463->size(0) : 0);
    _checked_ptr_1<int> _ptr__464(_464 ? _464->raw() : nullptr, _464 ? _464->size(0) : 0);
    _checked_ptr_1<double> _ptr__465(_465 ? _465->raw() : nullptr, _465 ? _465->size(0) : 0);
    _checked_ptr_1<double> _ptr__466(_466 ? _466->raw() : nullptr, _466 ? _466->size(0) : 0);
    _checked_ptr_1<int> _ptr__467(_467 ? _467->raw() : nullptr, _467 ? _467->size(0) : 0);
    _checked_ptr_1<int> _ptr__468(_468 ? _468->raw() : nullptr, _468 ? _468->size(0) : 0);
    _checked_ptr_1<int> _ptr__469(_469 ? _469->raw() : nullptr, _469 ? _469->size(0) : 0);
    ptrb = _463;
    subj = _464;
    cof = _465;
    bfix = _466;
    barsubi = _467;
    barsubj = _468;
    barmidx = _469;
  }
}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _470){ return new mosek::fusion::Model(_470); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _470) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_470); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _470){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_470);
    monty::rc_ptr< ::mosek::fusion::Model > _471 = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_470)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_470)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_470)->solutionptr;
    natvarmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_blockid);
    natvarmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_idx);
    natvarmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_type);
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natvarmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8706;
    for (int _472 = (int)0, _8707 = (int)((mosek::fusion::p_Model::_get_impl(_470)->vars)->size(0)); _472 < _8707 ; ++_472)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _8708;
      bool _8709 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->vars)(_472)).get());
      if (_8709)
      {
        _8708 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->vars)(_472)).get())->__mosek_2fusion_2ModelVariable__clone(_471);
      }
      else
      {
        _8708 = nullptr;
      }
      _8706.push_back(_8708);
    }
    auto _8710 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8706.size()),_8706.begin(),_8706.end()));
    vars = _8710;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natconemap);
    natconemap_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconemap_dim);
    natbarvar_numbarvarelm = mosek::fusion::p_Model::_get_impl(_470)->natbarvar_numbarvarelm;
    natbarvar_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_ptr);
    natbarvar_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_i);
    natbarvar_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_j);
    natbarvar_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_idx);
    natbarvarmap_nblock = mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_nblock;
    natbarvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_dim);
    natbarvarmap_num = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_num);
    natbarvarmap_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_ptr);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8711;
    for (int _473 = (int)0, _8712 = (int)((mosek::fusion::p_Model::_get_impl(_470)->barvars)->size(0)); _473 < _8712 ; ++_473)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _8713;
      bool _8714 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->barvars)(_473)).get());
      if (_8714)
      {
        _8713 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->barvars)(_473)).get())->__mosek_2fusion_2ModelVariable__clone(_471);
      }
      else
      {
        _8713 = nullptr;
      }
      _8711.push_back(_8713);
    }
    auto _8715 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8711.size()),_8711.begin(),_8711.end()));
    barvars = _8715;
    var_map = mosek::fusion::p_Model::_get_impl(_470)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    natconmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_blockid);
    natconmap_slackidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_slackidx);
    natconmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_idx);
    natconmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_type);
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natconmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _8716;
    for (int _474 = (int)0, _8717 = (int)((mosek::fusion::p_Model::_get_impl(_470)->cons)->size(0)); _474 < _8717 ; ++_474)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _8718;
      bool _8719 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->cons)(_474)).get());
      if (_8719)
      {
        _8718 = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->cons)(_474)).get())->__mosek_2fusion_2ModelConstraint__clone(_471);
      }
      else
      {
        _8718 = nullptr;
      }
      _8716.push_back(_8718);
    }
    auto _8720 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_8716.size()),_8716.begin(),_8716.end()));
    cons = _8720;
    con_map = mosek::fusion::p_Model::_get_impl(_470)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    numparameter = mosek::fusion::p_Model::_get_impl(_470)->numparameter;
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _8721;
    bool _8722 = (NULL == mosek::fusion::p_Model::_get_impl(_470)->parameters.get());
    if (_8722)
    {
      _8721 = nullptr;
    }
    else
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _8723;
      for (int _475 = (int)0, _8724 = (int)((mosek::fusion::p_Model::_get_impl(_470)->parameters)->size(0)); _475 < _8724 ; ++_475)
      {
        monty::rc_ptr< ::mosek::fusion::Parameter > _8725;
        bool _8726 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->parameters)(_475)).get());
        if (_8726)
        {
          _8725 = ((*mosek::fusion::p_Model::_get_impl(_470)->parameters)(_475))->__mosek_2fusion_2Parameter__clone(_471);
        }
        else
        {
          _8725 = nullptr;
        }
        _8723.push_back(_8725);
      }
      auto _8727 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_8723.size()),_8723.begin(),_8723.end()));
      _8721 = _8727;
    }
    parameters = _8721;
    par_map = mosek::fusion::p_Model::_get_impl(_470)->par_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    param_num = mosek::fusion::p_Model::_get_impl(_470)->param_num;
    param_value = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->param_value);
    natconmap_codenztop = mosek::fusion::p_Model::_get_impl(_470)->natconmap_codenztop;
    natconmap_codeatomtop = mosek::fusion::p_Model::_get_impl(_470)->natconmap_codeatomtop;
    natconmap_numparameterized = mosek::fusion::p_Model::_get_impl(_470)->natconmap_numparameterized;
    natconmap_coderowptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_coderowptrb);
    natconmap_coderowptre = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_coderowptre);
    natconmap_codenidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_codenidx);
    natconmap_codeptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_codeptr);
    natconmap_code = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_code);
    natconmap_cconst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_cconst);
    std::shared_ptr< monty::ndarray< long long,1 > > _8728;
    bool _8729 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodenidx.get());
    if (_8729)
    {
      _8728 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodenidx);
    }
    else
    {
      _8728 = nullptr;
    }
    natconmap_objcodenidx = _8728;
    std::shared_ptr< monty::ndarray< int,1 > > _8730;
    bool _8731 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodeptr.get());
    if (_8731)
    {
      _8730 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodeptr);
    }
    else
    {
      _8730 = nullptr;
    }
    natconmap_objcodeptr = _8730;
    std::shared_ptr< monty::ndarray< int,1 > > _8732;
    bool _8733 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcode.get());
    if (_8733)
    {
      _8732 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcode);
    }
    else
    {
      _8732 = nullptr;
    }
    natconmap_objcode = _8732;
    std::shared_ptr< monty::ndarray< double,1 > > _8734;
    bool _8735 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcconst.get());
    if (_8735)
    {
      _8734 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcconst);
    }
    else
    {
      _8734 = nullptr;
    }
    natconmap_objcconst = _8734;
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_470)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _476){ return new mosek::fusion::Model(_476); }mosek::fusion::Model::Model  (const std::string &  _476) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_476); }void mosek::fusion::p_Model::_initialize  (const std::string &  _476){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_476,std::string (""));
    model_name = _476;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natvarmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8736;
    for (int _477 = (int)0, _8737 = (int)1024; _477 < _8737 ; ++_477)
    {
      _8736.push_back(nullptr);
    }
    auto _8738 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8736.size()),_8736.begin(),_8736.end()));
    vars = _8738;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconemap_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    natbarvar_ptr = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
    natbarvar_numbarvarelm = (int)0;
    natbarvar_i = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_j = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_nblock = (int)0;
    natbarvar_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_num = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_ptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_slackidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_coderowptrb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_coderowptre = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _8739;
    for (int _478 = (int)0, _8740 = (int)1024; _478 < _8740 ; ++_478)
    {
      _8739.push_back(nullptr);
    }
    auto _8741 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_8739.size()),_8739.begin(),_8739.end()));
    cons = _8741;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    numparameter = (int)0;
    parameters = nullptr;
    par_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    param_num = (int)0;
    param_value = nullptr;
    natconmap_numparameterized = (int)0;
    natconmap_codeatomtop = (int)0;
    natconmap_codenztop = (int)0;
    natconmap_codenidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_codeptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_code = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_objcodenidx = nullptr;
    natconmap_objcodeptr = nullptr;
    natconmap_objcode = nullptr;
    natconmap_objcconst = nullptr;
    bfixidx = natvarmap_alloc((int)1);
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _479,std::shared_ptr< monty::ndarray< int,1 > > _480,std::shared_ptr< monty::ndarray< int,1 > > _481){
  _checked_ptr_1<int> _ptr__480(_480 ? _480->raw() : nullptr, _480 ? _480->size(0) : 0);
  _checked_ptr_1<int> _ptr__481(_481 ? _481->raw() : nullptr, _481 ? _481->size(0) : 0);
  return _479;
}
void mosek::fusion::p_Model::connames(std::shared_ptr< monty::ndarray< int,1 > > _482,const std::string & _483,std::shared_ptr< monty::ndarray< int,1 > > _484,std::shared_ptr< monty::ndarray< long long,1 > > _485){
  _checked_ptr_1<int> _ptr__482(_482 ? _482->raw() : nullptr, _482 ? _482->size(0) : 0);
  _checked_ptr_1<int> _ptr__484(_484 ? _484->raw() : nullptr, _484 ? _484->size(0) : 0);
  _checked_ptr_1<long long> _ptr__485(_485 ? _485->raw() : nullptr, _485 ? _485->size(0) : 0);
  task_format_con_names(_482,_483,_484,_485);
}
void mosek::fusion::p_Model::varnames(std::shared_ptr< monty::ndarray< int,1 > > _486,const std::string & _487,std::shared_ptr< monty::ndarray< int,1 > > _488,std::shared_ptr< monty::ndarray< long long,1 > > _489){
  _checked_ptr_1<int> _ptr__486(_486 ? _486->raw() : nullptr, _486 ? _486->size(0) : 0);
  _checked_ptr_1<int> _ptr__488(_488 ? _488->raw() : nullptr, _488 ? _488->size(0) : 0);
  _checked_ptr_1<long long> _ptr__489(_489 ? _489->raw() : nullptr, _489 ? _489->size(0) : 0);
  task_format_var_names(_486,_487,_488,_489);
}
void mosek::fusion::p_Model::varname(int _490,const std::string & _491){
  task_var_name(_490,_491);
}
void mosek::fusion::p_Model::natbarvarmap_get(int _492,std::shared_ptr< monty::ndarray< int,1 > > _493){
  _checked_ptr_1<int> _ptr__493(_493 ? _493->raw() : nullptr, _493 ? _493->size(0) : 0);
  int _494 = ((*natbarvarmap_ptr)(_492));
  int _495 = ((*natbarvarmap_num)(_492));
  int _8742 = (int)0;
  int _8743 = _495;
  for (int _496 = _8742; _496 < _8743; ++_496)
  {
    {
      _ptr__493[_496] = safe_add( _494,_496 );
    }
  }
}
void mosek::fusion::p_Model::natbarvar_get(int _497,std::shared_ptr< monty::ndarray< long long,1 > > _498){
  _checked_ptr_1<long long> _ptr__498(_498 ? _498->raw() : nullptr, _498 ? _498->size(0) : 0);
  int _499 = ((*natbarvarmap_ptr)(_497));
  int _500 = ((*natbarvarmap_num)(_497));
  int _501 = ((*natbarvar_dim)(((*natbarvarmap_ptr)(_497))));
  int _502 = (safe_mul( safe_mul( _500,_501 ),safe_add( _501,(int)1 ) ) / (int)2);
  long long _503 = ((*natbarvar_ptr)(_499));
  int _8744 = (int)0;
  int _8745 = _502;
  for (int _504 = _8744; _504 < _8745; ++_504)
  {
    {
      _ptr__498[_504] = safe_add( _503,_504 );
    }
  }
}
int mosek::fusion::p_Model::natbarvarmap_alloc(int _505,int _506){
  int _507 = (int)((natbarvar_idx)->size(0));
  int _508 = task_numbarvar();
  int _509 = (safe_mul( _506,safe_add( _506,(int)1 ) ) / (int)2);
  int _510 = safe_mul( _505,_509 );
  if ((safe_add( natbarvar_numbarvarelm,_510 ) >= _507))
  {
    {
      if ((_510 < _507))
      {
        {
          _510 = _507;
        }
      }
      {}
      natbarvar_idx = ::mosek::fusion::p_CommonTools::resize(natbarvar_idx,safe_add( _507,_510 ));
      natbarvar_i = ::mosek::fusion::p_CommonTools::resize(natbarvar_i,safe_add( _507,_510 ));
      natbarvar_j = ::mosek::fusion::p_CommonTools::resize(natbarvar_j,safe_add( _507,_510 ));
    }
  }
  {}
  if ((safe_add( natbarvarmap_nblock,(int)1 ) >= (int)((natbarvarmap_num)->size(0))))
  {
    {
      int _8746;
      bool _8747 = ((int)((natbarvarmap_num)->size(0)) > (int)0);
      if (_8747)
      {
        _8746 = safe_mul( (int)((natbarvarmap_num)->size(0)),(int)2 );
      }
      else
      {
        _8746 = (int)32;
      }
      int _511 = _8746;
      natbarvarmap_num = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_num,_511);
      natbarvarmap_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_ptr,safe_add( _511,(int)1 ));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _512 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_511)));
      int _8748 = (int)0;
      int _8749 = (int)((barvars)->size(0));
      for (int _513 = _8748; _513 < _8749; ++_513)
      {
        {
          ((*_512)(_513)) = ((*barvars)(_513));
        }
      }
      barvars = _512;
    }
  }
  {}
  if ((safe_add( _508,_505 ) > (int)((natbarvar_dim)->size(0))))
  {
    {
      int _8750;
      bool _8751 = (safe_add( _508,_505 ) < safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 ));
      if (_8751)
      {
        _8750 = safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 );
      }
      else
      {
        _8750 = safe_add( _508,_505 );
      }
      int _514 = _8750;
      natbarvar_dim = ::mosek::fusion::p_CommonTools::resize(natbarvar_dim,_514);
    }
  }
  {}
  if ((safe_add( _508,_505 ) >= (int)((natbarvar_ptr)->size(0))))
  {
    {
      int _8752;
      bool _8753 = (_505 > (int)((natbarvar_ptr)->size(0)));
      if (_8753)
      {
        _8752 = _505;
      }
      else
      {
        _8752 = (int)((natbarvar_ptr)->size(0));
      }
      int _515 = _8752;
      natbarvar_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvar_ptr,safe_add( safe_add( (int)((natbarvar_ptr)->size(0)),_515 ),(int)1 ));
    }
  }
  {}
  int _8754 = (int)0;
  int _8755 = _505;
  for (int _516 = _8754; _516 < _8755; ++_516)
  {
    {
      ((*natbarvar_dim)(safe_add( _508,_516 ))) = _506;
    }
  }
  ((*natbarvarmap_num)(natbarvarmap_nblock)) = _505;
  ((*natbarvarmap_ptr)(safe_add( natbarvarmap_nblock,(int)1 ))) = safe_add( ((*natbarvarmap_ptr)(natbarvarmap_nblock)),_505 );
  int _517 = task_append_barvar(_506,_505);
  int _518 = ((*natbarvarmap_ptr)(natbarvarmap_nblock));
  {
    long long _519 = ((*natbarvar_ptr)(_508));
    int _8756 = (int)0;
    int _8757 = _506;
    for (int _520 = _8756; _520 < _8757; ++_520)
    {
      {
        int _8758 = _520;
        int _8759 = _506;
        for (int _521 = _8758; _521 < _8759; ++_521)
        {
          {
            int _8760 = (int)0;
            int _8761 = _505;
            for (int _522 = _8760; _522 < _8761; ++_522)
            {
              {
                ((*natbarvar_idx)(safe_add( _519,safe_mul( _522,_509 ) ))) = safe_add( _518,_522 );
                ((*natbarvar_i)(safe_add( _519,safe_mul( _522,_509 ) ))) = _521;
                ((*natbarvar_j)(safe_add( _519,safe_mul( _522,_509 ) ))) = _520;
              }
            }
            ++ _519;
          }
        }
      }
    }
    int _8762 = (int)0;
    int _8763 = _505;
    for (int _523 = _8762; _523 < _8763; ++_523)
    {
      {
        ((*natbarvar_ptr)(safe_add( safe_add( _518,_523 ),(int)1 ))) = safe_add( ((*natbarvar_ptr)(safe_add( _518,_523 ))),_509 );
      }
    }
  }
  natbarvarmap_nblock += (int)1;
  natbarvar_numbarvarelm += safe_mul( _505,_509 );
  return (natbarvarmap_nblock - (int)1);
}
int mosek::fusion::p_Model::natvarmap_alloc(int _524){
  int _525 = natvarmap->alloc(_524);
  int _526 = safe_add( natvarmap->maxidx(_525),(int)1 );
  int _527 = natvarmap->capacity();
  int _528 = natvarmap->numblocks();
  if (((int)((natvarmap_idx)->size(0)) < _527))
  {
    {
      int _529 = (int)((natvarmap_idx)->size(0));
      natvarmap_idx = ::mosek::fusion::p_CommonTools::resize(natvarmap_idx,_527);
      int _8764 = _529;
      int _8765 = _527;
      for (int _530 = _8764; _530 < _8765; ++_530)
      {
        {
          ((*natvarmap_idx)(_530)) = (-(int)1);
        }
      }
      natvarmap_blockid = ::mosek::fusion::p_CommonTools::resize(natvarmap_blockid,_527);
    }
  }
  {}
  if (((int)((vars)->size(0)) < _528))
  {
    {
      natvarmap_type = ::mosek::fusion::p_CommonTools::resize(natvarmap_type,_528);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _531 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_528)));
      int _8766 = (int)0;
      int _8767 = (int)((vars)->size(0));
      for (int _532 = _8766; _532 < _8767; ++_532)
      {
        {
          ((*_531)(_532)) = ((*vars)(_532));
        }
      }
      int _8768 = (int)((vars)->size(0));
      int _8769 = (int)((_531)->size(0));
      for (int _533 = _8768; _533 < _8769; ++_533)
      {
        {
          ((*_531)(_533)) = nullptr;
        }
      }
      vars = _531;
    }
  }
  {}
  if ((task_numvar() < _526))
  {
    {
      task_append_var((_526 - task_numvar()));
    }
  }
  {}
  return _525;
}
void mosek::fusion::p_Model::natconmap_codealloc(int _534,int _535){
  int _536 = safe_add( _534,natconmap_codenztop );
  int _537 = safe_add( _535,natconmap_codeatomtop );
  if ((_536 > (int)((natconmap_codenidx)->size(0))))
  {
    {
      if ((_536 < safe_mul( (int)2,(int)((natconmap_codenidx)->size(0)) )))
      {
        {
          _536 = safe_mul( (int)2,(int)((natconmap_codenidx)->size(0)) );
        }
      }
      {}
      std::shared_ptr< monty::ndarray< long long,1 > > _538 = natconmap_codenidx;
      _checked_ptr_1<long long> _ptr__538(_538 ? _538->raw() : nullptr,_538 ? _538->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _539 = natconmap_codeptr;
      _checked_ptr_1<int> _ptr__539(_539 ? _539->raw() : nullptr,_539 ? _539->size(0) : 0);
      natconmap_codenidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_536)));
      ::mosek::fusion::Utils::Tools::arraycopy(_538,(int)0,natconmap_codenidx,(int)0,(int)((_538)->size(0)));
      natconmap_codeptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _536,(int)1 ))));
      ::mosek::fusion::Utils::Tools::arraycopy(_539,(int)0,natconmap_codeptr,(int)0,(int)((_539)->size(0)));
    }
  }
  {}
  if ((_537 > (int)((natconmap_code)->size(0))))
  {
    {
      if ((_537 < safe_mul( (int)2,(int)((natconmap_code)->size(0)) )))
      {
        {
          _537 = safe_mul( (int)2,(int)((natconmap_code)->size(0)) );
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _540 = natconmap_code;
      _checked_ptr_1<int> _ptr__540(_540 ? _540->raw() : nullptr,_540 ? _540->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _541 = natconmap_cconst;
      _checked_ptr_1<double> _ptr__541(_541 ? _541->raw() : nullptr,_541 ? _541->size(0) : 0);
      natconmap_code = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_537)));
      ::mosek::fusion::Utils::Tools::arraycopy(_540,(int)0,natconmap_code,(int)0,(int)((_540)->size(0)));
      natconmap_cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( _537,(int)1 ))));
      ::mosek::fusion::Utils::Tools::arraycopy(_541,(int)0,natconmap_cconst,(int)0,(int)((_541)->size(0)));
    }
  }
  {}
  natconmap_codenztop += _534;
  natconmap_codeatomtop += _535;
}
int mosek::fusion::p_Model::natconmap_alloc(int _542){
  int _543 = natconmap->alloc(_542);
  int _544 = safe_add( natconmap->maxidx(_543),(int)1 );
  int _545 = natconmap->capacity();
  int _546 = natconmap->numblocks();
  if (((int)((natconmap_idx)->size(0)) < _545))
  {
    {
      int _547 = (int)((natconmap_idx)->size(0));
      natconmap_idx = ::mosek::fusion::p_CommonTools::resize(natconmap_idx,_545);
      int _8770 = _547;
      int _8771 = _545;
      for (int _548 = _8770; _548 < _8771; ++_548)
      {
        {
          ((*natconmap_idx)(_548)) = (-(int)1);
        }
      }
      natconmap_blockid = ::mosek::fusion::p_CommonTools::resize(natconmap_blockid,_545);
      natconmap_slackidx = ::mosek::fusion::p_CommonTools::resize(natconmap_slackidx,_545);
      natconmap_coderowptrb = ::mosek::fusion::p_CommonTools::resize(natconmap_coderowptrb,_545);
      natconmap_coderowptre = ::mosek::fusion::p_CommonTools::resize(natconmap_coderowptre,_545);
    }
  }
  {}
  if (((int)((cons)->size(0)) < _546))
  {
    {
      natconmap_type = ::mosek::fusion::p_CommonTools::resize(natconmap_type,_546);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _549 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_546)));
      int _8772 = (int)0;
      int _8773 = (int)((cons)->size(0));
      for (int _550 = _8772; _550 < _8773; ++_550)
      {
        {
          ((*_549)(_550)) = ((*cons)(_550));
        }
      }
      int _8774 = (int)((cons)->size(0));
      int _8775 = _546;
      for (int _551 = _8774; _551 < _8775; ++_551)
      {
        {
          ((*_549)(_551)) = nullptr;
        }
      }
      cons = _549;
    }
  }
  {}
  if ((_544 > task_numcon()))
  {
    {
      task_append_con((_544 - task_numcon()));
    }
  }
  {}
  return _543;
}
int mosek::fusion::p_Model::natconemap_alloc(int _552){
  int _553 = natconemap->alloc(_552);
  int _554 = safe_add( natconemap->maxidx(_553),(int)1 );
  if ((_554 > task_numcone()))
  {
    {
      task_append_zerocones((_554 - task_numcone()));
    }
  }
  {}
  natconemap_dim = ::mosek::fusion::p_CommonTools::resize(natconemap_dim,natconemap->numblocks());
  return _553;
}
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _555){
  _checked_ptr_1<long long> _ptr__555(_555 ? _555->raw() : nullptr, _555 ? _555->size(0) : 0);
  int _556 = (int)0;
  int _8776 = (int)0;
  int _8777 = (int)((_555)->size(0));
  for (int _557 = _8776; _557 < _8777; ++_557)
  {
    {
      if ((_ptr__555[_557] > (int)0))
      {
        {
          ++ _556;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _558 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_556)));
  _checked_ptr_1<int> _ptr__558(_558 ? _558->raw() : nullptr,_558 ? _558->size(0) : 0);
  int _559 = (int)0;
  int _8778 = (int)0;
  int _8779 = (int)((_555)->size(0));
  for (int _560 = _8778; _560 < _8779; ++_560)
  {
    {
      if ((_ptr__555[_560] > (int)0))
      {
        {
          _ptr__558[_559] = (int)_ptr__555[_560];
          ++ _559;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_558);
}
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _561){
  _checked_ptr_1<long long> _ptr__561(_561 ? _561->raw() : nullptr, _561 ? _561->size(0) : 0);
  int _562 = (int)0;
  int _8780 = (int)0;
  int _8781 = (int)((_561)->size(0));
  for (int _563 = _8780; _563 < _8781; ++_563)
  {
    {
      if ((_ptr__561[_563] > (int)0))
      {
        {
          ++ _562;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _564 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_562)));
  _checked_ptr_1<int> _ptr__564(_564 ? _564->raw() : nullptr,_564 ? _564->size(0) : 0);
  int _565 = (int)0;
  int _8782 = (int)0;
  int _8783 = (int)((_561)->size(0));
  for (int _566 = _8782; _566 < _8783; ++_566)
  {
    {
      if ((_ptr__561[_566] > (int)0))
      {
        {
          _ptr__564[_565] = (int)_ptr__561[_566];
          ++ _565;
        }
      }
      {}
    }
  }
  task_var_putintlist(_564);
}
void mosek::fusion::Model::putlicensewait  ( bool _567) { mosek::fusion::p_Model::putlicensewait(_567); }void mosek::fusion::p_Model::putlicensewait(bool _567){
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_567);
}
void mosek::fusion::Model::putlicensepath  ( const std::string & _568) { mosek::fusion::p_Model::putlicensepath(_568); }void mosek::fusion::p_Model::putlicensepath(const std::string & _568){
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_568);
}
void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _569) { mosek::fusion::p_Model::putlicensecode(_569); }void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int,1 > > _569){
  _checked_ptr_1<int> _ptr__569(_569 ? _569->raw() : nullptr, _569 ? _569->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_569);
}
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose(){
  int _8784 = (int)0;
  int _8785 = (int)((vars)->size(0));
  for (int _570 = _8784; _570 < _8785; ++_570)
  {
    {
      ((*vars)(_570)) = nullptr;
    }
  }
  int _8786 = (int)0;
  int _8787 = (int)((cons)->size(0));
  for (int _571 = _8786; _571 < _8787; ++_571)
  {
    {
      ((*cons)(_571)) = nullptr;
    }
  }
  int _8788 = (int)0;
  int _8789 = (int)((barvars)->size(0));
  for (int _572 = _8788; _572 < _8789; ++_572)
  {
    {
      ((*barvars)(_572)) = nullptr;
    }
  }
  if ((NULL != parameters.get()))
  {
    {
      int _8790 = (int)0;
      int _8791 = (int)((parameters)->size(0));
      for (int _573 = _8790; _573 < _8791; ++_573)
      {
        {
          ((*parameters)(_573)) = nullptr;
        }
      }
    }
  }
  {}
  ::mosek::fusion::p_BaseModel::dispose();
}
void mosek::fusion::p_Model::nativeVarToStr(int _574,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _575){
  if (((_574 < (int)0) || ((_574 >= (int)((natvarmap_idx)->size(0))) || (((*natvarmap_idx)(_574)) < (int)0))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Native variable index is invalid"));
    }
  }
  {}
  ((*vars)(((*natvarmap_blockid)(_574))))->elementName((long long)(((*natvarmap_idx)(_574))),_575);
}
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask(){
  return __mosek_2fusion_2BaseModel__task_get();
}
void mosek::fusion::Model :: getConstraintDuals(bool _576,std::shared_ptr< monty::ndarray< int,1 > > _577,std::shared_ptr< monty::ndarray< double,1 > > _578,int _579) { mosek::fusion::p_Model::_get_impl(this)->getConstraintDuals(_576,_577,_578,_579); }void mosek::fusion::p_Model::getConstraintDuals(bool _576,std::shared_ptr< monty::ndarray< int,1 > > _577,std::shared_ptr< monty::ndarray< double,1 > > _578,int _579){
  _checked_ptr_1<int> _ptr__577(_577 ? _577->raw() : nullptr, _577 ? _577->size(0) : 0);
  _checked_ptr_1<double> _ptr__578(_578 ? _578->raw() : nullptr, _578 ? _578->size(0) : 0);
  int _580 = (int)((_577)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _581 = getSolution_slx(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__581(_581 ? _581->raw() : nullptr,_581 ? _581->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _582 = getSolution_sux(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__582(_582 ? _582->raw() : nullptr,_582 ? _582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _583 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__583(_583 ? _583->raw() : nullptr,_583 ? _583->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _584 = getSolution_slc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__584(_584 ? _584->raw() : nullptr,_584 ? _584->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _585 = getSolution_suc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__585(_585 ? _585->raw() : nullptr,_585 ? _585->size(0) : 0);
  int _8792 = (int)0;
  int _8793 = _580;
  for (int _586 = _8792; _586 < _8793; ++_586)
  {
    {
      long long _587 = ((*natconmap_slackidx)(_ptr__577[_586]));
      if ((_587 < (int)0))
      {
        {
          long long _588 = (-safe_add( _587,(int)1 ));
          if (_576)
          {
            {
              _ptr__578[safe_add( _579,_586 )] = _ptr__583[_588];
            }
          }
          else
          {
            {
              _ptr__578[safe_add( _579,_586 )] = (-_ptr__583[_588]);
            }
          }
        }
      }
      else if((_587 > (int)0))
      {
        {
          _ptr__578[safe_add( _579,_586 )] = (_ptr__581[(_587 - (int)1)] - _ptr__582[(_587 - (int)1)]);
        }
      }
      else
      {
        {
          if (_576)
          {
            {
              _ptr__578[safe_add( _579,_586 )] = _ptr__584[_ptr__577[_586]];
            }
          }
          else
          {
            {
              _ptr__578[safe_add( _579,_586 )] = (-_ptr__585[_ptr__577[_586]]);
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getConstraintValues(bool _589,std::shared_ptr< monty::ndarray< int,1 > > _590,std::shared_ptr< monty::ndarray< double,1 > > _591,int _592) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_589,_590,_591,_592); }void mosek::fusion::p_Model::getConstraintValues(bool _589,std::shared_ptr< monty::ndarray< int,1 > > _590,std::shared_ptr< monty::ndarray< double,1 > > _591,int _592){
  _checked_ptr_1<int> _ptr__590(_590 ? _590->raw() : nullptr, _590 ? _590->size(0) : 0);
  _checked_ptr_1<double> _ptr__591(_591 ? _591->raw() : nullptr, _591 ? _591->size(0) : 0);
  int _593 = (int)((_590)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _8794;
  bool _8795 = _589;
  if (_8795)
  {
    _8794 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8794 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _594 = _8794;
  _checked_ptr_1<double> _ptr__594(_594 ? _594->raw() : nullptr,_594 ? _594->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8796;
  bool _8797 = _589;
  if (_8797)
  {
    _8796 = getSolution_barx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8796 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _595 = _8796;
  _checked_ptr_1<double> _ptr__595(_595 ? _595->raw() : nullptr,_595 ? _595->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8798;
  bool _8799 = _589;
  if (_8799)
  {
    _8798 = getSolution_xc(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8798 = getSolution_y(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _596 = _8798;
  _checked_ptr_1<double> _ptr__596(_596 ? _596->raw() : nullptr,_596 ? _596->size(0) : 0);
  int _8800 = (int)0;
  int _8801 = _593;
  for (int _597 = _8800; _597 < _8801; ++_597)
  {
    {
      long long _598 = ((*natconmap_slackidx)(_ptr__590[_597]));
      if ((_598 < (int)0))
      {
        {
          long long _599 = (-safe_add( _598,(int)1 ));
          _ptr__591[safe_add( _592,_597 )] = _ptr__595[_599];
        }
      }
      else if((_598 > (int)0))
      {
        {
          _ptr__591[safe_add( _592,_597 )] = _ptr__594[(_598 - (int)1)];
        }
      }
      else
      {
        {
          _ptr__591[safe_add( _592,_597 )] = _ptr__596[_ptr__590[_597]];
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableDuals(bool _600,std::shared_ptr< monty::ndarray< long long,1 > > _601,std::shared_ptr< monty::ndarray< double,1 > > _602,int _603) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_600,_601,_602,_603); }void mosek::fusion::p_Model::getVariableDuals(bool _600,std::shared_ptr< monty::ndarray< long long,1 > > _601,std::shared_ptr< monty::ndarray< double,1 > > _602,int _603){
  _checked_ptr_1<long long> _ptr__601(_601 ? _601->raw() : nullptr, _601 ? _601->size(0) : 0);
  _checked_ptr_1<double> _ptr__602(_602 ? _602->raw() : nullptr, _602 ? _602->size(0) : 0);
  int _604 = (int)((_601)->size(0));
  if (_600)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _605 = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__605(_605 ? _605->raw() : nullptr,_605 ? _605->size(0) : 0);
      int _8802 = (int)0;
      int _8803 = _604;
      for (int _606 = _8802; _606 < _8803; ++_606)
      {
        {
          if ((_ptr__601[_606] > (int)0))
          {
            {
              _ptr__602[safe_add( _603,_606 )] = _ptr__605[_ptr__601[_606]];
            }
          }
          else
          {
            {
              _ptr__602[safe_add( _603,_606 )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _607 = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__607(_607 ? _607->raw() : nullptr,_607 ? _607->size(0) : 0);
      int _8804 = (int)0;
      int _8805 = _604;
      for (int _608 = _8804; _608 < _8805; ++_608)
      {
        {
          if ((_ptr__601[_608] > (int)0))
          {
            {
              _ptr__602[safe_add( _603,_608 )] = (-_ptr__607[_ptr__601[_608]]);
            }
          }
          else
          {
            {
              _ptr__602[safe_add( _603,_608 )] = (int)0;
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableValues(bool _609,std::shared_ptr< monty::ndarray< long long,1 > > _610,std::shared_ptr< monty::ndarray< double,1 > > _611,int _612) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_609,_610,_611,_612); }void mosek::fusion::p_Model::getVariableValues(bool _609,std::shared_ptr< monty::ndarray< long long,1 > > _610,std::shared_ptr< monty::ndarray< double,1 > > _611,int _612){
  _checked_ptr_1<long long> _ptr__610(_610 ? _610->raw() : nullptr, _610 ? _610->size(0) : 0);
  _checked_ptr_1<double> _ptr__611(_611 ? _611->raw() : nullptr, _611 ? _611->size(0) : 0);
  int _613 = (int)((_610)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _8806;
  bool _8807 = _609;
  if (_8807)
  {
    _8806 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8806 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _614 = _8806;
  _checked_ptr_1<double> _ptr__614(_614 ? _614->raw() : nullptr,_614 ? _614->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8808;
  bool _8809 = (natbarvar_numbarvarelm > (int)0);
  if (_8809)
  {
    std::shared_ptr< monty::ndarray< double,1 > > _8810;
    bool _8811 = _609;
    if (_8811)
    {
      _8810 = getSolution_barx(::mosek::fusion::SolutionType::Default);
    }
    else
    {
      _8810 = getSolution_bars(::mosek::fusion::SolutionType::Default);
    }
    _8808 = _8810;
  }
  else
  {
    _8808 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _615 = _8808;
  _checked_ptr_1<double> _ptr__615(_615 ? _615->raw() : nullptr,_615 ? _615->size(0) : 0);
  int _8812 = (int)0;
  int _8813 = _613;
  for (int _616 = _8812; _616 < _8813; ++_616)
  {
    {
      if ((_ptr__610[_616] > (int)0))
      {
        {
          _ptr__611[safe_add( _612,_616 )] = _ptr__614[_ptr__610[_616]];
        }
      }
      else if((_ptr__610[_616] < (int)0))
      {
        {
          long long _617 = (-safe_add( _ptr__610[_616],(int)1 ));
          _ptr__611[safe_add( _612,_616 )] = _ptr__615[_617];
        }
      }
      else
      {
        {
          _ptr__611[safe_add( _612,_616 )] = (int)0;
        }
      }
    }
  }
}
void mosek::fusion::Model :: setVariableValues(bool _618,std::shared_ptr< monty::ndarray< long long,1 > > _619,std::shared_ptr< monty::ndarray< double,1 > > _620) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_618,_619,_620); }void mosek::fusion::p_Model::setVariableValues(bool _618,std::shared_ptr< monty::ndarray< long long,1 > > _619,std::shared_ptr< monty::ndarray< double,1 > > _620){
  _checked_ptr_1<long long> _ptr__619(_619 ? _619->raw() : nullptr, _619 ? _619->size(0) : 0);
  _checked_ptr_1<double> _ptr__620(_620 ? _620->raw() : nullptr, _620 ? _620->size(0) : 0);
  if (_618)
  {
    {
      int _621 = (int)0;
      int _8814 = (int)0;
      int _8815 = (int)((_619)->size(0));
      for (int _622 = _8814; _622 < _8815; ++_622)
      {
        {
          if ((_ptr__619[_622] >= (int)0))
          {
            {
              ++ _621;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _623 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_621)));
      _checked_ptr_1<int> _ptr__623(_623 ? _623->raw() : nullptr,_623 ? _623->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _8816;
      bool _8817 = (_621 == (int)((_619)->size(0)));
      if (_8817)
      {
        _8816 = _620;
      }
      else
      {
        _8816 = _620;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _624 = _8816;
      _checked_ptr_1<double> _ptr__624(_624 ? _624->raw() : nullptr,_624 ? _624->size(0) : 0);
      int _625 = (int)0;
      int _8818 = (int)0;
      int _8819 = (int)((_619)->size(0));
      for (int _626 = _8818; _626 < _8819; ++_626)
      {
        {
          if ((_ptr__619[_626] > (int)0))
          {
            {
              _ptr__623[_625] = (int)_ptr__619[_626];
              ++ _625;
            }
          }
          {}
        }
      }
      setSolution_xx(_623,_624);
    }
  }
  else
  {
    {
    }
  }
}
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames(){
  int _8820 = (int)0;
  int _8821 = (int)((vars)->size(0));
  for (int _627 = _8820; _627 < _8821; ++_627)
  {
    {
      if ((NULL != ((*vars)(_627)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_627)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _8822 = (int)0;
  int _8823 = (int)((barvars)->size(0));
  for (int _628 = _8822; _628 < _8823; ++_628)
  {
    {
      if ((NULL != ((*barvars)(_628)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_628)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _8824 = (int)0;
  int _8825 = (int)((cons)->size(0));
  for (int _629 = _8824; _629 < _8825; ++_629)
  {
    {
      if ((NULL != ((*cons)(_629)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_629)).get())->flushNames();
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: writeTaskNoFlush(const std::string & _630) { mosek::fusion::p_Model::_get_impl(this)->writeTaskNoFlush(_630); }void mosek::fusion::p_Model::writeTaskNoFlush(const std::string & _630){
  _pubthis->flushNames();
  task_write(_630);
}
void mosek::fusion::Model :: writeTask(const std::string & _631) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_631); }void mosek::fusion::p_Model::writeTask(const std::string & _631){
  _pubthis->flushNames();
  flush_parameters();
  task_write(_631);
}
long long mosek::fusion::Model :: getSolverLIntInfo(const std::string & _632) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_632); }long long mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _632){
  return task_get_liinf(_632);
}
int mosek::fusion::Model :: getSolverIntInfo(const std::string & _633) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_633); }int mosek::fusion::p_Model::getSolverIntInfo(const std::string & _633){
  return task_get_iinf(_633);
}
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _634) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_634); }double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _634){
  return task_get_dinf(_634);
}
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _635) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_635); }void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _635){
  task_setCallbackHandler(_635);
}
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _636) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_636); }void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _636){
  task_setDataCallbackHandler(_636);
}
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _637) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_637); }void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _637){
  task_setLogHandler(_637);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _638,double _639) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_638,_639); }void mosek::fusion::p_Model::setSolverParam(const std::string & _638,double _639){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_638,_639);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _640,int _641) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_640,_641); }void mosek::fusion::p_Model::setSolverParam(const std::string & _640,int _641){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_640,_641);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _642,const std::string & _643) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_642,_643); }void mosek::fusion::p_Model::setSolverParam(const std::string & _642,const std::string & _643){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_642,_643);
}
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver(){
  task_break_solve();
}
void mosek::fusion::Model :: optserverHost(const std::string & _644) { mosek::fusion::p_Model::_get_impl(this)->optserverHost(_644); }void mosek::fusion::p_Model::optserverHost(const std::string & _644){
  task_putoptserver_host(_644);
}
void mosek::fusion::Model :: solve(const std::string & _645,const std::string & _646) { mosek::fusion::p_Model::_get_impl(this)->solve(_645,_646); }void mosek::fusion::p_Model::solve(const std::string & _645,const std::string & _646){
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(true,_645,_646);
}
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve(){
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(false,std::string (""),std::string (""));
}
void mosek::fusion::p_Model::flush_parameters(){
  if ((natconmap_numparameterized > (int)0))
  {
    {
      int _647 = task_numcon();
      std::shared_ptr< monty::ndarray< int,1 > > _648 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<int> _ptr__648(_648 ? _648->raw() : nullptr,_648 ? _648->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _649 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<int> _ptr__649(_649 ? _649->raw() : nullptr,_649 ? _649->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _650 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<double> _ptr__650(_650 ? _650->raw() : nullptr,_650 ? _650->size(0) : 0);
      int _651 = (int)0;
      int _8826 = (int)0;
      int _8827 = _647;
      for (int _652 = _8826; _652 < _8827; ++_652)
      {
        {
          int _653 = (((*natconmap_coderowptre)(_652)) - ((*natconmap_coderowptrb)(_652)));
          if ((_653 > (int)0))
          {
            {
              int _8828 = _651;
              int _8829 = safe_add( _651,_653 );
              for (int _654 = _8828; _654 < _8829; ++_654)
              {
                {
                  _ptr__648[_654] = _652;
                }
              }
              _651 += _653;
            }
          }
          {}
        }
      }
      evaluate_parameterized(xs,_647,natconmap_coderowptrb,natconmap_coderowptre,natconmap_codenidx,natconmap_codeptr,natconmap_code,natconmap_cconst,_649,_650);
      task_putaijlist(_648,_649,_650,(long long)(natconmap_numparameterized));
    }
  }
  {}
  if ((NULL != natconmap_objcodenidx.get()))
  {
    {
      int _655 = (int)((natconmap_objcodenidx)->size(0));
      std::shared_ptr< monty::ndarray< int,1 > > _656 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_655)));
      _checked_ptr_1<int> _ptr__656(_656 ? _656->raw() : nullptr,_656 ? _656->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _657 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_655)));
      _checked_ptr_1<double> _ptr__657(_657 ? _657->raw() : nullptr,_657 ? _657->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _658 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      _checked_ptr_1<int> _ptr__658(_658 ? _658->raw() : nullptr,_658 ? _658->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _659 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((natconmap_objcodenidx)->size(0)))});
      _checked_ptr_1<int> _ptr__659(_659 ? _659->raw() : nullptr,_659 ? _659->size(0) : 0);
      evaluate_parameterized(xs,(int)1,_658,_659,natconmap_objcodenidx,natconmap_objcodeptr,natconmap_objcode,natconmap_objcconst,_656,_657);
      task_putclist(_656,_657);
    }
  }
  {}
}
void mosek::fusion::Model :: flushParameters() { mosek::fusion::p_Model::_get_impl(this)->flushParameters(); }void mosek::fusion::p_Model::flushParameters(){
  flush_parameters();
}
void mosek::fusion::p_Model::evaluate_parameterized(monty::rc_ptr< ::mosek::fusion::WorkStack > _660,int _661,std::shared_ptr< monty::ndarray< int,1 > > _662,std::shared_ptr< monty::ndarray< int,1 > > _663,std::shared_ptr< monty::ndarray< long long,1 > > _664,std::shared_ptr< monty::ndarray< int,1 > > _665,std::shared_ptr< monty::ndarray< int,1 > > _666,std::shared_ptr< monty::ndarray< double,1 > > _667,std::shared_ptr< monty::ndarray< int,1 > > _668,std::shared_ptr< monty::ndarray< double,1 > > _669){
  _checked_ptr_1<int> _ptr__662(_662 ? _662->raw() : nullptr, _662 ? _662->size(0) : 0);
  _checked_ptr_1<int> _ptr__663(_663 ? _663->raw() : nullptr, _663 ? _663->size(0) : 0);
  _checked_ptr_1<long long> _ptr__664(_664 ? _664->raw() : nullptr, _664 ? _664->size(0) : 0);
  _checked_ptr_1<int> _ptr__665(_665 ? _665->raw() : nullptr, _665 ? _665->size(0) : 0);
  _checked_ptr_1<int> _ptr__666(_666 ? _666->raw() : nullptr, _666 ? _666->size(0) : 0);
  _checked_ptr_1<double> _ptr__667(_667 ? _667->raw() : nullptr, _667 ? _667->size(0) : 0);
  _checked_ptr_1<int> _ptr__668(_668 ? _668->raw() : nullptr, _668 ? _668->size(0) : 0);
  _checked_ptr_1<double> _ptr__669(_669 ? _669->raw() : nullptr, _669 ? _669->size(0) : 0);
  int _670 = _660->allocf64((int)((_666)->size(0)));
  int _671 = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _672 = mosek::fusion::p_WorkStack::_get_impl(_660)->f64;
  _checked_ptr_1<double> _ptr__672(_672 ? _672->raw() : nullptr,_672 ? _672->size(0) : 0);
  int _673 = (int)0;
  int _8830 = (int)0;
  int _8831 = _661;
  for (int _674 = _8830; _674 < _8831; ++_674)
  {
    {
      int _8832 = _ptr__662[_674];
      int _8833 = _ptr__663[_674];
      for (int _675 = _8832; _675 < _8833; ++_675)
      {
        {
          int _8834 = _ptr__665[_675];
          int _8835 = _ptr__665[safe_add( _675,(int)1 )];
          for (int _676 = _8834; _676 < _8835; ++_676)
          {
            {
              if ((_ptr__666[_676] == 0))
              {
                {
                }
              }
              else
              {
                {
                  if ((_ptr__666[_676] == 1))
                  {
                    {
                      _ptr__672[safe_add( _670,_671 )] = ((*param_value)((int)_ptr__667[_676]));
                      ++ _671;
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__666[_676] == 2))
                      {
                        {
                          _ptr__672[safe_add( _670,_671 )] = _ptr__667[_676];
                          ++ _671;
                        }
                      }
                      else
                      {
                        {
                          if ((_ptr__666[_676] == 3))
                          {
                            {
                              _ptr__672[(safe_add( _670,_671 ) - (int)2)] += _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                              -- _671;
                            }
                          }
                          else
                          {
                            {
                              if ((_ptr__666[_676] == 4))
                              {
                                {
                                  _ptr__672[(safe_add( _670,_671 ) - (int)1)] = (-_ptr__672[(safe_add( _670,_671 ) - (int)1)]);
                                }
                              }
                              else
                              {
                                {
                                  if ((_ptr__666[_676] == 5))
                                  {
                                    {
                                      _ptr__672[(safe_add( _670,_671 ) - (int)2)] *= _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                                      -- _671;
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((_ptr__666[_676] == 6))
                                      {
                                        {
                                          _ptr__672[(safe_add( _670,_671 ) - (int)1)] = (1.0 / _ptr__672[(safe_add( _670,_671 ) - (int)1)]);
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((_ptr__666[_676] == 8))
                                          {
                                            {
                                              double _677 = 0.0;
                                              int _8836 = (int)0;
                                              int _8837 = (int)_ptr__667[_676];
                                              for (int _678 = _8836; _678 < _8837; ++_678)
                                              {
                                                {
                                                  _677 += _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                                                  -- _671;
                                                }
                                              }
                                              _ptr__672[safe_add( _670,_671 )] = _677;
                                              ++ _671;
                                            }
                                          }
                                          else
                                          {
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _ptr__668[_673] = (int)_ptr__664[_675];
          _ptr__669[_673] = _ptr__672[_670];
          _671 = (int)0;
          ++ _673;
        }
      }
    }
  }
  _660->popf64((int)((_666)->size(0)));
}
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _679){
  if ((NULL != initsol_xx.get()))
  {
    {
      int _680 = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _681 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_680)));
      _checked_ptr_1<double> _ptr__681(_681 ? _681->raw() : nullptr,_681 ? _681->size(0) : 0);
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _683 = __mosek_2fusion_2Model__get_sol_cache(_679,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx.get()))
          {
            {
              int _8838;
              bool _8839 = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx)->size(0)) <= _680);
              if (_8839)
              {
                _8838 = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx)->size(0));
              }
              else
              {
                _8838 = _680;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx,(int)0,_681,(int)0,_8838);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _682)
      {
        {
        }
      }
      int _8840;
      bool _8841 = ((int)((initsol_xx)->size(0)) <= _680);
      if (_8841)
      {
        _8840 = (int)((initsol_xx)->size(0));
      }
      else
      {
        _8840 = _680;
      }
      int _684 = _8840;
      int _8842 = (int)0;
      int _8843 = _684;
      for (int _685 = _8842; _685 < _8843; ++_685)
      {
        {
          if (((*initsol_xx_flag)(_685)))
          {
            {
              _ptr__681[_685] = ((*initsol_xx)(_685));
            }
          }
          {}
        }
      }
      task_putxx_slice(_679,(int)0,_680,_681);
    }
  }
  {}
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(){
  return _pubthis->getDualSolutionStatus(solutionptr);
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(){
  return _pubthis->getProblemStatus(solutionptr);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(){
  return _pubthis->getPrimalSolutionStatus(solutionptr);
}
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _686,bool _687,bool _688){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _689 = nullptr;
  mosek::fusion::SolutionType _690 = _686;
  if ((_690 == ::mosek::fusion::SolutionType::Default))
  {
    {
      _690 = solutionptr;
    }
  }
  {}
  if ((_690 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _689 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _689 = sol_bas;
        }
      }
      else
      {
        {
          _689 = sol_itr;
        }
      }
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _689 = sol_itr;
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _689 = sol_bas;
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _689 = sol_itg;
    }
  }
  {}
  if ((NULL == _689.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_688 || ((_687 && _689->isPrimalAcceptable(acceptable_sol)) || ((!_687) && _689->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _689;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _691 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _692 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->pstatus;
          mosek::fusion::ProblemStatus _693 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->probstatus;
          if ((!_687))
          {
            {
              _692 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->dstatus;
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_692 == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("at least Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_689 == sol_itr))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_689 == sol_bas))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_689 == sol_itg))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_693 == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_691->toString());
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _694,bool _695){
  return __mosek_2fusion_2Model__get_sol_cache(_694,_695,false);
}
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int,1 > > _696,std::shared_ptr< monty::ndarray< double,1 > > _697){
  _checked_ptr_1<int> _ptr__696(_696 ? _696->raw() : nullptr, _696 ? _696->size(0) : 0);
  _checked_ptr_1<double> _ptr__697(_697 ? _697->raw() : nullptr, _697 ? _697->size(0) : 0);
  ensure_initsol_xx();
  int _8844 = (int)0;
  int _8845 = (int)((_696)->size(0));
  for (int _698 = _8844; _698 < _8845; ++_698)
  {
    {
      ((*initsol_xx)(_ptr__696[_698])) = _ptr__697[_698];
      ((*initsol_xx_flag)(_ptr__696[_698])) = true;
    }
  }
}
void mosek::fusion::p_Model::ensure_initsol_xx(){
  int _699 = (int)((natvarmap_idx)->size(0));
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_699)));
      std::vector<bool> _8846;
      for (int _700 = (int)0, _8847 = _699; _700 < _8847 ; ++_700)
      {
        _8846.push_back(false);
      }
      auto _8848 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_8846.size()),_8846.begin(),_8846.end()));
      initsol_xx_flag = _8848;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _699))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _701 = initsol_xx;
      _checked_ptr_1<double> _ptr__701(_701 ? _701->raw() : nullptr,_701 ? _701->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _702 = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_699)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_699)));
      ::mosek::fusion::Utils::Tools::arraycopy(_701,(int)0,initsol_xx,(int)0,_699);
      int _8849 = (int)0;
      int _8850 = _699;
      for (int _703 = _8849; _703 < _8850; ++_703)
      {
        {
          ((*initsol_xx_flag)(_703)) = ((*_702)(_703));
        }
      }
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _704){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_704,false))->bars;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _705){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_705,true))->barx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _706){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_706,false))->y;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _707){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_707,true))->xc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx(mosek::fusion::SolutionType _708){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_708,false))->snx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _709){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_709,false))->suc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _710){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_710,false))->slc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _711){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_711,false))->sux;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _712){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_712,false))->slx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _713){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_713,false))->yx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _714){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_714,true))->xx;
}
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _715) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_715); }void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _715){
  solutionptr = _715;
}
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus(){
  return acceptable_sol;
}
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _716) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_716); }void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _716){
  acceptable_sol = _716;
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _717) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_717); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _717){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _718 = nullptr;
  if ((_717 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _718 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _718 = sol_bas;
        }
      }
      else
      {
        {
          _718 = sol_itr;
        }
      }
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _718 = sol_itr;
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _718 = sol_bas;
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _718 = sol_itg;
    }
  }
  {}
  if ((NULL == _718.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_718)->probstatus;
    }
  }
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _719) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_719); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _719){
  return getSolutionStatus(_719,false);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _720) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_720); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _720){
  return getSolutionStatus(_720,true);
}
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _721,bool _722){
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _724 = __mosek_2fusion_2Model__get_sol_cache(_721,_722,true);
      if (_722)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_724)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_724)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _723)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _725,monty::rc_ptr< ::mosek::fusion::Expression > _726){
  _checked_ptr_1<int> _ptr__725(_725 ? _725->raw() : nullptr, _725 ? _725->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_726)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int _727 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _728 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _729 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _730 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _731 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _732 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _733 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _734 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _735 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _736 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _737 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _738 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _739 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _740 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__740(_740 ? _740->raw() : nullptr,_740 ? _740->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _741 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__741(_741 ? _741->raw() : nullptr,_741 ? _741->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _742 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__742(_742 ? _742->raw() : nullptr,_742 ? _742->size(0) : 0);
  int _743 = (int)0;
  int _8851 = (int)0;
  int _8852 = _729;
  for (int _744 = _8851; _744 < _8852; ++_744)
  {
    {
      if ((((*natconmap_slackidx)(_ptr__725[_744])) > (int)0))
      {
        {
          ++ _743;
        }
      }
      {}
    }
  }
  int _745 = _729;
  int _746 = safe_add( _730,_743 );
  std::shared_ptr< monty::ndarray< long long,1 > > _747 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _729,(int)1 ))));
  _checked_ptr_1<long long> _ptr__747(_747 ? _747->raw() : nullptr,_747 ? _747->size(0) : 0);
  int _8853 = (int)0;
  int _8854 = _729;
  for (int _748 = _8853; _748 < _8854; ++_748)
  {
    {
      int _8855 = _ptr__740[safe_add( _733,_748 )];
      int _8856 = _ptr__740[safe_add( safe_add( _733,_748 ),(int)1 )];
      for (int _749 = _8855; _749 < _8856; ++_749)
      {
        {
          if ((_ptr__741[safe_add( _735,_749 )] >= (int)0))
          {
            {
              ++ _ptr__747[safe_add( _748,(int)1 )];
            }
          }
          {}
        }
      }
      if ((((*natconmap_slackidx)(_ptr__725[_748])) > (int)0))
      {
        {
          ++ _ptr__747[safe_add( _748,(int)1 )];
        }
      }
      {}
    }
  }
  int _8857 = (int)0;
  int _8858 = _729;
  for (int _750 = _8857; _750 < _8858; ++_750)
  {
    {
      _ptr__747[safe_add( _750,(int)1 )] += _ptr__747[_750];
    }
  }
  long long _751 = _ptr__747[_729];
  std::shared_ptr< monty::ndarray< int,1 > > _752 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_751)));
  _checked_ptr_1<int> _ptr__752(_752 ? _752->raw() : nullptr,_752 ? _752->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _753 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_751)));
  _checked_ptr_1<double> _ptr__753(_753 ? _753->raw() : nullptr,_753 ? _753->size(0) : 0);
  int _754 = (int)0;
  int _8859 = (int)0;
  int _8860 = _729;
  for (int _755 = _8859; _755 < _8860; ++_755)
  {
    {
      int _8861 = _ptr__740[safe_add( _733,_755 )];
      int _8862 = _ptr__740[safe_add( safe_add( _733,_755 ),(int)1 )];
      for (int _756 = _8861; _756 < _8862; ++_756)
      {
        {
          if ((_ptr__741[safe_add( _735,_756 )] >= (int)0))
          {
            {
              _ptr__752[_754] = (int)_ptr__741[safe_add( _735,_756 )];
              _ptr__753[_754] = _ptr__742[safe_add( _736,_756 )];
              ++ _754;
            }
          }
          {}
        }
      }
      if ((((*natconmap_slackidx)(_ptr__725[_755])) > (int)0))
      {
        {
          _ptr__752[_754] = (int)(((*natconmap_slackidx)(_ptr__725[_755])) - (int)1);
          _ptr__753[_754] = (-1.0);
          ++ _754;
        }
      }
      {}
    }
  }
  task_putarowlist(_725,_747,_752,_753);
  if ((_732 == (int)0))
  {
    {
      int _8863 = (int)0;
      int _8864 = _729;
      for (int _757 = _8863; _757 < _8864; ++_757)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__725[_757])) - ((*natconmap_coderowptrb)(_ptr__725[_757])));
          ((*natconmap_coderowptre)(_ptr__725[_757])) = ((*natconmap_coderowptrb)(_ptr__725[_757]));
        }
      }
    }
  }
  else
  {
    {
      bool _758 = true;
      int _759 = (int)0;
      int _760 = (int)0;
      int _8865 = (int)0;
      int _8866 = _729;
      for (int _761 = _8865; _761 < _8866; ++_761)
      {
        {
          int _8867 = _ptr__740[safe_add( _733,_761 )];
          int _8868 = _ptr__740[safe_add( safe_add( _733,_761 ),(int)1 )];
          for (int _762 = _8867; _762 < _8868; ++_762)
          {
            {
              if ((((_ptr__740[safe_add( safe_add( _738,_762 ),(int)1 )] - _ptr__740[safe_add( _738,_762 )]) == (int)1) && ((_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_762 )] )] == 10) || (_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_762 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _760;
                  _759 += (_ptr__740[safe_add( safe_add( _738,_762 ),(int)1 )] - _ptr__740[safe_add( _738,_762 )]);
                }
              }
            }
          }
        }
      }
      int _763 = natconmap_codenztop;
      int _764 = natconmap_codeatomtop;
      natconmap_codealloc(_760,_759);
      int _765 = _764;
      int _766 = _763;
      int _8869 = (int)0;
      int _8870 = _729;
      for (int _767 = _8869; _767 < _8870; ++_767)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__725[_767])) - ((*natconmap_coderowptrb)(_ptr__725[_767])));
          ((*natconmap_coderowptrb)(_ptr__725[_767])) = _766;
          int _8871 = _ptr__740[safe_add( _733,_767 )];
          int _8872 = _ptr__740[safe_add( safe_add( _733,_767 ),(int)1 )];
          for (int _768 = _8871; _768 < _8872; ++_768)
          {
            {
              if ((((_ptr__740[safe_add( safe_add( _738,_768 ),(int)1 )] - _ptr__740[safe_add( _738,_768 )]) == (int)1) && ((_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_768 )] )] == 10) || (_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_768 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _8873 = _ptr__740[safe_add( _738,_768 )];
                  int _8874 = _ptr__740[safe_add( safe_add( _738,_768 ),(int)1 )];
                  for (int _769 = _8873; _769 < _8874; ++_769)
                  {
                    {
                      ((*natconmap_code)(_765)) = _ptr__740[safe_add( _737,_769 )];
                      ((*natconmap_cconst)(_765)) = _ptr__742[safe_add( _739,_769 )];
                      ++ _765;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _766,(int)1 ))) = _765;
                  ((*natconmap_codenidx)(_766)) = _ptr__741[safe_add( _735,_768 )];
                  _758 = (_ptr__741[safe_add( _735,_768 )] >= (int)0);
                  ++ _766;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__725[_767])) = _766;
        }
      }
      natconmap_numparameterized += _760;
      if ((!_758))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _770,monty::rc_ptr< ::mosek::fusion::Expression > _771,std::shared_ptr< monty::ndarray< int,1 > > _772){
  _checked_ptr_1<int> _ptr__770(_770 ? _770->raw() : nullptr, _770 ? _770->size(0) : 0);
  _checked_ptr_1<int> _ptr__772(_772 ? _772->raw() : nullptr, _772 ? _772->size(0) : 0);
  int _8875 = (int)0;
  int _8876 = (int)((_770)->size(0));
  for (int _773 = _8875; _773 < _8876; ++_773)
  {
    {
      if ((((*natconmap_coderowptrb)(_773)) < ((*natconmap_coderowptre)(_773))))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      {}
    }
  }
  int _774 = safe_mul( (int)((_770)->size(0)),(int)((_772)->size(0)) );
  std::shared_ptr< monty::ndarray< double,1 > > _775 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_774)));
  _checked_ptr_1<double> _ptr__775(_775 ? _775->raw() : nullptr,_775 ? _775->size(0) : 0);
  std::vector<int> _8877;
  for (int _777 = (int)0, _8878 = (int)((_770)->size(0)); _777 < _8878 ; ++_777)
  {
    for (int _778 = (int)0, _8879 = (int)((_772)->size(0)); _778 < _8879 ; ++_778)
    {
      _8877.push_back(_ptr__770[_777]);
    }
  }
  auto _8880 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8877.size()),_8877.begin(),_8877.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _776 = _8880;
  _checked_ptr_1<int> _ptr__776(_776 ? _776->raw() : nullptr,_776 ? _776->size(0) : 0);
  std::vector<int> _8881;
  for (int _780 = (int)0, _8882 = (int)((_770)->size(0)); _780 < _8882 ; ++_780)
  {
    for (int _781 = (int)0, _8883 = (int)((_772)->size(0)); _781 < _8883 ; ++_781)
    {
      _8881.push_back(_ptr__772[_781]);
    }
  }
  auto _8884 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8881.size()),_8881.begin(),_8881.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _779 = _8884;
  _checked_ptr_1<int> _ptr__779(_779 ? _779->raw() : nullptr,_779 ? _779->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_771)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int _782 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _783 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _784 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _785 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _786 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _787 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _788 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _789 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _790 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _791 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _792 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _793 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _794 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _795 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__795(_795 ? _795->raw() : nullptr,_795 ? _795->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _796 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__796(_796 ? _796->raw() : nullptr,_796 ? _796->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _797 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__797(_797 ? _797->raw() : nullptr,_797 ? _797->size(0) : 0);
  int _798 = (int)0;
  int _8885 = (int)0;
  int _8886 = _783;
  for (int _799 = _8885; _799 < _8886; ++_799)
  {
    {
      int _800 = _ptr__795[safe_add( _788,_799 )];
      int _801 = _ptr__795[safe_add( safe_add( _788,_799 ),(int)1 )];
      int _802 = _800;
      int _803 = (int)0;
      while ( ((_803 < (int)((_772)->size(0))) && (_802 < _801)) )
      {
        {
          if ((_ptr__772[_803] < _ptr__796[safe_add( _790,_802 )]))
          {
            {
              ++ _803;
            }
          }
          else if((_ptr__772[_803] > _ptr__796[safe_add( _790,_802 )]))
          {
            {
              ++ _802;
            }
          }
          else
          {
            {
              _ptr__775[safe_add( _798,_803 )] = _ptr__797[safe_add( _791,_802 )];
              ++ _803;
              ++ _802;
            }
          }
        }
      }
      _798 += (int)((_772)->size(0));
    }
  }
  task_putaijlist(_776,_779,_775,(long long)(_774));
  if ((_786 == (int)0))
  {
    {
      int _8887 = (int)0;
      int _8888 = _783;
      for (int _804 = _8887; _804 < _8888; ++_804)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__770[_804])) - ((*natconmap_coderowptrb)(_ptr__770[_804])));
          ((*natconmap_coderowptre)(_ptr__770[_804])) = ((*natconmap_coderowptrb)(_ptr__770[_804]));
        }
      }
    }
  }
  else
  {
    {
      bool _805 = true;
      int _806 = (int)0;
      int _807 = (int)0;
      int _8889 = (int)0;
      int _8890 = _783;
      for (int _808 = _8889; _808 < _8890; ++_808)
      {
        {
          int _8891 = _ptr__795[safe_add( _788,_808 )];
          int _8892 = _ptr__795[safe_add( safe_add( _788,_808 ),(int)1 )];
          for (int _809 = _8891; _809 < _8892; ++_809)
          {
            {
              if ((((_ptr__795[safe_add( safe_add( _793,_809 ),(int)1 )] - _ptr__795[safe_add( _793,_809 )]) == (int)1) && ((_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_809 )] )] == 10) || (_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_809 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _806;
                  _807 += (_ptr__795[safe_add( safe_add( _793,_809 ),(int)1 )] - _ptr__795[safe_add( _793,_809 )]);
                }
              }
            }
          }
        }
      }
      int _810 = natconmap_codenztop;
      int _811 = natconmap_codeatomtop;
      natconmap_codealloc(_806,_807);
      int _812 = _811;
      int _813 = _810;
      int _8893 = (int)0;
      int _8894 = _783;
      for (int _814 = _8893; _814 < _8894; ++_814)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__770[_814])) - ((*natconmap_coderowptrb)(_ptr__770[_814])));
          ((*natconmap_coderowptrb)(_ptr__770[_814])) = _813;
          int _8895 = _ptr__795[safe_add( _788,_814 )];
          int _8896 = _ptr__795[safe_add( safe_add( _788,_814 ),(int)1 )];
          for (int _815 = _8895; _815 < _8896; ++_815)
          {
            {
              if ((((_ptr__795[safe_add( safe_add( _793,_815 ),(int)1 )] - _ptr__795[safe_add( _793,_815 )]) == (int)1) && ((_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_815 )] )] == 10) || (_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_815 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _8897 = _ptr__795[safe_add( _793,_815 )];
                  int _8898 = _ptr__795[safe_add( safe_add( _793,_815 ),(int)1 )];
                  for (int _816 = _8897; _816 < _8898; ++_816)
                  {
                    {
                      ((*natconmap_code)(_812)) = _ptr__795[safe_add( _792,_816 )];
                      ((*natconmap_cconst)(_812)) = _ptr__797[safe_add( _794,_816 )];
                      ++ _812;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _813,(int)1 ))) = _812;
                  ((*natconmap_codenidx)(_813)) = _ptr__796[safe_add( _790,_815 )];
                  _805 = (_ptr__796[safe_add( _790,_815 )] >= (int)0);
                  ++ _813;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__770[_814])) = _813;
        }
      }
      natconmap_numparameterized += _806;
      if ((!_805))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _817,monty::rc_ptr< ::mosek::fusion::Variable > _818) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_817,_818); }void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _817,monty::rc_ptr< ::mosek::fusion::Variable > _818){
  if ((_817->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((NULL != natconmap_objcodenidx.get()))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  int _819 = _818->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _820 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_819)));
  _checked_ptr_1<long long> _ptr__820(_820 ? _820->raw() : nullptr,_820 ? _820->size(0) : 0);
  if ((_819 < _818->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _821 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_819)));
      _checked_ptr_1<long long> _ptr__821(_821 ? _821->raw() : nullptr,_821 ? _821->size(0) : 0);
      _818->inst((int)0,_821,(int)0,_820);
    }
  }
  else
  {
    {
      _818->inst((int)0,_820);
    }
  }
  int _8899 = (int)0;
  int _8900 = _819;
  for (int _822 = _8899; _822 < _8900; ++_822)
  {
    {
      if ((_ptr__820[_822] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _823 = true;
  int _8901 = (int)0;
  int _8902 = (_819 - (int)1);
  for (int _824 = _8901; _824 < _8902; ++_824)
  {
    {
      _823 = (_823 && (_ptr__820[_824] < _ptr__820[(_824 - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _825 = nullptr;
  _checked_ptr_1<int> _ptr__825(_825 ? _825->raw() : nullptr,_825 ? _825->size(0) : 0);
  if (_823)
  {
    {
      std::vector<int> _8903;
      for (int _826 = (int)0, _8904 = _819; _826 < _8904 ; ++_826)
      {
        _8903.push_back((int)(_ptr__820[_826] - (int)1));
      }
      auto _8905 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8903.size()),_8903.begin(),_8903.end()));
      _825 = _8905;
      _ptr__825.update(_825 ? _825->raw() : nullptr, _825 ? _825->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<long long> _8906;
      for (int _828 = (-(int)1), _8907 = _819; _828 < _8907 ; ++_828)
      {
        _8906.push_back(_828);
      }
      auto _8908 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8906.size()),_8906.begin(),_8906.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _827 = _8908;
      _checked_ptr_1<long long> _ptr__827(_827 ? _827->raw() : nullptr,_827 ? _827->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_827,_820,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_819));
      std::vector<int> _8909;
      for (int _829 = (int)0, _8910 = _819; _829 < _8910 ; ++_829)
      {
        _8909.push_back((int)(_ptr__820[_ptr__827[_829]] - (int)1));
      }
      auto _8911 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8909.size()),_8909.begin(),_8909.end()));
      _825 = _8911;
      _ptr__825.update(_825 ? _825->raw() : nullptr, _825 ? _825->size(0) : 0);
    }
  }
  int _830 = (int)((_825)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _831 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_830)));
  _checked_ptr_1<double> _ptr__831(_831 ? _831->raw() : nullptr,_831 ? _831->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _832 = _825;
  _checked_ptr_1<int> _ptr__832(_832 ? _832->raw() : nullptr,_832 ? _832->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_817)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  {
  }
  int _833 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _834 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _835 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _836 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _837 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _838 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _839 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _840 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _841 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _842 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _843 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _844 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _845 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  {
  }
  if ((_837 > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _846 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__846(_846 ? _846->raw() : nullptr,_846 ? _846->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _847 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__847(_847 ? _847->raw() : nullptr,_847 ? _847->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _848 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__848(_848 ? _848->raw() : nullptr,_848 ? _848->size(0) : 0);
  int _849 = (int)0;
  int _8912 = (int)0;
  int _8913 = _834;
  for (int _850 = _8912; _850 < _8913; ++_850)
  {
    {
      int _851 = _ptr__846[safe_add( _839,_850 )];
      int _852 = _ptr__846[safe_add( safe_add( _839,_850 ),(int)1 )];
      int _853 = _851;
      int _854 = (int)0;
      while ( ((_854 < (int)((_825)->size(0))) && (_853 < _852)) )
      {
        {
          if ((_ptr__825[_854] < (_ptr__847[safe_add( _841,_853 )] - (int)1)))
          {
            {
              ++ _854;
            }
          }
          else if((_ptr__825[_854] > (_ptr__847[safe_add( _841,_853 )] - (int)1)))
          {
            {
              ++ _853;
            }
          }
          else
          {
            {
              _ptr__831[safe_add( _849,_854 )] = _ptr__848[safe_add( _842,_853 )];
              ++ _854;
              ++ _853;
            }
          }
        }
      }
      _849 += (int)((_825)->size(0));
    }
  }
  task_putclist(_832,_831);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_unchecked(const std::string & _855,std::shared_ptr< monty::ndarray< int,1 > > _856,std::shared_ptr< monty::ndarray< long long,1 > > _857){
  _checked_ptr_1<int> _ptr__856(_856 ? _856->raw() : nullptr, _856 ? _856->size(0) : 0);
  _checked_ptr_1<long long> _ptr__857(_857 ? _857->raw() : nullptr, _857 ? _857->size(0) : 0);
  if ((((int)((_855).size()) > (int)0) && par_map->hasItem(_855)))
  {
    {
      throw ::mosek::fusion::NameError(std::string ("Duplicate parameter name"));
    }
  }
  {}
  long long _858 = ::mosek::fusion::p_Set::size(_856);
  int _8914;
  bool _8915 = (NULL != _857.get());
  if (_8915)
  {
    _8914 = (int)((_857)->size(0));
  }
  else
  {
    _8914 = (int)_858;
  }
  int _859 = _8914;
  if ((NULL == param_value.get()))
  {
    {
      param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_859)));
    }
  }
  else
  {
    {
      if ((safe_add( param_num,_859 ) > (int)((param_value)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _860 = param_value;
          _checked_ptr_1<double> _ptr__860(_860 ? _860->raw() : nullptr,_860 ? _860->size(0) : 0);
          int _8916;
          bool _8917 = (safe_mul( (int)2,(int)((_860)->size(0)) ) > safe_add( (int)((_860)->size(0)),_859 ));
          if (_8917)
          {
            _8916 = safe_mul( (int)2,(int)((_860)->size(0)) );
          }
          else
          {
            _8916 = safe_add( (int)((_860)->size(0)),_859 );
          }
          int _861 = _8916;
          param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_861)));
          if ((param_num > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_860,(int)0,param_value,(int)0,param_num);
            }
          }
          {}
        }
      }
      {}
    }
  }
  std::vector<int> _8918;
  for (int _863 = (int)0, _8919 = (int)_859; _863 < _8919 ; ++_863)
  {
    _8918.push_back(safe_add( param_num,_863 ));
  }
  auto _8920 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8918.size()),_8918.begin(),_8918.end()));
  monty::rc_ptr< ::mosek::fusion::ParameterImpl > _862 = ::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::Model::t(_pubthis),_856,_857,_8920);
  param_num += _859;
  if (((int)((_855).size()) > (int)0))
  {
    {
      if (((NULL == parameters.get()) || (numparameter == (int)((parameters)->size(0)))))
      {
        {
          std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _864 = parameters;
          std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _8921;
          for (int _865 = (int)0, _8922 = safe_add( safe_mul( numparameter,(int)2 ),(int)64 ); _865 < _8922 ; ++_865)
          {
            _8921.push_back(nullptr);
          }
          auto _8923 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_8921.size()),_8921.begin(),_8921.end()));
          parameters = _8923;
          int _8924 = (int)0;
          int _8925 = numparameter;
          for (int _866 = _8924; _866 < _8925; ++_866)
          {
            {
              ((*parameters)(_866)) = ((*_864)(_866));
            }
          }
        }
      }
      {}
      ((*parameters)(numparameter)) = (_862).as<::mosek::fusion::Parameter>();
      par_map->setItem(_855,numparameter);
      numparameter += (int)1;
    }
  }
  {}
  return (_862).as<::mosek::fusion::Parameter>();
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _867,std::shared_ptr< monty::ndarray< int,1 > > _868,std::shared_ptr< monty::ndarray< long long,1 > > _869){
  _checked_ptr_1<int> _ptr__868(_868 ? _868->raw() : nullptr, _868 ? _868->size(0) : 0);
  _checked_ptr_1<long long> _ptr__869(_869 ? _869->raw() : nullptr, _869 ? _869->size(0) : 0);
  bool _870 = true;
  int _871 = (int)((_868)->size(0));
  if ((NULL != _869.get()))
  {
    {
      bool _872 = (_ptr__869[((int)((_869)->size(0)) - (int)1)] < ::mosek::fusion::p_Set::size(_868));
      int _8926 = (int)1;
      int _8927 = (int)((_869)->size(0));
      for (int _873 = _8926; _873 < _8927; ++_873)
      {
        {
          _872 = (_872 && (_ptr__869[(_873 - (int)1)] < _ptr__869[_873]));
        }
      }
      if ((!_872))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Unordered sparsity pattern"));
        }
      }
      {}
    }
  }
  {}
  return __mosek_2fusion_2Model__parameter_unchecked(_867,_868,_869);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _874,std::shared_ptr< monty::ndarray< int,1 > > _875,std::shared_ptr< monty::ndarray< int,2 > > _876){
  _checked_ptr_1<int> _ptr__875(_875 ? _875->raw() : nullptr, _875 ? _875->size(0) : 0);
  int _877 = (int)((_876)->size(0));
  int _878 = (int)((_876)->size(1));
  if (((int)((_875)->size(0)) != _878))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid sparsity"));
    }
  }
  {}
  if ((NULL == _876.get()))
  {
    {
      return __mosek_2fusion_2Model__parameter_unchecked(_874,_875,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _879 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_877)));
      _checked_ptr_1<long long> _ptr__879(_879 ? _879->raw() : nullptr,_879 ? _879->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _880 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_878)));
      _checked_ptr_1<long long> _ptr__880(_880 ? _880->raw() : nullptr,_880 ? _880->size(0) : 0);
      _ptr__880[(_878 - (int)1)] = (int)1;
      int _8928 = (int)1;
      int _8929 = _878;
      for (int _881 = _8928; _881 < _8929; ++_881)
      {
        {
          _ptr__880[((_878 - (int)1) - _881)] = safe_mul( _ptr__880[(_878 - _881)],_ptr__875[(_878 - _881)] );
        }
      }
      int _8930 = (int)0;
      int _8931 = _877;
      for (int _882 = _8930; _882 < _8931; ++_882)
      {
        {
          _ptr__879[_882] = (int)0;
          int _8932 = (int)0;
          int _8933 = _878;
          for (int _883 = _8932; _883 < _8933; ++_883)
          {
            {
              _ptr__879[_882] += safe_mul( ((*_876)(_882,_883)),_ptr__880[_883] );
            }
          }
        }
      }
      return __mosek_2fusion_2Model__parameter_(_874,_875,_879);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _884) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_884); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _884) { return __mosek_2fusion_2Model__parameter(_884); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _884){
  std::shared_ptr< monty::ndarray< long long,1 > > _885 = nullptr;
  _checked_ptr_1<long long> _ptr__885(_885 ? _885->raw() : nullptr,_885 ? _885->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_884,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),_885);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _886,int _887,int _888,int _889) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_886,_887,_888,_889); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _886,int _887,int _888,int _889) { return __mosek_2fusion_2Model__parameter(_886,_887,_888,_889); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _886,int _887,int _888,int _889){
  std::shared_ptr< monty::ndarray< long long,1 > > _890 = nullptr;
  _checked_ptr_1<long long> _ptr__890(_890 ? _890->raw() : nullptr,_890 ? _890->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_886,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_887),(int)(_888),(int)(_889)}),_890);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _891,int _892,int _893) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_891,_892,_893); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _891,int _892,int _893) { return __mosek_2fusion_2Model__parameter(_891,_892,_893); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _891,int _892,int _893){
  std::shared_ptr< monty::ndarray< long long,1 > > _894 = nullptr;
  _checked_ptr_1<long long> _ptr__894(_894 ? _894->raw() : nullptr,_894 ? _894->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_891,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_892),(int)(_893)}),_894);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _895,int _896) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_895,_896); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _895,int _896) { return __mosek_2fusion_2Model__parameter(_895,_896); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _895,int _896){
  std::shared_ptr< monty::ndarray< long long,1 > > _897 = nullptr;
  _checked_ptr_1<long long> _ptr__897(_897 ? _897->raw() : nullptr,_897 ? _897->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_895,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_896)}),_897);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_898,_899); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return __mosek_2fusion_2Model__parameter(_898,_899); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899){
  _checked_ptr_1<int> _ptr__899(_899 ? _899->raw() : nullptr, _899 ? _899->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _900 = nullptr;
  _checked_ptr_1<long long> _ptr__900(_900 ? _900->raw() : nullptr,_900 ? _900->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_898,_899,_900);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_901,_902,_903); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903) { return __mosek_2fusion_2Model__parameter(_901,_902,_903); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903){
  _checked_ptr_1<int> _ptr__902(_902 ? _902->raw() : nullptr, _902 ? _902->size(0) : 0);
  _checked_ptr_1<long long> _ptr__903(_903 ? _903->raw() : nullptr, _903 ? _903->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_901,_902,_903);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_904,_905,_906); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906) { return __mosek_2fusion_2Model__parameter(_904,_905,_906); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906){
  _checked_ptr_1<int> _ptr__905(_905 ? _905->raw() : nullptr, _905 ? _905->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_904,_905,_906);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter() { return __mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(){
  std::shared_ptr< monty::ndarray< long long,1 > > _907 = nullptr;
  _checked_ptr_1<long long> _ptr__907(_907 ? _907->raw() : nullptr,_907 ? _907->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),_907);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _908,int _909,int _910) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_908,_909,_910); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _908,int _909,int _910) { return __mosek_2fusion_2Model__parameter(_908,_909,_910); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _908,int _909,int _910){
  std::shared_ptr< monty::ndarray< long long,1 > > _911 = nullptr;
  _checked_ptr_1<long long> _ptr__911(_911 ? _911->raw() : nullptr,_911 ? _911->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_908),(int)(_909),(int)(_910)}),_911);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _912,int _913) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_912,_913); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _912,int _913) { return __mosek_2fusion_2Model__parameter(_912,_913); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _912,int _913){
  std::shared_ptr< monty::ndarray< long long,1 > > _914 = nullptr;
  _checked_ptr_1<long long> _ptr__914(_914 ? _914->raw() : nullptr,_914 ? _914->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_912),(int)(_913)}),_914);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _915) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_915); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _915) { return __mosek_2fusion_2Model__parameter(_915); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _915){
  std::shared_ptr< monty::ndarray< long long,1 > > _916 = nullptr;
  _checked_ptr_1<long long> _ptr__916(_916 ? _916->raw() : nullptr,_916 ? _916->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_915)}),_916);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _917) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_917); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _917) { return __mosek_2fusion_2Model__parameter(_917); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _917){
  _checked_ptr_1<int> _ptr__917(_917 ? _917->raw() : nullptr, _917 ? _917->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _918 = nullptr;
  _checked_ptr_1<long long> _ptr__918(_918 ? _918->raw() : nullptr,_918 ? _918->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_917,_918);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_919,_920); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920) { return __mosek_2fusion_2Model__parameter(_919,_920); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920){
  _checked_ptr_1<int> _ptr__919(_919 ? _919->raw() : nullptr, _919 ? _919->size(0) : 0);
  _checked_ptr_1<long long> _ptr__920(_920 ? _920->raw() : nullptr, _920 ? _920->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_919,_920);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_921,_922); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922) { return __mosek_2fusion_2Model__parameter(_921,_922); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922){
  _checked_ptr_1<int> _ptr__921(_921 ? _921->raw() : nullptr, _921 ? _921->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_921,_922);
}
void mosek::fusion::p_Model::objective_(const std::string & _923,mosek::fusion::ObjectiveSense _924,monty::rc_ptr< ::mosek::fusion::Expression > _925){
  task_putobjectivename(_923);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _926 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _927 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::ExprDense > _928 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_925)).as<::mosek::fusion::Expression>());
  _928->eval(_926,_927,xs);
  _926->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _929 = mosek::fusion::p_WorkStack::_get_impl(_926)->i32;
  _checked_ptr_1<int> _ptr__929(_929 ? _929->raw() : nullptr,_929 ? _929->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _930 = mosek::fusion::p_WorkStack::_get_impl(_926)->i64;
  _checked_ptr_1<long long> _ptr__930(_930 ? _930->raw() : nullptr,_930 ? _930->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _931 = mosek::fusion::p_WorkStack::_get_impl(_926)->f64;
  _checked_ptr_1<double> _ptr__931(_931 ? _931->raw() : nullptr,_931 ? _931->size(0) : 0);
  int _932 = mosek::fusion::p_WorkStack::_get_impl(_926)->nd;
  int _933 = mosek::fusion::p_WorkStack::_get_impl(_926)->nelem;
  int _934 = mosek::fusion::p_WorkStack::_get_impl(_926)->nnz;
  bool _935 = mosek::fusion::p_WorkStack::_get_impl(_926)->hassp;
  int _936 = mosek::fusion::p_WorkStack::_get_impl(_926)->ncodeatom;
  int _937 = mosek::fusion::p_WorkStack::_get_impl(_926)->ptr_base;
  int _938 = mosek::fusion::p_WorkStack::_get_impl(_926)->shape_base;
  int _939 = mosek::fusion::p_WorkStack::_get_impl(_926)->nidxs_base;
  int _940 = mosek::fusion::p_WorkStack::_get_impl(_926)->cof_base;
  int _941 = mosek::fusion::p_WorkStack::_get_impl(_926)->code_base;
  int _942 = mosek::fusion::p_WorkStack::_get_impl(_926)->codeptr_base;
  int _943 = mosek::fusion::p_WorkStack::_get_impl(_926)->cconst_base;
  long long _944 = (long long)1;
  int _8934 = (int)0;
  int _8935 = _932;
  for (int _945 = _8934; _945 < _8935; ++_945)
  {
    {
      _932 *= _ptr__929[safe_add( _938,_945 )];
    }
  }
  if ((_944 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((_933 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int _946 = (int)0;
  int _947 = (int)0;
  int _8936 = (int)0;
  int _8937 = _934;
  for (int _948 = _8936; _948 < _8937; ++_948)
  {
    {
      if ((_ptr__930[safe_add( _939,_948 )] < (int)0))
      {
        {
          ++ _947;
        }
      }
      else if((_ptr__930[safe_add( _939,_948 )] >= (int)0))
      {
        {
          ++ _946;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _949 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_946)));
  _checked_ptr_1<int> _ptr__949(_949 ? _949->raw() : nullptr,_949 ? _949->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _950 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_946)));
  _checked_ptr_1<double> _ptr__950(_950 ? _950->raw() : nullptr,_950 ? _950->size(0) : 0);
  {
    int _951 = (int)0;
    int _8938 = (int)0;
    int _8939 = _934;
    for (int _952 = _8938; _952 < _8939; ++_952)
    {
      {
        if ((_ptr__930[safe_add( _939,_952 )] >= (int)0))
        {
          {
            _ptr__949[_951] = (int)_ptr__930[safe_add( _939,_952 )];
            _ptr__950[_951] = _ptr__931[safe_add( _940,_952 )];
            ++ _951;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_924 == ::mosek::fusion::ObjectiveSense::Maximize),_949,_950,0.0);
  if ((_947 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _953 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__953(_953 ? _953->raw() : nullptr,_953 ? _953->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _954 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__954(_954 ? _954->raw() : nullptr,_954 ? _954->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _955 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__955(_955 ? _955->raw() : nullptr,_955 ? _955->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _956 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_947)));
      _checked_ptr_1<double> _ptr__956(_956 ? _956->raw() : nullptr,_956 ? _956->size(0) : 0);
      int _8940 = (int)0;
      int _8941 = _947;
      for (int _957 = _8940; _957 < _8941; ++_957)
      {
        {
          long long _958 = (-safe_add( _ptr__930[safe_add( _939,_957 )],(int)1 ));
          _ptr__953[_957] = ((*natbarvar_idx)(_958));
          _ptr__954[_957] = ((*natbarvar_i)(_958));
          _ptr__955[_957] = ((*natbarvar_j)(_958));
          double _8942;
          bool _8943 = (_ptr__954[_957] == _ptr__955[_957]);
          if (_8943)
          {
            _8942 = _ptr__931[safe_add( _940,_957 )];
          }
          else
          {
            _8942 = (0.5 * _ptr__931[safe_add( _940,_957 )]);
          }
          _ptr__956[_957] = _8942;
        }
      }
      task_putbarc(_953,_954,_955,_956);
    }
  }
  {}
  if ((_936 == (int)0))
  {
    {
      int _8944 = (int)0;
      int _8945 = _933;
      for (int _959 = _8944; _959 < _8945; ++_959)
      {
        {
          natconmap_objcodenidx = nullptr;
          natconmap_objcodeptr = nullptr;
          natconmap_objcode = nullptr;
          natconmap_objcconst = nullptr;
        }
      }
    }
  }
  else
  {
    {
      bool _960 = true;
      int _961 = (int)0;
      int _962 = (int)0;
      int _8946 = _ptr__929[_937];
      int _8947 = _ptr__929[safe_add( _937,(int)1 )];
      for (int _963 = _8946; _963 < _8947; ++_963)
      {
        {
          if ((((_ptr__929[safe_add( safe_add( _942,_963 ),(int)1 )] - _ptr__929[safe_add( _942,_963 )]) == (int)1) && ((_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_963 )] )] == 10) || (_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_963 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              ++ _962;
              _961 += (_ptr__929[safe_add( safe_add( _942,_963 ),(int)1 )] - _ptr__929[safe_add( _942,_963 )]);
            }
          }
        }
      }
      if ((_962 > (int)0))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _964 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_962)));
          _checked_ptr_1<long long> _ptr__964(_964 ? _964->raw() : nullptr,_964 ? _964->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _965 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _962,(int)1 ))));
          _checked_ptr_1<int> _ptr__965(_965 ? _965->raw() : nullptr,_965 ? _965->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _966 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_961)));
          _checked_ptr_1<int> _ptr__966(_966 ? _966->raw() : nullptr,_966 ? _966->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _967 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_961)));
          _checked_ptr_1<double> _ptr__967(_967 ? _967->raw() : nullptr,_967 ? _967->size(0) : 0);
          {
            int _968 = (int)0;
            int _969 = (int)0;
            int _8948 = _ptr__929[_937];
            int _8949 = _ptr__929[safe_add( _937,(int)1 )];
            for (int _970 = _8948; _970 < _8949; ++_970)
            {
              {
                if ((((_ptr__929[safe_add( safe_add( _942,_970 ),(int)1 )] - _ptr__929[safe_add( _942,_970 )]) == (int)1) && ((_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_970 )] )] == 10) || (_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_970 )] )] == 2))))
                {
                  {
                  }
                }
                else
                {
                  {
                    int _8950 = _ptr__929[safe_add( _942,_970 )];
                    int _8951 = _ptr__929[safe_add( safe_add( _942,_970 ),(int)1 )];
                    for (int _971 = _8950; _971 < _8951; ++_971)
                    {
                      {
                        _ptr__966[_968] = _ptr__929[safe_add( _941,_971 )];
                        _ptr__967[_968] = _ptr__931[safe_add( _943,_971 )];
                        ++ _968;
                      }
                    }
                    _ptr__965[safe_add( _969,(int)1 )] = _968;
                    _ptr__964[_969] = _ptr__930[safe_add( _939,_970 )];
                    _960 = (_ptr__964[_969] >= (int)0);
                    ++ _969;
                  }
                }
              }
            }
          }
          natconmap_objcodenidx = _964;
          natconmap_objcodeptr = _965;
          natconmap_objcode = _966;
          natconmap_objcconst = _967;
        }
      }
      else
      {
        {
          natconmap_objcodenidx = nullptr;
          natconmap_objcodeptr = nullptr;
          natconmap_objcode = nullptr;
          natconmap_objcconst = nullptr;
        }
      }
      if ((!_960))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: objective(double _972) { mosek::fusion::p_Model::_get_impl(this)->objective(_972); }void mosek::fusion::p_Model::objective(double _972){
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_972));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _973,double _974) { mosek::fusion::p_Model::_get_impl(this)->objective(_973,_974); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _973,double _974){
  objective_(std::string (""),_973,::mosek::fusion::p_Expr::constTerm(_974));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _975,monty::rc_ptr< ::mosek::fusion::Expression > _976) { mosek::fusion::p_Model::_get_impl(this)->objective(_975,_976); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _975,monty::rc_ptr< ::mosek::fusion::Expression > _976){
  objective_(std::string (""),_975,_976);
}
void mosek::fusion::Model :: objective(const std::string & _977,double _978) { mosek::fusion::p_Model::_get_impl(this)->objective(_977,_978); }void mosek::fusion::p_Model::objective(const std::string & _977,double _978){
  objective_(_977,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_978));
}
void mosek::fusion::Model :: objective(const std::string & _979,mosek::fusion::ObjectiveSense _980,double _981) { mosek::fusion::p_Model::_get_impl(this)->objective(_979,_980,_981); }void mosek::fusion::p_Model::objective(const std::string & _979,mosek::fusion::ObjectiveSense _980,double _981){
  objective_(_979,_980,::mosek::fusion::p_Expr::constTerm(_981));
}
void mosek::fusion::Model :: objective(const std::string & _982,mosek::fusion::ObjectiveSense _983,monty::rc_ptr< ::mosek::fusion::Expression > _984) { mosek::fusion::p_Model::_get_impl(this)->objective(_982,_983,_984); }void mosek::fusion::p_Model::objective(const std::string & _982,mosek::fusion::ObjectiveSense _983,monty::rc_ptr< ::mosek::fusion::Expression > _984){
  objective_(_982,_983,_984);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_985,_986); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986) { return __mosek_2fusion_2Model__constraint(_985,_986); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_985,_986);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_987,_988,_989); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989) { return __mosek_2fusion_2Model__constraint(_987,_988,_989); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989){
  return __mosek_2fusion_2Model__constraint_(_987,_988,_989);
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_990,_991); }monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991) { return __mosek_2fusion_2Model__constraint(_990,_991); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_990,_991);
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_992,_993,_994); }monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(const std::string &  _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994) { return __mosek_2fusion_2Model__constraint(_992,_993,_994); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994){
  return __mosek_2fusion_2Model__constraint_(_992,_993,_994);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_995,_996); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996) { return __mosek_2fusion_2Model__constraint(_995,_996); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_995,_996);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_997,_998,_999); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999) { return __mosek_2fusion_2Model__constraint(_997,_998,_999); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999){
  return __mosek_2fusion_2Model__constraint_(_997,_998,_999);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1000,_1001); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001) { return __mosek_2fusion_2Model__constraint(_1000,_1001); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1000,_1001);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1002,_1003,_1004); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004) { return __mosek_2fusion_2Model__constraint(_1002,_1003,_1004); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004){
  return __mosek_2fusion_2Model__constraint_(_1002,_1003,_1004);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1005,_1006); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006) { return __mosek_2fusion_2Model__constraint(_1005,_1006); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1005,_1006);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1007,_1008,_1009); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009) { return __mosek_2fusion_2Model__constraint(_1007,_1008,_1009); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009){
  return __mosek_2fusion_2Model__constraint_(_1007,_1008,_1009);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1010); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010) { return __mosek_2fusion_2Model__variable(_1010); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010){
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_1010)->shape,_1010);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1011,_1012,_1013); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013) { return __mosek_2fusion_2Model__variable(_1011,_1012,_1013); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1012),(int)((safe_mul( _1011,safe_add( _1011,(int)1 ) ) / (int)2))}),_1013);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1014,_1015); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015) { return __mosek_2fusion_2Model__variable(_1014,_1015); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((safe_mul( _1014,safe_add( _1014,(int)1 ) ) / (int)2))}),_1015);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1016,_1017); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017) { return __mosek_2fusion_2Model__variable(_1016,_1017); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017){
  return __mosek_2fusion_2Model__variable_(_1016,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1017);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1018,_1019,_1020,_1021); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021) { return __mosek_2fusion_2Model__variable(_1018,_1019,_1020,_1021); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021){
  return __mosek_2fusion_2Model__variable_(_1018,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1020),(int)((safe_mul( _1019,safe_add( _1019,(int)1 ) ) / (int)2))}),_1021);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1022,_1023,_1024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024) { return __mosek_2fusion_2Model__variable(_1022,_1023,_1024); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024){
  return __mosek_2fusion_2Model__variable_(_1022,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((safe_mul( _1023,safe_add( _1023,(int)1 ) ) / (int)2))}),_1024);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1025,_1026,_1027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027) { return __mosek_2fusion_2Model__variable(_1025,_1026,_1027); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027){
  _checked_ptr_1<int> _ptr__1026(_1026 ? _1026->raw() : nullptr, _1026 ? _1026->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1025,_1026,_1027);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028) { return __mosek_2fusion_2Model__variable(_1028); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028){
  return (__mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_1028)->shape,_1028)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1029,_1030,_1031); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031) { return __mosek_2fusion_2Model__variable(_1029,_1030,_1031); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1030),(int)(_1029),(int)(_1029)}),_1031)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1032,_1033); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033) { return __mosek_2fusion_2Model__variable(_1032,_1033); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1032),(int)(_1032)}),_1033)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1034,_1035); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035) { return __mosek_2fusion_2Model__variable(_1034,_1035); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035){
  return (__mosek_2fusion_2Model__variable_(_1034,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1035)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1036,_1037,_1038,_1039); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039) { return __mosek_2fusion_2Model__variable(_1036,_1037,_1038,_1039); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039){
  return (__mosek_2fusion_2Model__variable_(_1036,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1038),(int)(_1037),(int)(_1037)}),_1039)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1040,_1041,_1042); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042) { return __mosek_2fusion_2Model__variable(_1040,_1041,_1042); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042){
  return (__mosek_2fusion_2Model__variable_(_1040,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1041),(int)(_1041)}),_1042)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1043,_1044,_1045); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045) { return __mosek_2fusion_2Model__variable(_1043,_1044,_1045); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045){
  _checked_ptr_1<int> _ptr__1044(_1044 ? _1044->raw() : nullptr, _1044 ? _1044->size(0) : 0);
  return (__mosek_2fusion_2Model__variable_(_1043,_1044,_1045)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1046); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046) { return __mosek_2fusion_2Model__variable(_1046); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1046);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1047); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047) { return __mosek_2fusion_2Model__variable(_1047); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1047);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1048); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048) { return __mosek_2fusion_2Model__variable(_1048); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1048);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1049,_1050); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050) { return __mosek_2fusion_2Model__variable(_1049,_1050); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050){
  _checked_ptr_1<int> _ptr__1049(_1049 ? _1049->raw() : nullptr, _1049 ? _1049->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1049,_1050);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1051,_1052); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052) { return __mosek_2fusion_2Model__variable(_1051,_1052); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052){
  _checked_ptr_1<int> _ptr__1051(_1051 ? _1051->raw() : nullptr, _1051 ? _1051->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_1051,_1052);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1053,_1054); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054) { return __mosek_2fusion_2Model__variable(_1053,_1054); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054){
  _checked_ptr_1<int> _ptr__1053(_1053 ? _1053->raw() : nullptr, _1053 ? _1053->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1053,_1054);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1055) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1055); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1055) { return __mosek_2fusion_2Model__variable(_1055); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1055){
  _checked_ptr_1<int> _ptr__1055(_1055 ? _1055->raw() : nullptr, _1055 ? _1055->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1055,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1056,_1057); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057) { return __mosek_2fusion_2Model__variable(_1056,_1057); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1056)}),_1057);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1058,_1059); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059) { return __mosek_2fusion_2Model__variable(_1058,_1059); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1058)}),_1059);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1060,_1061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061) { return __mosek_2fusion_2Model__variable(_1060,_1061); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1060)}),_1061);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1062) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1062); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1062) { return __mosek_2fusion_2Model__variable(_1062); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1062){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1062)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1063,_1064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064) { return __mosek_2fusion_2Model__variable(_1063,_1064); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064){
  return __mosek_2fusion_2Model__variable_(_1063,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1064);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1065,_1066); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066) { return __mosek_2fusion_2Model__variable(_1065,_1066); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066){
  return __mosek_2fusion_2Model__ranged_variable(_1065,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1066);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1067,_1068); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068) { return __mosek_2fusion_2Model__variable(_1067,_1068); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068){
  return __mosek_2fusion_2Model__variable_(_1067,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1068);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1069,_1070,_1071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071) { return __mosek_2fusion_2Model__variable(_1069,_1070,_1071); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071){
  _checked_ptr_1<int> _ptr__1070(_1070 ? _1070->raw() : nullptr, _1070 ? _1070->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1069,_1070,_1071);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1072,_1073,_1074); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074) { return __mosek_2fusion_2Model__variable(_1072,_1073,_1074); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074){
  _checked_ptr_1<int> _ptr__1073(_1073 ? _1073->raw() : nullptr, _1073 ? _1073->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_1072,_1073,_1074);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1075,_1076,_1077); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077) { return __mosek_2fusion_2Model__variable(_1075,_1076,_1077); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077){
  _checked_ptr_1<int> _ptr__1076(_1076 ? _1076->raw() : nullptr, _1076 ? _1076->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1075,_1076,_1077);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1078,_1079); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079) { return __mosek_2fusion_2Model__variable(_1078,_1079); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079){
  _checked_ptr_1<int> _ptr__1079(_1079 ? _1079->raw() : nullptr, _1079 ? _1079->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1078,_1079,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1080,_1081,_1082); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082) { return __mosek_2fusion_2Model__variable(_1080,_1081,_1082); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082){
  return __mosek_2fusion_2Model__variable_(_1080,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1081)}),_1082);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1083,_1084,_1085); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085) { return __mosek_2fusion_2Model__variable(_1083,_1084,_1085); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085){
  return __mosek_2fusion_2Model__ranged_variable(_1083,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1084)}),_1085);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1086,_1087,_1088); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088) { return __mosek_2fusion_2Model__variable(_1086,_1087,_1088); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088){
  return __mosek_2fusion_2Model__variable_(_1086,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1087)}),_1088);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1089,int _1090) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1089,_1090); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1089,int _1090) { return __mosek_2fusion_2Model__variable(_1089,_1090); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1089,int _1090){
  return __mosek_2fusion_2Model__variable_(_1089,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1090)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1091) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1091); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1091) { return __mosek_2fusion_2Model__variable(_1091); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1091){
  return __mosek_2fusion_2Model__variable_(_1091,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
void mosek::fusion::p_Model::removeConstraintBlock(int _1092){
  int _1093 = natconmap->blocksize(_1092);
  std::shared_ptr< monty::ndarray< int,1 > > _1094 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1093)));
  _checked_ptr_1<int> _ptr__1094(_1094 ? _1094->raw() : nullptr,_1094 ? _1094->size(0) : 0);
  if ((((*natconmap_slackidx)(_ptr__1094[(int)0])) != (int)0))
  {
    {
      int _1095 = ((*natvarmap_idx)(((*natconmap_slackidx)(_ptr__1094[(int)0]))));
      removeVariableBlock((long long)(_1095));
    }
  }
  {}
  natconmap->get(_1092,_1094,(int)0);
  natconmap->free(_1092);
  int _8952 = (int)0;
  int _8953 = _1093;
  for (int _1096 = _8952; _1096 < _8953; ++_1096)
  {
    {
      ((*natconmap_blockid)(_ptr__1094[_1096])) = (-(int)1);
      ((*natconmap_slackidx)(_ptr__1094[_1096])) = (int)0;
      ((*natconmap_idx)(_ptr__1094[_1096])) = (-(int)1);
      if ((((*natconmap_coderowptrb)(_ptr__1094[_1096])) < ((*natconmap_coderowptre)(_ptr__1094[_1096]))))
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__1094[_1096])) - ((*natconmap_coderowptrb)(_ptr__1094[_1096])));
          ((*natconmap_coderowptrb)(_ptr__1094[_1096])) = ((*natconmap_coderowptre)(_ptr__1094[_1096]));
        }
      }
      {}
    }
  }
  task_con_putboundlist_fr(_1094);
  task_cleararowlist(_1094);
}
void mosek::fusion::p_Model::removeVariableBlock(long long _1097){
  if ((natconmap_numparameterized > (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("Cannot remove variables in parameterized model"));
    }
  }
  {}
  if ((_1097 < (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("PSD variables cannot be removed"));
    }
  }
  else
  {
    {
      int _1098 = (int)_1097;
      int _1099 = natvarmap->blocksize(_1098);
      std::shared_ptr< monty::ndarray< int,1 > > _1100 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1099)));
      _checked_ptr_1<int> _ptr__1100(_1100 ? _1100->raw() : nullptr,_1100 ? _1100->size(0) : 0);
      natvarmap->get(_1098,_1100,(int)0);
      natvarmap->free(_1098);
      if ((((*natvarmap_type)(_1098)) > (int)5))
      {
        {
          int _1101 = (((*natvarmap_type)(_1098)) - (int)6);
          int _1102 = natconemap->blocksize(_1101);
          std::shared_ptr< monty::ndarray< int,1 > > _1103 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1102)));
          _checked_ptr_1<int> _ptr__1103(_1103 ? _1103->raw() : nullptr,_1103 ? _1103->size(0) : 0);
          natconemap->get(_1101,_1103,(int)0);
          natconemap->free(_1101);
          ((*natconemap_dim)(_1101)) = (int)0;
          task_clear_cones(_1103);
        }
      }
      {}
      ((*natvarmap_type)(_1098)) = (int)0;
      int _8954 = (int)0;
      int _8955 = _1099;
      for (int _1104 = _8954; _1104 < _8955; ++_1104)
      {
        {
          ((*natvarmap_blockid)(_1104)) = (-(int)1);
          ((*natvarmap_idx)(_1104)) = (-(int)1);
        }
      }
      task_var_putboundlist_fr(_1100);
      task_clearacollist(_1100);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _1105,std::shared_ptr< monty::ndarray< int,1 > > _1106,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1107){
  _checked_ptr_1<int> _ptr__1106(_1106 ? _1106->raw() : nullptr, _1106 ? _1106->size(0) : 0);
  if ((((int)((_1105).size()) > (int)0) && hasVariable(_1105)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1105)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _8956;
  bool _8957 = (NULL != _1106.get());
  if (_8957)
  {
    _8956 = _1106;
  }
  else
  {
    _8956 = mosek::fusion::p_RangeDomain::_get_impl(_1107)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1108 = _8956;
  _checked_ptr_1<int> _ptr__1108(_1108 ? _1108->raw() : nullptr,_1108 ? _1108->size(0) : 0);
  if (((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1107)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_RangeDomain::_get_impl(_1107)->shape,_1108))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _1108.get()))
  {
    {
      _1108 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__1108.update(_1108 ? _1108->raw() : nullptr, _1108 ? _1108->size(0) : 0);
    }
  }
  {}
  int _1109 = (int)((_1108)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1110 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1109)));
  _checked_ptr_1<int> _ptr__1110(_1110 ? _1110->raw() : nullptr,_1110 ? _1110->size(0) : 0);
  if ((_1109 > (int)0))
  {
    {
      _ptr__1110[(_1109 - (int)1)] = (int)1;
      int _8958 = (int)1;
      int _8959 = _1109;
      for (int _1111 = _8958; _1111 < _8959; ++_1111)
      {
        {
          _ptr__1110[((_1109 - _1111) - (int)1)] = safe_mul( _ptr__1110[(_1109 - _1111)],_ptr__1108[(_1109 - _1111)] );
        }
      }
    }
  }
  {}
  int _1112 = (int)1;
  int _8960 = (int)0;
  int _8961 = (int)((_1108)->size(0));
  for (int _1113 = _8960; _1113 < _8961; ++_1113)
  {
    {
      _1112 *= _ptr__1108[_1113];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1114 = nullptr;
  _checked_ptr_1<long long> _ptr__1114(_1114 ? _1114->raw() : nullptr,_1114 ? _1114->size(0) : 0);
  if ((NULL != _1114.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(1)) != _1109))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _1114 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(0)))));
      _ptr__1114.update(_1114 ? _1114->raw() : nullptr, _1114 ? _1114->size(0) : 0);
      int _8962 = (int)0;
      int _8963 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(0));
      for (int _1115 = _8962; _1115 < _8963; ++_1115)
      {
        {
          int _8964 = (int)0;
          int _8965 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(1));
          for (int _1116 = _8964; _1116 < _8965; ++_1116)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)(_1115,_1116)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)(_1115,_1116)) >= _ptr__1108[_1116])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          long long _1117 = (int)0;
          int _8966 = (int)0;
          int _8967 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(1));
          for (int _1118 = _8966; _1118 < _8967; ++_1118)
          {
            {
              _1117 += safe_mul( _ptr__1110[_1118],((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)(_1115,_1118)) );
            }
          }
          _ptr__1114[_1115] = _1117;
        }
      }
    }
  }
  {}
  int _8968;
  bool _8969 = (NULL != _1114.get());
  if (_8969)
  {
    _8968 = (int)((_1114)->size(0));
  }
  else
  {
    _8968 = _1112;
  }
  int _1119 = _8968;
  std::shared_ptr< monty::ndarray< double,1 > > _1120;
  _checked_ptr_1<double> _ptr__1120(_1120 ? _1120->raw() : nullptr,_1120 ? _1120->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1121;
  _checked_ptr_1<double> _ptr__1121(_1121 ? _1121->raw() : nullptr,_1121 ? _1121->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1107)->scalable)
  {
    {
      std::vector<double> _8970;
      for (int _1122 = (int)0, _8971 = _1119; _1122 < _8971 ; ++_1122)
      {
        _8970.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->lb)((int)0)));
      }
      auto _8972 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8970.size()),_8970.begin(),_8970.end()));
      _1120 = _8972;
      _ptr__1120.update(_1120 ? _1120->raw() : nullptr, _1120 ? _1120->size(0) : 0);
      std::vector<double> _8973;
      for (int _1123 = (int)0, _8974 = _1119; _1123 < _8974 ; ++_1123)
      {
        _8973.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->ub)((int)0)));
      }
      auto _8975 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8973.size()),_8973.begin(),_8973.end()));
      _1121 = _8975;
      _ptr__1121.update(_1121 ? _1121->raw() : nullptr, _1121 ? _1121->size(0) : 0);
    }
  }
  else
  {
    {
      _1120 = mosek::fusion::p_RangeDomain::_get_impl(_1107)->lb;
      _ptr__1120.update(_1120 ? _1120->raw() : nullptr, _1120 ? _1120->size(0) : 0);
      _1121 = mosek::fusion::p_RangeDomain::_get_impl(_1107)->ub;
      _ptr__1121.update(_1121 ? _1121->raw() : nullptr, _1121 ? _1121->size(0) : 0);
    }
  }
  int _1124 = natvarmap_alloc(_1119);
  std::shared_ptr< monty::ndarray< int,1 > > _1125 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1124))));
  _checked_ptr_1<int> _ptr__1125(_1125 ? _1125->raw() : nullptr,_1125 ? _1125->size(0) : 0);
  natvarmap->get(_1124,_1125,(int)0);
  int _8976 = (int)0;
  int _8977 = _1119;
  for (int _1126 = _8976; _1126 < _8977; ++_1126)
  {
    {
      ((*natvarmap_idx)(_ptr__1125[_1126])) = _1124;
    }
  }
  task_var_putboundlist_ra(_1125,_1120,_1121);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _1127 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_1105,(long long)(_1124),_1108,_1114,_1125);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1107)->cardinal_flag)
  {
    {
      task_var_putintlist(_1125);
    }
  }
  {}
  ((*vars)(_1124)) = (_1127).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1105).size()) > (int)0))
  {
    {
      var_map->setItem(_1105,_1124);
    }
  }
  {}
  return _1127;
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1128,std::shared_ptr< monty::ndarray< int,1 > > _1129,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1130){
  _checked_ptr_1<int> _ptr__1129(_1129 ? _1129->raw() : nullptr, _1129 ? _1129->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _8978;
  bool _8979 = (NULL != _1129.get());
  if (_8979)
  {
    _8978 = _1129;
  }
  else
  {
    _8978 = mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1131 = _8978;
  _checked_ptr_1<int> _ptr__1131(_1131 ? _1131->raw() : nullptr,_1131 ? _1131->size(0) : 0);
  if ((((int)((_1128).size()) > (int)0) && hasVariable(_1128)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1128)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((NULL == _1131.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape"));
    }
  }
  else if(((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape.get()) && (!::mosek::fusion::p_Set::match(_1131,mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  else if((_1130->getAxis() >= (int)((_1131)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension"));
    }
  }
  {}
  int _8980;
  bool _8981 = (NULL != mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape.get());
  if (_8981)
  {
    _8980 = _1130->getAxis();
  }
  else
  {
    _8980 = ((int)((_1131)->size(0)) - (int)1);
  }
  int _1132 = _8980;
  int _1133 = _ptr__1131[_1132];
  int _1134 = (int)((_1131)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1135 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1134)));
  _checked_ptr_1<int> _ptr__1135(_1135 ? _1135->raw() : nullptr,_1135 ? _1135->size(0) : 0);
  _ptr__1135[(_1134 - (int)1)] = (int)1;
  int _8982 = (int)1;
  int _8983 = _1134;
  for (int _1136 = _8982; _1136 < _8983; ++_1136)
  {
    {
      _ptr__1135[((_1134 - _1136) - (int)1)] = safe_mul( _ptr__1135[(_1134 - _1136)],_ptr__1131[(_1134 - _1136)] );
    }
  }
  int _1137 = _ptr__1131[(int)0];
  int _8984 = (int)1;
  int _8985 = (int)((_1131)->size(0));
  for (int _1138 = _8984; _1138 < _8985; ++_1138)
  {
    {
      _1137 *= _ptr__1131[_1138];
    }
  }
  int _1139 = (int)1;
  int _8986 = (int)0;
  int _8987 = _1132;
  for (int _1140 = _8986; _1140 < _8987; ++_1140)
  {
    {
      _1139 *= _ptr__1131[_1140];
    }
  }
  int _1141 = (int)1;
  int _8988 = safe_add( _1132,(int)1 );
  int _8989 = _1134;
  for (int _1142 = _8988; _1142 < _8989; ++_1142)
  {
    {
      _1141 *= _ptr__1131[_1142];
    }
  }
  int _1143 = safe_mul( _1139,_1141 );
  if ((((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InQCone) && (_1133 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1133 < (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1133 != (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1133 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1133 != (int)3)) || ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1133 < (int)2))))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));
    }
  }
  {}
  int _1144 = natvarmap_alloc(_1137);
  int _1145 = natconemap_alloc(_1143);
  ((*natvarmap_type)(_1144)) = safe_add( _1145,(int)6 );
  std::shared_ptr< monty::ndarray< int,1 > > _1146 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1144))));
  _checked_ptr_1<int> _ptr__1146(_1146 ? _1146->raw() : nullptr,_1146 ? _1146->size(0) : 0);
  natvarmap->get(_1144,_1146,(int)0);
  int _8990 = (int)0;
  int _8991 = _1137;
  for (int _1147 = _8990; _1147 < _8991; ++_1147)
  {
    {
      ((*natvarmap_idx)(_ptr__1146[_1147])) = _1144;
    }
  }
  task_var_putboundlist_fr(_1146);
  if (mosek::fusion::p_ConeDomain::_get_impl(_1130)->int_flag)
  {
    {
      task_var_putintlist(_1146);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1148 = _1146;
  _checked_ptr_1<int> _ptr__1148(_1148 ? _1148->raw() : nullptr,_1148 ? _1148->size(0) : 0);
  if ((_1132 < ((int)((_1131)->size(0)) - (int)1)))
  {
    {
      _1148 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1146)->size(0)))));
      _ptr__1148.update(_1148 ? _1148->raw() : nullptr, _1148 ? _1148->size(0) : 0);
      int _1149 = (int)0;
      int _8992 = (int)0;
      int _8993 = _1139;
      for (int _1150 = _8992; _1150 < _8993; ++_1150)
      {
        {
          int _8994 = (int)0;
          int _8995 = _1141;
          for (int _1151 = _8994; _1151 < _8995; ++_1151)
          {
            {
              int _8996 = (int)0;
              int _8997 = _1133;
              for (int _1152 = _8996; _1152 < _8997; ++_1152)
              {
                {
                  _ptr__1148[_1149] = _ptr__1146[safe_add( safe_mul( safe_add( safe_mul( _1150,_1133 ),_1152 ),_1141 ),_1151 )];
                  ++ _1149;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1153 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1143)));
  _checked_ptr_1<int> _ptr__1153(_1153 ? _1153->raw() : nullptr,_1153 ? _1153->size(0) : 0);
  natconemap->get(_1145,_1153,(int)0);
  ((*natconemap_dim)(_1145)) = _1133;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1153,_1133,_1143,_1148);
    }
  }
  else
  {
    {
      if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
      {
        {
          task_put_rquadcones(_1153,_1133,_1143,_1148);
        }
      }
      else
      {
        {
          if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPExpCone))
          {
            {
              task_put_pexpcones(_1153,_1133,_1143,_1148);
            }
          }
          else
          {
            {
              if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPPowCone))
              {
                {
                  std::vector<double> _8998;
                  for (int _1154 = (int)0, _8999 = _1143; _1154 < _8999 ; ++_1154)
                  {
                    _8998.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1130)->alpha);
                  }
                  auto _9000 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8998.size()),_8998.begin(),_8998.end()));
                  task_put_ppowcones(_1153,_1133,_1143,_1148,_9000);
                }
              }
              else
              {
                {
                  if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDExpCone))
                  {
                    {
                      task_put_dexpcones(_1153,_1133,_1143,_1148);
                    }
                  }
                  else
                  {
                    {
                      if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDPowCone))
                      {
                        {
                          std::vector<double> _9001;
                          for (int _1155 = (int)0, _9002 = _1143; _1155 < _9002 ; ++_1155)
                          {
                            _9001.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1130)->alpha);
                          }
                          auto _9003 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9001.size()),_9001.begin(),_9001.end()));
                          task_put_dpowcones(_1153,_1133,_1143,_1148,_9003);
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _9004 = (int)0;
  int _9005 = (int)((_1153)->size(0));
  for (int _1156 = _9004; _1156 < _9005; ++_1156)
  {
    {
      task_cone_name(_ptr__1153[_1156],::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__1153[_1156])->toString());
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _1157 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_1128,_1144,_1131,_1146);
  ((*vars)(_1144)) = (_1157).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1128).size()) > (int)0))
  {
    {
      var_map->setItem(_1128,_1144);
    }
  }
  {}
  return (_1157).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1158,std::shared_ptr< monty::ndarray< int,1 > > _1159,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1160){
  _checked_ptr_1<int> _ptr__1159(_1159 ? _1159->raw() : nullptr, _1159 ? _1159->size(0) : 0);
  if ((((int)((_1158).size()) > (int)0) && hasVariable(_1158)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1158)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _9006;
  bool _9007 = (NULL != _1159.get());
  if (_9007)
  {
    _9006 = _1159;
  }
  else
  {
    _9006 = mosek::fusion::p_LinearDomain::_get_impl(_1160)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1161 = _9006;
  _checked_ptr_1<int> _ptr__1161(_1161 ? _1161->raw() : nullptr,_1161 ? _1161->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1160)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinearDomain::_get_impl(_1160)->shape,_1161))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _1161.get()))
  {
    {
      _1161 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__1161.update(_1161 ? _1161->raw() : nullptr, _1161 ? _1161->size(0) : 0);
    }
  }
  {}
  int _1162 = (int)((_1161)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1163 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1162)));
  _checked_ptr_1<int> _ptr__1163(_1163 ? _1163->raw() : nullptr,_1163 ? _1163->size(0) : 0);
  if ((_1162 > (int)0))
  {
    {
      _ptr__1163[(_1162 - (int)1)] = (int)1;
      int _9008 = (int)1;
      int _9009 = _1162;
      for (int _1164 = _9008; _1164 < _9009; ++_1164)
      {
        {
          _ptr__1163[((_1162 - _1164) - (int)1)] = safe_mul( _ptr__1163[(_1162 - _1164)],_ptr__1161[(_1162 - _1164)] );
        }
      }
    }
  }
  {}
  int _1165 = (int)1;
  int _9010 = (int)0;
  int _9011 = (int)((_1161)->size(0));
  for (int _1166 = _9010; _1166 < _9011; ++_1166)
  {
    {
      _1165 *= _ptr__1161[_1166];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1167 = nullptr;
  _checked_ptr_1<long long> _ptr__1167(_1167 ? _1167->raw() : nullptr,_1167 ? _1167->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1168 = nullptr;
  _checked_ptr_1<int> _ptr__1168(_1168 ? _1168->raw() : nullptr,_1168 ? _1168->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1160)->empty)
  {
    {
      _1167 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
      _ptr__1167.update(_1167 ? _1167->raw() : nullptr, _1167 ? _1167->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity)->size(1)) != _1162))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int _1169 = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity)->size(0));
      _1167 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1169)));
      _ptr__1167.update(_1167 ? _1167->raw() : nullptr, _1167 ? _1167->size(0) : 0);
      {
        bool _1170 = false;
        std::shared_ptr< monty::ndarray< int,2 > > _1171 = mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity;
        int _9012 = (int)0;
        int _9013 = _1169;
        for (int _1172 = _9012; _1172 < _9013; ++_1172)
        {
          {
            int _9014 = (int)0;
            int _9015 = (int)((_1171)->size(1));
            for (int _1173 = _9014; _1173 < _9015; ++_1173)
            {
              {
                _1170 = (_1170 || ((((*_1171)(_1172,_1173)) < (int)0) || (((*_1171)(_1172,_1173)) >= _ptr__1161[_1173])));
              }
            }
            if ((!_1170))
            {
              {
                long long _1174 = (int)0;
                int _9016 = (int)0;
                int _9017 = (int)((_1171)->size(1));
                for (int _1175 = _9016; _1175 < _9017; ++_1175)
                {
                  {
                    _1174 += safe_mul( _ptr__1163[_1175],((*_1171)(_1172,_1175)) );
                  }
                }
                _ptr__1167[_1172] = _1174;
              }
            }
            {}
          }
        }
        if (_1170)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int,2 > > _1176 = mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity;
      int _1177 = (int)0;
      int _9018 = (int)0;
      int _9019 = _1162;
      for (int _1178 = _9018; _1178 < _9019; ++_1178)
      {
        {
          if ((_1177 < _ptr__1161[_1178]))
          {
            {
              _1177 = _ptr__1161[_1178];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _1179 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1169)));
      _checked_ptr_1<int> _ptr__1179(_1179 ? _1179->raw() : nullptr,_1179 ? _1179->size(0) : 0);
      int _9020 = (int)0;
      int _9021 = _1169;
      for (int _1180 = _9020; _1180 < _9021; ++_1180)
      {
        {
          _ptr__1179[_1180] = _1180;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _1181 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1169)));
      _checked_ptr_1<int> _ptr__1181(_1181 ? _1181->raw() : nullptr,_1181 ? _1181->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1182 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _1177,(int)1 ))));
      _checked_ptr_1<int> _ptr__1182(_1182 ? _1182->raw() : nullptr,_1182 ? _1182->size(0) : 0);
      int _9022 = (int)0;
      int _9023 = _1162;
      for (int _1183 = _9022; _1183 < _9023; ++_1183)
      {
        {
          {
            int _1184 = ((_1162 - _1183) - (int)1);
            int _9024 = (int)0;
            int _9025 = safe_add( _ptr__1161[_1184],(int)1 );
            for (int _1185 = _9024; _1185 < _9025; ++_1185)
            {
              {
                _ptr__1182[_1185] = (int)0;
              }
            }
            int _9026 = (int)0;
            int _9027 = _1169;
            for (int _1186 = _9026; _1186 < _9027; ++_1186)
            {
              {
                ++ _ptr__1182[safe_add( ((*_1176)(_1186,_1184)),(int)1 )];
              }
            }
            int _9028 = (int)0;
            int _9029 = _ptr__1161[_1184];
            for (int _1187 = _9028; _1187 < _9029; ++_1187)
            {
              {
                _ptr__1182[safe_add( _1187,(int)1 )] += _ptr__1182[_1187];
              }
            }
            int _9030 = (int)0;
            int _9031 = _1169;
            for (int _1188 = _9030; _1188 < _9031; ++_1188)
            {
              {
                int _1189 = _ptr__1179[_1188];
                _ptr__1181[_ptr__1182[((*_1176)(_1189,_1184))]] = _1189;
                ++ _ptr__1182[((*_1176)(_1189,_1184))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _1190 = _1179;
          _checked_ptr_1<int> _ptr__1190(_1190 ? _1190->raw() : nullptr,_1190 ? _1190->size(0) : 0);
          _1179 = _1181;
          _ptr__1179.update(_1179 ? _1179->raw() : nullptr, _1179 ? _1179->size(0) : 0);
          _1181 = _1190;
          _ptr__1181.update(_1181 ? _1181->raw() : nullptr, _1181 ? _1181->size(0) : 0);
        }
      }
      int _9032 = (int)0;
      int _9033 = _1169;
      for (int _1191 = _9032; _1191 < _9033; ++_1191)
      {
        {
          int _1192 = _ptr__1179[_1191];
          long long _1193 = (int)0;
          int _9034 = (int)0;
          int _9035 = _1162;
          for (int _1194 = _9034; _1194 < _9035; ++_1194)
          {
            {
              _1193 += safe_mul( _ptr__1163[_1194],((*_1176)(_1192,_1194)) );
            }
          }
          _ptr__1167[_1191] = _1193;
        }
      }
    }
  }
  {}
  int _9036;
  bool _9037 = (NULL != _1167.get());
  if (_9037)
  {
    _9036 = (int)((_1167)->size(0));
  }
  else
  {
    _9036 = _1165;
  }
  int _1195 = _9036;
  std::shared_ptr< monty::ndarray< double,1 > > _1196 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1195)));
  _checked_ptr_1<double> _ptr__1196(_1196 ? _1196->raw() : nullptr,_1196 ? _1196->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd)->size(0)) == (int)1))
      {
        {
          int _9038 = (int)0;
          int _9039 = _1195;
          for (int _1197 = _9038; _1197 < _9039; ++_1197)
          {
            {
              _ptr__1196[_1197] = ((*mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd)->size(0)) == _1195))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd,(int)0,_1196,(int)0,_1195);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  int _1198 = natvarmap_alloc(_1195);
  std::shared_ptr< monty::ndarray< int,1 > > _1199 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1198))));
  _checked_ptr_1<int> _ptr__1199(_1199 ? _1199->raw() : nullptr,_1199 ? _1199->size(0) : 0);
  natvarmap->get(_1198,_1199,(int)0);
  int _9040 = (int)0;
  int _9041 = _1195;
  for (int _1200 = _9040; _1200 < _9041; ++_1200)
  {
    {
      ((*natvarmap_idx)(_ptr__1199[_1200])) = _1198;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1199);
      ((*natvarmap_type)(_1198)) = (int)1;
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1199,_1196);
      ((*natvarmap_type)(_1198)) = (int)3;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1199,_1196);
      ((*natvarmap_type)(_1198)) = (int)2;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1199,_1196);
      ((*natvarmap_type)(_1198)) = (int)5;
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1201 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_1158,(long long)(_1198),_1161,_1167,_1199);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1160)->cardinal_flag)
  {
    {
      task_var_putintlist(_1199);
    }
  }
  {}
  ((*vars)(_1198)) = (_1201).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1158).size()) > (int)0))
  {
    {
      var_map->setItem(_1158,_1198);
    }
  }
  {}
  return (_1201).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1202,std::shared_ptr< monty::ndarray< int,1 > > _1203,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1204){
  _checked_ptr_1<int> _ptr__1203(_1203 ? _1203->raw() : nullptr, _1203 ? _1203->size(0) : 0);
  if ((((int)((_1202).size()) > (int)0) && hasVariable(_1202)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1202)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _9042;
  bool _9043 = (NULL != _1203.get());
  if (_9043)
  {
    _9042 = _1203;
  }
  else
  {
    _9042 = mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1205 = _9042;
  _checked_ptr_1<int> _ptr__1205(_1205 ? _1205->raw() : nullptr,_1205 ? _1205->size(0) : 0);
  if ((NULL == _1205.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  else if(((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape,_1205))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  int _1206 = (int)((_1205)->size(0));
  int _9044;
  bool _9045 = (NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape.get());
  if (_9045)
  {
    _9044 = mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->conedim;
  }
  else
  {
    _9044 = (_1206 - (int)1);
  }
  int _1207 = _9044;
  if (((_1207 < (int)0) || (_1207 >= _1206)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone direction dimension"));
    }
  }
  {}
  int _1208 = _ptr__1205[_1207];
  int _1209 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1208 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1209,safe_add( _1209,(int)1 ) ) / (int)2) != _1208))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1210 = (int)1;
  int _1211 = _ptr__1205[_1207];
  int _1212 = (int)1;
  int _9046 = (int)0;
  int _9047 = _1207;
  for (int _1213 = _9046; _1213 < _9047; ++_1213)
  {
    {
      _1212 *= _ptr__1205[_1213];
    }
  }
  int _9048 = safe_add( _1207,(int)1 );
  int _9049 = _1206;
  for (int _1214 = _9048; _1214 < _9049; ++_1214)
  {
    {
      _1210 *= _ptr__1205[_1214];
    }
  }
  int _1215 = safe_mul( _1212,_1210 );
  int _1216 = safe_mul( _1215,_1208 );
  int _1217 = natbarvarmap_alloc(_1215,_1209);
  std::shared_ptr< monty::ndarray< int,1 > > _1218 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1215)));
  _checked_ptr_1<int> _ptr__1218(_1218 ? _1218->raw() : nullptr,_1218 ? _1218->size(0) : 0);
  natbarvarmap_get(_1217,_1218);
  std::shared_ptr< monty::ndarray< long long,1 > > _1219 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1215,_1211 ))));
  _checked_ptr_1<long long> _ptr__1219(_1219 ? _1219->raw() : nullptr,_1219 ? _1219->size(0) : 0);
  {
    int _1220 = (int)0;
    int _9050 = (int)0;
    int _9051 = _1212;
    for (int _1221 = _9050; _1221 < _9051; ++_1221)
    {
      {
        int _9052 = (int)0;
        int _9053 = _1208;
        for (int _1222 = _9052; _1222 < _9053; ++_1222)
        {
          {
            int _9054 = (int)0;
            int _9055 = _1210;
            for (int _1223 = _9054; _1223 < _9055; ++_1223)
            {
              {
                _ptr__1219[_1220] = safe_add( ((*natbarvar_ptr)(_ptr__1218[safe_add( safe_mul( _1221,_1210 ),_1223 )])),_1222 );
                ++ _1220;
              }
            }
          }
        }
      }
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1224 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::Model::t(_pubthis),_1202,_1217,_1205,_1207,_1219);
  ((*barvars)(_1217)) = (_1224).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1202).size()) > (int)0))
  {
    {
      var_map->setItem(_1202,(-safe_add( _1217,(int)1 )));
    }
  }
  {}
  return (_1224).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1225,std::shared_ptr< monty::ndarray< int,1 > > _1226,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1227){
  _checked_ptr_1<int> _ptr__1226(_1226 ? _1226->raw() : nullptr, _1226 ? _1226->size(0) : 0);
  if ((((int)((_1225).size()) > (int)0) && hasVariable(_1225)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1225)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1228 = _1226;
  _checked_ptr_1<int> _ptr__1228(_1228 ? _1228->raw() : nullptr,_1228 ? _1228->size(0) : 0);
  if ((NULL == _1228.get()))
  {
    {
      _1228 = mosek::fusion::p_PSDDomain::_get_impl(_1227)->shape;
      _ptr__1228.update(_1228 ? _1228->raw() : nullptr, _1228 ? _1228->size(0) : 0);
    }
  }
  {}
  if ((NULL == _1228.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  {}
  int _1229 = mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim1;
  int _1230 = mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim2;
  int _1231 = (int)((_1228)->size(0));
  int _1232 = _ptr__1228[_1229];
  if ((_1229 > _1230))
  {
    {
      int _1233 = _1229;
      _1229 = _1230;
      _1230 = _1233;
    }
  }
  {}
  if (((_1229 == _1230) || ((_1229 < (int)0) || (_1230 >= _1231))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1228[_1229] != _ptr__1228[_1230]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int _1234 = (int)1;
  int _9056 = (int)0;
  int _9057 = _1229;
  for (int _1235 = _9056; _1235 < _9057; ++_1235)
  {
    {
      _1234 *= _ptr__1228[_1235];
    }
  }
  int _9058 = safe_add( _1229,(int)1 );
  int _9059 = _1230;
  for (int _1236 = _9058; _1236 < _9059; ++_1236)
  {
    {
      _1234 *= _ptr__1228[_1236];
    }
  }
  int _9060 = safe_add( _1230,(int)1 );
  int _9061 = _1231;
  for (int _1237 = _9060; _1237 < _9061; ++_1237)
  {
    {
      _1234 *= _ptr__1228[_1237];
    }
  }
  int _1238 = (safe_mul( safe_mul( _1234,_1232 ),safe_add( _1232,(int)1 ) ) / (int)2);
  int _1239 = natbarvarmap_alloc(_1234,_1232);
  std::shared_ptr< monty::ndarray< long long,1 > > _1240 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1238)));
  _checked_ptr_1<long long> _ptr__1240(_1240 ? _1240->raw() : nullptr,_1240 ? _1240->size(0) : 0);
  natbarvar_get(_1239,_1240);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1241 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1225,_1239,_1228,mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim2,_1240);
  ((*barvars)(_1239)) = (_1241).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1225).size()) > (int)0))
  {
    {
      var_map->setItem(_1225,(-safe_add( _1239,(int)1 )));
    }
  }
  {}
  return (_1241).as<::mosek::fusion::SymmetricVariable>();
}
void mosek::fusion::p_Model::replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _1242,std::shared_ptr< monty::ndarray< int,1 > > _1243,int _1244,int _1245,int _1246,int _1247,int _1248){
  _checked_ptr_1<int> _ptr__1243(_1243 ? _1243->raw() : nullptr, _1243 ? _1243->size(0) : 0);
  int _1249 = (int)((_1243)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1250 = mosek::fusion::p_WorkStack::_get_impl(_1242)->i32;
  _checked_ptr_1<int> _ptr__1250(_1250 ? _1250->raw() : nullptr,_1250 ? _1250->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1251 = mosek::fusion::p_WorkStack::_get_impl(_1242)->i64;
  _checked_ptr_1<long long> _ptr__1251(_1251 ? _1251->raw() : nullptr,_1251 ? _1251->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1252 = mosek::fusion::p_WorkStack::_get_impl(_1242)->f64;
  _checked_ptr_1<double> _ptr__1252(_1252 ? _1252->raw() : nullptr,_1252 ? _1252->size(0) : 0);
  bool _1253 = true;
  int _1254 = (int)0;
  int _1255 = (int)0;
  int _9062 = (int)0;
  int _9063 = _1249;
  for (int _1256 = _9062; _1256 < _9063; ++_1256)
  {
    {
      int _9064 = _ptr__1250[safe_add( _1244,_1256 )];
      int _9065 = _ptr__1250[safe_add( safe_add( _1244,_1256 ),(int)1 )];
      for (int _1257 = _9064; _1257 < _9065; ++_1257)
      {
        {
          if ((((_ptr__1250[safe_add( safe_add( _1246,_1257 ),(int)1 )] - _ptr__1250[safe_add( _1246,_1257 )]) == (int)1) && ((_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1257 )] )] == 10) || (_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1257 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              ++ _1254;
              _1255 += (_ptr__1250[safe_add( safe_add( _1246,_1257 ),(int)1 )] - _ptr__1250[safe_add( _1246,_1257 )]);
            }
          }
        }
      }
    }
  }
  int _1258 = natconmap_codenztop;
  int _1259 = natconmap_codeatomtop;
  natconmap_codealloc(_1254,_1255);
  int _9066 = (int)0;
  int _9067 = _1249;
  for (int _1260 = _9066; _1260 < _9067; ++_1260)
  {
    {
      ((*natconmap_coderowptrb)(_ptr__1243[_1260])) = _1258;
      int _9068 = _ptr__1250[safe_add( _1244,_1260 )];
      int _9069 = _ptr__1250[safe_add( safe_add( _1244,_1260 ),(int)1 )];
      for (int _1261 = _9068; _1261 < _9069; ++_1261)
      {
        {
          if ((((_ptr__1250[safe_add( safe_add( _1246,_1261 ),(int)1 )] - _ptr__1250[safe_add( _1246,_1261 )]) == (int)1) && ((_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1261 )] )] == 10) || (_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1261 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              int _9070 = _ptr__1250[safe_add( _1246,_1261 )];
              int _9071 = _ptr__1250[safe_add( safe_add( _1246,_1261 ),(int)1 )];
              for (int _1262 = _9070; _1262 < _9071; ++_1262)
              {
                {
                  ((*natconmap_code)(_1259)) = _ptr__1250[safe_add( _1247,_1262 )];
                  ((*natconmap_cconst)(_1259)) = _ptr__1252[safe_add( _1248,_1262 )];
                  ++ _1259;
                }
              }
              ((*natconmap_codeptr)(safe_add( _1258,(int)1 ))) = _1259;
              ((*natconmap_codenidx)(_1258)) = _ptr__1251[safe_add( _1245,_1261 )];
              _1253 = (_ptr__1251[safe_add( _1245,_1261 )] >= (int)0);
              ++ _1258;
            }
          }
        }
      }
      ((*natconmap_coderowptre)(_ptr__1243[_1260])) = _1258;
    }
  }
  natconmap_numparameterized += _1254;
  if ((!_1253))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1263,monty::rc_ptr< ::mosek::fusion::Expression > _1264,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1265){
  if ((((int)((_1263).size()) > (int)0) && hasConstraint(_1263)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1263)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1265)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1266 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1264)).as<::mosek::fusion::Expression>());
  _1266->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1267 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1267(_1267 ? _1267->raw() : nullptr,_1267 ? _1267->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1268 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1268(_1268 ? _1268->raw() : nullptr,_1268 ? _1268->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1269 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1269(_1269 ? _1269->raw() : nullptr,_1269 ? _1269->size(0) : 0);
  int _1270 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1271 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1272 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1273 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int _1274 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1275 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1276 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1277 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1278 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1279 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1280 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1281 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1265)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1265)->shape)->size(0)) != _1270))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int _9072 = (int)0;
          int _9073 = _1270;
          for (int _1282 = _9072; _1282 < _9073; ++_1282)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1265)->shape)(_1282)) != _ptr__1267[safe_add( _1271,_1282 )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int _1283 = (int)1;
  int _9074 = (int)0;
  int _9075 = _1270;
  for (int _1284 = _9074; _1284 < _9075; ++_1284)
  {
    {
      _1283 *= _ptr__1267[safe_add( _1271,_1284 )];
    }
  }
  int _1285 = natconmap_alloc(_1283);
  std::shared_ptr< monty::ndarray< int,1 > > _1286 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1283)));
  _checked_ptr_1<int> _ptr__1286(_1286 ? _1286->raw() : nullptr,_1286 ? _1286->size(0) : 0);
  natconmap->get(_1285,_1286,(int)0);
  int _9076 = (int)0;
  int _9077 = _1283;
  for (int _1287 = _9076; _1287 < _9077; ++_1287)
  {
    {
      ((*natconmap_idx)(_ptr__1286[_1287])) = _1285;
      ((*natconmap_slackidx)(_ptr__1286[_1287])) = (int)0;
    }
  }
  ((*natconmap_type)(_1285)) = (int)4;
  putarows(_1286,rs,_1272,_1273,_1276,_1277,_1278,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1288 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1283)));
  _checked_ptr_1<double> _ptr__1288(_1288 ? _1288->raw() : nullptr,_1288 ? _1288->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1289 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1283)));
  _checked_ptr_1<double> _ptr__1289(_1289 ? _1289->raw() : nullptr,_1289 ? _1289->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1290 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->lb;
  _checked_ptr_1<double> _ptr__1290(_1290 ? _1290->raw() : nullptr,_1290 ? _1290->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1291 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->ub;
  _checked_ptr_1<double> _ptr__1291(_1291 ? _1291->raw() : nullptr,_1291 ? _1291->size(0) : 0);
  bool _1292 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->empty;
  bool _1293 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->scalable;
  std::shared_ptr< monty::ndarray< int,2 > > _1294 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->sparsity;
  {
    if (_1293)
    {
      {
        int _9078 = (int)0;
        int _9079 = _1283;
        for (int _1295 = _9078; _1295 < _9079; ++_1295)
        {
          {
            _ptr__1288[_1295] = _ptr__1290[(int)0];
            _ptr__1289[_1295] = _ptr__1291[(int)0];
          }
        }
      }
    }
    else if(_1292)
    {
      {
      }
    }
    else if((NULL != _1294.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1296 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1270)));
        _checked_ptr_1<int> _ptr__1296(_1296 ? _1296->raw() : nullptr,_1296 ? _1296->size(0) : 0);
        _ptr__1296[(_1270 - (int)1)] = (int)1;
        int _9080 = (int)1;
        int _9081 = _1270;
        for (int _1297 = _9080; _1297 < _9081; ++_1297)
        {
          {
            _ptr__1296[((_1270 - _1297) - (int)1)] = safe_mul( _ptr__1296[(_1270 - _1297)],_ptr__1267[(safe_add( _1271,_1270 ) - _1297)] );
          }
        }
        int _9082 = (int)0;
        int _9083 = (int)((_1290)->size(0));
        for (int _1298 = _9082; _1298 < _9083; ++_1298)
        {
          {
            int _1299 = (int)0;
            int _9084 = (int)0;
            int _9085 = _1270;
            for (int _1300 = _9084; _1300 < _9085; ++_1300)
            {
              {
                _1299 += safe_mul( _ptr__1296[_1300],((*_1294)(_1298,_1300)) );
              }
            }
            _ptr__1288[_1299] = _ptr__1290[_1298];
            _ptr__1289[_1299] = _ptr__1291[_1298];
          }
        }
      }
    }
    else
    {
      {
        int _9086 = (int)0;
        int _9087 = _1283;
        for (int _1301 = _9086; _1301 < _9087; ++_1301)
        {
          {
            _ptr__1288[_1301] = _ptr__1290[_1301];
            _ptr__1289[_1301] = _ptr__1291[_1301];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1286,_1288,_1289);
  if ((_1274 == (int)0))
  {
    {
      int _9088 = (int)0;
      int _9089 = _1272;
      for (int _1302 = _9088; _1302 < _9089; ++_1302)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1286[_1302])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1286[_1302])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1303 = true;
      int _1304 = (int)0;
      int _1305 = (int)0;
      int _9090 = (int)0;
      int _9091 = _1272;
      for (int _1306 = _9090; _1306 < _9091; ++_1306)
      {
        {
          int _9092 = _ptr__1267[safe_add( _1276,_1306 )];
          int _9093 = _ptr__1267[safe_add( safe_add( _1276,_1306 ),(int)1 )];
          for (int _1307 = _9092; _1307 < _9093; ++_1307)
          {
            {
              if ((((_ptr__1267[safe_add( safe_add( _1279,_1307 ),(int)1 )] - _ptr__1267[safe_add( _1279,_1307 )]) == (int)1) && ((_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1307 )] )] == 10) || (_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1307 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1304;
                  _1305 += (_ptr__1267[safe_add( safe_add( _1279,_1307 ),(int)1 )] - _ptr__1267[safe_add( _1279,_1307 )]);
                }
              }
            }
          }
        }
      }
      int _1308 = natconmap_codenztop;
      int _1309 = natconmap_codeatomtop;
      natconmap_codealloc(_1304,_1305);
      int _1310 = _1309;
      int _1311 = _1308;
      int _9094 = (int)0;
      int _9095 = _1272;
      for (int _1312 = _9094; _1312 < _9095; ++_1312)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1286[_1312])) = _1311;
          if ((_1304 > (int)0))
          {
            {
              int _9096 = _ptr__1267[safe_add( _1276,_1312 )];
              int _9097 = _ptr__1267[safe_add( safe_add( _1276,_1312 ),(int)1 )];
              for (int _1313 = _9096; _1313 < _9097; ++_1313)
              {
                {
                  if ((((_ptr__1267[safe_add( safe_add( _1279,_1313 ),(int)1 )] - _ptr__1267[safe_add( _1279,_1313 )]) == (int)1) && ((_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1313 )] )] == 10) || (_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1313 )] )] == 2))))
                  {
                    {
                    }
                  }
                  else
                  {
                    {
                      int _9098 = _ptr__1267[safe_add( _1279,_1313 )];
                      int _9099 = _ptr__1267[safe_add( safe_add( _1279,_1313 ),(int)1 )];
                      for (int _1314 = _9098; _1314 < _9099; ++_1314)
                      {
                        {
                          ((*natconmap_code)(_1310)) = _ptr__1267[safe_add( _1280,_1314 )];
                          ((*natconmap_cconst)(_1310)) = _ptr__1269[safe_add( _1281,_1314 )];
                          ++ _1310;
                        }
                      }
                      ((*natconmap_codeptr)(safe_add( _1311,(int)1 ))) = _1310;
                      ((*natconmap_codenidx)(_1311)) = _ptr__1268[safe_add( _1277,_1313 )];
                      _1303 = (_ptr__1268[safe_add( _1277,_1313 )] >= (int)0);
                      ++ _1311;
                    }
                  }
                }
              }
              natconmap_numparameterized += _1304;
            }
          }
          {}
          ((*natconmap_coderowptre)(_ptr__1286[_1312])) = _1311;
        }
      }
      if ((!_1303))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<int> _9100;
  for (int _1316 = (int)0, _9101 = _1270; _1316 < _9101 ; ++_1316)
  {
    _9100.push_back(_ptr__1267[safe_add( _1271,_1316 )]);
  }
  auto _9102 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9100.size()),_9100.begin(),_9100.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1315 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1263,_9102,_1286,_1285);
  ((*cons)(_1285)) = (_1315).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1263).size()) > (int)0))
  {
    {
      con_map->setItem(_1263,_1285);
    }
  }
  {}
  return _1315;
}
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int,1 > > _1317,monty::rc_ptr< ::mosek::fusion::WorkStack > _1318,int _1319,int _1320,int _1321,int _1322,int _1323,std::shared_ptr< monty::ndarray< int,1 > > _1324){
  _checked_ptr_1<int> _ptr__1317(_1317 ? _1317->raw() : nullptr, _1317 ? _1317->size(0) : 0);
  _checked_ptr_1<int> _ptr__1324(_1324 ? _1324->raw() : nullptr, _1324 ? _1324->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1325 = mosek::fusion::p_WorkStack::_get_impl(_1318)->i32;
  _checked_ptr_1<int> _ptr__1325(_1325 ? _1325->raw() : nullptr,_1325 ? _1325->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1326 = mosek::fusion::p_WorkStack::_get_impl(_1318)->i64;
  _checked_ptr_1<long long> _ptr__1326(_1326 ? _1326->raw() : nullptr,_1326 ? _1326->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1327 = mosek::fusion::p_WorkStack::_get_impl(_1318)->f64;
  _checked_ptr_1<double> _ptr__1327(_1327 ? _1327->raw() : nullptr,_1327 ? _1327->size(0) : 0);
  int _1328 = (int)0;
  int _1329 = (int)0;
  int _1330 = (int)0;
  int _9103 = (int)0;
  int _9104 = _1319;
  for (int _1331 = _9103; _1331 < _9104; ++_1331)
  {
    {
      int _1332 = _ptr__1325[safe_add( _1321,_1331 )];
      int _1333 = _ptr__1325[safe_add( safe_add( _1321,_1331 ),(int)1 )];
      int _1334 = _1332;
      while ( ((_1334 < _1333) && (_ptr__1326[safe_add( _1322,_1334 )] < (int)0)) )
      {
        {
          int _1335 = ((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1334 )],(int)1 ))));
          int _1336 = _1334;
          ++ _1334;
          while ( ((_1334 < _1333) && ((_ptr__1326[safe_add( _1322,_1334 )] < (int)0) && (_1335 == ((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1334 )],(int)1 ))))))) )
          {
            {
              ++ _1334;
            }
          }
          ++ _1329;
        }
      }
      _1330 += (_1334 - _1332);
      _1328 += (_1333 - _1334);
    }
  }
  _1328 += _1319;
  if ((NULL != _1324.get()))
  {
    {
      _1328 += _1319;
    }
  }
  {}
  int _1337 = (int)((_1317)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1338 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1337,(int)1 ))));
  _checked_ptr_1<long long> _ptr__1338(_1338 ? _1338->raw() : nullptr,_1338 ? _1338->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1339 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1328)));
  _checked_ptr_1<int> _ptr__1339(_1339 ? _1339->raw() : nullptr,_1339 ? _1339->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1340 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1328)));
  _checked_ptr_1<double> _ptr__1340(_1340 ? _1340->raw() : nullptr,_1340 ? _1340->size(0) : 0);
  if ((NULL != _1324.get()))
  {
    {
      int _1341 = (int)0;
      int _9105 = (int)0;
      int _9106 = _1319;
      for (int _1342 = _9105; _1342 < _9106; ++_1342)
      {
        {
          int _1343 = (int)0;
          int _9107 = _ptr__1325[safe_add( _1321,_1342 )];
          int _9108 = _ptr__1325[safe_add( safe_add( _1321,_1342 ),(int)1 )];
          for (int _1344 = _9107; _1344 < _9108; ++_1344)
          {
            {
              if ((_ptr__1326[safe_add( _1322,_1344 )] >= (int)0))
              {
                {
                  _ptr__1339[safe_add( _1341,_1343 )] = (int)_ptr__1326[safe_add( _1322,_1344 )];
                  _ptr__1340[safe_add( _1341,_1343 )] = _ptr__1327[safe_add( _1323,_1344 )];
                  ++ _1343;
                }
              }
              {}
            }
          }
          _ptr__1339[safe_add( _1341,_1343 )] = _ptr__1324[_1342];
          _ptr__1340[safe_add( _1341,_1343 )] = (-1.0);
          ++ _1343;
          _ptr__1338[safe_add( _1342,(int)1 )] = safe_add( _ptr__1338[_1342],_1343 );
          _1341 += _1343;
        }
      }
    }
  }
  else
  {
    {
      int _1345 = (int)0;
      int _9109 = (int)0;
      int _9110 = _1319;
      for (int _1346 = _9109; _1346 < _9110; ++_1346)
      {
        {
          int _1347 = (int)0;
          int _9111 = _ptr__1325[safe_add( _1321,_1346 )];
          int _9112 = _ptr__1325[safe_add( safe_add( _1321,_1346 ),(int)1 )];
          for (int _1348 = _9111; _1348 < _9112; ++_1348)
          {
            {
              if ((_ptr__1326[safe_add( _1322,_1348 )] >= (int)0))
              {
                {
                  _ptr__1339[safe_add( _1345,_1347 )] = (int)_ptr__1326[safe_add( _1322,_1348 )];
                  _ptr__1340[safe_add( _1345,_1347 )] = _ptr__1327[safe_add( _1323,_1348 )];
                  ++ _1347;
                }
              }
              {}
            }
          }
          _ptr__1338[safe_add( _1346,(int)1 )] = safe_add( _ptr__1338[_1346],_1347 );
          _1345 += _1347;
        }
      }
    }
  }
  task_putarowlist(_1317,_1338,_1339,_1340);
  if ((_1329 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1349 = _1317;
      _checked_ptr_1<int> _ptr__1349(_1349 ? _1349->raw() : nullptr,_1349 ? _1349->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1350 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1337,(int)1 ))));
      _checked_ptr_1<long long> _ptr__1350(_1350 ? _1350->raw() : nullptr,_1350 ? _1350->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1351 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1329)));
      _checked_ptr_1<int> _ptr__1351(_1351 ? _1351->raw() : nullptr,_1351 ? _1351->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1352 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1329)));
      _checked_ptr_1<int> _ptr__1352(_1352 ? _1352->raw() : nullptr,_1352 ? _1352->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1353 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1329)));
      _checked_ptr_1<long long> _ptr__1353(_1353 ? _1353->raw() : nullptr,_1353 ? _1353->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1354 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1330)));
      _checked_ptr_1<int> _ptr__1354(_1354 ? _1354->raw() : nullptr,_1354 ? _1354->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1355 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1330)));
      _checked_ptr_1<int> _ptr__1355(_1355 ? _1355->raw() : nullptr,_1355 ? _1355->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1356 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1330)));
      _checked_ptr_1<double> _ptr__1356(_1356 ? _1356->raw() : nullptr,_1356 ? _1356->size(0) : 0);
      int _1357 = (int)0;
      int _1358 = (int)0;
      int _9113 = (int)0;
      int _9114 = _1337;
      for (int _1359 = _9113; _1359 < _9114; ++_1359)
      {
        {
          int _1360 = _ptr__1325[safe_add( _1321,_1359 )];
          int _1361 = _ptr__1325[safe_add( safe_add( _1321,_1359 ),(int)1 )];
          while ( ((_1360 < _1361) && (_ptr__1326[safe_add( _1322,_1360 )] < (int)0)) )
          {
            {
              int _1362 = _1360;
              int _1363 = ((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 ))));
              while ( ((_1360 < _1361) && ((_ptr__1326[safe_add( _1322,_1360 )] < (int)0) && (((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 )))) == _1363))) )
              {
                {
                  _ptr__1354[_1358] = ((*natbarvar_i)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 ))));
                  _ptr__1355[_1358] = ((*natbarvar_j)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 ))));
                  if ((_ptr__1354[_1358] == _ptr__1355[_1358]))
                  {
                    {
                      _ptr__1356[_1358] = _ptr__1327[safe_add( _1323,_1360 )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1356[_1358] = (0.5 * _ptr__1327[safe_add( _1323,_1360 )]);
                    }
                  }
                  ++ _1358;
                  ++ _1360;
                }
              }
              _ptr__1351[_1357] = _1363;
              _ptr__1352[_1357] = ((*natbarvar_dim)(_1363));
              _ptr__1353[_1357] = (_1360 - _1362);
              ++ _1357;
            }
          }
          _1360 = _1361;
          _ptr__1350[safe_add( _1359,(int)1 )] = _1357;
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1364 = task_appendsymmatlist(_1352,_1353,_1354,_1355,_1356);
      _checked_ptr_1<long long> _ptr__1364(_1364 ? _1364->raw() : nullptr,_1364 ? _1364->size(0) : 0);
      task_putbararowlist(_1349,_1350,_1351,_1364);
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1365,monty::rc_ptr< ::mosek::fusion::Expression > _1366,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1367){
  std::shared_ptr< monty::ndarray< int,1 > > _1368 = _1366->getShape();
  _checked_ptr_1<int> _ptr__1368(_1368 ? _1368->raw() : nullptr,_1368 ? _1368->size(0) : 0);
  if (((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1367)->shape.get()) && (!::mosek::fusion::p_Set::match(_1368,mosek::fusion::p_PSDDomain::_get_impl(_1367)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  bool _1369;
  int _1370;
  int _1371;
  if (mosek::fusion::p_PSDDomain::_get_impl(_1367)->axisIsSet)
  {
    {
      _1369 = (mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim2);
      int _9115;
      bool _9116 = _1369;
      if (_9116)
      {
        _9115 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim1;
      }
      else
      {
        _9115 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim2;
      }
      _1371 = _9115;
      int _9117;
      bool _9118 = _1369;
      if (_9118)
      {
        _9117 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim2;
      }
      else
      {
        _9117 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim1;
      }
      _1370 = _9117;
    }
  }
  else
  {
    {
      _1369 = true;
      _1371 = ((int)((_1368)->size(0)) - (int)2);
      _1370 = ((int)((_1368)->size(0)) - (int)1);
    }
  }
  if (((_1370 >= (int)((_1368)->size(0))) || (_ptr__1368[_1371] != _ptr__1368[_1370])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Expression > _9119;
  bool _9120 = (mosek::fusion::p_PSDDomain::_get_impl(_1367)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_9120)
  {
    _9119 = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1371,_1370,_1366).as<::mosek::fusion::Expression>();
  }
  else
  {
    _9119 = _1366;
  }
  monty::rc_ptr< ::mosek::fusion::ExprOptimizeCode > _1372 = ::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1371,_1370,_9119)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1372->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1373 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1373(_1373 ? _1373->raw() : nullptr,_1373 ? _1373->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1374 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1374(_1374 ? _1374->raw() : nullptr,_1374 ? _1374->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1375 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1375(_1375 ? _1375->raw() : nullptr,_1375 ? _1375->size(0) : 0);
  int _1376 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1377 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1378 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1379 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1380 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1381 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1382 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1383 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1384 = mosek::fusion::p_WorkStack::_get_impl(rs)->sp_base;
  int _1385 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1386 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1387 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1388 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  int _1389 = _ptr__1368[_1370];
  int _1390 = (safe_mul( _1389,safe_add( _1389,(int)1 ) ) / (int)2);
  int _9121 = (int)0;
  int _9122 = _1376;
  for (int _1391 = _9121; _1391 < _9122; ++_1391)
  {
    {
      if (((_1391 != _1371) && (_1391 != _1370)))
      {
        {
          _1390 *= _ptr__1368[_1391];
        }
      }
      {}
    }
  }
  int _1392 = natconmap_alloc(_1390);
  std::shared_ptr< monty::ndarray< int,1 > > _1393 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1390)));
  _checked_ptr_1<int> _ptr__1393(_1393 ? _1393->raw() : nullptr,_1393 ? _1393->size(0) : 0);
  natconmap->get(_1392,_1393,(int)0);
  putarows(_1393,rs,_1377,_1378,_1382,_1383,_1385,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< int,1 > > _1394 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__1394(_1394 ? _1394->raw() : nullptr,_1394 ? _1394->size(0) : 0);
  int _9123 = (int)0;
  int _9124 = _1371;
  for (int _1395 = _9123; _1395 < _9124; ++_1395)
  {
    {
      _ptr__1394[(int)0] *= _ptr__1368[_1395];
    }
  }
  _ptr__1394[(int)1] = _ptr__1368[_1371];
  int _9125 = safe_add( _1371,(int)1 );
  int _9126 = _1370;
  for (int _1396 = _9125; _1396 < _9126; ++_1396)
  {
    {
      _ptr__1394[(int)2] *= _ptr__1368[_1396];
    }
  }
  _ptr__1394[(int)3] = _ptr__1368[_1370];
  int _9127 = safe_add( _1370,(int)1 );
  int _9128 = _1376;
  for (int _1397 = _9127; _1397 < _9128; ++_1397)
  {
    {
      _ptr__1394[(int)4] *= _ptr__1368[_1397];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1398 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__1398(_1398 ? _1398->raw() : nullptr,_1398 ? _1398->size(0) : 0);
  _ptr__1398[(int)4] = (int)1;
  int _9129 = (int)1;
  int _9130 = (int)5;
  for (int _1399 = _9129; _1399 < _9130; ++_1399)
  {
    {
      _ptr__1398[(((int)5 - _1399) - (int)1)] = safe_mul( _ptr__1398[((int)5 - _1399)],_ptr__1394[((int)5 - _1399)] );
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1400 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1390)));
  _checked_ptr_1<double> _ptr__1400(_1400 ? _1400->raw() : nullptr,_1400 ? _1400->size(0) : 0);
  if ((!_1379))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Unexpected case!"));
    }
  }
  else
  {
    {
      int _9131 = (int)0;
      int _9132 = _1377;
      for (int _1401 = _9131; _1401 < _9132; ++_1401)
      {
        {
          _ptr__1400[_1401] = 0.0;
        }
      }
    }
  }
  task_con_putboundlist_fx(_1393,_1400);
  int _1402 = safe_mul( safe_mul( _ptr__1394[(int)0],_ptr__1394[(int)2] ),_ptr__1394[(int)4] );
  int _1403 = _ptr__1394[(int)1];
  int _1404 = natbarvarmap_alloc(_1402,_1403);
  std::shared_ptr< monty::ndarray< int,1 > > _1405 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1402)));
  _checked_ptr_1<int> _ptr__1405(_1405 ? _1405->raw() : nullptr,_1405 ? _1405->size(0) : 0);
  natbarvarmap_get(_1404,_1405);
  std::vector<int> _9133;
  for (int _1407 = (int)0, _9134 = (safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2); _1407 < _9134 ; ++_1407)
  {
    _9133.push_back(_1403);
  }
  auto _9135 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9133.size()),_9133.begin(),_9133.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1406 = _9135;
  _checked_ptr_1<int> _ptr__1406(_1406 ? _1406->raw() : nullptr,_1406 ? _1406->size(0) : 0);
  std::vector<long long> _9136;
  for (int _1409 = (int)0, _9137 = (safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2); _1409 < _9137 ; ++_1409)
  {
    _9136.push_back((int)1);
  }
  auto _9138 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9136.size()),_9136.begin(),_9136.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1408 = _9138;
  _checked_ptr_1<long long> _ptr__1408(_1408 ? _1408->raw() : nullptr,_1408 ? _1408->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1410 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1410(_1410 ? _1410->raw() : nullptr,_1410 ? _1410->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1411 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1411(_1411 ? _1411->raw() : nullptr,_1411 ? _1411->size(0) : 0);
  std::vector<double> _9139;
  for (int _1413 = (int)0, _9140 = (safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2); _1413 < _9140 ; ++_1413)
  {
    _9139.push_back((-0.5));
  }
  auto _9141 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9139.size()),_9139.begin(),_9139.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1412 = _9141;
  _checked_ptr_1<double> _ptr__1412(_1412 ? _1412->raw() : nullptr,_1412 ? _1412->size(0) : 0);
  int _9142 = (int)1;
  int _9143 = safe_add( _1403,(int)1 );
  for (int _1414 = _9142; _1414 < _9143; ++_1414)
  {
    {
      _ptr__1412[((safe_mul( _1414,safe_add( _1414,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  {
    int _1415 = (int)0;
    int _9144 = (int)0;
    int _9145 = _1403;
    for (int _1416 = _9144; _1416 < _9145; ++_1416)
    {
      {
        int _9146 = (int)0;
        int _9147 = safe_add( _1416,(int)1 );
        for (int _1417 = _9146; _1417 < _9147; ++_1417)
        {
          {
            _ptr__1410[_1415] = _1416;
            _ptr__1411[_1415] = _1417;
            ++ _1415;
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1418 = task_appendsymmatlist(_1406,_1408,_1410,_1411,_1412);
  _checked_ptr_1<long long> _ptr__1418(_1418 ? _1418->raw() : nullptr,_1418 ? _1418->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1419 = _1393;
  _checked_ptr_1<int> _ptr__1419(_1419 ? _1419->raw() : nullptr,_1419 ? _1419->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1420 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1390)));
  _checked_ptr_1<int> _ptr__1420(_1420 ? _1420->raw() : nullptr,_1420 ? _1420->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1421 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1390)));
  _checked_ptr_1<long long> _ptr__1421(_1421 ? _1421->raw() : nullptr,_1421 ? _1421->size(0) : 0);
  {
    int _1422 = (int)0;
    if (_1369)
    {
      {
        int _9148 = (int)0;
        int _9149 = _ptr__1394[(int)0];
        for (int _1423 = _9148; _1423 < _9149; ++_1423)
        {
          {
            int _9150 = (int)0;
            int _9151 = _ptr__1394[(int)1];
            for (int _1424 = _9150; _1424 < _9151; ++_1424)
            {
              {
                int _9152 = (int)0;
                int _9153 = _ptr__1394[(int)2];
                for (int _1425 = _9152; _1425 < _9153; ++_1425)
                {
                  {
                    int _9154 = (int)0;
                    int _9155 = safe_add( _1424,(int)1 );
                    for (int _1426 = _9154; _1426 < _9155; ++_1426)
                    {
                      {
                        int _9156 = (int)0;
                        int _9157 = _ptr__1394[(int)4];
                        for (int _1427 = _9156; _1427 < _9157; ++_1427)
                        {
                          {
                            _ptr__1421[_1422] = _ptr__1418[safe_add( (safe_mul( _1424,safe_add( _1424,(int)1 ) ) / (int)2),_1426 )];
                            _ptr__1420[_1422] = _ptr__1405[safe_add( safe_mul( safe_add( safe_mul( _1423,_ptr__1394[(int)2] ),_1425 ),_ptr__1394[(int)4] ),_1427 )];
                            ((*natconmap_slackidx)(_ptr__1393[_1422])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1420[_1422])),(safe_mul( _1424,safe_add( _1424,(int)1 ) ) / (int)2) ),_1426 )) - (int)1);
                            ++ _1422;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _9158 = (int)0;
        int _9159 = _ptr__1394[(int)0];
        for (int _1428 = _9158; _1428 < _9159; ++_1428)
        {
          {
            int _9160 = (int)0;
            int _9161 = _ptr__1394[(int)1];
            for (int _1429 = _9160; _1429 < _9161; ++_1429)
            {
              {
                int _9162 = (int)0;
                int _9163 = _ptr__1394[(int)2];
                for (int _1430 = _9162; _1430 < _9163; ++_1430)
                {
                  {
                    int _9164 = _1429;
                    int _9165 = _ptr__1394[(int)1];
                    for (int _1431 = _9164; _1431 < _9165; ++_1431)
                    {
                      {
                        int _9166 = (int)0;
                        int _9167 = _ptr__1394[(int)4];
                        for (int _1432 = _9166; _1432 < _9167; ++_1432)
                        {
                          {
                            _ptr__1421[_1422] = _ptr__1418[safe_add( (safe_mul( _1431,safe_add( _1431,(int)1 ) ) / (int)2),_1429 )];
                            _ptr__1420[_1422] = _ptr__1405[safe_add( safe_mul( safe_add( safe_mul( _1428,_ptr__1394[(int)2] ),_1430 ),_ptr__1394[(int)4] ),_1432 )];
                            ((*natconmap_slackidx)(_ptr__1393[_1422])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1420[_1422])),(safe_mul( _1431,safe_add( _1431,(int)1 ) ) / (int)2) ),_1429 )) - (int)1);
                            ++ _1422;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  task_putbaraijlist(_1419,_1420,_1421);
  ((*natconmap_type)(_1392)) = (-safe_add( _1404,(int)1 ));
  if ((_1380 == (int)0))
  {
    {
      int _9168 = (int)0;
      int _9169 = _1377;
      for (int _1433 = _9168; _1433 < _9169; ++_1433)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1393[_1433])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1393[_1433])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1434 = true;
      int _1435 = (int)0;
      int _1436 = (int)0;
      int _9170 = (int)0;
      int _9171 = _1377;
      for (int _1437 = _9170; _1437 < _9171; ++_1437)
      {
        {
          int _9172 = _ptr__1373[safe_add( _1382,_1437 )];
          int _9173 = _ptr__1373[safe_add( safe_add( _1382,_1437 ),(int)1 )];
          for (int _1438 = _9172; _1438 < _9173; ++_1438)
          {
            {
              if ((((_ptr__1373[safe_add( safe_add( _1386,_1438 ),(int)1 )] - _ptr__1373[safe_add( _1386,_1438 )]) == (int)1) && ((_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1438 )] )] == 10) || (_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1438 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1435;
                  _1436 += (_ptr__1373[safe_add( safe_add( _1386,_1438 ),(int)1 )] - _ptr__1373[safe_add( _1386,_1438 )]);
                }
              }
            }
          }
        }
      }
      int _1439 = natconmap_codenztop;
      int _1440 = natconmap_codeatomtop;
      natconmap_codealloc(_1435,_1436);
      int _1441 = _1440;
      int _1442 = _1439;
      int _9174 = (int)0;
      int _9175 = _1377;
      for (int _1443 = _9174; _1443 < _9175; ++_1443)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1393[_1443])) = _1442;
          int _9176 = _ptr__1373[safe_add( _1382,_1443 )];
          int _9177 = _ptr__1373[safe_add( safe_add( _1382,_1443 ),(int)1 )];
          for (int _1444 = _9176; _1444 < _9177; ++_1444)
          {
            {
              if ((((_ptr__1373[safe_add( safe_add( _1386,_1444 ),(int)1 )] - _ptr__1373[safe_add( _1386,_1444 )]) == (int)1) && ((_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1444 )] )] == 10) || (_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1444 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9178 = _ptr__1373[safe_add( _1386,_1444 )];
                  int _9179 = _ptr__1373[safe_add( safe_add( _1386,_1444 ),(int)1 )];
                  for (int _1445 = _9178; _1445 < _9179; ++_1445)
                  {
                    {
                      ((*natconmap_code)(_1441)) = _ptr__1373[safe_add( _1387,_1445 )];
                      ((*natconmap_cconst)(_1441)) = _ptr__1375[safe_add( _1388,_1445 )];
                      ++ _1441;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1442,(int)1 ))) = _1441;
                  ((*natconmap_codenidx)(_1442)) = _ptr__1374[safe_add( _1383,_1444 )];
                  _1434 = (_ptr__1374[safe_add( _1383,_1444 )] >= (int)0);
                  ++ _1442;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1393[_1443])) = _1442;
        }
      }
      natconmap_numparameterized += _1435;
      if ((!_1434))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<long long> _9180;
  for (int _1447 = (int)0, _9181 = _1390; _1447 < _9181 ; ++_1447)
  {
    _9180.push_back(((*natconmap_slackidx)(_ptr__1393[_1447])));
  }
  auto _9182 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9180.size()),_9180.begin(),_9180.end()));
  monty::rc_ptr< ::mosek::fusion::PSDConstraint > _1446 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::Model::t(_pubthis),_1365,_1392,_1368,_1371,_1370,_9182,_1393);
  ((*cons)(_1392)) = (_1446).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1365).size()) > (int)0))
  {
    {
      con_map->setItem(_1365,_1392);
    }
  }
  {}
  return (_1446).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1448,monty::rc_ptr< ::mosek::fusion::Expression > _1449,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1450){
  if ((((int)((_1448).size()) > (int)0) && hasConstraint(_1448)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1448)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1448).size()) > (int)0) && hasConstraint(_1448)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1448)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1451 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1449)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1451->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1452 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1452(_1452 ? _1452->raw() : nullptr,_1452 ? _1452->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1453 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1453(_1453 ? _1453->raw() : nullptr,_1453 ? _1453->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1454 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1454(_1454 ? _1454->raw() : nullptr,_1454 ? _1454->size(0) : 0);
  int _1455 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1456 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1457 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1458 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1459 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1460 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1461 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1462 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1463 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1464 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1465 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1466 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9183;
  for (int _1468 = (int)0, _9184 = _1455; _1468 < _9184 ; ++_1468)
  {
    _9183.push_back(_ptr__1452[safe_add( _1460,_1468 )]);
  }
  auto _9185 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9183.size()),_9183.begin(),_9183.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1467 = _9185;
  _checked_ptr_1<int> _ptr__1467(_1467 ? _1467->raw() : nullptr,_1467 ? _1467->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->shape.get()) && (!::mosek::fusion::p_Set::match(_1467,mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1469 = (int)1;
  int _9186 = (int)0;
  int _9187 = _1455;
  for (int _1470 = _9186; _1470 < _9187; ++_1470)
  {
    {
      _1469 *= _ptr__1467[_1470];
    }
  }
  int _9188;
  bool _9189 = (NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->shape.get());
  if (_9189)
  {
    _9188 = mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->conedim;
  }
  else
  {
    _9188 = ((int)((_1467)->size(0)) - (int)1);
  }
  int _1471 = _9188;
  int _1472 = _ptr__1467[_1471];
  int _1473 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1472 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1473,safe_add( _1473,(int)1 ) ) / (int)2) != _1472))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1474 = (int)1;
  int _9190 = (int)0;
  int _9191 = _1471;
  for (int _1475 = _9190; _1475 < _9191; ++_1475)
  {
    {
      _1474 *= _ptr__1467[_1475];
    }
  }
  int _1476 = (int)1;
  int _9192 = safe_add( _1471,(int)1 );
  int _9193 = _1455;
  for (int _1477 = _9192; _1477 < _9193; ++_1477)
  {
    {
      _1476 *= _ptr__1467[_1477];
    }
  }
  int _1478 = safe_mul( _1474,_1476 );
  int _1479 = natconmap_alloc(_1469);
  std::shared_ptr< monty::ndarray< int,1 > > _1480 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1469)));
  _checked_ptr_1<int> _ptr__1480(_1480 ? _1480->raw() : nullptr,_1480 ? _1480->size(0) : 0);
  natconmap->get(_1479,_1480,(int)0);
  putarows(_1480,rs,_1456,_1457,_1461,_1462,_1463,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  int _1481 = natbarvarmap_alloc(_1478,_1473);
  std::shared_ptr< monty::ndarray< int,1 > > _1482 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1478)));
  _checked_ptr_1<int> _ptr__1482(_1482 ? _1482->raw() : nullptr,_1482 ? _1482->size(0) : 0);
  natbarvarmap_get(_1481,_1482);
  ((*barvars)(_1481)) = nullptr;
  int _1483 = safe_mul( safe_mul( _1472,_1474 ),_1476 );
  std::vector<int> _9194;
  for (int _1485 = (int)0, _9195 = _1483; _1485 < _9195 ; ++_1485)
  {
    _9194.push_back(_1473);
  }
  auto _9196 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9194.size()),_9194.begin(),_9194.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1484 = _9196;
  _checked_ptr_1<int> _ptr__1484(_1484 ? _1484->raw() : nullptr,_1484 ? _1484->size(0) : 0);
  std::vector<long long> _9197;
  for (int _1487 = (int)0, _9198 = _1483; _1487 < _9198 ; ++_1487)
  {
    _9197.push_back((int)1);
  }
  auto _9199 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9197.size()),_9197.begin(),_9197.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1486 = _9199;
  _checked_ptr_1<long long> _ptr__1486(_1486 ? _1486->raw() : nullptr,_1486 ? _1486->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1488 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1483)));
  _checked_ptr_1<double> _ptr__1488(_1488 ? _1488->raw() : nullptr,_1488 ? _1488->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1489 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1483)));
  _checked_ptr_1<int> _ptr__1489(_1489 ? _1489->raw() : nullptr,_1489 ? _1489->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1490 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1483)));
  _checked_ptr_1<int> _ptr__1490(_1490 ? _1490->raw() : nullptr,_1490 ? _1490->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1491 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1483)));
  _checked_ptr_1<int> _ptr__1491(_1491 ? _1491->raw() : nullptr,_1491 ? _1491->size(0) : 0);
  {
    int _1492 = (int)0;
    int _9200 = (int)0;
    int _9201 = _1474;
    for (int _1493 = _9200; _1493 < _9201; ++_1493)
    {
      {
        int _1494 = (int)0;
        int _9202 = (int)0;
        int _9203 = _1473;
        for (int _1495 = _9202; _1495 < _9203; ++_1495)
        {
          {
            int _9204 = _1495;
            int _9205 = _1473;
            for (int _1496 = _9204; _1496 < _9205; ++_1496)
            {
              {
                int _9206 = (int)0;
                int _9207 = _1476;
                for (int _1497 = _9206; _1497 < _9207; ++_1497)
                {
                  {
                    _ptr__1491[_1492] = _ptr__1482[safe_add( safe_mul( _1493,_1476 ),_1497 )];
                    _ptr__1489[_1492] = _1496;
                    _ptr__1490[_1492] = _1495;
                    double _9208;
                    bool _9209 = (_1496 == _1495);
                    if (_9209)
                    {
                      _9208 = (-1.0);
                    }
                    else
                    {
                      _9208 = (-0.5);
                    }
                    _ptr__1488[_1492] = _9208;
                    ((*natconmap_slackidx)(_ptr__1480[_1492])) = ((-safe_add( ((*natbarvar_ptr)(_ptr__1482[safe_add( safe_mul( _1493,_1476 ),_1497 )])),_1494 )) - (int)1);
                    ++ _1492;
                  }
                }
                ++ _1494;
              }
            }
          }
        }
      }
    }
    ((*natconmap_type)(_1479)) = (-safe_add( _1481,(int)1 ));
    int _9210 = (int)0;
    int _9211 = _1469;
    for (int _1498 = _9210; _1498 < _9211; ++_1498)
    {
      {
        ((*natconmap_blockid)(_ptr__1480[_1498])) = _1479;
        ((*natconmap_idx)(_ptr__1480[_1498])) = _1498;
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1499 = task_appendsymmatlist(_1484,_1486,_1489,_1490,_1488);
  _checked_ptr_1<long long> _ptr__1499(_1499 ? _1499->raw() : nullptr,_1499 ? _1499->size(0) : 0);
  task_putbaraijlist(_1480,_1491,_1499);
  task_con_putboundlist_fx(_1480,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1469))));
  if ((_1459 == (int)0))
  {
    {
      int _9212 = (int)0;
      int _9213 = _1456;
      for (int _1500 = _9212; _1500 < _9213; ++_1500)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1480[_1500])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1480[_1500])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1501 = true;
      int _1502 = (int)0;
      int _1503 = (int)0;
      int _9214 = (int)0;
      int _9215 = _1456;
      for (int _1504 = _9214; _1504 < _9215; ++_1504)
      {
        {
          int _9216 = _ptr__1452[safe_add( _1461,_1504 )];
          int _9217 = _ptr__1452[safe_add( safe_add( _1461,_1504 ),(int)1 )];
          for (int _1505 = _9216; _1505 < _9217; ++_1505)
          {
            {
              if ((((_ptr__1452[safe_add( safe_add( _1464,_1505 ),(int)1 )] - _ptr__1452[safe_add( _1464,_1505 )]) == (int)1) && ((_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1505 )] )] == 10) || (_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1505 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1502;
                  _1503 += (_ptr__1452[safe_add( safe_add( _1464,_1505 ),(int)1 )] - _ptr__1452[safe_add( _1464,_1505 )]);
                }
              }
            }
          }
        }
      }
      int _1506 = natconmap_codenztop;
      int _1507 = natconmap_codeatomtop;
      natconmap_codealloc(_1502,_1503);
      int _1508 = _1507;
      int _1509 = _1506;
      int _9218 = (int)0;
      int _9219 = _1456;
      for (int _1510 = _9218; _1510 < _9219; ++_1510)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1480[_1510])) = _1509;
          int _9220 = _ptr__1452[safe_add( _1461,_1510 )];
          int _9221 = _ptr__1452[safe_add( safe_add( _1461,_1510 ),(int)1 )];
          for (int _1511 = _9220; _1511 < _9221; ++_1511)
          {
            {
              if ((((_ptr__1452[safe_add( safe_add( _1464,_1511 ),(int)1 )] - _ptr__1452[safe_add( _1464,_1511 )]) == (int)1) && ((_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1511 )] )] == 10) || (_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1511 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9222 = _ptr__1452[safe_add( _1464,_1511 )];
                  int _9223 = _ptr__1452[safe_add( safe_add( _1464,_1511 ),(int)1 )];
                  for (int _1512 = _9222; _1512 < _9223; ++_1512)
                  {
                    {
                      ((*natconmap_code)(_1508)) = _ptr__1452[safe_add( _1465,_1512 )];
                      ((*natconmap_cconst)(_1508)) = _ptr__1454[safe_add( _1466,_1512 )];
                      ++ _1508;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1509,(int)1 ))) = _1508;
                  ((*natconmap_codenidx)(_1509)) = _ptr__1453[safe_add( _1462,_1511 )];
                  _1501 = (_ptr__1453[safe_add( _1462,_1511 )] >= (int)0);
                  ++ _1509;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1480[_1510])) = _1509;
        }
      }
      natconmap_numparameterized += _1502;
      if ((!_1501))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<long long> _9224;
  for (int _1514 = (int)0, _9225 = _1469; _1514 < _9225 ; ++_1514)
  {
    _9224.push_back(((*natconmap_slackidx)(_ptr__1480[_1514])));
  }
  auto _9226 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9224.size()),_9224.begin(),_9224.end()));
  monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _1513 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::Model::t(_pubthis),_1448,_1479,_1467,_1471,_1480,_9226);
  ((*cons)(_1479)) = (_1513).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1448).size()) > (int)0))
  {
    {
      con_map->setItem(_1448,_1479);
    }
  }
  {}
  return (_1513).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1515,monty::rc_ptr< ::mosek::fusion::Expression > _1516,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1517){
  if ((((int)((_1515).size()) > (int)0) && hasConstraint(_1515)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1515)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1515).size()) > (int)0) && hasConstraint(_1515)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1515)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1517)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1518 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1516)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1518->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1519 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1519(_1519 ? _1519->raw() : nullptr,_1519 ? _1519->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1520 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1520(_1520 ? _1520->raw() : nullptr,_1520 ? _1520->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1521 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1521(_1521 ? _1521->raw() : nullptr,_1521 ? _1521->size(0) : 0);
  int _1522 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1523 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1524 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1525 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int _1526 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1527 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1528 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1529 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1530 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1531 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1532 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1533 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9227;
  for (int _1535 = (int)0, _9228 = _1522; _1535 < _9228 ; ++_1535)
  {
    _9227.push_back(_ptr__1519[safe_add( _1523,_1535 )]);
  }
  auto _9229 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9227.size()),_9227.begin(),_9227.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1534 = _9229;
  _checked_ptr_1<int> _ptr__1534(_1534 ? _1534->raw() : nullptr,_1534 ? _1534->size(0) : 0);
  if (((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1517)->shape.get()) && (!::mosek::fusion::p_Set::match(_1534,mosek::fusion::p_ConeDomain::_get_impl(_1517)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _9230;
  bool _9231 = _1517->axisIsSet();
  if (_9231)
  {
    _9230 = _1517->getAxis();
  }
  else
  {
    _9230 = (_1522 - (int)1);
  }
  int _1536 = _9230;
  int _1537 = _ptr__1534[_1536];
  int _1538 = (int)1;
  int _1539 = (int)1;
  int _1540 = (int)1;
  {
    int _9232 = (int)0;
    int _9233 = _1522;
    for (int _1541 = _9232; _1541 < _9233; ++_1541)
    {
      {
        _1540 *= _ptr__1534[_1541];
      }
    }
    int _9234 = (int)0;
    int _9235 = _1536;
    for (int _1542 = _9234; _1542 < _9235; ++_1542)
    {
      {
        _1539 *= _ptr__1534[_1542];
      }
    }
    int _9236 = safe_add( _1536,(int)1 );
    int _9237 = _1522;
    for (int _1543 = _9236; _1543 < _9237; ++_1543)
    {
      {
        _1538 *= _ptr__1534[_1543];
      }
    }
  }
  int _1544 = safe_mul( _1539,_1538 );
  if (((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InQCone) && (_1537 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1537 < (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1537 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1537 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1537 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1537 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
    }
  }
  {}
  int _1545 = natvarmap_alloc(_1540);
  std::shared_ptr< monty::ndarray< int,1 > > _1546 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1540)));
  _checked_ptr_1<int> _ptr__1546(_1546 ? _1546->raw() : nullptr,_1546 ? _1546->size(0) : 0);
  natvarmap->get(_1545,_1546,(int)0);
  int _1547 = natconemap_alloc(_1544);
  int _9238 = (int)0;
  int _9239 = _1540;
  for (int _1548 = _9238; _1548 < _9239; ++_1548)
  {
    {
      ((*natvarmap_idx)(_ptr__1546[_1548])) = _1545;
    }
  }
  task_var_putboundlist_fr(_1546);
  std::shared_ptr< monty::ndarray< int,1 > > _9240;
  bool _9241 = (_1536 < ((int)((_1534)->size(0)) - (int)1));
  if (_9241)
  {
    _9240 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1546)->size(0)))));
  }
  else
  {
    _9240 = _1546;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1549 = _9240;
  _checked_ptr_1<int> _ptr__1549(_1549 ? _1549->raw() : nullptr,_1549 ? _1549->size(0) : 0);
  if ((_1536 < ((int)((_1534)->size(0)) - (int)1)))
  {
    {
      int _1550 = (int)0;
      int _9242 = (int)0;
      int _9243 = _1539;
      for (int _1551 = _9242; _1551 < _9243; ++_1551)
      {
        {
          int _9244 = (int)0;
          int _9245 = _1538;
          for (int _1552 = _9244; _1552 < _9245; ++_1552)
          {
            {
              int _9246 = (int)0;
              int _9247 = _1537;
              for (int _1553 = _9246; _1553 < _9247; ++_1553)
              {
                {
                  _ptr__1549[_1550] = _ptr__1546[safe_add( safe_mul( safe_add( safe_mul( _1551,_1537 ),_1553 ),_1538 ),_1552 )];
                  ++ _1550;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1554 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1544)));
  _checked_ptr_1<int> _ptr__1554(_1554 ? _1554->raw() : nullptr,_1554 ? _1554->size(0) : 0);
  natconemap->get(_1547,_1554,(int)0);
  ((*natconemap_dim)(_1547)) = _1537;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      task_put_rquadcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      task_put_pexpcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      std::vector<double> _9248;
      for (int _1555 = (int)0, _9249 = _1544; _1555 < _9249 ; ++_1555)
      {
        _9248.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1517)->alpha);
      }
      auto _9250 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9248.size()),_9248.begin(),_9248.end()));
      task_put_ppowcones(_1554,_1537,_1544,_1549,_9250);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      task_put_dexpcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      std::vector<double> _9251;
      for (int _1556 = (int)0, _9252 = _1544; _1556 < _9252 ; ++_1556)
      {
        _9251.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1517)->alpha);
      }
      auto _9253 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9251.size()),_9251.begin(),_9251.end()));
      task_put_dpowcones(_1554,_1537,_1544,_1549,_9253);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  ((*vars)(_1545)) = nullptr;
  int _1557 = natconmap_alloc(_1540);
  std::shared_ptr< monty::ndarray< int,1 > > _1558 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1540)));
  _checked_ptr_1<int> _ptr__1558(_1558 ? _1558->raw() : nullptr,_1558 ? _1558->size(0) : 0);
  natconmap->get(_1557,_1558,(int)0);
  ((*natconmap_type)(_1557)) = safe_add( _1545,(int)6 );
  {
    int _9254 = (int)0;
    int _9255 = _1540;
    for (int _1559 = _9254; _1559 < _9255; ++_1559)
    {
      {
        ((*natconmap_slackidx)(_ptr__1558[_1559])) = safe_add( _ptr__1546[_1559],(int)1 );
      }
    }
    int _9256 = (int)0;
    int _9257 = _1540;
    for (int _1560 = _9256; _1560 < _9257; ++_1560)
    {
      {
        ((*natconmap_blockid)(_ptr__1558[_1560])) = _1557;
      }
    }
    int _9258 = (int)0;
    int _9259 = _1540;
    for (int _1561 = _9258; _1561 < _9259; ++_1561)
    {
      {
        ((*natconmap_idx)(_ptr__1558[_1561])) = _1561;
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1562 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1540)));
  _checked_ptr_1<double> _ptr__1562(_1562 ? _1562->raw() : nullptr,_1562 ? _1562->size(0) : 0);
  task_con_putboundlist_fx(_1558,_1562);
  putarows(_1558,rs,_1524,_1525,_1528,_1529,_1530,_1546);
  if ((_1526 == (int)0))
  {
    {
      int _9260 = (int)0;
      int _9261 = _1524;
      for (int _1563 = _9260; _1563 < _9261; ++_1563)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1558[_1563])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1558[_1563])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1564 = true;
      int _1565 = (int)0;
      int _1566 = (int)0;
      int _9262 = (int)0;
      int _9263 = _1524;
      for (int _1567 = _9262; _1567 < _9263; ++_1567)
      {
        {
          int _9264 = _ptr__1519[safe_add( _1528,_1567 )];
          int _9265 = _ptr__1519[safe_add( safe_add( _1528,_1567 ),(int)1 )];
          for (int _1568 = _9264; _1568 < _9265; ++_1568)
          {
            {
              if ((((_ptr__1519[safe_add( safe_add( _1532,_1568 ),(int)1 )] - _ptr__1519[safe_add( _1532,_1568 )]) == (int)1) && ((_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1568 )] )] == 10) || (_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1568 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1565;
                  _1566 += (_ptr__1519[safe_add( safe_add( _1532,_1568 ),(int)1 )] - _ptr__1519[safe_add( _1532,_1568 )]);
                }
              }
            }
          }
        }
      }
      int _1569 = natconmap_codenztop;
      int _1570 = natconmap_codeatomtop;
      natconmap_codealloc(_1565,_1566);
      int _1571 = _1570;
      int _1572 = _1569;
      int _9266 = (int)0;
      int _9267 = _1524;
      for (int _1573 = _9266; _1573 < _9267; ++_1573)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1558[_1573])) = _1572;
          int _9268 = _ptr__1519[safe_add( _1528,_1573 )];
          int _9269 = _ptr__1519[safe_add( safe_add( _1528,_1573 ),(int)1 )];
          for (int _1574 = _9268; _1574 < _9269; ++_1574)
          {
            {
              if ((((_ptr__1519[safe_add( safe_add( _1532,_1574 ),(int)1 )] - _ptr__1519[safe_add( _1532,_1574 )]) == (int)1) && ((_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1574 )] )] == 10) || (_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1574 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9270 = _ptr__1519[safe_add( _1532,_1574 )];
                  int _9271 = _ptr__1519[safe_add( safe_add( _1532,_1574 ),(int)1 )];
                  for (int _1575 = _9270; _1575 < _9271; ++_1575)
                  {
                    {
                      ((*natconmap_code)(_1571)) = _ptr__1519[safe_add( _1531,_1575 )];
                      ((*natconmap_cconst)(_1571)) = _ptr__1521[safe_add( _1533,_1575 )];
                      ++ _1571;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1572,(int)1 ))) = _1571;
                  ((*natconmap_codenidx)(_1572)) = _ptr__1520[safe_add( _1529,_1574 )];
                  _1564 = (_ptr__1520[safe_add( _1529,_1574 )] >= (int)0);
                  ++ _1572;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1558[_1573])) = _1572;
        }
      }
      natconmap_numparameterized += _1565;
      if ((!_1564))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1576 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1515,_1517,_1534,_1557,_1558,_1546);
  ((*cons)(_1557)) = (_1576).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1515).size()) > (int)0))
  {
    {
      con_map->setItem(_1515,_1557);
    }
  }
  {}
  return (_1576).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1577,monty::rc_ptr< ::mosek::fusion::Expression > _1578,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1579){
  if ((((int)((_1577).size()) > (int)0) && hasConstraint(_1577)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1577)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1579)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1580 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1578)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1580->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1581 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1581(_1581 ? _1581->raw() : nullptr,_1581 ? _1581->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1582 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1582(_1582 ? _1582->raw() : nullptr,_1582 ? _1582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1583 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1583(_1583 ? _1583->raw() : nullptr,_1583 ? _1583->size(0) : 0);
  int _1584 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1585 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1586 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1587 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1588 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1589 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1590 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1591 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1592 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1593 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1594 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1595 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9272;
  for (int _1597 = (int)0, _9273 = _1584; _1597 < _9273 ; ++_1597)
  {
    _9272.push_back(_ptr__1581[safe_add( _1589,_1597 )]);
  }
  auto _9274 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9272.size()),_9272.begin(),_9272.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1596 = _9274;
  _checked_ptr_1<int> _ptr__1596(_1596 ? _1596->raw() : nullptr,_1596 ? _1596->size(0) : 0);
  int _1598 = (int)1;
  int _9275 = (int)0;
  int _9276 = _1584;
  for (int _1599 = _9275; _1599 < _9276; ++_1599)
  {
    {
      _1598 *= _ptr__1596[_1599];
    }
  }
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1579)->shape.get()) && (!::mosek::fusion::p_Set::match(_1596,mosek::fusion::p_LinearDomain::_get_impl(_1579)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _1600;
  _checked_ptr_1<double> _ptr__1600(_1600 ? _1600->raw() : nullptr,_1600 ? _1600->size(0) : 0);
  int _1601 = natconmap_alloc(_1598);
  std::shared_ptr< monty::ndarray< int,1 > > _1602 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1598)));
  _checked_ptr_1<int> _ptr__1602(_1602 ? _1602->raw() : nullptr,_1602 ? _1602->size(0) : 0);
  natconmap->get(_1601,_1602,(int)0);
  putarows(_1602,rs,_1585,_1586,_1590,_1591,_1592,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  {
    std::shared_ptr< monty::ndarray< int,2 > > _1603 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->sparsity;
    bool _1604 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1605 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->bnd;
    _checked_ptr_1<double> _ptr__1605(_1605 ? _1605->raw() : nullptr,_1605 ? _1605->size(0) : 0);
    bool _1606 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->scalable;
    {
      if ((NULL == _1605.get()))
      {
        {
          std::vector<double> _9277;
          for (int _1607 = (int)0, _9278 = (int)((_1602)->size(0)); _1607 < _9278 ; ++_1607)
          {
            _9277.push_back(0.0);
          }
          auto _9279 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9277.size()),_9277.begin(),_9277.end()));
          _1600 = _9279;
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
      else if(_1606)
      {
        {
          std::vector<double> _9280;
          for (int _1608 = (int)0, _9281 = (int)((_1602)->size(0)); _1608 < _9281 ; ++_1608)
          {
            _9280.push_back(_ptr__1605[(int)0]);
          }
          auto _9282 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9280.size()),_9280.begin(),_9280.end()));
          _1600 = _9282;
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
      else if((NULL != _1603.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1609 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1584)));
          _checked_ptr_1<int> _ptr__1609(_1609 ? _1609->raw() : nullptr,_1609 ? _1609->size(0) : 0);
          _ptr__1609[(_1584 - (int)1)] = (int)1;
          int _9283 = (int)1;
          int _9284 = _1584;
          for (int _1610 = _9283; _1610 < _9284; ++_1610)
          {
            {
              _ptr__1609[((_1584 - _1610) - (int)1)] = safe_mul( _ptr__1609[(_1584 - _1610)],_ptr__1596[(_1584 - _1610)] );
            }
          }
          _1600 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1602)->size(0)))));
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
          int _9285 = (int)0;
          int _9286 = (int)((_1603)->size(0));
          for (int _1611 = _9285; _1611 < _9286; ++_1611)
          {
            {
              int _1612 = (int)0;
              int _9287 = (int)0;
              int _9288 = _1584;
              for (int _1613 = _9287; _1613 < _9288; ++_1613)
              {
                {
                  _1612 += safe_mul( _ptr__1609[_1613],((*_1603)(_1611,_1613)) );
                }
              }
              _ptr__1600[_1612] = _ptr__1605[_1611];
            }
          }
        }
      }
      else if(_1604)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1614 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1584)));
          _checked_ptr_1<int> _ptr__1614(_1614 ? _1614->raw() : nullptr,_1614 ? _1614->size(0) : 0);
          _ptr__1614[(_1584 - (int)1)] = (int)1;
          int _9289 = (int)1;
          int _9290 = _1584;
          for (int _1615 = _9289; _1615 < _9290; ++_1615)
          {
            {
              _ptr__1614[((_1584 - _1615) - (int)1)] = safe_mul( _ptr__1614[(_1584 - _1615)],_ptr__1596[(_1584 - _1615)] );
            }
          }
          _1600 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1602)->size(0)))));
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
      else
      {
        {
          std::vector<double> _9291;
          for (int _1616 = (int)0, _9292 = (int)((_1602)->size(0)); _1616 < _9292 ; ++_1616)
          {
            _9291.push_back(_ptr__1605[_1616]);
          }
          auto _9293 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9291.size()),_9291.begin(),_9291.end()));
          _1600 = _9293;
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
    }
  }
  int _9294 = (int)0;
  int _9295 = _1598;
  for (int _1617 = _9294; _1617 < _9295; ++_1617)
  {
    {
      ((*natconmap_idx)(_ptr__1602[_1617])) = _1601;
      ((*natconmap_slackidx)(_ptr__1602[_1617])) = (int)0;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      ((*natconmap_type)(_1601)) = (int)1;
      task_con_putboundlist_fr(_1602);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      ((*natconmap_type)(_1601)) = (int)3;
      task_con_putboundlist_up(_1602,_1600);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      ((*natconmap_type)(_1601)) = (int)2;
      task_con_putboundlist_lo(_1602,_1600);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      ((*natconmap_type)(_1601)) = (int)5;
      task_con_putboundlist_fx(_1602,_1600);
    }
  }
  {}
  if ((_1588 == (int)0))
  {
    {
      int _9296 = (int)0;
      int _9297 = _1585;
      for (int _1618 = _9296; _1618 < _9297; ++_1618)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1602[_1618])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1602[_1618])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      replace_row_code(rs,_1602,_1590,_1591,_1593,_1594,_1595);
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1619 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1577,_1601,_1596,_1602);
  ((*cons)(_1601)) = (_1619).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1577).size()) > (int)0))
  {
    {
      con_map->setItem(_1577,_1601);
    }
  }
  {}
  return (_1619).as<::mosek::fusion::Constraint>();
}
std::string mosek::fusion::Model::getVersion  ( ) { return mosek::fusion::p_Model::getVersion(); }std::string mosek::fusion::p_Model::getVersion(){
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
bool mosek::fusion::Model :: hasParameter(const std::string & _1620) { return mosek::fusion::p_Model::_get_impl(this)->hasParameter(_1620); }bool mosek::fusion::p_Model::hasParameter(const std::string & _1620){
  return par_map->hasItem(_1620);
}
bool mosek::fusion::Model :: hasConstraint(const std::string & _1621) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1621); }bool mosek::fusion::p_Model::hasConstraint(const std::string & _1621){
  return con_map->hasItem(_1621);
}
bool mosek::fusion::Model :: hasVariable(const std::string & _1622) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1622); }bool mosek::fusion::p_Model::hasVariable(const std::string & _1622){
  return var_map->hasItem(_1622);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__getParameter(const std::string & _1623) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getParameter(_1623); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::getParameter(const std::string &  _1623) { return __mosek_2fusion_2Model__getParameter(_1623); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__getParameter(const std::string & _1623){
  return ((*parameters)(par_map->getItem(_1623)));
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int _1624) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int _1624) { return __mosek_2fusion_2Model__getConstraint(_1624); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int _1624){
  return (((*cons)(_1624))).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1625) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1625); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1625) { return __mosek_2fusion_2Model__getConstraint(_1625); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1625){
  monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9298;
  bool _9299 = con_map->hasItem(_1625);
  if (_9299)
  {
    _9298 = ((*cons)(con_map->getItem(_1625)));
  }
  else
  {
    _9298 = nullptr;
  }
  return (_9298).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int _1626) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1626); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int _1626) { return __mosek_2fusion_2Model__getVariable(_1626); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int _1626){
  return (((*vars)(_1626))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1627) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1627); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1627) { return __mosek_2fusion_2Model__getVariable(_1627); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1627){
  if (var_map->hasItem(_1627))
  {
    {
      int _1628 = var_map->getItem(_1627);
      if ((_1628 < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1628,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1628))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName(){
  return model_name;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getParameterValue(std::shared_ptr< monty::ndarray< int,1 > > _1629){
  _checked_ptr_1<int> _ptr__1629(_1629 ? _1629->raw() : nullptr, _1629 ? _1629->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1630 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1629)->size(0)))));
  _checked_ptr_1<double> _ptr__1630(_1630 ? _1630->raw() : nullptr,_1630 ? _1630->size(0) : 0);
  int _9300 = (int)0;
  int _9301 = (int)((_1629)->size(0));
  for (int _1631 = _9300; _1631 < _9301; ++_1631)
  {
    {
      _ptr__1630[_1631] = ((*param_value)(_ptr__1629[_1631]));
    }
  }
  return _1630;
}
void mosek::fusion::p_Model::setParameterValue(std::shared_ptr< monty::ndarray< int,1 > > _1632,std::shared_ptr< monty::ndarray< double,1 > > _1633){
  _checked_ptr_1<int> _ptr__1632(_1632 ? _1632->raw() : nullptr, _1632 ? _1632->size(0) : 0);
  _checked_ptr_1<double> _ptr__1633(_1633 ? _1633->raw() : nullptr, _1633 ? _1633->size(0) : 0);
  int _9302 = (int)0;
  int _9303 = (int)((_1632)->size(0));
  for (int _1634 = _9302; _1634 < _9303; ++_1634)
  {
    {
      ((*param_value)(_ptr__1632[_1634])) = _ptr__1633[_1634];
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone(){
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
void mosek::fusion::p_Model::destroy(){xs.reset();ws.reset();rs.reset();con_map.reset();cons.reset();natconmap_objcconst.reset();natconmap_objcode.reset();natconmap_objcodeptr.reset();natconmap_objcodenidx.reset();natconmap_cconst.reset();natconmap_code.reset();natconmap_codeptr.reset();natconmap_codenidx.reset();natconmap_coderowptre.reset();natconmap_coderowptrb.reset();param_value.reset();par_map.reset();parameters.reset();natconmap_type.reset();natconmap_idx.reset();natconmap_slackidx.reset();natconmap_blockid.reset();natconmap.reset();initsol_xx_flag.reset();initsol_xx.reset();var_map.reset();barvars.reset();natbarvarmap_ptr.reset();natbarvarmap_num.reset();natbarvar_dim.reset();natbarvar_ptr.reset();natbarvar_j.reset();natbarvar_i.reset();natbarvar_idx.reset();natvarmap_type.reset();natconemap_dim.reset();natconemap.reset();vars.reset();natvarmap_idx.reset();natvarmap_blockid.reset();natvarmap.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1635,    std::shared_ptr< monty::ndarray< int,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638){ return new mosek::fusion::SliceVariable(_1635,_1636,_1637,_1638); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1635,    std::shared_ptr< monty::ndarray< int,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1635,_1636,_1637,_1638); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1635,    std::shared_ptr< monty::ndarray< int,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1636(_1636 ? _1636->raw() : nullptr, _1636 ? _1636->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1637(_1637 ? _1637->raw() : nullptr, _1637 ? _1637->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1638(_1638 ? _1638->raw() : nullptr, _1638 ? _1638->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1635,_1636,_1637,_1638);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _1638;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _1637;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _1636;
  }
}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1639){ return new mosek::fusion::SliceVariable(_1639); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1639) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1639); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1639){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1639,_1639->__mosek_2fusion_2BaseVariable__getModel());
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_SliceVariable::_get_impl(_1639)->nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = mosek::fusion::p_SliceVariable::_get_impl(_1639)->sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = mosek::fusion::p_SliceVariable::_get_impl(_1639)->shape;
  }
}void mosek::fusion::p_SliceVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1640,    monty::rc_ptr< ::mosek::fusion::Model > _1641){ return new mosek::fusion::SymRangedVariable(_1640,_1641); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1640,    monty::rc_ptr< ::mosek::fusion::Model > _1641) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1640,_1641); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1640,    monty::rc_ptr< ::mosek::fusion::Model > _1641){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1640,_1641);
    names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->names_flushed;
    name = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->name;
    sparsity = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->sparsity;
    nativeidxs = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->nativeidxs;
    dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->dim;
  }
}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1642,    const std::string &  _1643,    long long _1644,    int _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    std::shared_ptr< monty::ndarray< int,1 > > _1647){ return new mosek::fusion::SymRangedVariable(_1642,_1643,_1644,_1645,_1646,_1647); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1642,    const std::string &  _1643,    long long _1644,    int _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    std::shared_ptr< monty::ndarray< int,1 > > _1647) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1642,_1643,_1644,_1645,_1646,_1647); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1642,    const std::string &  _1643,    long long _1644,    int _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    std::shared_ptr< monty::ndarray< int,1 > > _1647){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1646(_1646 ? _1646->raw() : nullptr, _1646 ? _1646->size(0) : 0);
    _checked_ptr_1<int> _ptr__1647(_1647 ? _1647->raw() : nullptr, _1647 ? _1647->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1642,_1643,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1645),(int)(_1645)}),_1644,::mosek::fusion::p_SymRangedVariable::mirror_sp(_1645,_1646),::mosek::fusion::p_SymRangedVariable::mirror_idxs(_1645,_1646,_1647));
    names_flushed = false;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->name = _1643;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->nativeidxs = _1647;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->sparsity = _1646;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->dim = _1645;
  }
}void mosek::fusion::p_SymRangedVariable::dual_u(int _1648,std::shared_ptr< monty::ndarray< double,1 > > _1649){
  _checked_ptr_1<double> _ptr__1649(_1649 ? _1649->raw() : nullptr, _1649 ? _1649->size(0) : 0);
  dual_lu(_1648,_1649,false);
}
void mosek::fusion::p_SymRangedVariable::dual_l(int _1650,std::shared_ptr< monty::ndarray< double,1 > > _1651){
  _checked_ptr_1<double> _ptr__1651(_1651 ? _1651->raw() : nullptr, _1651 ? _1651->size(0) : 0);
  dual_lu(_1650,_1651,true);
}
void mosek::fusion::p_SymRangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1652 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _9304 = (int)0;
          int _9305 = (int)((nativeidxs)->size(0));
          for (int _1653 = _9304; _1653 < _9305; ++_1653)
          {
            {
              std::string _9306;
              bool _9307 = ((int)((name).size()) == (int)0);
              if (_9307)
              {
                _9306 = std::string ("");
              }
              else
              {
                _9306 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1653 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1653 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1652.get())->varname(((*nativeidxs)(_1653)),_9306);
            }
          }
        }
      }
      else
      {
        {
          int _9308 = (int)0;
          int _9309 = (int)((sparsity)->size(0));
          for (int _1654 = _9308; _1654 < _9309; ++_1654)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1652.get())->varname(((*nativeidxs)(_1654)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1654)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1654)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::__mosek_2fusion_2SymRangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1655){
  return (::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(::mosek::fusion::SymRangedVariable::t(_pubthis),_1655)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_idxs(int _1656,std::shared_ptr< monty::ndarray< long long,1 > > _1657,std::shared_ptr< monty::ndarray< int,1 > > _1658){
  _checked_ptr_1<long long> _ptr__1657(_1657 ? _1657->raw() : nullptr, _1657 ? _1657->size(0) : 0);
  _checked_ptr_1<int> _ptr__1658(_1658 ? _1658->raw() : nullptr, _1658 ? _1658->size(0) : 0);
  if ((NULL == _1657.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1659 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1656,_1656 ))));
      _checked_ptr_1<long long> _ptr__1659(_1659 ? _1659->raw() : nullptr,_1659 ? _1659->size(0) : 0);
      int _1660 = (int)0;
      {
        int _9310 = (int)0;
        int _9311 = _1656;
        for (int _1661 = _9310; _1661 < _9311; ++_1661)
        {
          {
            _ptr__1659[safe_add( safe_mul( _1661,_1656 ),_1661 )] = safe_add( _ptr__1658[_1660],(int)1 );
            ++ _1660;
            int _9312 = safe_add( _1661,(int)1 );
            int _9313 = _1656;
            for (int _1662 = _9312; _1662 < _9313; ++_1662)
            {
              {
                _ptr__1659[safe_add( safe_mul( _1661,_1656 ),_1662 )] = safe_add( _ptr__1658[_1660],(int)1 );
                _ptr__1659[safe_add( safe_mul( _1662,_1656 ),_1661 )] = safe_add( _ptr__1658[_1660],(int)1 );
                ++ _1660;
              }
            }
          }
        }
      }
      return _1659;
    }
  }
  else
  {
    {
      int _1663 = (int)0;
      {
        int _9314 = (int)0;
        int _9315 = (int)((_1657)->size(0));
        for (int _1664 = _9314; _1664 < _9315; ++_1664)
        {
          {
            int _9316;
            bool _9317 = ((_ptr__1657[_1664] % safe_add( _1656,(int)1 )) == (int)0);
            if (_9317)
            {
              _9316 = (int)1;
            }
            else
            {
              _9316 = (int)2;
            }
            _1663 += _9316;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1665 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1663)));
      _checked_ptr_1<long long> _ptr__1665(_1665 ? _1665->raw() : nullptr,_1665 ? _1665->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1666 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1663)));
      _checked_ptr_1<long long> _ptr__1666(_1666 ? _1666->raw() : nullptr,_1666 ? _1666->size(0) : 0);
      {
        int _1667 = (int)0;
        int _9318 = (int)0;
        int _9319 = (int)((_1657)->size(0));
        for (int _1668 = _9318; _1668 < _9319; ++_1668)
        {
          {
            long long _1669 = (_ptr__1657[_1668] / _1656);
            long long _1670 = (_ptr__1657[_1668] % _1656);
            _ptr__1665[_1667] = _ptr__1657[_1668];
            _ptr__1666[_1667] = safe_add( _ptr__1658[_1668],(int)1 );
            ++ _1667;
            if ((_1669 != _1670))
            {
              {
                _ptr__1665[_1667] = safe_add( safe_mul( _1670,_1656 ),_1669 );
                _ptr__1666[_1667] = safe_add( _ptr__1658[_1668],(int)1 );
                ++ _1667;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9320;
      for (int _1672 = (int)0, _9321 = _1663; _1672 < _9321 ; ++_1672)
      {
        _9320.push_back(_1672);
      }
      auto _9322 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9320.size()),_9320.begin(),_9320.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1671 = _9322;
      _checked_ptr_1<long long> _ptr__1671(_1671 ? _1671->raw() : nullptr,_1671 ? _1671->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1671,_1665,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1663));
      std::vector<long long> _9323;
      for (int _1673 = (int)0, _9324 = _1663; _1673 < _9324 ; ++_1673)
      {
        _9323.push_back(_ptr__1666[_ptr__1671[_1673]]);
      }
      auto _9325 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9323.size()),_9323.begin(),_9323.end()));
      return _9325;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_sp(int _1674,std::shared_ptr< monty::ndarray< long long,1 > > _1675){
  _checked_ptr_1<long long> _ptr__1675(_1675 ? _1675->raw() : nullptr, _1675 ? _1675->size(0) : 0);
  if ((NULL == _1675.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1676 = (int)0;
      {
        int _9326 = (int)0;
        int _9327 = (int)((_1675)->size(0));
        for (int _1677 = _9326; _1677 < _9327; ++_1677)
        {
          {
            int _9328;
            bool _9329 = ((_ptr__1675[_1677] % safe_add( _1674,(int)1 )) == (int)0);
            if (_9329)
            {
              _9328 = (int)1;
            }
            else
            {
              _9328 = (int)2;
            }
            _1676 += _9328;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1678 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1676)));
      _checked_ptr_1<long long> _ptr__1678(_1678 ? _1678->raw() : nullptr,_1678 ? _1678->size(0) : 0);
      {
        int _1679 = (int)0;
        int _9330 = (int)0;
        int _9331 = (int)((_1675)->size(0));
        for (int _1680 = _9330; _1680 < _9331; ++_1680)
        {
          {
            long long _1681 = (_ptr__1675[_1680] / _1674);
            long long _1682 = (_ptr__1675[_1680] % _1674);
            _ptr__1678[_1679] = _ptr__1675[_1680];
            ++ _1679;
            if ((_1681 != _1682))
            {
              {
                _ptr__1678[_1679] = safe_add( safe_mul( _1682,_1674 ),_1681 );
                ++ _1679;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9332;
      for (int _1684 = (int)0, _9333 = _1676; _1684 < _9333 ; ++_1684)
      {
        _9332.push_back(_1684);
      }
      auto _9334 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9332.size()),_9332.begin(),_9332.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1683 = _9334;
      _checked_ptr_1<long long> _ptr__1683(_1683 ? _1683->raw() : nullptr,_1683 ? _1683->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1683,_1678,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1676));
      std::vector<long long> _9335;
      for (int _1685 = (int)0, _9336 = _1676; _1685 < _9336 ; ++_1685)
      {
        _9335.push_back(_ptr__1678[_ptr__1683[_1685]]);
      }
      auto _9337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9335.size()),_9335.begin(),_9335.end()));
      return _9337;
    }
  }
}
void mosek::fusion::p_SymRangedVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1686,    std::shared_ptr< monty::ndarray< int,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    bool _1690){ return new mosek::fusion::BoundInterfaceVariable(_1686,_1687,_1688,_1689,_1690); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1686,    std::shared_ptr< monty::ndarray< int,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    bool _1690) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1686,_1687,_1688,_1689,_1690); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1686,    std::shared_ptr< monty::ndarray< int,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    bool _1690){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1687(_1687 ? _1687->raw() : nullptr, _1687 ? _1687->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1688(_1688 ? _1688->raw() : nullptr, _1688 ? _1688->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1689(_1689 ? _1689->raw() : nullptr, _1689 ? _1689->size(0) : 0);
    mosek::fusion::p_SliceVariable::_initialize(_1686,_1687,_1688,_1689);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1690;
  }
}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1691,    bool _1692){ return new mosek::fusion::BoundInterfaceVariable(_1691,_1692); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1691,    bool _1692) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1691,_1692); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1691,    bool _1692){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SliceVariable::_initialize(_1691);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1692;
  }
}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceVariable :: dual() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _1693 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__1693(_1693 ? _1693->raw() : nullptr,_1693 ? _1693->size(0) : 0);
  dual_lu((int)0,_1693,islower);
  return _1693;
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__transpose() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__transpose(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1694,_1695,_1696); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1694,_1695,_1696); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1694,_1695,_1696); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696){
  _checked_ptr_1<int> _ptr__1694(_1694 ? _1694->raw() : nullptr, _1694 ? _1694->size(0) : 0);
  _checked_ptr_1<int> _ptr__1695(_1695 ? _1695->raw() : nullptr, _1695 ? _1695->size(0) : 0);
  _checked_ptr_1<int> _ptr__1696(_1696 ? _1696->raw() : nullptr, _1696 ? _1696->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1694,_1695,_1696))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1697,_1698); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1697,_1698); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1697,_1698); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698){
  _checked_ptr_1<int> _ptr__1697(_1697 ? _1697->raw() : nullptr, _1697 ? _1697->size(0) : 0);
  _checked_ptr_1<int> _ptr__1698(_1698 ? _1698->raw() : nullptr, _1698 ? _1698->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1697,_1698))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1699) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1699) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1699) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1699){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1699))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1700) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1700); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1700) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1700); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1700) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1700); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1700){
  _checked_ptr_1<int> _ptr__1700(_1700 ? _1700->raw() : nullptr, _1700 ? _1700->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1700))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag(int _1701) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(_1701); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag(int _1701) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1701); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag(int _1701) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1701); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(int _1701){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(_1701))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag(int _1702) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(_1702); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag(int _1702) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_1702); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag(int _1702) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_1702); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(int _1702){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(_1702))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_1703,_1704); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1703,_1704); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1703,_1704); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704){
  _checked_ptr_1<int> _ptr__1703(_1703 ? _1703->raw() : nullptr, _1703 ? _1703->size(0) : 0);
  _checked_ptr_1<int> _ptr__1704(_1704 ? _1704->raw() : nullptr, _1704 ? _1704->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_1703,_1704))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(int _1705,int _1706) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_1705,_1706); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(int _1705,int _1706) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1705,_1706); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(int _1705,int _1706) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1705,_1706); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(int _1705,int _1706){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_1705,_1706))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__from_(monty::rc_ptr< ::mosek::fusion::Variable > _1707){
  std::shared_ptr< monty::ndarray< int,1 > > _1708 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__1708(_1708 ? _1708->raw() : nullptr,_1708 ? _1708->size(0) : 0);
  int _1709 = _1707->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _1710 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1709)));
  _checked_ptr_1<long long> _ptr__1710(_1710 ? _1710->raw() : nullptr,_1710 ? _1710->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1711 = nullptr;
  _checked_ptr_1<long long> _ptr__1711(_1711 ? _1711->raw() : nullptr,_1711 ? _1711->size(0) : 0);
  if ((_1707->getSize() == _1709))
  {
    {
      _1707->inst((int)0,_1710);
    }
  }
  else
  {
    {
      _1711 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1709)));
      _ptr__1711.update(_1711 ? _1711->raw() : nullptr, _1711 ? _1711->size(0) : 0);
      _1707->inst((int)0,_1711,(int)0,_1710);
    }
  }
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_1707->__mosek_2fusion_2Variable__getModel(),_1708,_1711,_1710,islower);
}
void mosek::fusion::p_BoundInterfaceVariable::destroy(){}void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1712,    monty::rc_ptr< ::mosek::fusion::Model > _1713){ return new mosek::fusion::RangedVariable(_1712,_1713); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1712,    monty::rc_ptr< ::mosek::fusion::Model > _1713) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1712,_1713); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1712,    monty::rc_ptr< ::mosek::fusion::Model > _1713){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1712,_1713);
    name = mosek::fusion::p_RangedVariable::_get_impl(_1712)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_1712)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_1712)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1712)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_1712)->shape;
  }
}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1714,    const std::string &  _1715,    long long _1716,    std::shared_ptr< monty::ndarray< int,1 > > _1717,    std::shared_ptr< monty::ndarray< long long,1 > > _1718,    std::shared_ptr< monty::ndarray< int,1 > > _1719){ return new mosek::fusion::RangedVariable(_1714,_1715,_1716,_1717,_1718,_1719); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1714,    const std::string &  _1715,    long long _1716,    std::shared_ptr< monty::ndarray< int,1 > > _1717,    std::shared_ptr< monty::ndarray< long long,1 > > _1718,    std::shared_ptr< monty::ndarray< int,1 > > _1719) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1714,_1715,_1716,_1717,_1718,_1719); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1714,    const std::string &  _1715,    long long _1716,    std::shared_ptr< monty::ndarray< int,1 > > _1717,    std::shared_ptr< monty::ndarray< long long,1 > > _1718,    std::shared_ptr< monty::ndarray< int,1 > > _1719){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1717(_1717 ? _1717->raw() : nullptr, _1717 ? _1717->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1718(_1718 ? _1718->raw() : nullptr, _1718 ? _1718->size(0) : 0);
    _checked_ptr_1<int> _ptr__1719(_1719 ? _1719->raw() : nullptr, _1719 ? _1719->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1714,_1715,_1717,_1716,_1718,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_1719));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _1719;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _1718;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _1715;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _1717;
    names_flushed = false;
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(long long _1720,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1721) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_1720,_1721); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(long long _1720,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1721) { return __mosek_2fusion_2RangedVariable__elementDesc(_1720,_1721); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(long long _1720,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1721){
  _pubthis->elementName(_1720,_1721);
  _1721->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _1721;
}
void mosek::fusion::p_RangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1722 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1723 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1723->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1723->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _9338 = (int)1;
          int _9339 = _pubthis->getND();
          for (int _1724 = _9338; _1724 < _9339; ++_1724)
          {
            {
              _1723->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1724);
            }
          }
        }
      }
      {}
      _1723->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      mosek::fusion::p_Model::_get_impl(_1722.get())->varnames(nativeidxs,_1723->toString(),_pubthis->getShape(),sparsity);
      names_flushed = true;
    }
  }
  {}
}
void mosek::fusion::p_RangedVariable::dual_u(int _1725,std::shared_ptr< monty::ndarray< double,1 > > _1726){
  _checked_ptr_1<double> _ptr__1726(_1726 ? _1726->raw() : nullptr, _1726 ? _1726->size(0) : 0);
  dual_lu(_1725,_1726,false);
}
void mosek::fusion::p_RangedVariable::dual_l(int _1727,std::shared_ptr< monty::ndarray< double,1 > > _1728){
  _checked_ptr_1<double> _ptr__1728(_1728 ? _1728->raw() : nullptr, _1728 ? _1728->size(0) : 0);
  dual_lu(_1727,_1728,true);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__upperBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__upperBoundVar(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::upperBoundVar() { return __mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__upperBoundVar(){
  std::vector<long long> _9340;
  for (int _1729 = (int)0, _9341 = (int)((nativeidxs)->size(0)); _1729 < _9341 ; ++_1729)
  {
    _9340.push_back(((*nativeidxs)(_1729)));
  }
  auto _9342 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9340.size()),_9340.begin(),_9340.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9342,false);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__lowerBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__lowerBoundVar(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::lowerBoundVar() { return __mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__lowerBoundVar(){
  std::vector<long long> _9343;
  for (int _1730 = (int)0, _9344 = (int)((nativeidxs)->size(0)); _1730 < _9344 ; ++_1730)
  {
    _9343.push_back(((*nativeidxs)(_1730)));
  }
  auto _9345 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9343.size()),_9343.begin(),_9343.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9345,true);
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1731){
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_1731)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1732){
  _checked_ptr_1<int> _ptr__1732(_1732 ? _1732->raw() : nullptr, _1732 ? _1732->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1733 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1732)->size(0)))));
  _checked_ptr_1<long long> _ptr__1733(_1733 ? _1733->raw() : nullptr,_1733 ? _1733->size(0) : 0);
  int _9346 = (int)0;
  int _9347 = (int)((_1732)->size(0));
  for (int _1734 = _9346; _1734 < _9347; ++_1734)
  {
    {
      _ptr__1733[_1734] = _ptr__1732[_1734];
    }
  }
  return _1733;
}
void mosek::fusion::p_RangedVariable::destroy(){shape.reset();nativeidxs.reset();sparsity.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1735,    monty::rc_ptr< ::mosek::fusion::Model > _1736){ return new mosek::fusion::LinearPSDVariable(_1735,_1736); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1735,    monty::rc_ptr< ::mosek::fusion::Model > _1736) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1735,_1736); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1735,    monty::rc_ptr< ::mosek::fusion::Model > _1736){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1735,_1736);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->nativeidxs;
  }
}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1737,    const std::string &  _1738,    int _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    int _1741,    std::shared_ptr< monty::ndarray< long long,1 > > _1742){ return new mosek::fusion::LinearPSDVariable(_1737,_1738,_1739,_1740,_1741,_1742); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1737,    const std::string &  _1738,    int _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    int _1741,    std::shared_ptr< monty::ndarray< long long,1 > > _1742) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1737,_1738,_1739,_1740,_1741,_1742); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1737,    const std::string &  _1738,    int _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    int _1741,    std::shared_ptr< monty::ndarray< long long,1 > > _1742){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1740(_1740 ? _1740->raw() : nullptr, _1740 ? _1740->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1742(_1742 ? _1742->raw() : nullptr, _1742 ? _1742->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1737,_1738,_1740,_1739,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_1742));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _1738;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _1741;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _1739;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _1740;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _1742;
  }
}void mosek::fusion::p_LinearPSDVariable::flushNames(){
}
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1743 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1743->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9348 = (int)1;
  int _9349 = (int)((shape)->size(0));
  for (int _1744 = _9348; _1744 < _9349; ++_1744)
  {
    {
      _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1744)));
    }
  }
  _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1743->toString();
}
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1745) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_1745); }void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1745){
  _checked_ptr_1<long long> _ptr__1745(_1745 ? _1745->raw() : nullptr, _1745 ? _1745->size(0) : 0);
}
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1746) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_1746); }void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1746){
  _checked_ptr_1<long long> _ptr__1746(_1746 ? _1746->raw() : nullptr, _1746 ? _1746->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1747){
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_1747)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< long long,1 > > _1748){
  _checked_ptr_1<long long> _ptr__1748(_1748 ? _1748->raw() : nullptr, _1748 ? _1748->size(0) : 0);
  std::vector<long long> _9350;
  for (int _1749 = (int)0, _9351 = (int)((_1748)->size(0)); _1749 < _9351 ; ++_1749)
  {
    _9350.push_back((-safe_add( _ptr__1748[_1749],(int)1 )));
  }
  auto _9352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9350.size()),_9350.begin(),_9350.end()));
  return _9352;
}
void mosek::fusion::p_LinearPSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1750,    monty::rc_ptr< ::mosek::fusion::Model > _1751){ return new mosek::fusion::PSDVariable(_1750,_1751); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1750,    monty::rc_ptr< ::mosek::fusion::Model > _1751) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1750,_1751); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1750,    monty::rc_ptr< ::mosek::fusion::Model > _1751){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1750,_1751);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_1750)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_1750)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_1750)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_1750)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_1750)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_1750)->conedim2;
  }
}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1752,    const std::string &  _1753,    int _1754,    std::shared_ptr< monty::ndarray< int,1 > > _1755,    int _1756,    int _1757,    std::shared_ptr< monty::ndarray< long long,1 > > _1758){ return new mosek::fusion::PSDVariable(_1752,_1753,_1754,_1755,_1756,_1757,_1758); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1752,    const std::string &  _1753,    int _1754,    std::shared_ptr< monty::ndarray< int,1 > > _1755,    int _1756,    int _1757,    std::shared_ptr< monty::ndarray< long long,1 > > _1758) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1752,_1753,_1754,_1755,_1756,_1757,_1758); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1752,    const std::string &  _1753,    int _1754,    std::shared_ptr< monty::ndarray< int,1 > > _1755,    int _1756,    int _1757,    std::shared_ptr< monty::ndarray< long long,1 > > _1758){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1755(_1755 ? _1755->raw() : nullptr, _1755 ? _1755->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1758(_1758 ? _1758->raw() : nullptr, _1758 ? _1758->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1752,_1753,_1755,_1754,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_1755,_1756,_1757,_1758));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _1754;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _1758;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _1753;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _1755;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _1756;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _1757;
  }
}void mosek::fusion::p_PSDVariable::flushNames(){
}
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1759 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1759->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9353 = (int)1;
  int _9354 = (int)((shape)->size(0));
  for (int _1760 = _9353; _1760 < _9354; ++_1760)
  {
    {
      _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1760)));
    }
  }
  _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1759->toString();
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(long long _1761,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1762) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_1761,_1762); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(long long _1761,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1762) { return __mosek_2fusion_2PSDVariable__elementDesc(_1761,_1762); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(long long _1761,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1762){
  _pubthis->elementName(_1761,_1762);
  _1762->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _1762;
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1763){
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_1763)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int,1 > > _1764,int _1765,int _1766,std::shared_ptr< monty::ndarray< long long,1 > > _1767){
  _checked_ptr_1<int> _ptr__1764(_1764 ? _1764->raw() : nullptr, _1764 ? _1764->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1767(_1767 ? _1767->raw() : nullptr, _1767 ? _1767->size(0) : 0);
  int _1768 = (int)((_1764)->size(0));
  bool _1769 = (_1765 < _1766);
  int _9355;
  bool _9356 = _1769;
  if (_9356)
  {
    _9355 = _1765;
  }
  else
  {
    _9355 = _1766;
  }
  int _1770 = _9355;
  int _9357;
  bool _9358 = (!_1769);
  if (_9358)
  {
    _9357 = _1765;
  }
  else
  {
    _9357 = _1766;
  }
  int _1771 = _9357;
  int _1772 = (int)1;
  int _9359 = (int)0;
  int _9360 = _1770;
  for (int _1773 = _9359; _1773 < _9360; ++_1773)
  {
    {
      _1772 *= _ptr__1764[_1773];
    }
  }
  int _1774 = _ptr__1764[_1770];
  int _1775 = (int)1;
  int _9361 = safe_add( _1770,(int)1 );
  int _9362 = _1771;
  for (int _1776 = _9361; _1776 < _9362; ++_1776)
  {
    {
      _1775 *= _ptr__1764[_1776];
    }
  }
  int _1777 = _ptr__1764[_1771];
  int _1778 = (int)1;
  int _9363 = safe_add( _1771,(int)1 );
  int _9364 = _1768;
  for (int _1779 = _9363; _1779 < _9364; ++_1779)
  {
    {
      _1778 *= _ptr__1764[_1779];
    }
  }
  int _1780 = safe_mul( safe_mul( safe_mul( safe_mul( _1772,_1774 ),_1775 ),_1777 ),_1778 );
  std::shared_ptr< monty::ndarray< long long,1 > > _1781 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1780)));
  _checked_ptr_1<long long> _ptr__1781(_1781 ? _1781->raw() : nullptr,_1781 ? _1781->size(0) : 0);
  int _1782 = _1778;
  int _1783 = safe_mul( _1782,_1777 );
  int _1784 = safe_mul( _1783,_1775 );
  int _1785 = safe_mul( _1784,_1784 );
  {
    int _1786 = (int)0;
    int _9365 = (int)0;
    int _9366 = _1772;
    for (int _1787 = _9365; _1787 < _9366; ++_1787)
    {
      {
        int _9367 = (int)0;
        int _9368 = _1777;
        for (int _1788 = _9367; _1788 < _9368; ++_1788)
        {
          {
            int _9369 = (int)0;
            int _9370 = _1775;
            for (int _1789 = _9369; _1789 < _9370; ++_1789)
            {
              {
                int _9371 = _1788;
                int _9372 = _1774;
                for (int _1790 = _9371; _1790 < _9372; ++_1790)
                {
                  {
                    int _9373 = (int)0;
                    int _9374 = _1778;
                    for (int _1791 = _9373; _1791 < _9374; ++_1791)
                    {
                      {
                        _ptr__1781[safe_add( safe_add( safe_add( safe_add( safe_mul( _1787,_1785 ),safe_mul( _1790,_1784 ) ),safe_mul( _1789,_1783 ) ),safe_mul( _1788,_1782 ) ),_1791 )] = (-safe_add( _ptr__1767[_1786],(int)1 ));
                        _ptr__1781[safe_add( safe_add( safe_add( safe_add( safe_mul( _1787,_1785 ),safe_mul( _1788,_1784 ) ),safe_mul( _1789,_1783 ) ),safe_mul( _1790,_1782 ) ),_1791 )] = (-safe_add( _ptr__1767[_1786],(int)1 ));
                        ++ _1786;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _1781;
}
void mosek::fusion::p_PSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1792,    monty::rc_ptr< ::mosek::fusion::Model > _1793){ return new mosek::fusion::SymLinearVariable(_1792,_1793); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1792,    monty::rc_ptr< ::mosek::fusion::Model > _1793) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1792,_1793); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1792,    monty::rc_ptr< ::mosek::fusion::Model > _1793){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1792,_1793);
    names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->names_flushed;
    name = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->name;
    sparsity = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->sparsity;
    nativeidxs = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->nativeidxs;
    dim = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->dim;
  }
}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1794,    const std::string &  _1795,    long long _1796,    int _1797,    std::shared_ptr< monty::ndarray< long long,1 > > _1798,    std::shared_ptr< monty::ndarray< int,1 > > _1799){ return new mosek::fusion::SymLinearVariable(_1794,_1795,_1796,_1797,_1798,_1799); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1794,    const std::string &  _1795,    long long _1796,    int _1797,    std::shared_ptr< monty::ndarray< long long,1 > > _1798,    std::shared_ptr< monty::ndarray< int,1 > > _1799) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1794,_1795,_1796,_1797,_1798,_1799); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1794,    const std::string &  _1795,    long long _1796,    int _1797,    std::shared_ptr< monty::ndarray< long long,1 > > _1798,    std::shared_ptr< monty::ndarray< int,1 > > _1799){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1798(_1798 ? _1798->raw() : nullptr, _1798 ? _1798->size(0) : 0);
    _checked_ptr_1<int> _ptr__1799(_1799 ? _1799->raw() : nullptr, _1799 ? _1799->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1794,_1795,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1797),(int)(_1797)}),_1796,::mosek::fusion::p_SymLinearVariable::mirror_sp(_1797,_1798),::mosek::fusion::p_SymLinearVariable::mirror_idxs(_1797,_1798,_1799));
    names_flushed = false;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->name = _1795;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->nativeidxs = _1799;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->sparsity = _1798;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->dim = _1797;
  }
}void mosek::fusion::p_SymLinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1800 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _9375 = (int)0;
          int _9376 = (int)((nativeidxs)->size(0));
          for (int _1801 = _9375; _1801 < _9376; ++_1801)
          {
            {
              std::string _9377;
              bool _9378 = ((int)((name).size()) == (int)0);
              if (_9378)
              {
                _9377 = std::string ("");
              }
              else
              {
                _9377 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1801 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1801 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1800.get())->varname(((*nativeidxs)(_1801)),_9377);
            }
          }
        }
      }
      else
      {
        {
          int _9379 = (int)0;
          int _9380 = (int)((sparsity)->size(0));
          for (int _1802 = _9379; _1802 < _9380; ++_1802)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1800.get())->varname(((*nativeidxs)(_1802)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1802)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1802)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::__mosek_2fusion_2SymLinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1803){
  return (::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(::mosek::fusion::SymLinearVariable::t(_pubthis),_1803)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_idxs(int _1804,std::shared_ptr< monty::ndarray< long long,1 > > _1805,std::shared_ptr< monty::ndarray< int,1 > > _1806){
  _checked_ptr_1<long long> _ptr__1805(_1805 ? _1805->raw() : nullptr, _1805 ? _1805->size(0) : 0);
  _checked_ptr_1<int> _ptr__1806(_1806 ? _1806->raw() : nullptr, _1806 ? _1806->size(0) : 0);
  if ((NULL == _1805.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1807 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1804,_1804 ))));
      _checked_ptr_1<long long> _ptr__1807(_1807 ? _1807->raw() : nullptr,_1807 ? _1807->size(0) : 0);
      int _1808 = (int)0;
      {
        int _9381 = (int)0;
        int _9382 = _1804;
        for (int _1809 = _9381; _1809 < _9382; ++_1809)
        {
          {
            _ptr__1807[safe_add( safe_mul( _1809,_1804 ),_1809 )] = safe_add( _ptr__1806[_1808],(int)1 );
            ++ _1808;
            int _9383 = safe_add( _1809,(int)1 );
            int _9384 = _1804;
            for (int _1810 = _9383; _1810 < _9384; ++_1810)
            {
              {
                _ptr__1807[safe_add( safe_mul( _1809,_1804 ),_1810 )] = safe_add( _ptr__1806[_1808],(int)1 );
                _ptr__1807[safe_add( safe_mul( _1810,_1804 ),_1809 )] = safe_add( _ptr__1806[_1808],(int)1 );
                ++ _1808;
              }
            }
          }
        }
      }
      return _1807;
    }
  }
  else
  {
    {
      int _1811 = (int)0;
      {
        int _9385 = (int)0;
        int _9386 = (int)((_1805)->size(0));
        for (int _1812 = _9385; _1812 < _9386; ++_1812)
        {
          {
            int _9387;
            bool _9388 = ((_ptr__1805[_1812] % safe_add( _1804,(int)1 )) == (int)0);
            if (_9388)
            {
              _9387 = (int)1;
            }
            else
            {
              _9387 = (int)2;
            }
            _1811 += _9387;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1813 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1811)));
      _checked_ptr_1<long long> _ptr__1813(_1813 ? _1813->raw() : nullptr,_1813 ? _1813->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1814 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1811)));
      _checked_ptr_1<long long> _ptr__1814(_1814 ? _1814->raw() : nullptr,_1814 ? _1814->size(0) : 0);
      {
        int _1815 = (int)0;
        int _9389 = (int)0;
        int _9390 = (int)((_1805)->size(0));
        for (int _1816 = _9389; _1816 < _9390; ++_1816)
        {
          {
            long long _1817 = (_ptr__1805[_1816] / _1804);
            long long _1818 = (_ptr__1805[_1816] % _1804);
            _ptr__1813[_1815] = _ptr__1805[_1816];
            _ptr__1814[_1815] = safe_add( _ptr__1806[_1816],(int)1 );
            ++ _1815;
            if ((_1817 != _1818))
            {
              {
                _ptr__1813[_1815] = safe_add( safe_mul( _1818,_1804 ),_1817 );
                _ptr__1814[_1815] = safe_add( _ptr__1806[_1816],(int)1 );
                ++ _1815;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9391;
      for (int _1820 = (int)0, _9392 = _1811; _1820 < _9392 ; ++_1820)
      {
        _9391.push_back(_1820);
      }
      auto _9393 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9391.size()),_9391.begin(),_9391.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1819 = _9393;
      _checked_ptr_1<long long> _ptr__1819(_1819 ? _1819->raw() : nullptr,_1819 ? _1819->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1819,_1813,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1811));
      std::vector<long long> _9394;
      for (int _1821 = (int)0, _9395 = _1811; _1821 < _9395 ; ++_1821)
      {
        _9394.push_back(_ptr__1814[_ptr__1819[_1821]]);
      }
      auto _9396 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9394.size()),_9394.begin(),_9394.end()));
      return _9396;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_sp(int _1822,std::shared_ptr< monty::ndarray< long long,1 > > _1823){
  _checked_ptr_1<long long> _ptr__1823(_1823 ? _1823->raw() : nullptr, _1823 ? _1823->size(0) : 0);
  if ((NULL == _1823.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1824 = (int)0;
      {
        int _9397 = (int)0;
        int _9398 = (int)((_1823)->size(0));
        for (int _1825 = _9397; _1825 < _9398; ++_1825)
        {
          {
            int _9399;
            bool _9400 = ((_ptr__1823[_1825] % safe_add( _1822,(int)1 )) == (int)0);
            if (_9400)
            {
              _9399 = (int)1;
            }
            else
            {
              _9399 = (int)2;
            }
            _1824 += _9399;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1826 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1824)));
      _checked_ptr_1<long long> _ptr__1826(_1826 ? _1826->raw() : nullptr,_1826 ? _1826->size(0) : 0);
      {
        int _1827 = (int)0;
        int _9401 = (int)0;
        int _9402 = (int)((_1823)->size(0));
        for (int _1828 = _9401; _1828 < _9402; ++_1828)
        {
          {
            long long _1829 = (_ptr__1823[_1828] / _1822);
            long long _1830 = (_ptr__1823[_1828] % _1822);
            _ptr__1826[_1827] = _ptr__1823[_1828];
            ++ _1827;
            if ((_1829 != _1830))
            {
              {
                _ptr__1826[_1827] = safe_add( safe_mul( _1830,_1822 ),_1829 );
                ++ _1827;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9403;
      for (int _1832 = (int)0, _9404 = _1824; _1832 < _9404 ; ++_1832)
      {
        _9403.push_back(_1832);
      }
      auto _9405 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9403.size()),_9403.begin(),_9403.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1831 = _9405;
      _checked_ptr_1<long long> _ptr__1831(_1831 ? _1831->raw() : nullptr,_1831 ? _1831->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1831,_1826,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1824));
      std::vector<long long> _9406;
      for (int _1833 = (int)0, _9407 = _1824; _1833 < _9407 ; ++_1833)
      {
        _9406.push_back(_ptr__1826[_ptr__1831[_1833]]);
      }
      auto _9408 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9406.size()),_9406.begin(),_9406.end()));
      return _9408;
    }
  }
}
void mosek::fusion::p_SymLinearVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1834,    monty::rc_ptr< ::mosek::fusion::Model > _1835){ return new mosek::fusion::LinearVariable(_1834,_1835); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1834,    monty::rc_ptr< ::mosek::fusion::Model > _1835) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1834,_1835); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1834,    monty::rc_ptr< ::mosek::fusion::Model > _1835){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1834,_1835);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_1834)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_1834)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_1834)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_1834)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_1834)->name;
  }
}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1836,    const std::string &  _1837,    long long _1838,    std::shared_ptr< monty::ndarray< int,1 > > _1839,    std::shared_ptr< monty::ndarray< long long,1 > > _1840,    std::shared_ptr< monty::ndarray< int,1 > > _1841){ return new mosek::fusion::LinearVariable(_1836,_1837,_1838,_1839,_1840,_1841); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1836,    const std::string &  _1837,    long long _1838,    std::shared_ptr< monty::ndarray< int,1 > > _1839,    std::shared_ptr< monty::ndarray< long long,1 > > _1840,    std::shared_ptr< monty::ndarray< int,1 > > _1841) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1836,_1837,_1838,_1839,_1840,_1841); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1836,    const std::string &  _1837,    long long _1838,    std::shared_ptr< monty::ndarray< int,1 > > _1839,    std::shared_ptr< monty::ndarray< long long,1 > > _1840,    std::shared_ptr< monty::ndarray< int,1 > > _1841){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1839(_1839 ? _1839->raw() : nullptr, _1839 ? _1839->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1840(_1840 ? _1840->raw() : nullptr, _1840 ? _1840->size(0) : 0);
    _checked_ptr_1<int> _ptr__1841(_1841 ? _1841->raw() : nullptr, _1841 ? _1841->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1836,_1837,_1839,_1838,_1840,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_1841));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _1837;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _1841;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _1840;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _1839;
  }
}std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1842 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1842->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _9409 = (int)1;
      int _9410 = (int)((shape)->size(0));
      for (int _1843 = _9409; _1843 < _9410; ++_1843)
      {
        {
          _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1843)));
        }
      }
    }
  }
  {}
  _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sparsity.get()))
  {
    {
      _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1842->toString();
}
void mosek::fusion::p_LinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1844 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1845 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1845->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1845->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _9411 = (int)1;
          int _9412 = _pubthis->getND();
          for (int _1846 = _9411; _1846 < _9412; ++_1846)
          {
            {
              _1845->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1846);
            }
          }
        }
      }
      {}
      _1845->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _9413;
      bool _9414 = (_pubthis->getND() > (int)0);
      if (_9414)
      {
        _9413 = _pubthis->getShape();
      }
      else
      {
        _9413 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
      }
      mosek::fusion::p_Model::_get_impl(_1844.get())->varnames(nativeidxs,_1845->toString(),_9413,sparsity);
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1847){
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_1847)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1848){
  _checked_ptr_1<int> _ptr__1848(_1848 ? _1848->raw() : nullptr, _1848 ? _1848->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1849 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1848)->size(0)))));
  _checked_ptr_1<long long> _ptr__1849(_1849 ? _1849->raw() : nullptr,_1849 ? _1849->size(0) : 0);
  int _9415 = (int)0;
  int _9416 = (int)((_1848)->size(0));
  for (int _1850 = _9415; _1850 < _9416; ++_1850)
  {
    {
      _ptr__1849[_1850] = _ptr__1848[_1850];
    }
  }
  return _1849;
}
void mosek::fusion::p_LinearVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1851,    monty::rc_ptr< ::mosek::fusion::Model > _1852){ return new mosek::fusion::ConicVariable(_1851,_1852); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1851,    monty::rc_ptr< ::mosek::fusion::Model > _1852) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1851,_1852); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1851,    monty::rc_ptr< ::mosek::fusion::Model > _1852){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1851,_1852);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_1851)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1851)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_1851)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1851)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_1851)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_1851)->name;
  }
}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1853,    const std::string &  _1854,    int _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856,    std::shared_ptr< monty::ndarray< int,1 > > _1857){ return new mosek::fusion::ConicVariable(_1853,_1854,_1855,_1856,_1857); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1853,    const std::string &  _1854,    int _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856,    std::shared_ptr< monty::ndarray< int,1 > > _1857) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1853,_1854,_1855,_1856,_1857); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1853,    const std::string &  _1854,    int _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856,    std::shared_ptr< monty::ndarray< int,1 > > _1857){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1856(_1856 ? _1856->raw() : nullptr, _1856 ? _1856->size(0) : 0);
    _checked_ptr_1<int> _ptr__1857(_1857 ? _1857->raw() : nullptr, _1857 ? _1857->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1853,_1854,_1856,_1855,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_1857));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _1854;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _1855;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _1856;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _1857;
  }
}std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1858 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9417 = (int)1;
  int _9418 = (int)((shape)->size(0));
  for (int _1859 = _9417; _1859 < _9418; ++_1859)
  {
    {
      _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1859)));
    }
  }
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _1858->toString();
}
void mosek::fusion::p_ConicVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1860 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1861 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1861->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      _1861->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
      int _9419 = (int)1;
      int _9420 = _pubthis->getND();
      for (int _1862 = _9419; _1862 < _9420; ++_1862)
      {
        {
          _1861->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1862);
        }
      }
      _1861->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _9421;
      bool _9422 = (_pubthis->getND() > (int)0);
      if (_9422)
      {
        _9421 = _pubthis->getShape();
      }
      else
      {
        _9421 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      }
      mosek::fusion::p_Model::_get_impl(_1860.get())->varnames(nativeidxs,_1861->toString(),_9421,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1863){
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_1863)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1864){
  _checked_ptr_1<int> _ptr__1864(_1864 ? _1864->raw() : nullptr, _1864 ? _1864->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1865 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1864)->size(0)))));
  _checked_ptr_1<long long> _ptr__1865(_1865 ? _1865->raw() : nullptr,_1865 ? _1865->size(0) : 0);
  int _9423 = (int)0;
  int _9424 = (int)((_1864)->size(0));
  for (int _1866 = _9423; _1866 < _9424; ++_1866)
  {
    {
      _ptr__1865[_1866] = _ptr__1864[_1866];
    }
  }
  return _1865;
}
void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _1867,    monty::rc_ptr< ::mosek::fusion::Model > _1868){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1867,_1868);
    name = mosek::fusion::p_ModelVariable::_get_impl(_1867)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_1867)->varid;
    nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_1867)->nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_1867)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_1867)->sparsity;
  }
}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1869,    const std::string &  _1870,    std::shared_ptr< monty::ndarray< int,1 > > _1871,    long long _1872,    std::shared_ptr< monty::ndarray< long long,1 > > _1873,    std::shared_ptr< monty::ndarray< long long,1 > > _1874){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1871(_1871 ? _1871->raw() : nullptr, _1871 ? _1871->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1873(_1873 ? _1873->raw() : nullptr, _1873 ? _1873->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1874(_1874 ? _1874->raw() : nullptr, _1874 ? _1874->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1869,_1871,_1873,_1874);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _1870;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _1872;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _1871;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _1873;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->nativeidxs = _1874;
  }
}void mosek::fusion::ModelVariable :: elementName(long long _1875,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1876) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_1875,_1876); }void mosek::fusion::p_ModelVariable::elementName(long long _1875,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1876){
  std::string _9425;
  bool _9426 = ((int)((name).size()) == (int)0);
  if (_9426)
  {
    _9425 = std::string ("_");
  }
  else
  {
    _9425 = name;
  }
  _1876->__mosek_2fusion_2Utils_2StringBuffer__a(_9425)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_1875))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
void mosek::fusion::ModelVariable :: remove() { mosek::fusion::p_ModelVariable::_get_impl(this)->remove(); }void mosek::fusion::p_ModelVariable::remove(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->removeVariableBlock(varid);
}
void mosek::fusion::p_ModelVariable::destroy(){sparsity.reset();shape.reset();nativeidxs.reset();}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1878){ return new mosek::fusion::NilVariable(_1878); }mosek::fusion::NilVariable::NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1878) :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_1878); }void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _1878){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1878(_1878 ? _1878->raw() : nullptr, _1878 ? _1878->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_1878),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))));
    std::vector<int> _9427;
    for (int _1879 = (int)0, _9428 = (int)((_1878)->size(0)); _1879 < _9428 ; ++_1879)
    {
      _9427.push_back(_ptr__1878[_1879]);
    }
    auto _9429 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9427.size()),_9427.begin(),_9427.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _9429;
  }
}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
  }
}void mosek::fusion::p_NilVariable::flushNames(){
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(long long _1880,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1881) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_1880,_1881); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(long long _1880,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1881) { return __mosek_2fusion_2NilVariable__elementDesc(_1880,_1881); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(long long _1880,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1881){
  return _1881;
}
void mosek::fusion::NilVariable :: elementName(long long _1882,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1883) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_1882,_1883); }void mosek::fusion::p_NilVariable::elementName(long long _1882,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1883){
}
int mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_NilVariable::numInst(){
  return (int)0;
}
int mosek::fusion::NilVariable :: inst(int _1884,std::shared_ptr< monty::ndarray< long long,1 > > _1885,std::shared_ptr< monty::ndarray< long long,1 > > _1886) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1884,_1885,_1886); }int mosek::fusion::p_NilVariable::inst(int _1884,std::shared_ptr< monty::ndarray< long long,1 > > _1885,std::shared_ptr< monty::ndarray< long long,1 > > _1886){
  _checked_ptr_1<long long> _ptr__1885(_1885 ? _1885->raw() : nullptr, _1885 ? _1885->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1886(_1886 ? _1886->raw() : nullptr, _1886 ? _1886->size(0) : 0);
  return (int)0;
}
void mosek::fusion::NilVariable :: inst(int _1887,std::shared_ptr< monty::ndarray< long long,1 > > _1888) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1887,_1888); }void mosek::fusion::p_NilVariable::inst(int _1887,std::shared_ptr< monty::ndarray< long long,1 > > _1888){
  _checked_ptr_1<long long> _ptr__1888(_1888 ? _1888->raw() : nullptr, _1888 ? _1888->size(0) : 0);
}
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1889,bool _1890) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_1889,_1890); }void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1889,bool _1890){
  _checked_ptr_1<double> _ptr__1889(_1889 ? _1889->raw() : nullptr, _1889 ? _1889->size(0) : 0);
}
void mosek::fusion::NilVariable :: values(int _1891,std::shared_ptr< monty::ndarray< double,1 > > _1892,bool _1893) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_1891,_1892,_1893); }void mosek::fusion::p_NilVariable::values(int _1891,std::shared_ptr< monty::ndarray< double,1 > > _1892,bool _1893){
  _checked_ptr_1<double> _ptr__1892(_1892 ? _1892->raw() : nullptr, _1892 ? _1892->size(0) : 0);
}
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_NilVariable::make_continuous(){
}
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_NilVariable::make_integer(){
}
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString(){
  return std::string ("NilVariable");
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return __mosek_2fusion_2NilVariable__index(_1894); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return __mosek_2fusion_2NilVariable__index(_1894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return __mosek_2fusion_2NilVariable__index(_1894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894){
  _checked_ptr_1<int> _ptr__1894(_1894 ? _1894->raw() : nullptr, _1894 ? _1894->size(0) : 0);
  std::vector<int> _9430;
  for (int _1895 = (int)0, _9431 = (int)((shape)->size(0)); _1895 < _9431 ; ++_1895)
  {
    _9430.push_back((int)1);
  }
  auto _9432 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9430.size()),_9430.begin(),_9430.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9432)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int _1896) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _1896) { return __mosek_2fusion_2NilVariable__index(_1896); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int _1896) { return __mosek_2fusion_2NilVariable__index(_1896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(int _1896) { return __mosek_2fusion_2NilVariable__index(_1896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int _1896){
  std::vector<int> _9433;
  for (int _1897 = (int)0, _9434 = (int)((shape)->size(0)); _1897 < _9434 ; ++_1897)
  {
    _9433.push_back((int)1);
  }
  auto _9435 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9433.size()),_9433.begin(),_9433.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9435)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1898,_1899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return __mosek_2fusion_2NilVariable__slice(_1898,_1899); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return __mosek_2fusion_2NilVariable__slice(_1898,_1899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return __mosek_2fusion_2NilVariable__slice(_1898,_1899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899){
  _checked_ptr_1<int> _ptr__1898(_1898 ? _1898->raw() : nullptr, _1898 ? _1898->size(0) : 0);
  _checked_ptr_1<int> _ptr__1899(_1899 ? _1899->raw() : nullptr, _1899 ? _1899->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_1898)->size(0))) || ((int)((shape)->size(0)) != (int)((_1899)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int _9436 = (int)0;
  int _9437 = (int)((_1898)->size(0));
  for (int _1900 = _9436; _1900 < _9437; ++_1900)
  {
    {
      if (((_ptr__1899[_1900] > _ptr__1898[_1900]) || ((_ptr__1898[_1900] < (int)0) || (_ptr__1899[_1900] >= ((*shape)(_1900))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _9438;
  for (int _1901 = (int)0, _9439 = (int)((shape)->size(0)); _1901 < _9439 ; ++_1901)
  {
    _9438.push_back((_ptr__1899[_1901] - _ptr__1898[_1901]));
  }
  auto _9440 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9438.size()),_9438.begin(),_9438.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9440)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int _1902,int _1903) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1902,_1903); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int _1902,int _1903) { return __mosek_2fusion_2NilVariable__slice(_1902,_1903); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int _1902,int _1903) { return __mosek_2fusion_2NilVariable__slice(_1902,_1903); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(int _1902,int _1903) { return __mosek_2fusion_2NilVariable__slice(_1902,_1903); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int _1902,int _1903){
  if (((_1903 > _1902) || ((_1902 < (int)0) || (_1903 > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_1903 - _1902))}))).as<::mosek::fusion::Variable>();
    }
  }
}
void mosek::fusion::p_NilVariable::destroy(){shape.reset();}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _1904,    monty::rc_ptr< ::mosek::fusion::Model > _1905){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _1905;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_1904)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_1904)->sparsity;
    nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_1904)->nativeidxs;
  }
}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1906,    std::shared_ptr< monty::ndarray< int,1 > > _1907,    std::shared_ptr< monty::ndarray< long long,1 > > _1908,    std::shared_ptr< monty::ndarray< long long,1 > > _1909){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1907(_1907 ? _1907->raw() : nullptr, _1907 ? _1907->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1908(_1908 ? _1908->raw() : nullptr, _1908 ? _1908->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1909(_1909 ? _1909->raw() : nullptr, _1909 ? _1909->size(0) : 0);
    model = _1906;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _1907;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _1908;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs = _1909;
  }
}std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1910 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1910->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1910->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _9441 = (int)1;
      int _9442 = (int)((shape)->size(0));
      for (int _1911 = _9441; _1911 < _9442; ++_1911)
      {
        {
          _1910->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1911)));
        }
      }
    }
  }
  {}
  _1910->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1910->toString();
}
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1912,monty::rc_ptr< ::mosek::fusion::WorkStack > _1913,monty::rc_ptr< ::mosek::fusion::WorkStack > _1914) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_1912,_1913,_1914); }void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1912,monty::rc_ptr< ::mosek::fusion::WorkStack > _1913,monty::rc_ptr< ::mosek::fusion::WorkStack > _1914){
  int _1915 = (int)((nativeidxs)->size(0));
  int _1916 = _1915;
  int _1917 = (int)((shape)->size(0));
  bool _1918 = (NULL != sparsity.get());
  _1912->alloc_expr(_1917,_1916,_1915,_1918);
  int _1919 = mosek::fusion::p_WorkStack::_get_impl(_1912)->ptr_base;
  int _1920 = mosek::fusion::p_WorkStack::_get_impl(_1912)->nidxs_base;
  int _1921 = mosek::fusion::p_WorkStack::_get_impl(_1912)->sp_base;
  int _1922 = mosek::fusion::p_WorkStack::_get_impl(_1912)->cof_base;
  int _1923 = mosek::fusion::p_WorkStack::_get_impl(_1912)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _1924 = mosek::fusion::p_WorkStack::_get_impl(_1912)->i32;
  _checked_ptr_1<int> _ptr__1924(_1924 ? _1924->raw() : nullptr,_1924 ? _1924->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1925 = mosek::fusion::p_WorkStack::_get_impl(_1912)->i64;
  _checked_ptr_1<long long> _ptr__1925(_1925 ? _1925->raw() : nullptr,_1925 ? _1925->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1926 = mosek::fusion::p_WorkStack::_get_impl(_1912)->f64;
  _checked_ptr_1<double> _ptr__1926(_1926 ? _1926->raw() : nullptr,_1926 ? _1926->size(0) : 0);
  int _9443 = (int)0;
  int _9444 = _1917;
  for (int _1927 = _9443; _1927 < _9444; ++_1927)
  {
    {
      _ptr__1924[safe_add( _1923,_1927 )] = ((*shape)(_1927));
    }
  }
  {
    int _9445 = (int)0;
    int _9446 = safe_add( _1915,(int)1 );
    for (int _1928 = _9445; _1928 < _9446; ++_1928)
    {
      {
        _ptr__1924[safe_add( _1919,_1928 )] = _1928;
      }
    }
    int _9447 = (int)0;
    int _9448 = _1915;
    for (int _1929 = _9447; _1929 < _9448; ++_1929)
    {
      {
        _ptr__1925[safe_add( _1920,_1929 )] = ((*nativeidxs)(_1929));
      }
    }
    if (_1918)
    {
      {
        int _9449 = (int)0;
        int _9450 = _1915;
        for (int _1930 = _9449; _1930 < _9450; ++_1930)
        {
          {
            _ptr__1925[safe_add( _1921,_1930 )] = ((*sparsity)(_1930));
          }
        }
      }
    }
    {}
    int _9451 = (int)0;
    int _9452 = _1915;
    for (int _1931 = _9451; _1931 < _9452; ++_1931)
    {
      {
        _ptr__1926[safe_add( _1922,_1931 )] = 1.0;
      }
    }
  }
}
void mosek::fusion::BaseVariable :: remove() { mosek::fusion::p_BaseVariable::_get_impl(this)->remove(); }void mosek::fusion::p_BaseVariable::remove(){
  throw ::mosek::fusion::DeletionError(std::string ("Only original variables can be removed"));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int _1932,int _1933) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_1932,_1933); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int _1932,int _1933) { return __mosek_2fusion_2BaseVariable__fromTril(_1932,_1933); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int _1932,int _1933){
  if (((_1932 < (int)0) || (_1932 >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension"));
    }
  }
  else if((((*shape)(_1932)) != (safe_mul( _1933,safe_add( _1933,(int)1 ) ) / (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  {}
  int _1934 = (int)1;
  int _9453 = (int)0;
  int _9454 = _1932;
  for (int _1935 = _9453; _1935 < _9454; ++_1935)
  {
    {
      _1934 *= ((*shape)(_1935));
    }
  }
  int _1936 = ((*shape)(_1932));
  int _1937 = (int)1;
  int _9455 = safe_add( _1932,(int)1 );
  int _9456 = (int)((shape)->size(0));
  for (int _1938 = _9455; _1938 < _9456; ++_1938)
  {
    {
      _1937 *= ((*shape)(_1938));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1939 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((shape)->size(0)),(int)1 ))));
  _checked_ptr_1<int> _ptr__1939(_1939 ? _1939->raw() : nullptr,_1939 ? _1939->size(0) : 0);
  int _9457 = (int)0;
  int _9458 = _1932;
  for (int _1940 = _9457; _1940 < _9458; ++_1940)
  {
    {
      _ptr__1939[_1940] = ((*shape)(_1940));
    }
  }
  _ptr__1939[_1932] = _1933;
  _ptr__1939[safe_add( _1932,(int)1 )] = _1933;
  int _9459 = safe_add( _1932,(int)1 );
  int _9460 = (int)((shape)->size(0));
  for (int _1941 = _9459; _1941 < _9460; ++_1941)
  {
    {
      _ptr__1939[safe_add( _1941,(int)1 )] = ((*shape)(_1941));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1942 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( safe_mul( safe_mul( _1934,_1933 ),_1933 ),_1937 ))));
      _checked_ptr_1<long long> _ptr__1942(_1942 ? _1942->raw() : nullptr,_1942 ? _1942->size(0) : 0);
      int _1943 = (int)0;
      int _9461 = (int)0;
      int _9462 = _1934;
      for (int _1944 = _9461; _1944 < _9462; ++_1944)
      {
        {
          int _9463 = (int)0;
          int _9464 = _1933;
          for (int _1945 = _9463; _1945 < _9464; ++_1945)
          {
            {
              int _9465 = (int)0;
              int _9466 = _1933;
              for (int _1946 = _9465; _1946 < _9466; ++_1946)
              {
                {
                  int _9467 = (int)0;
                  int _9468 = _1937;
                  for (int _1947 = _9467; _1947 < _9468; ++_1947)
                  {
                    {
                      if ((_1945 >= _1946))
                      {
                        {
                          _ptr__1942[_1943] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _1944,_1936 ),_1937 ),safe_mul( safe_add( (safe_mul( _1945,safe_add( _1945,(int)1 ) ) / (int)2),_1946 ),_1937 ) ),_1947 )));
                        }
                      }
                      else
                      {
                        {
                          _ptr__1942[_1943] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _1944,_1936 ),_1937 ),safe_mul( safe_add( (safe_mul( _1946,safe_add( _1946,(int)1 ) ) / (int)2),_1945 ),_1937 ) ),_1947 )));
                        }
                      }
                      ++ _1943;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1939,nullptr,_1942)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1948 = (int)0;
      int _9469 = (int)0;
      int _9470 = (int)((sparsity)->size(0));
      for (int _1949 = _9469; _1949 < _9470; ++_1949)
      {
        {
          long long _1950 = ((((*sparsity)(_1949)) / _1937) % _1936);
          int _1951 = (int)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_1950 ) ),safe_add( (int)1,safe_mul( (int)2,_1950 ) ) )))) / (int)4);
          long long _1952 = (((*sparsity)(_1949)) - (safe_mul( _1951,safe_add( _1951,(int)1 ) ) / (int)2));
          if ((_1951 == _1952))
          {
            {
              _1948 += (int)1;
            }
          }
          else
          {
            {
              _1948 += (int)2;
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1953 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1948)));
      _checked_ptr_1<long long> _ptr__1953(_1953 ? _1953->raw() : nullptr,_1953 ? _1953->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1954 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1948)));
      _checked_ptr_1<long long> _ptr__1954(_1954 ? _1954->raw() : nullptr,_1954 ? _1954->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1955 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1948)));
      _checked_ptr_1<long long> _ptr__1955(_1955 ? _1955->raw() : nullptr,_1955 ? _1955->size(0) : 0);
      int _9471 = (int)0;
      int _9472 = _1948;
      for (int _1956 = _9471; _1956 < _9472; ++_1956)
      {
        {
          _ptr__1955[_1956] = _1956;
        }
      }
      int _1957 = (int)0;
      int _9473 = (int)0;
      int _9474 = (int)((sparsity)->size(0));
      for (int _1958 = _9473; _1958 < _9474; ++_1958)
      {
        {
          long long _1959 = (((*sparsity)(_1958)) / safe_mul( _1936,_1937 ));
          long long _1960 = ((((*sparsity)(_1958)) / _1937) % _1936);
          long long _1961 = (((*sparsity)(_1958)) % _1937);
          int _1962 = (int)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_1960 ) ),safe_add( (int)1,safe_mul( (int)2,_1960 ) ) )))) / (int)4);
          long long _1963 = (((*sparsity)(_1958)) - (safe_mul( _1962,safe_add( _1962,(int)1 ) ) / (int)2));
          if ((_1962 == _1963))
          {
            {
              _ptr__1953[_1957] = ((*nativeidxs)(_1958));
              _ptr__1954[_1957] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1959,_1933 ),_1933 ),_1937 ),safe_mul( safe_add( safe_mul( _1962,_1933 ),_1963 ),_1937 ) ),_1961 );
              _1957 += (int)1;
            }
          }
          else
          {
            {
              _ptr__1953[_1957] = ((*nativeidxs)(_1958));
              _ptr__1953[safe_add( _1957,(int)1 )] = ((*nativeidxs)(_1958));
              _ptr__1954[_1957] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1959,_1933 ),_1933 ),_1937 ),safe_mul( safe_add( safe_mul( _1962,_1933 ),_1963 ),_1937 ) ),_1961 );
              _ptr__1954[safe_add( _1957,(int)1 )] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1959,_1933 ),_1933 ),_1937 ),safe_mul( safe_add( safe_mul( _1963,_1933 ),_1962 ),_1937 ) ),_1961 );
              _1957 += (int)2;
            }
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_1955,_1953,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1948));
      std::vector<long long> _9475;
      for (int _1964 = (int)0, _9476 = _1948; _1964 < _9476 ; ++_1964)
      {
        _9475.push_back(_ptr__1954[_ptr__1955[_1964]]);
      }
      auto _9477 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9475.size()),_9475.begin(),_9475.end()));
      std::vector<long long> _9478;
      for (int _1965 = (int)0, _9479 = _1948; _1965 < _9479 ; ++_1965)
      {
        _9478.push_back(_ptr__1953[_ptr__1955[_1965]]);
      }
      auto _9480 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9478.size()),_9478.begin(),_9478.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1939,_9477,_9480)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int _1966) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_1966); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int _1966) { return __mosek_2fusion_2BaseVariable__fromTril(_1966); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__fromTril(int _1966) { return __mosek_2fusion_2BaseVariable__fromTril(_1966); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int _1966){
  return _pubthis->__mosek_2fusion_2BaseVariable__fromTril((int)0,_1966);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril(int _1967,int _1968) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(_1967,_1968); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril(int _1967,int _1968) { return __mosek_2fusion_2BaseVariable__tril(_1967,_1968); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(int _1967,int _1968){
  if (((_1967 < (int)0) || ((_1967 >= _1968) || (_1968 >= (int)((shape)->size(0))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension specification"));
    }
  }
  else
  {
    {
      if ((((*shape)(_1967)) != ((*shape)(_1968))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Operation only valid for square variables"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1969 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((shape)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__1969(_1969 ? _1969->raw() : nullptr,_1969 ? _1969->size(0) : 0);
  int _9481 = (int)0;
  int _9482 = _1967;
  for (int _1970 = _9481; _1970 < _9482; ++_1970)
  {
    {
      _ptr__1969[_1970] = ((*shape)(_1970));
    }
  }
  _ptr__1969[_1967] = (safe_mul( ((*shape)(_1967)),safe_add( ((*shape)(_1967)),(int)1 ) ) / (int)2);
  int _9483 = safe_add( _1967,(int)1 );
  int _9484 = _1968;
  for (int _1971 = _9483; _1971 < _9484; ++_1971)
  {
    {
      _ptr__1969[_1971] = ((*shape)(_1971));
    }
  }
  int _9485 = safe_add( _1968,(int)1 );
  int _9486 = (int)((shape)->size(0));
  for (int _1972 = _9485; _1972 < _9486; ++_1972)
  {
    {
      _ptr__1969[(_1972 - (int)1)] = ((*shape)(_1972));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      int _1973 = (int)1;
      int _9487 = (int)0;
      int _9488 = _1967;
      for (int _1974 = _9487; _1974 < _9488; ++_1974)
      {
        {
          _1973 *= ((*shape)(_1974));
        }
      }
      int _1975 = ((*shape)(_1967));
      int _1976 = (int)1;
      int _9489 = safe_add( _1967,(int)1 );
      int _9490 = _1968;
      for (int _1977 = _9489; _1977 < _9490; ++_1977)
      {
        {
          _1976 *= ((*shape)(_1977));
        }
      }
      int _1978 = ((*shape)(_1968));
      int _1979 = (int)1;
      int _9491 = safe_add( _1968,(int)1 );
      int _9492 = (int)((shape)->size(0));
      for (int _1980 = _9491; _1980 < _9492; ++_1980)
      {
        {
          _1979 *= ((*shape)(_1980));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1981 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((safe_mul( safe_mul( safe_mul( safe_mul( _1973,_1976 ),_1979 ),_1975 ),safe_add( _1975,(int)1 ) ) / (int)2))));
      _checked_ptr_1<long long> _ptr__1981(_1981 ? _1981->raw() : nullptr,_1981 ? _1981->size(0) : 0);
      int _1982 = (int)0;
      int _9493 = (int)0;
      int _9494 = _1973;
      for (int _1983 = _9493; _1983 < _9494; ++_1983)
      {
        {
          int _9495 = (int)0;
          int _9496 = _1975;
          for (int _1984 = _9495; _1984 < _9496; ++_1984)
          {
            {
              int _9497 = (int)0;
              int _9498 = safe_add( _1984,(int)1 );
              for (int _1985 = _9497; _1985 < _9498; ++_1985)
              {
                {
                  int _9499 = (int)0;
                  int _9500 = _1976;
                  for (int _1986 = _9499; _1986 < _9500; ++_1986)
                  {
                    {
                      int _9501 = (int)0;
                      int _9502 = _1979;
                      for (int _1987 = _9501; _1987 < _9502; ++_1987)
                      {
                        {
                          _ptr__1981[_1982] = ((*nativeidxs)(safe_add( _1987,safe_mul( _1979,safe_add( _1985,safe_mul( _1978,safe_add( _1986,safe_mul( _1976,safe_add( _1984,safe_mul( _1975,_1983 ) ) ) ) ) ) ) )));
                          _1982 += (int)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1969,nullptr,_1981)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1988 = (int)1;
      int _9503 = (int)0;
      int _9504 = _1967;
      for (int _1989 = _9503; _1989 < _9504; ++_1989)
      {
        {
          _1988 *= ((*shape)(_1989));
        }
      }
      int _1990 = ((*shape)(_1967));
      int _1991 = (int)1;
      int _9505 = safe_add( _1967,(int)1 );
      int _9506 = _1968;
      for (int _1992 = _9505; _1992 < _9506; ++_1992)
      {
        {
          _1991 *= ((*shape)(_1992));
        }
      }
      int _1993 = ((*shape)(_1968));
      int _1994 = (int)1;
      int _9507 = safe_add( _1968,(int)1 );
      int _9508 = (int)((shape)->size(0));
      for (int _1995 = _9507; _1995 < _9508; ++_1995)
      {
        {
          _1994 *= ((*shape)(_1995));
        }
      }
      int _1996 = (int)1;
      int _1997 = _1994;
      int _1998 = safe_mul( _1997,_1993 );
      int _1999 = safe_mul( _1998,_1991 );
      int _2000 = safe_mul( _1999,_1990 );
      int _2001 = (int)0;
      int _9509 = (int)0;
      int _9510 = (int)((sparsity)->size(0));
      for (int _2002 = _9509; _2002 < _9510; ++_2002)
      {
        {
          if ((((((*sparsity)(_2002)) / _1999) % _1990) >= ((((*sparsity)(_2002)) / _1997) % _1993)))
          {
            {
              ++ _2001;
            }
          }
          {}
        }
      }
      int _2003 = (int)1;
      int _2004 = _1994;
      int _2005 = safe_mul( _2004,_1991 );
      int _2006 = (safe_mul( safe_mul( _2005,_1990 ),safe_add( _1990,(int)1 ) ) / (int)2);
      std::shared_ptr< monty::ndarray< long long,1 > > _2007 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2007(_2007 ? _2007->raw() : nullptr,_2007 ? _2007->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2008 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2008(_2008 ? _2008->raw() : nullptr,_2008 ? _2008->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2009 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2009(_2009 ? _2009->raw() : nullptr,_2009 ? _2009->size(0) : 0);
      int _2010 = (int)0;
      {
        int _9511 = (int)0;
        int _9512 = (int)((sparsity)->size(0));
        for (int _2011 = _9511; _2011 < _9512; ++_2011)
        {
          {
            if ((((((*sparsity)(_2011)) / _1999) % _1990) >= ((((*sparsity)(_2011)) / _1997) % _1993)))
            {
              {
                long long _2012 = (((*sparsity)(_2011)) / _2000);
                long long _2013 = ((((*sparsity)(_2011)) / _1999) % _1990);
                long long _2014 = ((((*sparsity)(_2011)) / _1998) % _1991);
                long long _2015 = ((((*sparsity)(_2011)) / _1997) % _1993);
                long long _2016 = ((((*sparsity)(_2011)) / _1996) % _1994);
                _ptr__2008[_2010] = ((*nativeidxs)(_2011));
                _ptr__2009[_2010] = safe_add( safe_add( safe_add( safe_mul( _2006,_2012 ),safe_mul( _2005,safe_add( (safe_mul( _2013,safe_add( _2013,(int)1 ) ) / (int)2),_2015 ) ) ),safe_mul( _2004,_2014 ) ),safe_mul( _2003,_2016 ) );
                ++ _2010;
              }
            }
            {}
          }
        }
        int _9513 = (int)0;
        int _9514 = _2001;
        for (int _2017 = _9513; _2017 < _9514; ++_2017)
        {
          {
            _ptr__2007[_2017] = _2017;
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2007,_2008,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2001));
      std::shared_ptr< monty::ndarray< long long,1 > > _2018 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2018(_2018 ? _2018->raw() : nullptr,_2018 ? _2018->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2019 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2019(_2019 ? _2019->raw() : nullptr,_2019 ? _2019->size(0) : 0);
      int _9515 = (int)0;
      int _9516 = _2001;
      for (int _2020 = _9515; _2020 < _9516; ++_2020)
      {
        {
          _ptr__2018[_2020] = _ptr__2008[_ptr__2007[_2020]];
        }
      }
      int _9517 = (int)0;
      int _9518 = _2001;
      for (int _2021 = _9517; _2021 < _9518; ++_2021)
      {
        {
          _ptr__2019[_2021] = _ptr__2009[_ptr__2007[_2021]];
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1969,_2019,_2018)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril() { return __mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__tril() { return __mosek_2fusion_2BaseVariable__tril(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(){
  return _pubthis->__mosek_2fusion_2BaseVariable__tril((int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2022,int _2023,int _2024) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2022,_2023,_2024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2022,int _2023,int _2024) { return __mosek_2fusion_2BaseVariable__reshape(_2022,_2023,_2024); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2022,int _2023,int _2024) { return __mosek_2fusion_2BaseVariable__reshape(_2022,_2023,_2024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2022,int _2023,int _2024){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2022),(int)(_2023),(int)(_2024)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2025,int _2026) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2025,_2026); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2025,int _2026) { return __mosek_2fusion_2BaseVariable__reshape(_2025,_2026); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2025,int _2026) { return __mosek_2fusion_2BaseVariable__reshape(_2025,_2026); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2025,int _2026){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2025),(int)(_2026)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2027) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2027) { return __mosek_2fusion_2BaseVariable__reshape(_2027); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2027) { return __mosek_2fusion_2BaseVariable__reshape(_2027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2027){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2027)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028) { return __mosek_2fusion_2BaseVariable__reshape(_2028); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028) { return __mosek_2fusion_2BaseVariable__reshape(_2028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028){
  _checked_ptr_1<int> _ptr__2028(_2028 ? _2028->raw() : nullptr, _2028 ? _2028->size(0) : 0);
  long long _2029 = (int)1;
  int _9519 = (int)0;
  int _9520 = (int)((_2028)->size(0));
  for (int _2030 = _9519; _2030 < _9520; ++_2030)
  {
    {
      if ((_ptr__2028[_2030] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _2029 *= _ptr__2028[_2030];
    }
  }
  if ((_2029 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int> _9521;
  for (int _2031 = (int)0, _9522 = (int)((_2028)->size(0)); _2031 < _9522 ; ++_2031)
  {
    _9521.push_back(_ptr__2028[_2031]);
  }
  auto _9523 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9521.size()),_9521.begin(),_9521.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_9523,sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
}
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2032) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2032); }void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2032){
  _checked_ptr_1<double> _ptr__2032(_2032 ? _2032->raw() : nullptr, _2032 ? _2032->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_2032)->size(0)) != (int)((nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,nativeidxs,_2032);
    }
  }
  else
  {
    {
      if (((int)((_2032)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _9524;
      for (int _2034 = (int)0, _9525 = (int)((nativeidxs)->size(0)); _2034 < _9525 ; ++_2034)
      {
        _9524.push_back(_ptr__2032[((*sparsity)(_2034))]);
      }
      auto _9526 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9524.size()),_9524.begin(),_9524.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _2033 = _9526;
      _checked_ptr_1<double> _ptr__2033(_2033 ? _2033->raw() : nullptr,_2033 ? _2033->size(0) : 0);
      model->setVariableValues(true,nativeidxs,_2033);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel(){
  return model;
}
int mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }int mosek::fusion::p_BaseVariable::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseVariable :: getDim(int _2035) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_2035); }int mosek::fusion::p_BaseVariable::getDim(int _2035){
  return ((*shape)(_2035));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseVariable::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
long long mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseVariable::getSize(){
  long long _2036 = (long long)1;
  int _9527 = (int)0;
  int _9528 = (int)((shape)->size(0));
  for (int _2037 = _9527; _2037 < _9528; ++_2037)
  {
    {
      _2036 *= ((*shape)(_2037));
    }
  }
  return _2036;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2038 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2038(_2038 ? _2038->raw() : nullptr,_2038 ? _2038->size(0) : 0);
  model->getVariableValues(false,nativeidxs,_2038,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2039 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2039(_2039 ? _2039->raw() : nullptr,_2039 ? _2039->size(0) : 0);
      int _9529 = (int)0;
      int _9530 = (int)((nativeidxs)->size(0));
      for (int _2040 = _9529; _2040 < _9530; ++_2040)
      {
        {
          _ptr__2039[((*sparsity)(_2040))] = _ptr__2038[_2040];
        }
      }
      _2038 = _2039;
      _ptr__2038.update(_2038 ? _2038->raw() : nullptr, _2038 ? _2038->size(0) : 0);
    }
  }
  {}
  return _2038;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2041 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2041(_2041 ? _2041->raw() : nullptr,_2041 ? _2041->size(0) : 0);
  model->getVariableValues(true,nativeidxs,_2041,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2042 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2042(_2042 ? _2042->raw() : nullptr,_2042 ? _2042->size(0) : 0);
      int _9531 = (int)0;
      int _9532 = (int)((nativeidxs)->size(0));
      for (int _2043 = _9531; _2043 < _9532; ++_2043)
      {
        {
          _ptr__2042[((*sparsity)(_2043))] = _ptr__2041[_2043];
        }
      }
      _2041 = _2042;
      _ptr__2041.update(_2041 ? _2041->raw() : nullptr, _2041 ? _2041->size(0) : 0);
    }
  }
  {}
  return _2041;
}
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous(){
  _pubthis->make_continuous();
}
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger(){
  _pubthis->make_integer();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose(){
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(((*shape)((int)0)))}),sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2044 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      _checked_ptr_1<long long> _ptr__2044(_2044 ? _2044->raw() : nullptr,_2044 ? _2044->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _9533;
      bool _9534 = (NULL == sparsity.get());
      if (_9534)
      {
        _9533 = nullptr;
      }
      else
      {
        _9533 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2045 = _9533;
      _checked_ptr_1<long long> _ptr__2045(_2045 ? _2045->raw() : nullptr,_2045 ? _2045->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int _2046 = (int)0;
          int _9535 = (int)0;
          int _9536 = ((*shape)((int)1));
          for (int _2047 = _9535; _2047 < _9536; ++_2047)
          {
            {
              int _9537 = (int)0;
              int _9538 = ((*shape)((int)0));
              for (int _2048 = _9537; _2048 < _9538; ++_2048)
              {
                {
                  _ptr__2044[_2046] = ((*nativeidxs)(safe_add( safe_mul( _2048,((*shape)((int)1)) ),_2047 )));
                  ++ _2046;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2049 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int> _ptr__2049(_2049 ? _2049->raw() : nullptr,_2049 ? _2049->size(0) : 0);
          int _2050 = ((*shape)((int)0));
          int _2051 = ((*shape)((int)1));
          int _9539 = (int)0;
          int _9540 = (int)((sparsity)->size(0));
          for (int _2052 = _9539; _2052 < _9540; ++_2052)
          {
            {
              ++ _ptr__2049[safe_add( (((*sparsity)(_2052)) % _2051),(int)1 )];
            }
          }
          int _9541 = (int)0;
          int _9542 = _2051;
          for (int _2053 = _9541; _2053 < _9542; ++_2053)
          {
            {
              _ptr__2049[safe_add( _2053,(int)1 )] += _ptr__2049[_2053];
            }
          }
          int _9543 = (int)0;
          int _9544 = (int)((sparsity)->size(0));
          for (int _2054 = _9543; _2054 < _9544; ++_2054)
          {
            {
              long long _2055 = (((*sparsity)(_2054)) % _2051);
              _ptr__2044[_ptr__2049[_2055]] = ((*nativeidxs)(_2054));
              _ptr__2045[_ptr__2049[_2055]] = safe_add( (((*sparsity)(_2054)) / _2051),safe_mul( (((*sparsity)(_2054)) % _2051),_2050 ) );
              ++ _ptr__2049[_2055];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*shape)((int)1))),(int)(((*shape)((int)0)))}),_2045,_2044)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2056,int _2057,int _2058) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2056,_2057,_2058); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2056,int _2057,int _2058) { return __mosek_2fusion_2BaseVariable__index(_2056,_2057,_2058); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2056,int _2057,int _2058) { return __mosek_2fusion_2BaseVariable__index(_2056,_2057,_2058); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2056,int _2057,int _2058){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2056),(int)(_2057),(int)(_2058)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2059,int _2060) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2059,_2060); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2059,int _2060) { return __mosek_2fusion_2BaseVariable__index(_2059,_2060); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2059,int _2060) { return __mosek_2fusion_2BaseVariable__index(_2059,_2060); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2059,int _2060){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2059),(int)(_2060)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _2061) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2061) { return __mosek_2fusion_2BaseVariable__index(_2061); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _2061) { return __mosek_2fusion_2BaseVariable__index(_2061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _2061){
  _checked_ptr_1<int> _ptr__2061(_2061 ? _2061->raw() : nullptr, _2061 ? _2061->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _2062 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_2061)->size(0)))));
  int _9545 = (int)0;
  int _9546 = (int)((_2061)->size(0));
  for (int _2063 = _9545; _2063 < _9546; ++_2063)
  {
    {
      ((*_2062)((int)0,_2063)) = _ptr__2061[_2063];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2062)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2064) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2064) { return __mosek_2fusion_2BaseVariable__index(_2064); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2064) { return __mosek_2fusion_2BaseVariable__index(_2064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2064){
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2064)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2065,_2066,_2067); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067) { return __mosek_2fusion_2BaseVariable__pick(_2065,_2066,_2067); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067) { return __mosek_2fusion_2BaseVariable__pick(_2065,_2066,_2067); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067){
  _checked_ptr_1<int> _ptr__2065(_2065 ? _2065->raw() : nullptr, _2065 ? _2065->size(0) : 0);
  _checked_ptr_1<int> _ptr__2066(_2066 ? _2066->raw() : nullptr, _2066 ? _2066->size(0) : 0);
  _checked_ptr_1<int> _ptr__2067(_2067 ? _2067->raw() : nullptr, _2067 ? _2067->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_2065)->size(0)) != (int)((_2066)->size(0))) || ((int)((_2065)->size(0)) != (int)((_2067)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _2068 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2065)->size(0)),(int)3)));
  int _9547 = (int)0;
  int _9548 = (int)((_2065)->size(0));
  for (int _2069 = _9547; _2069 < _9548; ++_2069)
  {
    {
      ((*_2068)(_2069,(int)0)) = _ptr__2065[_2069];
      ((*_2068)(_2069,(int)1)) = _ptr__2066[_2069];
      ((*_2068)(_2069,(int)2)) = _ptr__2067[_2069];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2068);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2070,_2071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071) { return __mosek_2fusion_2BaseVariable__pick(_2070,_2071); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071) { return __mosek_2fusion_2BaseVariable__pick(_2070,_2071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071){
  _checked_ptr_1<int> _ptr__2070(_2070 ? _2070->raw() : nullptr, _2070 ? _2070->size(0) : 0);
  _checked_ptr_1<int> _ptr__2071(_2071 ? _2071->raw() : nullptr, _2071 ? _2071->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_2070)->size(0)) != (int)((_2071)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _2072 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2070)->size(0)),(int)2)));
  int _9549 = (int)0;
  int _9550 = (int)((_2070)->size(0));
  for (int _2073 = _9549; _2073 < _9550; ++_2073)
  {
    {
      ((*_2072)(_2073,(int)0)) = _ptr__2070[_2073];
      ((*_2072)(_2073,(int)1)) = _ptr__2071[_2073];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2072);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2074) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2074); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2074) { return __mosek_2fusion_2BaseVariable__pick(_2074); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2074) { return __mosek_2fusion_2BaseVariable__pick(_2074); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2074){
  if (((int)((shape)->size(0)) != (int)((_2074)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2075 = false;
  int _9551 = (int)0;
  int _9552 = (int)((_2074)->size(0));
  for (int _2076 = _9551; _2076 < _9552; ++_2076)
  {
    {
      int _9553 = (int)0;
      int _9554 = (int)((_2074)->size(1));
      for (int _2077 = _9553; _2077 < _9554; ++_2077)
      {
        {
          if (((((*_2074)(_2076,_2077)) < (int)0) || (((*_2074)(_2076,_2077)) >= ((*shape)(_2077)))))
          {
            {
              _2075 = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_2075)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int _2078 = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2079 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2078)));
  _checked_ptr_1<long long> _ptr__2079(_2079 ? _2079->raw() : nullptr,_2079 ? _2079->size(0) : 0);
  _ptr__2079[(_2078 - (int)1)] = (int)1;
  int _9555 = (int)1;
  int _9556 = _2078;
  for (int _2080 = _9555; _2080 < _9556; ++_2080)
  {
    {
      _ptr__2079[((_2078 - _2080) - (int)1)] = safe_mul( _ptr__2079[(_2078 - _2080)],((*shape)((_2078 - _2080))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2081 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2074)->size(0)))});
  _checked_ptr_1<int> _ptr__2081(_2081 ? _2081->raw() : nullptr,_2081 ? _2081->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2082;
  _checked_ptr_1<long long> _ptr__2082(_2082 ? _2082->raw() : nullptr,_2082 ? _2082->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2083 = nullptr;
  _checked_ptr_1<long long> _ptr__2083(_2083 ? _2083->raw() : nullptr,_2083 ? _2083->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _2082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_2074)->size(0)))));
      _ptr__2082.update(_2082 ? _2082->raw() : nullptr, _2082 ? _2082->size(0) : 0);
      {
        int _9557 = (int)0;
        int _9558 = (int)((_2074)->size(0));
        for (int _2084 = _9557; _2084 < _9558; ++_2084)
        {
          {
            long long _2085 = (long long)0;
            int _9559 = (int)0;
            int _9560 = _2078;
            for (int _2086 = _9559; _2086 < _9560; ++_2086)
            {
              {
                _2085 += safe_mul( _ptr__2079[_2086],((*_2074)(_2084,_2086)) );
              }
            }
            _ptr__2082[_2084] = ((*nativeidxs)(_2085));
          }
        }
      }
    }
  }
  else
  {
    {
      int _2087 = (int)0;
      int _9561 = (int)0;
      int _9562 = (int)((_2074)->size(0));
      for (int _2088 = _9561; _2088 < _9562; ++_2088)
      {
        {
          long long _2089 = (long long)0;
          int _9563 = (int)0;
          int _9564 = _2078;
          for (int _2090 = _9563; _2090 < _9564; ++_2090)
          {
            {
              _2089 += safe_mul( _ptr__2079[_2090],((*_2074)(_2088,_2090)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2089) >= (int)0))
          {
            {
              ++ _2087;
            }
          }
          {}
        }
      }
      _2082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2087)));
      _ptr__2082.update(_2082 ? _2082->raw() : nullptr, _2082 ? _2082->size(0) : 0);
      _2083 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2087)));
      _ptr__2083.update(_2083 ? _2083->raw() : nullptr, _2083 ? _2083->size(0) : 0);
      {
        int _2091 = (int)0;
        int _9565 = (int)0;
        int _9566 = (int)((_2074)->size(0));
        for (int _2092 = _9565; _2092 < _9566; ++_2092)
        {
          {
            long long _2093 = (long long)0;
            int _9567 = (int)0;
            int _9568 = _2078;
            for (int _2094 = _9567; _2094 < _9568; ++_2094)
            {
              {
                _2093 += safe_mul( _ptr__2079[_2094],((*_2074)(_2092,_2094)) );
              }
            }
            int _2095 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2093);
            if ((_2095 >= (int)0))
            {
              {
                _ptr__2082[_2091] = ((*nativeidxs)(_2095));
                _ptr__2083[_2091] = _2092;
                ++ _2091;
              }
            }
            {}
          }
        }
      }
      if ((_2087 == (int)((_2074)->size(0))))
      {
        {
          _2083 = nullptr;
          _ptr__2083.update(_2083 ? _2083->raw() : nullptr, _2083 ? _2083->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2081,_2083,_2082)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2096) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2096); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2096) { return __mosek_2fusion_2BaseVariable__pick(_2096); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2096) { return __mosek_2fusion_2BaseVariable__pick(_2096); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2096){
  _checked_ptr_1<int> _ptr__2096(_2096 ? _2096->raw() : nullptr, _2096 ? _2096->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2097 = false;
  int _9569 = (int)0;
  int _9570 = (int)((_2096)->size(0));
  for (int _2098 = _9569; _2098 < _9570; ++_2098)
  {
    {
      if (((_ptr__2096[_2098] < (int)0) || (_ptr__2096[_2098] >= ((*shape)((int)0)))))
      {
        {
          _2097 = true;
        }
      }
      {}
    }
  }
  if (_2097)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _2099;
  _checked_ptr_1<long long> _ptr__2099(_2099 ? _2099->raw() : nullptr,_2099 ? _2099->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2100 = nullptr;
  _checked_ptr_1<long long> _ptr__2100(_2100 ? _2100->raw() : nullptr,_2100 ? _2100->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<long long> _9571;
      for (int _2101 = (int)0, _9572 = (int)((_2096)->size(0)); _2101 < _9572 ; ++_2101)
      {
        _9571.push_back(((*nativeidxs)(_ptr__2096[_2101])));
      }
      auto _9573 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9571.size()),_9571.begin(),_9571.end()));
      _2099 = _9573;
      _ptr__2099.update(_2099 ? _2099->raw() : nullptr, _2099 ? _2099->size(0) : 0);
    }
  }
  else
  {
    {
      int _2102 = (int)0;
      int _9574 = (int)0;
      int _9575 = (int)((_2096)->size(0));
      for (int _2103 = _9574; _2103 < _9575; ++_2103)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__2096[_2103])) >= (int)0))
          {
            {
              ++ _2102;
            }
          }
          {}
        }
      }
      _2099 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2102)));
      _ptr__2099.update(_2099 ? _2099->raw() : nullptr, _2099 ? _2099->size(0) : 0);
      _2100 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2102)));
      _ptr__2100.update(_2100 ? _2100->raw() : nullptr, _2100 ? _2100->size(0) : 0);
      int _2104 = (int)0;
      int _9576 = (int)0;
      int _9577 = (int)((_2096)->size(0));
      for (int _2105 = _9576; _2105 < _9577; ++_2105)
      {
        {
          int _2106 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__2096[_2105]));
          if ((_2106 >= (int)0))
          {
            {
              _ptr__2100[_2104] = _2105;
              _ptr__2099[_2104] = ((*nativeidxs)(_2106));
              ++ _2104;
            }
          }
          {}
        }
      }
      if ((_2102 == (int)((_2096)->size(0))))
      {
        {
          _2100 = nullptr;
          _ptr__2100.update(_2100 ? _2100->raw() : nullptr, _2100 ? _2100->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2096)->size(0)))}),_2100,_2099)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int _2107) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_2107); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int _2107) { return __mosek_2fusion_2BaseVariable__antidiag(_2107); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int _2107) { return __mosek_2fusion_2BaseVariable__antidiag(_2107); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int _2107){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_2107 >= ((*shape)((int)1))) || ((-_2107) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2107 >= (int)0))
  {
    {
      int _9578;
      bool _9579 = (((*shape)((int)0)) < (((*shape)((int)1)) - _2107));
      if (_9579)
      {
        _9578 = ((*shape)((int)0));
      }
      else
      {
        _9578 = (((*shape)((int)1)) - _2107);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(((((*shape)((int)1)) - (int)1) - _2107))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9578);
    }
  }
  else
  {
    {
      int _9580;
      bool _9581 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2107 ));
      if (_9581)
      {
        _9580 = ((*shape)((int)1));
      }
      else
      {
        _9580 = safe_add( ((*shape)((int)0)),_2107 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_2107)),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9580);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int _9582;
  bool _9583 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9583)
  {
    _9582 = ((*shape)((int)0));
  }
  else
  {
    _9582 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9582);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int _2108) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_2108); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int _2108) { return __mosek_2fusion_2BaseVariable__diag(_2108); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int _2108) { return __mosek_2fusion_2BaseVariable__diag(_2108); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int _2108){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_2108 >= ((*shape)((int)1))) || ((-_2108) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2108 >= (int)0))
  {
    {
      int _9584;
      bool _9585 = (((*shape)((int)0)) < (((*shape)((int)1)) - _2108));
      if (_9585)
      {
        _9584 = ((*shape)((int)0));
      }
      else
      {
        _9584 = (((*shape)((int)1)) - _2108);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(_2108)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9584);
    }
  }
  else
  {
    {
      int _9586;
      bool _9587 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2108 ));
      if (_9587)
      {
        _9586 = ((*shape)((int)1));
      }
      else
      {
        _9586 = safe_add( ((*shape)((int)0)),_2108 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_2108)),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9586);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int _9588;
  bool _9589 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9589)
  {
    _9588 = ((*shape)((int)0));
  }
  else
  {
    _9588 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9588);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > > _2109,std::shared_ptr< monty::ndarray< int,1 > > _2110,int _2111){
  _checked_ptr_1<int> _ptr__2109(_2109 ? _2109->raw() : nullptr, _2109 ? _2109->size(0) : 0);
  _checked_ptr_1<int> _ptr__2110(_2110 ? _2110->raw() : nullptr, _2110 ? _2110->size(0) : 0);
  int _2112 = (int)((shape)->size(0));
  if (((_2112 != (int)((_2109)->size(0))) || (_2112 != (int)((_2110)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int _9590 = (int)0;
  int _9591 = _2112;
  for (int _2113 = _9590; _2113 < _9591; ++_2113)
  {
    {
      if (((_ptr__2109[_2113] < (int)0) || (_ptr__2109[_2113] >= ((*shape)(_2113)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _2114 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2112)));
  _checked_ptr_1<long long> _ptr__2114(_2114 ? _2114->raw() : nullptr,_2114 ? _2114->size(0) : 0);
  _ptr__2114[(_2112 - (int)1)] = (int)1;
  int _9592 = (int)1;
  int _9593 = _2112;
  for (int _2115 = _9592; _2115 < _9593; ++_2115)
  {
    {
      _ptr__2114[((_2112 - _2115) - (int)1)] = safe_mul( _ptr__2114[(_2112 - _2115)],((*shape)((_2112 - _2115))) );
    }
  }
  long long _2116 = (long long)0;
  int _9594 = (int)0;
  int _9595 = (int)((_2110)->size(0));
  for (int _2117 = _9594; _2117 < _9595; ++_2117)
  {
    {
      _2116 += safe_mul( _ptr__2109[_2117],_ptr__2114[_2117] );
    }
  }
  long long _2118 = (long long)0;
  int _9596 = (int)0;
  int _9597 = (int)((_2110)->size(0));
  for (int _2119 = _9596; _2119 < _9597; ++_2119)
  {
    {
      _2118 += safe_mul( _ptr__2110[_2119],_ptr__2114[_2119] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2120 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2111)));
      _checked_ptr_1<long long> _ptr__2120(_2120 ? _2120->raw() : nullptr,_2120 ? _2120->size(0) : 0);
      int _9598 = (int)0;
      int _9599 = _2111;
      for (int _2121 = _9598; _2121 < _9599; ++_2121)
      {
        {
          _ptr__2120[_2121] = ((*nativeidxs)(safe_add( _2116,safe_mul( _2118,_2121 ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2111)}),nullptr,_2120)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _2122 = (int)0;
      int _9600 = (int)0;
      int _9601 = _2111;
      for (int _2123 = _9600; _2123 < _9601; ++_2123)
      {
        {
          long long _2124 = safe_add( _2116,safe_mul( _2118,_2123 ) );
          int _2125 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2124);
          if ((_2125 >= (int)0))
          {
            {
              ++ _2122;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2126 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2122)));
      _checked_ptr_1<long long> _ptr__2126(_2126 ? _2126->raw() : nullptr,_2126 ? _2126->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2127 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2122)));
      _checked_ptr_1<long long> _ptr__2127(_2127 ? _2127->raw() : nullptr,_2127 ? _2127->size(0) : 0);
      int _2128 = (int)0;
      int _9602 = (int)0;
      int _9603 = _2111;
      for (int _2129 = _9602; _2129 < _9603; ++_2129)
      {
        {
          _ptr__2126[_2129] = ((*nativeidxs)(safe_add( _2116,safe_mul( _2118,_2129 ) )));
          long long _2130 = safe_add( _2116,safe_mul( _2118,_2129 ) );
          int _2131 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2130);
          if ((_2131 >= (int)0))
          {
            {
              _ptr__2127[_2128] = _2129;
              _ptr__2126[_2128] = ((*nativeidxs)(_2131));
              ++ _2128;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2111)}),_2127,_2126)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2132,_2133); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133) { return __mosek_2fusion_2BaseVariable__slice(_2132,_2133); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133) { return __mosek_2fusion_2BaseVariable__slice(_2132,_2133); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133){
  _checked_ptr_1<int> _ptr__2132(_2132 ? _2132->raw() : nullptr, _2132 ? _2132->size(0) : 0);
  _checked_ptr_1<int> _ptr__2133(_2133 ? _2133->raw() : nullptr, _2133 ? _2133->size(0) : 0);
  if (((int)((_2132)->size(0)) != (int)((_2133)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_2132)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _9604 = (int)0;
      int _9605 = (int)((shape)->size(0));
      for (int _2134 = _9604; _2134 < _9605; ++_2134)
      {
        {
          if (((_ptr__2132[_2134] < (int)0) || (_ptr__2133[_2134] > ((*shape)(_2134)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__2132[_2134] > _ptr__2133[_2134]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int _2135 = (int)((shape)->size(0));
      std::vector<int> _9606;
      for (int _2137 = (int)0, _9607 = _2135; _2137 < _9607 ; ++_2137)
      {
        _9606.push_back((_ptr__2133[_2137] - _ptr__2132[_2137]));
      }
      auto _9608 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9606.size()),_9606.begin(),_9606.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2136 = _9608;
      _checked_ptr_1<int> _ptr__2136(_2136 ? _2136->raw() : nullptr,_2136 ? _2136->size(0) : 0);
      int _2138 = (int)1;
      int _9609 = (int)0;
      int _9610 = _2135;
      for (int _2139 = _9609; _2139 < _9610; ++_2139)
      {
        {
          _2138 *= (_ptr__2133[_2139] - _ptr__2132[_2139]);
        }
      }
      if ((_2138 == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int _2140 = (int)0;
          std::shared_ptr< monty::ndarray< int,1 > > _2141 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2135)));
          _checked_ptr_1<int> _ptr__2141(_2141 ? _2141->raw() : nullptr,_2141 ? _2141->size(0) : 0);
          int _9611 = (int)0;
          int _9612 = (int)((sparsity)->size(0));
          for (int _2142 = _9611; _2142 < _9612; ++_2142)
          {
            {
              long long _2143 = ((*sparsity)(_2142));
              int _9613 = (int)1;
              int _9614 = _2135;
              for (int _2144 = _9613; _2144 < _9614; ++_2144)
              {
                {
                  _ptr__2141[(_2135 - _2144)] = (int)(_2143 % ((*shape)((_2135 - _2144))));
                  _2143 /= ((*shape)((_2135 - _2144)));
                }
              }
              _ptr__2141[(int)0] = (int)_2143;
              int _2145 = (int)0;
              while ( ((_ptr__2141[_2145] >= _ptr__2132[_2145]) && (_ptr__2141[_2145] < _ptr__2133[_2145])) )
              {
                {
                  ++ _2145;
                }
              }
              if ((_2145 == _2135))
              {
                {
                  ++ _2140;
                }
              }
              {}
            }
          }
          int _2146 = (int)0;
          std::shared_ptr< monty::ndarray< long long,1 > > _2147 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2140)));
          _checked_ptr_1<long long> _ptr__2147(_2147 ? _2147->raw() : nullptr,_2147 ? _2147->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2148 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2140)));
          _checked_ptr_1<long long> _ptr__2148(_2148 ? _2148->raw() : nullptr,_2148 ? _2148->size(0) : 0);
          int _9615 = (int)0;
          int _9616 = (int)((sparsity)->size(0));
          for (int _2149 = _9615; _2149 < _9616; ++_2149)
          {
            {
              long long _2150 = ((*sparsity)(_2149));
              int _9617 = (int)1;
              int _9618 = _2135;
              for (int _2151 = _9617; _2151 < _9618; ++_2151)
              {
                {
                  _ptr__2141[(_2135 - _2151)] = (int)(_2150 % ((*shape)((_2135 - _2151))));
                  _2150 /= ((*shape)((_2135 - _2151)));
                }
              }
              _ptr__2141[(int)0] = (int)_2150;
              int _2152 = (int)0;
              while ( ((_ptr__2141[_2152] >= _ptr__2132[_2152]) && (_ptr__2141[_2152] < _ptr__2133[_2152])) )
              {
                {
                  ++ _2152;
                }
              }
              if ((_2152 == _2135))
              {
                {
                  _ptr__2147[_2146] = ((*nativeidxs)(_2149));
                  int _2153 = (int)0;
                  int _9619 = (int)0;
                  int _9620 = _2135;
                  for (int _2154 = _9619; _2154 < _9620; ++_2154)
                  {
                    {
                      _2153 = safe_add( safe_mul( _2153,_ptr__2136[_2154] ),(_ptr__2141[_2154] - _ptr__2132[_2154]) );
                    }
                  }
                  _ptr__2148[_2146] = _2153;
                  ++ _2146;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2136,_2148,_2147)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2155 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2138)));
          _checked_ptr_1<long long> _ptr__2155(_2155 ? _2155->raw() : nullptr,_2155 ? _2155->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2156 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2135)));
            _checked_ptr_1<int> _ptr__2156(_2156 ? _2156->raw() : nullptr,_2156 ? _2156->size(0) : 0);
            _ptr__2156[(_2135 - (int)1)] = (int)1;
            int _9621 = (int)1;
            int _9622 = _2135;
            for (int _2157 = _9621; _2157 < _9622; ++_2157)
            {
              {
                _ptr__2156[((_2135 - _2157) - (int)1)] = safe_mul( _ptr__2156[(_2135 - _2157)],((*shape)((_2135 - _2157))) );
              }
            }
            int _2158 = (int)0;
            int _9623 = (int)0;
            int _9624 = _2135;
            for (int _2159 = _9623; _2159 < _9624; ++_2159)
            {
              {
                _2158 += safe_mul( _ptr__2132[_2159],_ptr__2156[_2159] );
              }
            }
            std::vector<int> _9625;
            for (int _2161 = (int)0, _9626 = _2135; _2161 < _9626 ; ++_2161)
            {
              _9625.push_back(_2158);
            }
            auto _9627 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9625.size()),_9625.begin(),_9625.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2160 = _9627;
            _checked_ptr_1<int> _ptr__2160(_2160 ? _2160->raw() : nullptr,_2160 ? _2160->size(0) : 0);
            std::vector<int> _9628;
            for (int _2163 = (int)0, _9629 = _2135; _2163 < _9629 ; ++_2163)
            {
              _9628.push_back(_ptr__2132[_2163]);
            }
            auto _9630 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9628.size()),_9628.begin(),_9628.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2162 = _9630;
            _checked_ptr_1<int> _ptr__2162(_2162 ? _2162->raw() : nullptr,_2162 ? _2162->size(0) : 0);
            int _9631 = (int)0;
            int _9632 = _2138;
            for (int _2164 = _9631; _2164 < _9632; ++_2164)
            {
              {
                _ptr__2155[_2164] = ((*nativeidxs)(_ptr__2160[(_2135 - (int)1)]));
                _ptr__2162[(_2135 - (int)1)] += (int)1;
                _ptr__2160[(_2135 - (int)1)] += _ptr__2156[(_2135 - (int)1)];
                if ((_ptr__2162[(_2135 - (int)1)] >= _ptr__2133[(_2135 - (int)1)]))
                {
                  {
                    int _2165 = (_2135 - (int)1);
                    while ( ((_2165 > (int)0) && (_ptr__2162[_2165] >= _ptr__2133[_2165])) )
                    {
                      {
                        _ptr__2162[_2165] = _ptr__2132[_2165];
                        _ptr__2162[(_2165 - (int)1)] += (int)1;
                        _ptr__2160[(_2165 - (int)1)] += _ptr__2156[(_2165 - (int)1)];
                        -- _2165;
                      }
                    }
                    int _9633 = safe_add( _2165,(int)1 );
                    int _9634 = _2135;
                    for (int _2166 = _9633; _2166 < _9634; ++_2166)
                    {
                      {
                        _ptr__2160[_2166] = _ptr__2160[_2165];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2136,nullptr,_2155)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int _2167,int _2168) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2167,_2168); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int _2167,int _2168) { return __mosek_2fusion_2BaseVariable__slice(_2167,_2168); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int _2167,int _2168) { return __mosek_2fusion_2BaseVariable__slice(_2167,_2168); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int _2167,int _2168){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2167 == (int)0) && (_2168 == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_2167 < (int)0) || (_2168 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2167 > _2168))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_2167 == _2168))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int _2169 = (_2168 - _2167);
      int _2170 = (int)0;
      int _2171 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_2167));
      int _2172 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_2168));
      std::vector<long long> _9635;
      for (int _2173 = _2171, _9636 = _2172; _2173 < _9636 ; ++_2173)
      {
        _9635.push_back((((*sparsity)(_2173)) - _2167));
      }
      auto _9637 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9635.size()),_9635.begin(),_9635.end()));
      std::vector<long long> _9638;
      for (int _2174 = _2171, _9639 = _2172; _2174 < _9639 ; ++_2174)
      {
        _9638.push_back(((*nativeidxs)(_2174)));
      }
      auto _9640 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9638.size()),_9638.begin(),_9638.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2169)}),_9637,_9640)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _2175 = (_2168 - _2167);
      std::shared_ptr< monty::ndarray< long long,1 > > _2176 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2175)));
      _checked_ptr_1<long long> _ptr__2176(_2176 ? _2176->raw() : nullptr,_2176 ? _2176->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(nativeidxs,_2167,_2176,(int)0,_2175);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2175)}),nullptr,_2176)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr(){
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
int mosek::fusion::BaseVariable :: inst(int _2177,std::shared_ptr< monty::ndarray< long long,1 > > _2178,int _2179,std::shared_ptr< monty::ndarray< long long,1 > > _2180) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2177,_2178,_2179,_2180); }int mosek::fusion::p_BaseVariable::inst(int _2177,std::shared_ptr< monty::ndarray< long long,1 > > _2178,int _2179,std::shared_ptr< monty::ndarray< long long,1 > > _2180){
  _checked_ptr_1<long long> _ptr__2178(_2178 ? _2178->raw() : nullptr, _2178 ? _2178->size(0) : 0);
  _checked_ptr_1<long long> _ptr__2180(_2180 ? _2180->raw() : nullptr, _2180 ? _2180->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2181 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs;
  _checked_ptr_1<long long> _ptr__2181(_2181 ? _2181->raw() : nullptr,_2181 ? _2181->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2182 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<long long> _ptr__2182(_2182 ? _2182->raw() : nullptr,_2182 ? _2182->size(0) : 0);
  if ((NULL == _2182.get()))
  {
    {
      int _9641 = (int)0;
      int _9642 = (int)((_2181)->size(0));
      for (int _2183 = _9641; _2183 < _9642; ++_2183)
      {
        {
          _ptr__2178[safe_add( _2183,_2177 )] = _2183;
          _ptr__2180[safe_add( _2183,_2179 )] = _ptr__2181[_2183];
        }
      }
    }
  }
  else
  {
    {
      int _9643 = (int)0;
      int _9644 = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int _2184 = _9643; _2184 < _9644; ++_2184)
      {
        {
          _ptr__2178[safe_add( _2177,_2184 )] = _ptr__2182[_2184];
          _ptr__2180[safe_add( _2184,_2179 )] = _ptr__2181[_2184];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
}
int mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_BaseVariable::numInst(){
  return (int)((nativeidxs)->size(0));
}
void mosek::fusion::BaseVariable :: inst(int _2185,std::shared_ptr< monty::ndarray< long long,1 > > _2186) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2185,_2186); }void mosek::fusion::p_BaseVariable::inst(int _2185,std::shared_ptr< monty::ndarray< long long,1 > > _2186){
  _checked_ptr_1<long long> _ptr__2186(_2186 ? _2186->raw() : nullptr, _2186 ? _2186->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int _9645 = (int)0;
      int _9646 = (int)((nativeidxs)->size(0));
      for (int _2187 = _9645; _2187 < _9646; ++_2187)
      {
        {
          _ptr__2186[safe_add( _2185,_2187 )] = ((*nativeidxs)(_2187));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2188 = _pubthis->getShape();
      _checked_ptr_1<int> _ptr__2188(_2188 ? _2188->raw() : nullptr,_2188 ? _2188->size(0) : 0);
      int _2189 = (int)1;
      int _9647 = (int)0;
      int _9648 = (int)((_2188)->size(0));
      for (int _2190 = _9647; _2190 < _9648; ++_2190)
      {
        {
          _2189 *= _ptr__2188[_2190];
        }
      }
      int _9649 = (int)0;
      int _9650 = _2189;
      for (int _2191 = _9649; _2191 < _9650; ++_2191)
      {
        {
          _ptr__2186[safe_add( _2185,_2191 )] = (int)0;
        }
      }
      int _9651 = (int)0;
      int _9652 = (int)((sparsity)->size(0));
      for (int _2192 = _9651; _2192 < _9652; ++_2192)
      {
        {
          _ptr__2186[safe_add( _2185,((*sparsity)(_2192)) )] = ((*nativeidxs)(_2192));
        }
      }
    }
  }
}
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2193,bool _2194) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_2193,_2194); }void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2193,bool _2194){
  _checked_ptr_1<double> _ptr__2193(_2193 ? _2193->raw() : nullptr, _2193 ? _2193->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2194,nativeidxs,_2193);
    }
  }
  else
  {
    {
      int _2195 = (int)1;
      int _9653 = (int)0;
      int _9654 = (int)((shape)->size(0));
      for (int _2196 = _9653; _2196 < _9654; ++_2196)
      {
        {
          _2195 *= ((*shape)(_2196));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2197 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2195)));
      _checked_ptr_1<long long> _ptr__2197(_2197 ? _2197->raw() : nullptr,_2197 ? _2197->size(0) : 0);
      int _9655 = (int)0;
      int _9656 = (int)((nativeidxs)->size(0));
      for (int _2198 = _9655; _2198 < _9656; ++_2198)
      {
        {
          _ptr__2197[((*sparsity)(_2198))] = ((*nativeidxs)(_2198));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2194,_2197,_2193);
    }
  }
}
void mosek::fusion::p_BaseVariable::dual_lu(int _2199,std::shared_ptr< monty::ndarray< double,1 > > _2200,bool _2201){
  _checked_ptr_1<double> _ptr__2200(_2200 ? _2200->raw() : nullptr, _2200 ? _2200->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_2201,nativeidxs,_2200,_2199);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2202 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__2202(_2202 ? _2202->raw() : nullptr,_2202 ? _2202->size(0) : 0);
      int _9657 = (int)0;
      int _9658 = (int)((sparsity)->size(0));
      for (int _2203 = _9657; _2203 < _9658; ++_2203)
      {
        {
          _ptr__2202[((*sparsity)(_2203))] = ((*nativeidxs)(_2203));
        }
      }
      model->getVariableDuals(_2201,_2202,_2200,_2199);
    }
  }
}
void mosek::fusion::BaseVariable :: values(int _2204,std::shared_ptr< monty::ndarray< double,1 > > _2205,bool _2206) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2204,_2205,_2206); }void mosek::fusion::p_BaseVariable::values(int _2204,std::shared_ptr< monty::ndarray< double,1 > > _2205,bool _2206){
  _checked_ptr_1<double> _ptr__2205(_2205 ? _2205->raw() : nullptr, _2205 ? _2205->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_2206,nativeidxs,_2205,_2204);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2207 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__2207(_2207 ? _2207->raw() : nullptr,_2207 ? _2207->size(0) : 0);
      int _9659 = (int)0;
      int _9660 = (int)((sparsity)->size(0));
      for (int _2208 = _9659; _2208 < _9660; ++_2208)
      {
        {
          _ptr__2207[((*sparsity)(_2208))] = ((*nativeidxs)(_2208));
        }
      }
      model->getVariableValues(_2206,_2207,_2205,_2204);
    }
  }
}
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_BaseVariable::make_continuous(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(nativeidxs);
}
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_BaseVariable::make_integer(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(nativeidxs);
}
void mosek::fusion::p_BaseVariable::destroy(){sparsity.reset();nativeidxs.reset();model.reset();shape.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::fromTril(int _2216) { return __mosek_2fusion_2Variable__fromTril(_2216); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::tril() { return __mosek_2fusion_2Variable__tril(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2217,int _2218,int _2219) { return __mosek_2fusion_2Variable__reshape(_2217,_2218,_2219); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2220,int _2221) { return __mosek_2fusion_2Variable__reshape(_2220,_2221); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2222) { return __mosek_2fusion_2Variable__reshape(_2222); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _2223) { return __mosek_2fusion_2Variable__reshape(_2223); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2229,std::shared_ptr< monty::ndarray< int,1 > > _2230,std::shared_ptr< monty::ndarray< int,1 > > _2231) { return __mosek_2fusion_2Variable__pick(_2229,_2230,_2231); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2232,std::shared_ptr< monty::ndarray< int,1 > > _2233) { return __mosek_2fusion_2Variable__pick(_2232,_2233); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _2234) { return __mosek_2fusion_2Variable__pick(_2234); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2234) { return __mosek_2fusion_2Variable__pick(_2234); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _2235) { return __mosek_2fusion_2Variable__pick(_2235); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2235) { return __mosek_2fusion_2Variable__pick(_2235); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int _2236) { return __mosek_2fusion_2Variable__antidiag(_2236); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int _2237) { return __mosek_2fusion_2Variable__diag(_2237); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _2238) { return __mosek_2fusion_2Variable__index(_2238); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int,1 > > _2238) { return __mosek_2fusion_2Variable__index(_2238); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2239,int _2240,int _2241) { return __mosek_2fusion_2Variable__index(_2239,_2240,_2241); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2242,int _2243) { return __mosek_2fusion_2Variable__index(_2242,_2243); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int _2244) { return __mosek_2fusion_2Variable__index(_2244); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2244) { return __mosek_2fusion_2Variable__index(_2244); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _2245,std::shared_ptr< monty::ndarray< int,1 > > _2246) { return __mosek_2fusion_2Variable__slice(_2245,_2246); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2245,std::shared_ptr< monty::ndarray< int,1 > > _2246) { return __mosek_2fusion_2Variable__slice(_2245,_2246); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int _2247,int _2248) { return __mosek_2fusion_2Variable__slice(_2247,_2248); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int _2247,int _2248) { return __mosek_2fusion_2Variable__slice(_2247,_2248); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty  ( std::shared_ptr< monty::ndarray< int,1 > > _2249) { return mosek::fusion::p_Var::empty(_2249); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int,1 > > _2249){
  _checked_ptr_1<int> _ptr__2249(_2249 ? _2249->raw() : nullptr, _2249 ? _2249->size(0) : 0);
  int _9661 = (int)0;
  int _9662 = (int)((_2249)->size(0));
  for (int _2250 = _9661; _2250 < _9662; ++_2250)
  {
    {
      if ((_ptr__2249[_2250] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_2249)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _2251) { return mosek::fusion::p_Var::compress(_2251); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _2251){
  std::shared_ptr< monty::ndarray< int,1 > > _2252 = _2251->getShape();
  _checked_ptr_1<int> _ptr__2252(_2252 ? _2252->raw() : nullptr,_2252 ? _2252->size(0) : 0);
  int _2253 = (int)((_2252)->size(0));
  int _2254 = (int)0;
  int _9663 = (int)0;
  int _9664 = _2253;
  for (int _2255 = _9663; _2255 < _9664; ++_2255)
  {
    {
      if ((_ptr__2252[_2255] != (int)1))
      {
        {
          ++ _2254;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2256 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2254)));
  _checked_ptr_1<int> _ptr__2256(_2256 ? _2256->raw() : nullptr,_2256 ? _2256->size(0) : 0);
  {
    int _2257 = (int)0;
    int _9665 = (int)0;
    int _9666 = _2253;
    for (int _2258 = _9665; _2258 < _9666; ++_2258)
    {
      {
        if ((_ptr__2252[_2258] != (int)1))
        {
          {
            _ptr__2256[_2257] = _ptr__2252[_2258];
            ++ _2257;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_2251,_2256);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2259,    int _2260) { return mosek::fusion::p_Var::reshape(_2259,_2260); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2259,int _2260){
  return ::mosek::fusion::p_Var::reshape(_2259,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2260)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2261,    int _2262,    int _2263) { return mosek::fusion::p_Var::reshape(_2261,_2262,_2263); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2261,int _2262,int _2263){
  return ::mosek::fusion::p_Var::reshape(_2261,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2262),(int)(_2263)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _2264) { return mosek::fusion::p_Var::flatten(_2264); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _2264){
  return ::mosek::fusion::p_Var::reshape(_2264,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)::mosek::fusion::p_Set::size(_2264->getShape()))}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2265,    std::shared_ptr< monty::ndarray< int,1 > > _2266) { return mosek::fusion::p_Var::reshape(_2265,_2266); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2265,std::shared_ptr< monty::ndarray< int,1 > > _2266){
  _checked_ptr_1<int> _ptr__2266(_2266 ? _2266->raw() : nullptr, _2266 ? _2266->size(0) : 0);
  return _2265->__mosek_2fusion_2Variable__reshape(_2266);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _2267,std::shared_ptr< monty::ndarray< int,1 > > _2268){
  _checked_ptr_1<int> _ptr__2268(_2268 ? _2268->raw() : nullptr, _2268 ? _2268->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2269;
  _checked_ptr_1<long long> _ptr__2269(_2269 ? _2269->raw() : nullptr,_2269 ? _2269->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2270;
  _checked_ptr_1<long long> _ptr__2270(_2270 ? _2270->raw() : nullptr,_2270 ? _2270->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2271 = _2267->getShape();
  _checked_ptr_1<int> _ptr__2271(_2271 ? _2271->raw() : nullptr,_2271 ? _2271->size(0) : 0);
  int _2272 = (int)((_2271)->size(0));
  int _2273 = (int)1;
  int _9667 = (int)0;
  int _9668 = _2272;
  for (int _2274 = _9667; _2274 < _9668; ++_2274)
  {
    {
      _2273 *= _ptr__2271[_2274];
    }
  }
  int _2275 = _2267->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2276 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2272)));
  _checked_ptr_1<long long> _ptr__2276(_2276 ? _2276->raw() : nullptr,_2276 ? _2276->size(0) : 0);
  _ptr__2276[(_2272 - (int)1)] = (int)1;
  int _9669 = (int)1;
  int _9670 = _2272;
  for (int _2277 = _9669; _2277 < _9670; ++_2277)
  {
    {
      _ptr__2276[((_2272 - _2277) - (int)1)] = safe_mul( _ptr__2276[(_2272 - _2277)],_ptr__2271[_ptr__2268[(_2272 - _2277)]] );
    }
  }
  if ((_2275 < _2273))
  {
    {
      _2269 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      _2270 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
      _2267->inst((int)0,_2269,(int)0,_2270);
    }
  }
  else
  {
    {
      _2269 = nullptr;
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      _2270 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
      _2267->inst((int)0,_2270);
    }
  }
  if ((NULL == _2269.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2278 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _checked_ptr_1<long long> _ptr__2278(_2278 ? _2278->raw() : nullptr,_2278 ? _2278->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _2279 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2272)));
        _checked_ptr_1<int> _ptr__2279(_2279 ? _2279->raw() : nullptr,_2279 ? _2279->size(0) : 0);
        int _9671 = (int)0;
        int _9672 = _2275;
        for (int _2280 = _9671; _2280 < _9672; ++_2280)
        {
          {
            int _2281 = _2280;
            int _9673 = (int)0;
            int _9674 = _2272;
            for (int _2282 = _9673; _2282 < _9674; ++_2282)
            {
              {
                _ptr__2279[((_2272 - _2280) - (int)1)] = (_2281 % _ptr__2271[((_2272 - _2280) - (int)1)]);
                _2281 /= _ptr__2271[((_2272 - _2280) - (int)1)];
              }
            }
            int _2283 = (int)0;
            int _9675 = (int)0;
            int _9676 = _2272;
            for (int _2284 = _9675; _2284 < _9676; ++_2284)
            {
              {
                _2283 += (int)safe_mul( _ptr__2279[_ptr__2268[_2284]],_ptr__2276[_2284] );
              }
            }
            _ptr__2278[_2283] = _ptr__2270[_2280];
          }
        }
      }
      _2270 = _2278;
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2285 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _checked_ptr_1<long long> _ptr__2285(_2285 ? _2285->raw() : nullptr,_2285 ? _2285->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _2286 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2272)));
        _checked_ptr_1<int> _ptr__2286(_2286 ? _2286->raw() : nullptr,_2286 ? _2286->size(0) : 0);
        int _9677 = (int)0;
        int _9678 = _2275;
        for (int _2287 = _9677; _2287 < _9678; ++_2287)
        {
          {
            int _2288 = _2287;
            int _9679 = (int)0;
            int _9680 = _2272;
            for (int _2289 = _9679; _2289 < _9680; ++_2289)
            {
              {
                _ptr__2286[((_2272 - _2287) - (int)1)] = (_2288 % _ptr__2271[((_2272 - _2287) - (int)1)]);
                _2288 /= _ptr__2271[((_2272 - _2287) - (int)1)];
              }
            }
            int _2290 = (int)0;
            int _9681 = (int)0;
            int _9682 = _2272;
            for (int _2291 = _9681; _2291 < _9682; ++_2291)
            {
              {
                _2290 += (int)safe_mul( _ptr__2286[_ptr__2268[_2291]],_ptr__2276[_2291] );
              }
            }
            _ptr__2285[_2287] = _2290;
          }
        }
      }
      std::vector<long long> _9683;
      for (int _2293 = (int)0, _9684 = _2275; _2293 < _9684 ; ++_2293)
      {
        _9683.push_back(_2293);
      }
      auto _9685 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9683.size()),_9683.begin(),_9683.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _2292 = _9685;
      _checked_ptr_1<long long> _ptr__2292(_2292 ? _2292->raw() : nullptr,_2292 ? _2292->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2292,_2285,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2275));
      std::vector<long long> _9686;
      for (int _2294 = (int)0, _9687 = _2275; _2294 < _9687 ; ++_2294)
      {
        _9686.push_back(_ptr__2269[_ptr__2292[_2294]]);
      }
      auto _9688 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9686.size()),_9686.begin(),_9686.end()));
      _2269 = _9688;
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      std::vector<long long> _9689;
      for (int _2295 = (int)0, _9690 = _2275; _2295 < _9690 ; ++_2295)
      {
        _9689.push_back(_ptr__2270[_ptr__2292[_2295]]);
      }
      auto _9691 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9689.size()),_9689.begin(),_9689.end()));
      _2270 = _9691;
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
    }
  }
  std::vector<int> _9692;
  for (int _2296 = (int)0, _9693 = _2272; _2296 < _9693 ; ++_2296)
  {
    _9692.push_back(_ptr__2271[_ptr__2268[_2296]]);
  }
  auto _9694 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9692.size()),_9692.begin(),_9692.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2267->__mosek_2fusion_2Variable__getModel(),_9694,_2269,_2270)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2297,    int _2298) { return mosek::fusion::p_Var::hrepeat(_2297,_2298); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2297,int _2298){
  return ::mosek::fusion::p_Var::drepeat(_2297,(int)1,_2298);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2299,    int _2300) { return mosek::fusion::p_Var::vrepeat(_2299,_2300); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2299,int _2300){
  return ::mosek::fusion::p_Var::drepeat(_2299,(int)0,_2300);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2301,    int _2302) { return mosek::fusion::p_Var::repeat(_2301,_2302); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2301,int _2302){
  return ::mosek::fusion::p_Var::drepeat(_2301,(int)0,_2302);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2303,    int _2304,    int _2305) { return mosek::fusion::p_Var::repeat(_2303,_2304,_2305); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2303,int _2304,int _2305){
  return ::mosek::fusion::p_Var::drepeat(_2303,_2304,_2305);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2306,int _2307,int _2308){
  if ((_2308 < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_2308 == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_2308 == (int)1))
  {
    {
      return _2306;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _2309 = _2306->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int,1 > > _2310 = _2306->getShape();
      _checked_ptr_1<int> _ptr__2310(_2310 ? _2310->raw() : nullptr,_2310 ? _2310->size(0) : 0);
      int _2311 = (int)((_2310)->size(0));
      if (((_2307 < (int)0) || (_2307 > _2311)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      long long _2312 = ::mosek::fusion::p_Set::size(_2310);
      int _2313 = _2306->numInst();
      int _2314 = safe_mul( _2313,_2308 );
      int _2315 = (int)1;
      int _9695 = (int)0;
      int _9696 = _2307;
      for (int _2316 = _9695; _2316 < _9696; ++_2316)
      {
        {
          _2315 *= _ptr__2310[_2316];
        }
      }
      int _9697;
      bool _9698 = (_2307 < _2311);
      if (_9698)
      {
        _9697 = _ptr__2310[_2307];
      }
      else
      {
        _9697 = (int)1;
      }
      int _2317 = _9697;
      int _2318 = safe_mul( _2317,_2308 );
      int _2319 = (int)1;
      int _9699 = safe_add( _2307,(int)1 );
      int _9700 = _2311;
      for (int _2320 = _9699; _2320 < _9700; ++_2320)
      {
        {
          _2319 *= _ptr__2310[_2320];
        }
      }
      int _9701;
      bool _9702 = (_2307 < _2311);
      if (_9702)
      {
        _9701 = _2311;
      }
      else
      {
        _9701 = safe_add( _2307,(int)1 );
      }
      int _2321 = _9701;
      std::shared_ptr< monty::ndarray< int,1 > > _2322 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2321)));
      _checked_ptr_1<int> _ptr__2322(_2322 ? _2322->raw() : nullptr,_2322 ? _2322->size(0) : 0);
      int _9703 = (int)0;
      int _9704 = _2311;
      for (int _2323 = _9703; _2323 < _9704; ++_2323)
      {
        {
          _ptr__2322[_2323] = _ptr__2310[_2323];
        }
      }
      int _9705 = _2311;
      int _9706 = _2321;
      for (int _2324 = _9705; _2324 < _9706; ++_2324)
      {
        {
          _ptr__2322[_2324] = (int)1;
        }
      }
      _ptr__2322[_2307] = _2318;
      if ((_2313 < _2312))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2325 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2325(_2325 ? _2325->raw() : nullptr,_2325 ? _2325->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2326 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2326(_2326 ? _2326->raw() : nullptr,_2326 ? _2326->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2327 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2314)));
          _checked_ptr_1<long long> _ptr__2327(_2327 ? _2327->raw() : nullptr,_2327 ? _2327->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2328 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2314)));
          _checked_ptr_1<long long> _ptr__2328(_2328 ? _2328->raw() : nullptr,_2328 ? _2328->size(0) : 0);
          _2306->inst((int)0,_2326,(int)0,_2325);
          {
            int _2329 = safe_mul( _2318,_2319 );
            int _2330 = safe_mul( _2317,_2319 );
            int _2331 = _2319;
            if ((_2307 == (int)0))
            {
              {
                int _2332 = (int)0;
                int _9707 = (int)0;
                int _9708 = _2308;
                for (int _2333 = _9707; _2333 < _9708; ++_2333)
                {
                  {
                    int _9709 = (int)0;
                    int _9710 = _2313;
                    for (int _2334 = _9709; _2334 < _9710; ++_2334)
                    {
                      {
                        _ptr__2328[_2332] = safe_add( _ptr__2326[_2334],safe_mul( _2333,_2312 ) );
                        _ptr__2327[_2332] = _ptr__2325[_2334];
                        ++ _2332;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,_2328,_2327)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_2307 >= _2311))
            {
              {
                int _2335 = (int)0;
                int _9711 = (int)0;
                int _9712 = _2313;
                for (int _2336 = _9711; _2336 < _9712; ++_2336)
                {
                  {
                    int _9713 = (int)0;
                    int _9714 = _2308;
                    for (int _2337 = _9713; _2337 < _9714; ++_2337)
                    {
                      {
                        _ptr__2328[_2335] = safe_add( safe_mul( _ptr__2326[_2336],_2308 ),_2337 );
                        _ptr__2327[_2335] = _ptr__2325[_2336];
                        ++ _2335;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,_2328,_2327)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int _2338 = (int)0;
                int _9715 = (int)0;
                int _9716 = _2313;
                for (int _2339 = _9715; _2339 < _9716; ++_2339)
                {
                  {
                    long long _2340 = (_ptr__2326[_2339] / _2330);
                    long long _2341 = ((_ptr__2326[_2339] / _2331) % _2317);
                    long long _2342 = (_ptr__2326[_2339] % _2319);
                    int _9717 = (int)0;
                    int _9718 = _2308;
                    for (int _2343 = _9717; _2343 < _9718; ++_2343)
                    {
                      {
                        _ptr__2328[_2338] = safe_add( safe_add( safe_mul( _2340,_2329 ),safe_mul( safe_add( _2341,safe_mul( _2317,_2343 ) ),_2319 ) ),_2342 );
                        _ptr__2327[_2338] = _ptr__2325[_2339];
                        ++ _2338;
                      }
                    }
                  }
                }
                int _2344 = (int)1;
                int _9719 = (int)0;
                int _9720 = _2321;
                for (int _2345 = _9719; _2345 < _9720; ++_2345)
                {
                  {
                    if ((_2344 < _ptr__2322[_2345]))
                    {
                      {
                        _2344 = _ptr__2322[_2345];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int,1 > > _2346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2314)));
                _checked_ptr_1<int> _ptr__2346(_2346 ? _2346->raw() : nullptr,_2346 ? _2346->size(0) : 0);
                std::shared_ptr< monty::ndarray< int,1 > > _2347 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2314)));
                _checked_ptr_1<int> _ptr__2347(_2347 ? _2347->raw() : nullptr,_2347 ? _2347->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int,1 > > _2348 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2344,(int)1 ))));
                  _checked_ptr_1<int> _ptr__2348(_2348 ? _2348->raw() : nullptr,_2348 ? _2348->size(0) : 0);
                  std::shared_ptr< monty::ndarray< long long,1 > > _2349 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2321)));
                  _checked_ptr_1<long long> _ptr__2349(_2349 ? _2349->raw() : nullptr,_2349 ? _2349->size(0) : 0);
                  _ptr__2349[(_2321 - (int)1)] = (int)1;
                  int _9721 = (int)1;
                  int _9722 = _2321;
                  for (int _2350 = _9721; _2350 < _9722; ++_2350)
                  {
                    {
                      _ptr__2349[((_2321 - _2350) - (int)1)] = safe_mul( _ptr__2349[(_2321 - _2350)],_ptr__2322[(_2321 - _2350)] );
                    }
                  }
                  int _9723 = (int)0;
                  int _9724 = _2314;
                  for (int _2351 = _9723; _2351 < _9724; ++_2351)
                  {
                    {
                      _ptr__2346[_2351] = _2351;
                    }
                  }
                  int _9725 = (int)0;
                  int _9726 = _2321;
                  for (int _2352 = _9725; _2352 < _9726; ++_2352)
                  {
                    {
                      int _2353 = ((_2321 - _2352) - (int)1);
                      int _9727 = (int)0;
                      int _9728 = safe_add( _ptr__2322[_2353],(int)1 );
                      for (int _2354 = _9727; _2354 < _9728; ++_2354)
                      {
                        {
                          _ptr__2348[_2354] = (int)0;
                        }
                      }
                      int _9729 = (int)0;
                      int _9730 = _2314;
                      for (int _2355 = _9729; _2355 < _9730; ++_2355)
                      {
                        {
                          ++ _ptr__2348[safe_add( ((_ptr__2328[_2355] / _ptr__2349[_2353]) % _ptr__2322[_2353]),(int)1 )];
                        }
                      }
                      int _9731 = (int)0;
                      int _9732 = _ptr__2322[_2353];
                      for (int _2356 = _9731; _2356 < _9732; ++_2356)
                      {
                        {
                          _ptr__2348[safe_add( _2356,(int)1 )] += _ptr__2348[_2356];
                        }
                      }
                      int _9733 = (int)0;
                      int _9734 = _2314;
                      for (int _2357 = _9733; _2357 < _9734; ++_2357)
                      {
                        {
                          int _2358 = _ptr__2346[_2357];
                          long long _2359 = ((_ptr__2328[_2358] / _ptr__2349[_2353]) % _ptr__2322[_2353]);
                          _ptr__2347[_ptr__2348[_2359]] = _2358;
                          ++ _ptr__2348[_2359];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int,1 > > _2360 = _2346;
                      _checked_ptr_1<int> _ptr__2360(_2360 ? _2360->raw() : nullptr,_2360 ? _2360->size(0) : 0);
                      _2346 = _2347;
                      _ptr__2346.update(_2346 ? _2346->raw() : nullptr, _2346 ? _2346->size(0) : 0);
                      _2347 = _2360;
                      _ptr__2347.update(_2347 ? _2347->raw() : nullptr, _2347 ? _2347->size(0) : 0);
                    }
                  }
                }
                std::vector<long long> _9735;
                for (int _2361 = (int)0, _9736 = _2314; _2361 < _9736 ; ++_2361)
                {
                  _9735.push_back(_ptr__2328[_ptr__2346[_2361]]);
                }
                auto _9737 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9735.size()),_9735.begin(),_9735.end()));
                std::vector<long long> _9738;
                for (int _2362 = (int)0, _9739 = _2314; _2362 < _9739 ; ++_2362)
                {
                  _9738.push_back(_ptr__2327[_ptr__2346[_2362]]);
                }
                auto _9740 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9738.size()),_9738.begin(),_9738.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,_9737,_9740)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2363 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2363(_2363 ? _2363->raw() : nullptr,_2363 ? _2363->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2364 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _2313,_2308 ))));
          _checked_ptr_1<long long> _ptr__2364(_2364 ? _2364->raw() : nullptr,_2364 ? _2364->size(0) : 0);
          _2306->inst((int)0,_2363);
          int _2365 = safe_mul( _2318,_2319 );
          int _2366 = _2319;
          int _2367 = (int)0;
          int _9741 = (int)0;
          int _9742 = _2315;
          for (int _2368 = _9741; _2368 < _9742; ++_2368)
          {
            {
              int _9743 = (int)0;
              int _9744 = _2317;
              for (int _2369 = _9743; _2369 < _9744; ++_2369)
              {
                {
                  int _9745 = (int)0;
                  int _9746 = _2319;
                  for (int _2370 = _9745; _2370 < _9746; ++_2370)
                  {
                    {
                      int _9747 = (int)0;
                      int _9748 = _2308;
                      for (int _2371 = _9747; _2371 < _9748; ++_2371)
                      {
                        {
                          _ptr__2364[safe_add( safe_add( safe_mul( _2368,_2365 ),safe_mul( safe_add( _2369,safe_mul( _2371,_2317 ) ),_2366 ) ),_2370 )] = _ptr__2363[_2367];
                        }
                      }
                      ++ _2367;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,nullptr,_2364)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2372) { return mosek::fusion::p_Var::stack(_2372); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2372){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _9749;
  for (int _2373 = (int)0, _9750 = (int)((_2372)->size(0)); _2373 < _9750 ; ++_2373)
  {
    _9749.push_back(::mosek::fusion::p_Var::dstack(((*_2372)(_2373)),(int)1));
  }
  auto _9751 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_9749.size()),_9749.begin(),_9749.end()));
  return ::mosek::fusion::p_Var::dstack(_9751,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2374,    monty::rc_ptr< ::mosek::fusion::Variable > _2375,    monty::rc_ptr< ::mosek::fusion::Variable > _2376) { return mosek::fusion::p_Var::vstack(_2374,_2375,_2376); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2374,monty::rc_ptr< ::mosek::fusion::Variable > _2375,monty::rc_ptr< ::mosek::fusion::Variable > _2376){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2374.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2375.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2376.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2377,    monty::rc_ptr< ::mosek::fusion::Variable > _2378) { return mosek::fusion::p_Var::vstack(_2377,_2378); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2377,monty::rc_ptr< ::mosek::fusion::Variable > _2378){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2377.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2378.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2379) { return mosek::fusion::p_Var::vstack(_2379); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2379){
  return ::mosek::fusion::p_Var::dstack(_2379,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2380,    monty::rc_ptr< ::mosek::fusion::Variable > _2381,    monty::rc_ptr< ::mosek::fusion::Variable > _2382) { return mosek::fusion::p_Var::hstack(_2380,_2381,_2382); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2380,monty::rc_ptr< ::mosek::fusion::Variable > _2381,monty::rc_ptr< ::mosek::fusion::Variable > _2382){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2380.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2381.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2382.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2383,    monty::rc_ptr< ::mosek::fusion::Variable > _2384) { return mosek::fusion::p_Var::hstack(_2383,_2384); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2383,monty::rc_ptr< ::mosek::fusion::Variable > _2384){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2383.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2384.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2385) { return mosek::fusion::p_Var::hstack(_2385); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2385){
  return ::mosek::fusion::p_Var::dstack(_2385,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2386,    monty::rc_ptr< ::mosek::fusion::Variable > _2387,    monty::rc_ptr< ::mosek::fusion::Variable > _2388,    int _2389) { return mosek::fusion::p_Var::stack(_2386,_2387,_2388,_2389); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2386,monty::rc_ptr< ::mosek::fusion::Variable > _2387,monty::rc_ptr< ::mosek::fusion::Variable > _2388,int _2389){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2386.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2387.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2388.get())}),_2389);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2390,    monty::rc_ptr< ::mosek::fusion::Variable > _2391,    int _2392) { return mosek::fusion::p_Var::stack(_2390,_2391,_2392); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2390,monty::rc_ptr< ::mosek::fusion::Variable > _2391,int _2392){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2390.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2391.get())}),_2392);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2393,    int _2394) { return mosek::fusion::p_Var::stack(_2393,_2394); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2393,int _2394){
  int _2395 = _2394;
  int _9752 = (int)0;
  int _9753 = (int)((_2393)->size(0));
  for (int _2396 = _9752; _2396 < _9753; ++_2396)
  {
    {
      if ((_2395 < ((*_2393)(_2396))->getND()))
      {
        {
          _2395 = ((*_2393)(_2396))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2393,_2394);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote  ( monty::rc_ptr< ::mosek::fusion::Variable > _2397,    int _2398) { return mosek::fusion::p_Var::promote(_2397,_2398); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2397,int _2398){
  if ((_2398 > _2397->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2399 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2398)));
      _checked_ptr_1<int> _ptr__2399(_2399 ? _2399->raw() : nullptr,_2399 ? _2399->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2400 = _2397->getShape();
      _checked_ptr_1<int> _ptr__2400(_2400 ? _2400->raw() : nullptr,_2400 ? _2400->size(0) : 0);
      int _9754 = (int)0;
      int _9755 = (int)((_2400)->size(0));
      for (int _2401 = _9754; _2401 < _9755; ++_2401)
      {
        {
          _ptr__2399[_2401] = _ptr__2400[_2401];
        }
      }
      int _9756 = (int)((_2400)->size(0));
      int _9757 = _2398;
      for (int _2402 = _9756; _2402 < _9757; ++_2402)
      {
        {
          _ptr__2399[_2402] = (int)1;
        }
      }
      return _2397->__mosek_2fusion_2Variable__reshape(_2399);
    }
  }
  else
  {
    {
      return _2397;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2403,int _2404){
  if ((_2404 < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2405 = nullptr;
  {
    int _9758 = (int)0;
    int _9759 = (int)((_2403)->size(0));
    for (int _2406 = _9758; _2406 < _9759; ++_2406)
    {
      {
        if ((NULL == _2405.get()))
        {
          {
            _2405 = ((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel() != _2405)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2407 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _9760;
            bool _9761 = ((int)((mosek::fusion::p_Model::_get_impl(_2405.get())->getName()).size()) > (int)0);
            if (_9761)
            {
              _9760 = mosek::fusion::p_Model::_get_impl(_2405.get())->getName();
            }
            else
            {
              _9760 = std::string ("?");
            }
            std::string _2408 = _9760;
            std::string _9762;
            bool _9763 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_9763)
            {
              _9762 = mosek::fusion::p_Model::_get_impl(((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _9762 = std::string ("?");
            }
            std::string _2409 = _9762;
            _2407->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2408)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2409)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2407->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2403)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2403)->size(0)) == (int)1))
  {
    {
      return ((*_2403)((int)1));
    }
  }
  else
  {
    {
      int _2410 = (int)((_2403)->size(0));
      std::vector<int> _9764;
      for (int _2412 = (int)0, _9765 = _2410; _2412 < _9765 ; ++_2412)
      {
        _9764.push_back(((*_2403)(_2412))->numInst());
      }
      auto _9766 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9764.size()),_9764.begin(),_9764.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2411 = _9766;
      _checked_ptr_1<int> _ptr__2411(_2411 ? _2411->raw() : nullptr,_2411 ? _2411->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _9767;
      for (int _2414 = (int)0, _9768 = _2410; _2414 < _9768 ; ++_2414)
      {
        _9767.push_back(((*_2403)(_2414))->getShape());
      }
      auto _9769 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_9767.size()),_9767.begin(),_9767.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2413 = _9769;
      std::vector<int> _9770;
      for (int _2416 = (int)0, _9771 = _2410; _2416 < _9771 ; ++_2416)
      {
        _9770.push_back((int)((((*_2413)(_2416)))->size(0)));
      }
      auto _9772 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9770.size()),_9770.begin(),_9770.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2415 = _9772;
      _checked_ptr_1<int> _ptr__2415(_2415 ? _2415->raw() : nullptr,_2415 ? _2415->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2417 = ((*_2413)((int)0));
      _checked_ptr_1<int> _ptr__2417(_2417 ? _2417->raw() : nullptr,_2417 ? _2417->size(0) : 0);
      int _2418 = _ptr__2415[(int)0];
      int _2419 = (int)0;
      int _9773 = (int)0;
      int _9774 = _2410;
      for (int _2420 = _9773; _2420 < _9774; ++_2420)
      {
        {
          _2419 += _ptr__2411[_2420];
        }
      }
      int _2421 = safe_add( _2404,(int)1 );
      int _9775 = (int)0;
      int _9776 = _2410;
      for (int _2422 = _9775; _2422 < _9776; ++_2422)
      {
        {
          if ((_2421 < _ptr__2415[_2422]))
          {
            {
              _2421 = _ptr__2415[_2422];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2423 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2421)));
      _checked_ptr_1<int> _ptr__2423(_2423 ? _2423->raw() : nullptr,_2423 ? _2423->size(0) : 0);
      int _9777 = (int)0;
      int _9778 = _2418;
      for (int _2424 = _9777; _2424 < _9778; ++_2424)
      {
        {
          _ptr__2423[_2424] = _ptr__2417[_2424];
        }
      }
      int _9779 = _2418;
      int _9780 = _2421;
      for (int _2425 = _9779; _2425 < _9780; ++_2425)
      {
        {
          _ptr__2423[_2425] = (int)1;
        }
      }
      _ptr__2423[_2404] = (int)0;
      int _9781 = (int)0;
      int _9782 = _2410;
      for (int _2426 = _9781; _2426 < _9782; ++_2426)
      {
        {
          int _9783;
          bool _9784 = ((int)((((*_2413)(_2426)))->size(0)) > _2404);
          if (_9784)
          {
            _9783 = ((*((*_2413)(_2426)))(_2404));
          }
          else
          {
            _9783 = (int)1;
          }
          _ptr__2423[_2404] += _9783;
        }
      }
      int _9785 = (int)0;
      int _9786 = _2410;
      for (int _2427 = _9785; _2427 < _9786; ++_2427)
      {
        {
          int _9787 = (int)0;
          int _9788 = (int)((((*_2413)(_2427)))->size(0));
          for (int _2428 = _9787; _2428 < _9788; ++_2428)
          {
            {
              if (((_2428 != _2404) && (((*((*_2413)(_2427)))(_2428)) != _ptr__2423[_2428])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int _9789 = (int)((((*_2413)(_2427)))->size(0));
          int _9790 = _2421;
          for (int _2429 = _9789; _2429 < _9790; ++_2429)
          {
            {
              if (((_2429 != _2404) && ((int)1 != _ptr__2423[_2429])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2430 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2419)));
      _checked_ptr_1<long long> _ptr__2430(_2430 ? _2430->raw() : nullptr,_2430 ? _2430->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2431 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2419)));
      _checked_ptr_1<long long> _ptr__2431(_2431 ? _2431->raw() : nullptr,_2431 ? _2431->size(0) : 0);
      std::vector<int> _9791;
      for (int _2433 = (int)0, _9792 = (int)((_2403)->size(0)); _2433 < _9792 ; ++_2433)
      {
        int _9793;
        bool _9794 = (_2404 < (int)((((*_2413)(_2433)))->size(0)));
        if (_9794)
        {
          _9793 = ((*((*_2413)(_2433)))(_2404));
        }
        else
        {
          _9793 = (int)1;
        }
        _9791.push_back(_9793);
      }
      auto _9795 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9791.size()),_9791.begin(),_9791.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2432 = _9795;
      _checked_ptr_1<int> _ptr__2432(_2432 ? _2432->raw() : nullptr,_2432 ? _2432->size(0) : 0);
      int _2434 = (int)1;
      int _9796 = (int)0;
      int _9797 = _2404;
      for (int _2435 = _9796; _2435 < _9797; ++_2435)
      {
        {
          int _9798;
          bool _9799 = (_2435 < (int)((_2417)->size(0)));
          if (_9799)
          {
            _9798 = _ptr__2417[_2435];
          }
          else
          {
            _9798 = (int)1;
          }
          _2434 *= _9798;
        }
      }
      int _2436 = (int)0;
      int _9800 = (int)0;
      int _9801 = _2410;
      for (int _2437 = _9800; _2437 < _9801; ++_2437)
      {
        {
          _2436 += _ptr__2432[_2437];
        }
      }
      int _2438 = (int)1;
      int _9802 = safe_add( _2404,(int)1 );
      int _9803 = (int)((_2417)->size(0));
      for (int _2439 = _9802; _2439 < _9803; ++_2439)
      {
        {
          _2438 *= _ptr__2417[_2439];
        }
      }
      if ((_2434 == (int)1))
      {
        {
          int _2440 = (int)0;
          long long _2441 = (int)0;
          int _9804 = (int)0;
          int _9805 = _2410;
          for (int _2442 = _9804; _2442 < _9805; ++_2442)
          {
            {
              ((*_2403)(_2442))->inst(_2440,_2431,_2440,_2430);
              int _9806 = (int)0;
              int _9807 = _ptr__2411[_2442];
              for (int _2443 = _9806; _2443 < _9807; ++_2443)
              {
                {
                  _ptr__2431[_2440] += _2441;
                  ++ _2440;
                }
              }
              _2441 += ::mosek::fusion::p_Set::size(((*_2413)(_2442)));
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _9808;
          bool _9809 = (_2419 < safe_mul( safe_mul( _2434,_2436 ),_2438 ));
          if (_9809)
          {
            _9808 = _2431;
          }
          else
          {
            _9808 = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2405,_2423,_9808,_2430)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int _2444 = (int)0;
          int _9810 = (int)0;
          int _9811 = _2410;
          for (int _2445 = _9810; _2445 < _9811; ++_2445)
          {
            {
              _2444 += ((*_2403)(_2445))->inst(_2444,_2431,_2444,_2430);
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2446 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2419)));
          _checked_ptr_1<int> _ptr__2446(_2446 ? _2446->raw() : nullptr,_2446 ? _2446->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2447 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2419)));
          _checked_ptr_1<int> _ptr__2447(_2447 ? _2447->raw() : nullptr,_2447 ? _2447->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2448 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2410)));
          _checked_ptr_1<int> _ptr__2448(_2448 ? _2448->raw() : nullptr,_2448 ? _2448->size(0) : 0);
          int _9812 = (int)0;
          int _9813 = (_2410 - (int)1);
          for (int _2449 = _9812; _2449 < _9813; ++_2449)
          {
            {
              _ptr__2448[safe_add( _2449,(int)1 )] = safe_add( _ptr__2448[_2449],_ptr__2432[_2449] );
            }
          }
          int _9814 = (int)0;
          int _9815 = _2419;
          for (int _2450 = _9814; _2450 < _9815; ++_2450)
          {
            {
              _ptr__2446[_2450] = _2450;
            }
          }
          int _2451 = (int)0;
          int _9816 = (int)0;
          int _9817 = _2410;
          for (int _2452 = _9816; _2452 < _9817; ++_2452)
          {
            {
              int _9818 = (int)0;
              int _9819 = _ptr__2411[_2452];
              for (int _2453 = _9818; _2453 < _9819; ++_2453)
              {
                {
                  long long _2454 = (_ptr__2431[_2451] / safe_mul( _ptr__2432[_2452],_2438 ));
                  long long _2455 = ((_ptr__2431[_2451] / _2438) % _ptr__2432[_2452]);
                  long long _2456 = (_ptr__2431[_2451] % _2438);
                  _ptr__2431[_2451] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2454,_2436 ),_2455 ),_ptr__2448[_2452] ),_2438 ),_2456 );
                  ++ _2451;
                }
              }
            }
          }
          int _2457 = (int)1;
          int _9820 = (int)0;
          int _9821 = _2421;
          for (int _2458 = _9820; _2458 < _9821; ++_2458)
          {
            {
              int _9822;
              bool _9823 = (_2457 < _ptr__2423[_2458]);
              if (_9823)
              {
                _9822 = _ptr__2423[_2458];
              }
              else
              {
                _9822 = _2457;
              }
              _2457 = _9822;
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _2459 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2421)));
          _checked_ptr_1<long long> _ptr__2459(_2459 ? _2459->raw() : nullptr,_2459 ? _2459->size(0) : 0);
          _ptr__2459[(_2421 - (int)1)] = (int)1;
          int _9824 = (int)1;
          int _9825 = _2421;
          for (int _2460 = _9824; _2460 < _9825; ++_2460)
          {
            {
              _ptr__2459[((_2421 - _2460) - (int)1)] = safe_mul( _ptr__2459[(_2421 - _2460)],_ptr__2423[(_2421 - _2460)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2461 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2457,(int)1 ))));
          _checked_ptr_1<int> _ptr__2461(_2461 ? _2461->raw() : nullptr,_2461 ? _2461->size(0) : 0);
          int _9826 = (int)0;
          int _9827 = _2421;
          for (int _2462 = _9826; _2462 < _9827; ++_2462)
          {
            {
              int _2463 = ((_2421 - _2462) - (int)1);
              int _9828 = (int)0;
              int _9829 = safe_add( _ptr__2423[_2463],(int)1 );
              for (int _2464 = _9828; _2464 < _9829; ++_2464)
              {
                {
                  _ptr__2461[_2464] = (int)0;
                }
              }
              int _9830 = (int)0;
              int _9831 = _2419;
              for (int _2465 = _9830; _2465 < _9831; ++_2465)
              {
                {
                  ++ _ptr__2461[safe_add( ((_ptr__2431[_2465] / _ptr__2459[_2463]) % _ptr__2423[_2463]),(int)1 )];
                }
              }
              int _9832 = (int)0;
              int _9833 = _ptr__2423[_2463];
              for (int _2466 = _9832; _2466 < _9833; ++_2466)
              {
                {
                  _ptr__2461[safe_add( _2466,(int)1 )] += _ptr__2461[_2466];
                }
              }
              int _9834 = (int)0;
              int _9835 = _2419;
              for (int _2467 = _9834; _2467 < _9835; ++_2467)
              {
                {
                  int _2468 = _ptr__2446[_2467];
                  long long _2469 = ((_ptr__2431[_2468] / _ptr__2459[_2463]) % _ptr__2423[_2463]);
                  _ptr__2447[_ptr__2461[_2469]] = _2468;
                  ++ _ptr__2461[_2469];
                }
              }
              std::shared_ptr< monty::ndarray< int,1 > > _2470 = _2446;
              _checked_ptr_1<int> _ptr__2470(_2470 ? _2470->raw() : nullptr,_2470 ? _2470->size(0) : 0);
              _2446 = _2447;
              _ptr__2446.update(_2446 ? _2446->raw() : nullptr, _2446 ? _2446->size(0) : 0);
              _2447 = _2470;
              _ptr__2447.update(_2447 ? _2447->raw() : nullptr, _2447 ? _2447->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _9836;
          bool _9837 = (_2419 < safe_mul( safe_mul( _2434,_2436 ),_2438 ));
          if (_9837)
          {
            std::vector<long long> _9838;
            for (int _2471 = (int)0, _9839 = _2419; _2471 < _9839 ; ++_2471)
            {
              _9838.push_back(_ptr__2431[_ptr__2446[_2471]]);
            }
            auto _9840 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9838.size()),_9838.begin(),_9838.end()));
            _9836 = _9840;
          }
          else
          {
            _9836 = nullptr;
          }
          std::vector<long long> _9841;
          for (int _2472 = (int)0, _9842 = _2419; _2472 < _9842 ; ++_2472)
          {
            _9841.push_back(_ptr__2430[_ptr__2446[_2472]]);
          }
          auto _9843 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9841.size()),_9841.begin(),_9841.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2405,_2423,_9836,_9843)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2473,    monty::rc_ptr< ::mosek::fusion::Model > _2474){ return new mosek::fusion::LinearPSDConstraint(_2473,_2474); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2473,    monty::rc_ptr< ::mosek::fusion::Model > _2474) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2473,_2474); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2473,    monty::rc_ptr< ::mosek::fusion::Model > _2474){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2473,_2474);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->shape;
  }
}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2475,    const std::string &  _2476,    int _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478,    int _2479,    std::shared_ptr< monty::ndarray< int,1 > > _2480,    std::shared_ptr< monty::ndarray< long long,1 > > _2481){ return new mosek::fusion::LinearPSDConstraint(_2475,_2476,_2477,_2478,_2479,_2480,_2481); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2475,    const std::string &  _2476,    int _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478,    int _2479,    std::shared_ptr< monty::ndarray< int,1 > > _2480,    std::shared_ptr< monty::ndarray< long long,1 > > _2481) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2475,_2476,_2477,_2478,_2479,_2480,_2481); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2475,    const std::string &  _2476,    int _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478,    int _2479,    std::shared_ptr< monty::ndarray< int,1 > > _2480,    std::shared_ptr< monty::ndarray< long long,1 > > _2481){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2478(_2478 ? _2478->raw() : nullptr, _2478 ? _2478->size(0) : 0);
    _checked_ptr_1<int> _ptr__2480(_2480 ? _2480->raw() : nullptr, _2480 ? _2480->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2481(_2481 ? _2481->raw() : nullptr, _2481 ? _2481->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2475,_2476,_2478,_2480,_2477);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2477;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2481;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2480;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2479;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2478;
  }
}void mosek::fusion::p_LinearPSDConstraint::domainToString(long long _2482,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2483){
  std::shared_ptr< monty::ndarray< int,1 > > _2484 = ::mosek::fusion::p_Set::idxtokey(shape,_2482);
  _checked_ptr_1<int> _ptr__2484(_2484 ? _2484->raw() : nullptr,_2484 ? _2484->size(0) : 0);
  _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2484[(int)0]);
  int _9844 = (int)1;
  int _9845 = (int)((_2484)->size(0));
  for (int _2485 = _9844; _2485 < _9845; ++_2485)
  {
    {
      _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2484[_2485]);
    }
  }
  _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9846 = (int)1;
  int _9847 = (int)((_2484)->size(0));
  for (int _2486 = _9846; _2486 < _9847; ++_2486)
  {
    {
      _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2486)));
    }
  }
  _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2487){
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2487)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearPSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2488,    monty::rc_ptr< ::mosek::fusion::Model > _2489){ return new mosek::fusion::PSDConstraint(_2488,_2489); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2488,    monty::rc_ptr< ::mosek::fusion::Model > _2489) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2488,_2489); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2488,    monty::rc_ptr< ::mosek::fusion::Model > _2489){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2488,_2489);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->conedim1;
  }
}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2490,    const std::string &  _2491,    int _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493,    int _2494,    int _2495,    std::shared_ptr< monty::ndarray< long long,1 > > _2496,    std::shared_ptr< monty::ndarray< int,1 > > _2497){ return new mosek::fusion::PSDConstraint(_2490,_2491,_2492,_2493,_2494,_2495,_2496,_2497); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2490,    const std::string &  _2491,    int _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493,    int _2494,    int _2495,    std::shared_ptr< monty::ndarray< long long,1 > > _2496,    std::shared_ptr< monty::ndarray< int,1 > > _2497) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2490,_2491,_2492,_2493,_2494,_2495,_2496,_2497); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2490,    const std::string &  _2491,    int _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493,    int _2494,    int _2495,    std::shared_ptr< monty::ndarray< long long,1 > > _2496,    std::shared_ptr< monty::ndarray< int,1 > > _2497){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2493(_2493 ? _2493->raw() : nullptr, _2493 ? _2493->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2496(_2496 ? _2496->raw() : nullptr, _2496 ? _2496->size(0) : 0);
    _checked_ptr_1<int> _ptr__2497(_2497 ? _2497->raw() : nullptr, _2497 ? _2497->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2490,_2491,_2493,::mosek::fusion::p_PSDConstraint::computenidxs(_2493,_2494,_2495,_2497),_2492);
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2492;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2497;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2496;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2491;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2493;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2494;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2495;
    names_flushed = false;
  }
}std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2498){
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2498)).as<::mosek::fusion::ModelConstraint>();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int,1 > > _2499,int _2500,int _2501,std::shared_ptr< monty::ndarray< int,1 > > _2502){
  _checked_ptr_1<int> _ptr__2499(_2499 ? _2499->raw() : nullptr, _2499 ? _2499->size(0) : 0);
  _checked_ptr_1<int> _ptr__2502(_2502 ? _2502->raw() : nullptr, _2502 ? _2502->size(0) : 0);
  int _2503 = (int)((_2499)->size(0));
  bool _2504 = (_2500 < _2501);
  int _9848;
  bool _9849 = _2504;
  if (_9849)
  {
    _9848 = _2500;
  }
  else
  {
    _9848 = _2501;
  }
  int _2505 = _9848;
  int _9850;
  bool _9851 = _2504;
  if (_9851)
  {
    _9850 = _2501;
  }
  else
  {
    _9850 = _2500;
  }
  int _2506 = _9850;
  std::shared_ptr< monty::ndarray< int,1 > > _2507 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__2507(_2507 ? _2507->raw() : nullptr,_2507 ? _2507->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2508 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__2508(_2508 ? _2508->raw() : nullptr,_2508 ? _2508->size(0) : 0);
  int _2509 = (int)1;
  int _9852 = (int)0;
  int _9853 = (int)((_2499)->size(0));
  for (int _2510 = _9852; _2510 < _9853; ++_2510)
  {
    {
      _2509 *= _ptr__2499[_2510];
    }
  }
  int _9854 = (int)0;
  int _9855 = _2505;
  for (int _2511 = _9854; _2511 < _9855; ++_2511)
  {
    {
      _ptr__2507[(int)0] *= _ptr__2499[_2511];
    }
  }
  _ptr__2507[(int)1] = _ptr__2499[_2505];
  int _9856 = safe_add( _2505,(int)1 );
  int _9857 = _2506;
  for (int _2512 = _9856; _2512 < _9857; ++_2512)
  {
    {
      _ptr__2507[(int)2] *= _ptr__2499[_2512];
    }
  }
  _ptr__2507[(int)3] = _ptr__2499[_2506];
  int _9858 = safe_add( _2506,(int)1 );
  int _9859 = _2503;
  for (int _2513 = _9858; _2513 < _9859; ++_2513)
  {
    {
      _ptr__2507[(int)4] *= _ptr__2499[_2513];
    }
  }
  _ptr__2508[(int)4] = (int)1;
  int _9860 = (int)1;
  int _9861 = (int)5;
  for (int _2514 = _9860; _2514 < _9861; ++_2514)
  {
    {
      _ptr__2508[(((int)5 - _2514) - (int)1)] = safe_mul( _ptr__2508[((int)5 - _2514)],_ptr__2507[((int)5 - _2514)] );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2515 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2509)));
  _checked_ptr_1<int> _ptr__2515(_2515 ? _2515->raw() : nullptr,_2515 ? _2515->size(0) : 0);
  int _2516 = (int)0;
  if (_2504)
  {
    {
      int _9862 = (int)0;
      int _9863 = _ptr__2507[(int)0];
      for (int _2517 = _9862; _2517 < _9863; ++_2517)
      {
        {
          int _9864 = (int)0;
          int _9865 = _ptr__2507[(int)1];
          for (int _2518 = _9864; _2518 < _9865; ++_2518)
          {
            {
              int _9866 = (int)0;
              int _9867 = _ptr__2507[(int)2];
              for (int _2519 = _9866; _2519 < _9867; ++_2519)
              {
                {
                  int _9868 = _2518;
                  int _9869 = _ptr__2507[(int)1];
                  for (int _2520 = _9868; _2520 < _9869; ++_2520)
                  {
                    {
                      int _9870 = (int)0;
                      int _9871 = _ptr__2507[(int)4];
                      for (int _2521 = _9870; _2521 < _9871; ++_2521)
                      {
                        {
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2517,_ptr__2508[(int)0] ),safe_mul( _2518,_ptr__2508[(int)1] ) ),safe_mul( _2519,_ptr__2508[(int)2] ) ),safe_mul( _2520,_ptr__2508[(int)3] ) ),safe_mul( _2521,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2517,_ptr__2508[(int)0] ),safe_mul( _2520,_ptr__2508[(int)1] ) ),safe_mul( _2519,_ptr__2508[(int)2] ) ),safe_mul( _2518,_ptr__2508[(int)3] ) ),safe_mul( _2521,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          ++ _2516;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _9872 = (int)0;
      int _9873 = _ptr__2507[(int)0];
      for (int _2522 = _9872; _2522 < _9873; ++_2522)
      {
        {
          int _9874 = (int)0;
          int _9875 = _ptr__2507[(int)1];
          for (int _2523 = _9874; _2523 < _9875; ++_2523)
          {
            {
              int _9876 = (int)0;
              int _9877 = _ptr__2507[(int)2];
              for (int _2524 = _9876; _2524 < _9877; ++_2524)
              {
                {
                  int _9878 = (int)0;
                  int _9879 = safe_add( _2523,(int)1 );
                  for (int _2525 = _9878; _2525 < _9879; ++_2525)
                  {
                    {
                      int _9880 = (int)0;
                      int _9881 = _ptr__2507[(int)4];
                      for (int _2526 = _9880; _2526 < _9881; ++_2526)
                      {
                        {
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2522,_ptr__2508[(int)0] ),safe_mul( _2523,_ptr__2508[(int)1] ) ),safe_mul( _2524,_ptr__2508[(int)2] ) ),safe_mul( _2525,_ptr__2508[(int)3] ) ),safe_mul( _2526,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2522,_ptr__2508[(int)0] ),safe_mul( _2525,_ptr__2508[(int)1] ) ),safe_mul( _2524,_ptr__2508[(int)2] ) ),safe_mul( _2523,_ptr__2508[(int)3] ) ),safe_mul( _2526,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          ++ _2516;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2515;
}
void mosek::fusion::p_PSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barmatidx() { return _impl->barmatidx; }
void mosek::fusion::ConstraintCache::set_barmatidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmatidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConstraintCache::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConstraintCache::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
long long mosek::fusion::ConstraintCache::get_nbarnz() { return _impl->nbarnz; }
void mosek::fusion::ConstraintCache::set_nbarnz(long long _val) { _impl->nbarnz = _val; }
long long mosek::fusion::ConstraintCache::get_nunordered() { return _impl->nunordered; }
void mosek::fusion::ConstraintCache::set_nunordered(long long _val) { _impl->nunordered = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subi() { return _impl->buffer_subi; }
void mosek::fusion::ConstraintCache::set_buffer_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subj() { return _impl->buffer_subj; }
void mosek::fusion::ConstraintCache::set_buffer_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subj = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_buffer_cof() { return _impl->buffer_cof; }
void mosek::fusion::ConstraintCache::set_buffer_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->buffer_cof = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConstraintCache::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_cof() { return _impl->cof; }
void mosek::fusion::ConstraintCache::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subi() { return _impl->subi; }
void mosek::fusion::ConstraintCache::set_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subj() { return _impl->subj; }
void mosek::fusion::ConstraintCache::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
long long mosek::fusion::ConstraintCache::get_nnz() { return _impl->nnz; }
void mosek::fusion::ConstraintCache::set_nnz(long long _val) { _impl->nnz = _val; }
int mosek::fusion::ConstraintCache::get_nrows() { return _impl->nrows; }
void mosek::fusion::ConstraintCache::set_nrows(int _val) { _impl->nrows = _val; }
mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2527){ return new mosek::fusion::ConstraintCache(_2527); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2527) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2527); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2527){monty::rc_reserve __reserve_this(_pubthis);   {
    nrows = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nrows;
    nnz = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nnz;
    std::shared_ptr< monty::ndarray< int,1 > > _9882;
    bool _9883 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subj.get());
    if (_9883)
    {
      _9882 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subj);
    }
    else
    {
      _9882 = nullptr;
    }
    subj = _9882;
    std::shared_ptr< monty::ndarray< int,1 > > _9884;
    bool _9885 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subi.get());
    if (_9885)
    {
      _9884 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subi);
    }
    else
    {
      _9884 = nullptr;
    }
    subi = _9884;
    std::shared_ptr< monty::ndarray< double,1 > > _9886;
    bool _9887 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->cof.get());
    if (_9887)
    {
      _9886 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->cof);
    }
    else
    {
      _9886 = nullptr;
    }
    cof = _9886;
    std::shared_ptr< monty::ndarray< double,1 > > _9888;
    bool _9889 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->bfix.get());
    if (_9889)
    {
      _9888 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->bfix);
    }
    else
    {
      _9888 = nullptr;
    }
    bfix = _9888;
    std::shared_ptr< monty::ndarray< double,1 > > _9890;
    bool _9891 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_cof.get());
    if (_9891)
    {
      _9890 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_cof);
    }
    else
    {
      _9890 = nullptr;
    }
    buffer_cof = _9890;
    std::shared_ptr< monty::ndarray< int,1 > > _9892;
    bool _9893 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subj.get());
    if (_9893)
    {
      _9892 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subj);
    }
    else
    {
      _9892 = nullptr;
    }
    buffer_subj = _9892;
    std::shared_ptr< monty::ndarray< int,1 > > _9894;
    bool _9895 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subi.get());
    if (_9895)
    {
      _9894 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subi);
    }
    else
    {
      _9894 = nullptr;
    }
    buffer_subi = _9894;
    nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nunordered;
    nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nbarnz;
    std::shared_ptr< monty::ndarray< int,1 > > _9896;
    bool _9897 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubi.get());
    if (_9897)
    {
      _9896 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubi);
    }
    else
    {
      _9896 = nullptr;
    }
    barsubi = _9896;
    std::shared_ptr< monty::ndarray< int,1 > > _9898;
    bool _9899 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubj.get());
    if (_9899)
    {
      _9898 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubj);
    }
    else
    {
      _9898 = nullptr;
    }
    barsubj = _9898;
    std::shared_ptr< monty::ndarray< int,1 > > _9900;
    bool _9901 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barmatidx.get());
    if (_9901)
    {
      _9900 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barmatidx);
    }
    else
    {
      _9900 = nullptr;
    }
    barmatidx = _9900;
  }
}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    std::shared_ptr< monty::ndarray< double,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534){ return new mosek::fusion::ConstraintCache(_2528,_2529,_2530,_2531,_2532,_2533,_2534); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    std::shared_ptr< monty::ndarray< double,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2528,_2529,_2530,_2531,_2532,_2533,_2534); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    std::shared_ptr< monty::ndarray< double,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2528(_2528 ? _2528->raw() : nullptr, _2528 ? _2528->size(0) : 0);
    _checked_ptr_1<double> _ptr__2529(_2529 ? _2529->raw() : nullptr, _2529 ? _2529->size(0) : 0);
    _checked_ptr_1<int> _ptr__2530(_2530 ? _2530->raw() : nullptr, _2530 ? _2530->size(0) : 0);
    _checked_ptr_1<double> _ptr__2531(_2531 ? _2531->raw() : nullptr, _2531 ? _2531->size(0) : 0);
    _checked_ptr_1<int> _ptr__2532(_2532 ? _2532->raw() : nullptr, _2532 ? _2532->size(0) : 0);
    _checked_ptr_1<int> _ptr__2533(_2533 ? _2533->raw() : nullptr, _2533 ? _2533->size(0) : 0);
    _checked_ptr_1<int> _ptr__2534(_2534 ? _2534->raw() : nullptr, _2534 ? _2534->size(0) : 0);
    nrows = ((int)((_2528)->size(0)) - (int)1);
    nnz = _ptr__2528[((int)((_2528)->size(0)) - (int)1)];
    subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)));
    if ((NULL != _2531.get()))
    {
      {
        bfix = _2531;
      }
    }
    else
    {
      {
        bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)));
      }
    }
    if (((NULL != _2532.get()) && ((NULL != _2533.get()) && (NULL != _2534.get()))))
    {
      {
        nbarnz = (int)((_2532)->size(0));
        if ((nbarnz > (int)((_2533)->size(0))))
        {
          {
            nbarnz = (int)((_2533)->size(0));
          }
        }
        {}
        if ((nbarnz > (int)((_2534)->size(0))))
        {
          {
            nbarnz = (int)((_2534)->size(0));
          }
        }
        {}
        barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        ::mosek::fusion::Utils::Tools::arraycopy(_2532,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2533,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2534,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
      }
    }
    else
    {
      {
        nbarnz = (int)0;
        barsubi = nullptr;
        barsubj = nullptr;
        barmatidx = nullptr;
      }
    }
    ::mosek::fusion::Utils::Tools::arraycopy(_2530,(long long)0,subj,(long long)0,nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_2529,(long long)0,cof,(long long)0,nnz);
    int _9902 = (int)0;
    int _9903 = nrows;
    for (int _2535 = _9902; _2535 < _9903; ++_2535)
    {
      {
        long long _9904 = _ptr__2528[_2535];
        long long _9905 = _ptr__2528[safe_add( _2535,(int)1 )];
        for (long long _2536 = _9904; _2536 < _9905; ++_2536)
        {
          {
            ((*subi)(_2536)) = _2535;
          }
        }
      }
    }
    buffer_cof = nullptr;
    buffer_subj = nullptr;
    buffer_subi = nullptr;
    nunordered = (long long)0;
  }
}void mosek::fusion::p_ConstraintCache::unchecked_add_fx(std::shared_ptr< monty::ndarray< double,1 > > _2537){
  _checked_ptr_1<double> _ptr__2537(_2537 ? _2537->raw() : nullptr, _2537 ? _2537->size(0) : 0);
  int _9906 = (int)0;
  int _9907 = nrows;
  for (int _2538 = _9906; _2538 < _9907; ++_2538)
  {
    {
      ((*bfix)(_2538)) = (((*bfix)(_2538)) + _ptr__2537[_2538]);
    }
  }
}
long long mosek::fusion::p_ConstraintCache::order_barentries(){
  std::vector<long long> _9908;
  for (long long _2540 = (long long)0, _9909 = nbarnz; _2540 < _9909 ; ++_2540)
  {
    _9908.push_back(_2540);
  }
  auto _9910 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9908.size()),_9908.begin(),_9908.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _2539 = _9910;
  _checked_ptr_1<long long> _ptr__2539(_2539 ? _2539->raw() : nullptr,_2539 ? _2539->size(0) : 0);
  if ((!::mosek::fusion::p_Sort::issorted(_2539,barsubi,barsubj,(long long)((int)0),nbarnz,false)))
  {
    {
      ::mosek::fusion::p_Sort::argsort(_2539,barsubi,barsubj,(long long)((int)0),nbarnz,false);
      std::shared_ptr< monty::ndarray< int,1 > > _2541 = barsubi;
      _checked_ptr_1<int> _ptr__2541(_2541 ? _2541->raw() : nullptr,_2541 ? _2541->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2542 = barsubj;
      _checked_ptr_1<int> _ptr__2542(_2542 ? _2542->raw() : nullptr,_2542 ? _2542->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2543 = barmatidx;
      _checked_ptr_1<int> _ptr__2543(_2543 ? _2543->raw() : nullptr,_2543 ? _2543->size(0) : 0);
      std::vector<int> _9911;
      for (long long _2544 = (int)0, _9912 = nbarnz; _2544 < _9912 ; ++_2544)
      {
        _9911.push_back(_ptr__2541[_ptr__2539[_2544]]);
      }
      auto _9913 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9911.size()),_9911.begin(),_9911.end()));
      barsubi = _9913;
      std::vector<int> _9914;
      for (long long _2545 = (int)0, _9915 = nbarnz; _2545 < _9915 ; ++_2545)
      {
        _9914.push_back(_ptr__2542[_ptr__2539[_2545]]);
      }
      auto _9916 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9914.size()),_9914.begin(),_9914.end()));
      barsubj = _9916;
      std::vector<int> _9917;
      for (long long _2546 = (int)0, _9918 = nbarnz; _2546 < _9918 ; ++_2546)
      {
        _9917.push_back(_ptr__2543[_ptr__2539[_2546]]);
      }
      auto _9919 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9917.size()),_9917.begin(),_9917.end()));
      barmatidx = _9919;
    }
  }
  {}
  return nbarnz;
}
void mosek::fusion::p_ConstraintCache::add_bar(std::shared_ptr< monty::ndarray< int,1 > > _2547,std::shared_ptr< monty::ndarray< int,1 > > _2548,std::shared_ptr< monty::ndarray< int,1 > > _2549){
  _checked_ptr_1<int> _ptr__2547(_2547 ? _2547->raw() : nullptr, _2547 ? _2547->size(0) : 0);
  _checked_ptr_1<int> _ptr__2548(_2548 ? _2548->raw() : nullptr, _2548 ? _2548->size(0) : 0);
  _checked_ptr_1<int> _ptr__2549(_2549 ? _2549->raw() : nullptr, _2549 ? _2549->size(0) : 0);
  if ((NULL != _2547.get()))
  {
    {
      int _2550 = (int)((_2547)->size(0));
      if (((int)((_2547)->size(0)) <= safe_add( nbarnz,_2550 )))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2551 = barsubi;
          _checked_ptr_1<int> _ptr__2551(_2551 ? _2551->raw() : nullptr,_2551 ? _2551->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2552 = barsubj;
          _checked_ptr_1<int> _ptr__2552(_2552 ? _2552->raw() : nullptr,_2552 ? _2552->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2553 = barmatidx;
          _checked_ptr_1<int> _ptr__2553(_2553 ? _2553->raw() : nullptr,_2553 ? _2553->size(0) : 0);
          long long _9920;
          bool _9921 = (safe_mul( (int)2,nbarnz ) > safe_add( nbarnz,_2550 ));
          if (_9921)
          {
            _9920 = safe_mul( (int)2,nbarnz );
          }
          else
          {
            _9920 = safe_add( nbarnz,safe_mul( _2550,(int)2 ) );
          }
          long long _2554 = _9920;
          barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2554)));
          barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2554)));
          barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2554)));
          if ((nbarnz > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_2551,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2552,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2553,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
            }
          }
          {}
        }
      }
      {}
      ::mosek::fusion::Utils::Tools::arraycopy(_2547,(long long)((int)0),barsubi,nbarnz,(long long)(_2550));
      ::mosek::fusion::Utils::Tools::arraycopy(_2548,(long long)((int)0),barsubj,nbarnz,(long long)(_2550));
      ::mosek::fusion::Utils::Tools::arraycopy(_2549,(long long)((int)0),barmatidx,nbarnz,(long long)(_2550));
      nbarnz += _2550;
    }
  }
  {}
}
void mosek::fusion::p_ConstraintCache::unchecked_add_l(std::shared_ptr< monty::ndarray< long long,1 > > _2555,std::shared_ptr< monty::ndarray< int,1 > > _2556,std::shared_ptr< monty::ndarray< double,1 > > _2557,std::shared_ptr< monty::ndarray< double,1 > > _2558){
  _checked_ptr_1<long long> _ptr__2555(_2555 ? _2555->raw() : nullptr, _2555 ? _2555->size(0) : 0);
  _checked_ptr_1<int> _ptr__2556(_2556 ? _2556->raw() : nullptr, _2556 ? _2556->size(0) : 0);
  _checked_ptr_1<double> _ptr__2557(_2557 ? _2557->raw() : nullptr, _2557 ? _2557->size(0) : 0);
  _checked_ptr_1<double> _ptr__2558(_2558 ? _2558->raw() : nullptr, _2558 ? _2558->size(0) : 0);
  long long _2559 = safe_add( nunordered,_ptr__2555[nrows] );
  long long _2560 = _ptr__2555[nrows];
  std::shared_ptr< monty::ndarray< int,1 > > _2561;
  _checked_ptr_1<int> _ptr__2561(_2561 ? _2561->raw() : nullptr,_2561 ? _2561->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2562;
  _checked_ptr_1<int> _ptr__2562(_2562 ? _2562->raw() : nullptr,_2562 ? _2562->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2563;
  _checked_ptr_1<double> _ptr__2563(_2563 ? _2563->raw() : nullptr,_2563 ? _2563->size(0) : 0);
  if (((NULL == buffer_cof.get()) || ((int)((buffer_cof)->size(0)) < _2559)))
  {
    {
      _2561 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2559)));
      _ptr__2561.update(_2561 ? _2561->raw() : nullptr, _2561 ? _2561->size(0) : 0);
      _2562 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2559)));
      _ptr__2562.update(_2562 ? _2562->raw() : nullptr, _2562 ? _2562->size(0) : 0);
      _2563 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2559)));
      _ptr__2563.update(_2563 ? _2563->raw() : nullptr, _2563 ? _2563->size(0) : 0);
      if ((NULL != buffer_cof.get()))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_2561,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_2562,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_2563,(long long)0,nunordered);
        }
      }
      {}
    }
  }
  else
  {
    {
      _2561 = buffer_subi;
      _ptr__2561.update(_2561 ? _2561->raw() : nullptr, _2561 ? _2561->size(0) : 0);
      _2562 = buffer_subj;
      _ptr__2562.update(_2562 ? _2562->raw() : nullptr, _2562 ? _2562->size(0) : 0);
      _2563 = buffer_cof;
      _ptr__2563.update(_2563 ? _2563->raw() : nullptr, _2563 ? _2563->size(0) : 0);
    }
  }
  int _9922 = (int)0;
  int _9923 = nrows;
  for (int _2564 = _9922; _2564 < _9923; ++_2564)
  {
    {
      long long _9924 = _ptr__2555[_2564];
      long long _9925 = _ptr__2555[safe_add( _2564,(int)1 )];
      for (long long _2565 = _9924; _2565 < _9925; ++_2565)
      {
        {
          _ptr__2561[safe_add( nunordered,_2565 )] = _2564;
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_2556,(long long)0,_2562,nunordered,_2560);
  ::mosek::fusion::Utils::Tools::arraycopy(_2557,(long long)0,_2563,nunordered,_2560);
  buffer_subi = _2561;
  buffer_subj = _2562;
  buffer_cof = _2563;
  if ((NULL != _2558.get()))
  {
    {
      int _9926 = (int)0;
      int _9927 = nrows;
      for (int _2566 = _9926; _2566 < _9927; ++_2566)
      {
        {
          ((*bfix)(_2566)) = (((*bfix)(_2566)) + _ptr__2558[_2566]);
        }
      }
    }
  }
  {}
  nunordered = _2559;
}
void mosek::fusion::ConstraintCache :: add(std::shared_ptr< monty::ndarray< long long,1 > > _2567,std::shared_ptr< monty::ndarray< int,1 > > _2568,std::shared_ptr< monty::ndarray< double,1 > > _2569,std::shared_ptr< monty::ndarray< double,1 > > _2570) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_2567,_2568,_2569,_2570); }void mosek::fusion::p_ConstraintCache::add(std::shared_ptr< monty::ndarray< long long,1 > > _2567,std::shared_ptr< monty::ndarray< int,1 > > _2568,std::shared_ptr< monty::ndarray< double,1 > > _2569,std::shared_ptr< monty::ndarray< double,1 > > _2570){
  _checked_ptr_1<long long> _ptr__2567(_2567 ? _2567->raw() : nullptr, _2567 ? _2567->size(0) : 0);
  _checked_ptr_1<int> _ptr__2568(_2568 ? _2568->raw() : nullptr, _2568 ? _2568->size(0) : 0);
  _checked_ptr_1<double> _ptr__2569(_2569 ? _2569->raw() : nullptr, _2569 ? _2569->size(0) : 0);
  _checked_ptr_1<double> _ptr__2570(_2570 ? _2570->raw() : nullptr, _2570 ? _2570->size(0) : 0);
  if ((((int)((_2567)->size(0)) != safe_add( nrows,(int)1 )) || ((NULL != _2570.get()) && ((int)((_2570)->size(0)) != nrows))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));
    }
  }
  {}
  unchecked_add_l(_2567,_2568,_2569,_2570);
}
long long mosek::fusion::ConstraintCache :: flush(std::shared_ptr< monty::ndarray< int,1 > > _2571,std::shared_ptr< monty::ndarray< int,1 > > _2572,std::shared_ptr< monty::ndarray< double,1 > > _2573,std::shared_ptr< monty::ndarray< double,1 > > _2574) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_2571,_2572,_2573,_2574); }long long mosek::fusion::p_ConstraintCache::flush(std::shared_ptr< monty::ndarray< int,1 > > _2571,std::shared_ptr< monty::ndarray< int,1 > > _2572,std::shared_ptr< monty::ndarray< double,1 > > _2573,std::shared_ptr< monty::ndarray< double,1 > > _2574){
  _checked_ptr_1<int> _ptr__2571(_2571 ? _2571->raw() : nullptr, _2571 ? _2571->size(0) : 0);
  _checked_ptr_1<int> _ptr__2572(_2572 ? _2572->raw() : nullptr, _2572 ? _2572->size(0) : 0);
  _checked_ptr_1<double> _ptr__2573(_2573 ? _2573->raw() : nullptr, _2573 ? _2573->size(0) : 0);
  _checked_ptr_1<double> _ptr__2574(_2574 ? _2574->raw() : nullptr, _2574 ? _2574->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2575 = nullptr;
  _checked_ptr_1<long long> _ptr__2575(_2575 ? _2575->raw() : nullptr,_2575 ? _2575->size(0) : 0);
  if (((NULL != bfix.get()) && (NULL != _2574.get())))
  {
    {
      int _9928 = (int)0;
      int _9929 = nrows;
      for (int _2576 = _9928; _2576 < _9929; ++_2576)
      {
        {
          _ptr__2574[_2576] = ((*bfix)(_2576));
        }
      }
    }
  }
  {}
  if ((nunordered == (long long)0))
  {
    {
      return (long long)0;
    }
  }
  {}
  bool _2577 = false;
  {
    int _2578 = (int)1;
    while ( ((_2578 < nunordered) && ((((*buffer_subi)((_2578 - (int)1))) < ((*buffer_subi)(_2578))) || ((((*buffer_subi)((_2578 - (int)1))) == ((*buffer_subi)(_2578))) && (((*buffer_subj)((_2578 - (int)1))) <= ((*buffer_subj)(_2578)))))) )
    {
      {
        ++ _2578;
      }
    }
    _2577 = (_2578 == nunordered);
  }
  if ((!_2577))
  {
    {
      std::vector<long long> _9930;
      for (long long _2579 = (int)0, _9931 = nunordered; _2579 < _9931 ; ++_2579)
      {
        _9930.push_back(_2579);
      }
      auto _9932 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9930.size()),_9930.begin(),_9930.end()));
      _2575 = _9932;
      _ptr__2575.update(_2575 ? _2575->raw() : nullptr, _2575 ? _2575->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2575,buffer_subi,buffer_subj,(long long)0,nunordered);
    }
  }
  {}
  long long _2580 = nnz;
  std::shared_ptr< monty::ndarray< int,1 > > _2581 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2580 ))));
  _checked_ptr_1<int> _ptr__2581(_2581 ? _2581->raw() : nullptr,_2581 ? _2581->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2582 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2580 ))));
  _checked_ptr_1<int> _ptr__2582(_2582 ? _2582->raw() : nullptr,_2582 ? _2582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2583 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( nunordered,_2580 ))));
  _checked_ptr_1<double> _ptr__2583(_2583 ? _2583->raw() : nullptr,_2583 ? _2583->size(0) : 0);
  long long _2584 = (long long)0;
  if (_2577)
  {
    {
      long long _2585 = (long long)0;
      int _2586 = (int)0;
      long long _2587 = nunordered;
      long long _2588 = _2580;
      int _2589 = (int)0;
      int _2590 = (int)0;
      while ( ((_2590 < _2588) && (_2589 < _2587)) )
      {
        {
          if (((((*subi)(_2590)) < ((*buffer_subi)(_2589))) || ((((*subi)(_2590)) == ((*buffer_subi)(_2589))) && (((*subj)(_2590)) < ((*buffer_subj)(_2589))))))
          {
            {
              _ptr__2581[_2586] = ((*subi)(_2590));
              _ptr__2582[_2586] = ((*subj)(_2590));
              _ptr__2583[_2586] = ((*cof)(_2590));
              ++ _2590;
              ++ _2586;
            }
          }
          else if(((((*subi)(_2590)) > ((*buffer_subi)(_2589))) || ((((*subi)(_2590)) == ((*buffer_subi)(_2589))) && (((*subj)(_2590)) > ((*buffer_subj)(_2589))))))
          {
            {
              _ptr__2581[_2586] = ((*buffer_subi)(_2589));
              _ptr__2582[_2586] = ((*buffer_subj)(_2589));
              _ptr__2583[_2586] = ((*buffer_cof)(_2589));
              _ptr__2571[_2584] = _ptr__2581[_2586];
              _ptr__2572[_2584] = _ptr__2582[_2586];
              _ptr__2573[_2584] = _ptr__2583[_2586];
              ++ _2584;
              ++ _2589;
              ++ _2586;
            }
          }
          else
          {
            {
              _ptr__2581[_2586] = ((*subi)(_2590));
              _ptr__2582[_2586] = ((*subj)(_2590));
              _ptr__2583[_2586] = ((*cof)(_2590));
              while ( ((_2590 < (int)((subi)->size(0))) && ((_2589 < (int)((buffer_subi)->size(0))) && ((((*subi)(_2590)) == ((*buffer_subi)(_2589))) && (((*subj)(_2590)) == ((*buffer_subj)(_2589)))))) )
              {
                {
                  _ptr__2583[_2586] = (_ptr__2583[_2586] + ((*buffer_cof)(_2589)));
                  ++ _2589;
                }
              }
              _ptr__2571[_2584] = _ptr__2581[_2586];
              _ptr__2572[_2584] = _ptr__2582[_2586];
              _ptr__2573[_2584] = _ptr__2583[_2586];
              ++ _2584;
              ++ _2590;
              ++ _2586;
            }
          }
        }
      }
      while ( (_2590 < _2588) )
      {
        {
          _ptr__2581[_2586] = ((*subi)(_2590));
          _ptr__2582[_2586] = ((*subj)(_2590));
          _ptr__2583[_2586] = ((*cof)(_2590));
          ++ _2590;
          ++ _2586;
        }
      }
      while ( (_2589 < _2587) )
      {
        {
          _ptr__2581[_2586] = ((*buffer_subi)(_2589));
          _ptr__2582[_2586] = ((*buffer_subj)(_2589));
          _ptr__2583[_2586] = ((*buffer_cof)(_2589));
          _ptr__2571[_2584] = _ptr__2581[_2586];
          _ptr__2572[_2584] = _ptr__2582[_2586];
          _ptr__2573[_2584] = _ptr__2583[_2586];
          ++ _2584;
          ++ _2589;
          ++ _2586;
        }
      }
      nnz = _2586;
    }
  }
  else
  {
    {
      long long _2591 = (long long)0;
      int _2592 = (int)0;
      long long _2593 = nunordered;
      long long _2594 = _2580;
      int _2595 = (int)0;
      int _2596 = (int)0;
      while ( ((_2596 < _2594) && (_2595 < _2593)) )
      {
        {
          if (((((*subi)(_2596)) < ((*buffer_subi)(_ptr__2575[_2595]))) || ((((*subi)(_2596)) == ((*buffer_subi)(_ptr__2575[_2595]))) && (((*subj)(_2596)) < ((*buffer_subj)(_ptr__2575[_2595]))))))
          {
            {
              _ptr__2581[_2592] = ((*subi)(_2596));
              _ptr__2582[_2592] = ((*subj)(_2596));
              _ptr__2583[_2592] = ((*cof)(_2596));
              ++ _2596;
              ++ _2592;
            }
          }
          else if(((((*subi)(_2596)) > ((*buffer_subi)(_ptr__2575[_2595]))) || ((((*subi)(_2596)) == ((*buffer_subi)(_ptr__2575[_2595]))) && (((*subj)(_2596)) > ((*buffer_subj)(_ptr__2575[_2595]))))))
          {
            {
              _ptr__2581[_2592] = ((*buffer_subi)(_ptr__2575[_2595]));
              _ptr__2582[_2592] = ((*buffer_subj)(_ptr__2575[_2595]));
              _ptr__2583[_2592] = ((*buffer_cof)(_ptr__2575[_2595]));
              _ptr__2571[_2584] = _ptr__2581[_2592];
              _ptr__2572[_2584] = _ptr__2582[_2592];
              _ptr__2573[_2584] = _ptr__2583[_2592];
              ++ _2584;
              ++ _2595;
              ++ _2592;
            }
          }
          else
          {
            {
              _ptr__2581[_2592] = ((*subi)(_2596));
              _ptr__2582[_2592] = ((*subj)(_2596));
              _ptr__2583[_2592] = ((*cof)(_2596));
              while ( ((((*subi)(_2596)) == ((*buffer_subi)(_ptr__2575[_2595]))) && (((*subj)(_2596)) == ((*buffer_subj)(_ptr__2575[_2595])))) )
              {
                {
                  _ptr__2583[_2592] = (_ptr__2583[_2592] + ((*buffer_cof)(_ptr__2575[_2595])));
                  ++ _2595;
                }
              }
              _ptr__2571[_2584] = _ptr__2581[_2592];
              _ptr__2572[_2584] = _ptr__2582[_2592];
              _ptr__2573[_2584] = _ptr__2583[_2592];
              ++ _2584;
              ++ _2596;
              ++ _2592;
            }
          }
        }
      }
      nnz = _2592;
    }
  }
  subi = _2581;
  subj = _2582;
  cof = _2583;
  nunordered = (long long)0;
  return _2584;
}
long long mosek::fusion::ConstraintCache :: numUnsorted() { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted(){
  return nunordered;
}
monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::__mosek_2fusion_2ConstraintCache__clone(){
  return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(::mosek::fusion::ConstraintCache::t(_pubthis));
}
void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599,    bool _2600){ return new mosek::fusion::BoundInterfaceConstraint(_2597,_2598,_2599,_2600); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599,    bool _2600) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2597,_2598,_2599,_2600); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599,    bool _2600){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2598(_2598 ? _2598->raw() : nullptr, _2598 ? _2598->size(0) : 0);
    _checked_ptr_1<int> _ptr__2599(_2599 ? _2599->raw() : nullptr, _2599 ? _2599->size(0) : 0);
    mosek::fusion::p_SliceConstraint::_initialize(_2597,_2598,_2599);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2600;
  }
}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2601,    bool _2602){ return new mosek::fusion::BoundInterfaceConstraint(_2601,_2602); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2601,    bool _2602) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2601,_2602); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2601,    bool _2602){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SliceConstraint::_initialize(_2601);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2602;
  }
}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceConstraint :: dual() { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceConstraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2603 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__2603(_2603 ? _2603->raw() : nullptr,_2603 ? _2603->size(0) : 0);
  dual_lu((int)0,_2603,islower);
  return _2603;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2604,_2605); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2604,_2605); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2604,_2605); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605){
  _checked_ptr_1<int> _ptr__2604(_2604 ? _2604->raw() : nullptr, _2604 ? _2604->size(0) : 0);
  _checked_ptr_1<int> _ptr__2605(_2605 ? _2605->raw() : nullptr, _2605 ? _2605->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2606 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2604,_2605);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2606)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(int _2607,int _2608) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2607,_2608); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(int _2607,int _2608) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2607,_2608); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(int _2607,int _2608) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2607,_2608); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(int _2607,int _2608){
  monty::rc_ptr< ::mosek::fusion::Constraint > _2609 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2607,_2608);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2609)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2610) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2610); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2610) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2610); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2610) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2610); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2610){
  _checked_ptr_1<int> _ptr__2610(_2610 ? _2610->raw() : nullptr, _2610 ? _2610->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2611 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2610);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2611)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(int _2612) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(int _2612) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2612); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(int _2612) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(int _2612){
  monty::rc_ptr< ::mosek::fusion::Constraint > _2613 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2612);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2613)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__from_(monty::rc_ptr< ::mosek::fusion::Constraint > _2614){
  monty::rc_ptr< ::mosek::fusion::Constraint > _9933 = _2614;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::SliceConstraint*>(_9933.get()))
  {
    ::mosek::fusion::SliceConstraint::t _2615 (dynamic_cast<::mosek::fusion::SliceConstraint*>(_9933.get()));
    {
      return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_2615,islower);
    }
  }
  else
  {
    mosek::fusion::Constraint::t _2616 = _9933;
    {
      return nullptr;
    }
  }
}
void mosek::fusion::p_BoundInterfaceConstraint::destroy(){}void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2617){ return new mosek::fusion::SliceConstraint(_2617); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2617) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2617); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2617){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2617,_2617->__mosek_2fusion_2Constraint__getModel());
  }
}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620){ return new mosek::fusion::SliceConstraint(_2618,_2619,_2620); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2618,_2619,_2620); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2619(_2619 ? _2619->raw() : nullptr, _2619 ? _2619->size(0) : 0);
    _checked_ptr_1<int> _ptr__2620(_2620 ? _2620->raw() : nullptr, _2620 ? _2620->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2618,_2619,_2620);
  }
}std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_SliceConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2621 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2621->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2621->toString();
}
void mosek::fusion::p_SliceConstraint::destroy(){}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2622,    monty::rc_ptr< ::mosek::fusion::Model > _2623){ return new mosek::fusion::RangedConstraint(_2622,_2623); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2622,    monty::rc_ptr< ::mosek::fusion::Model > _2623) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2622,_2623); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2622,    monty::rc_ptr< ::mosek::fusion::Model > _2623){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2622,_2623);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2622)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2622)->nativeidxs;
  }
}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2624,    const std::string &  _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627,    int _2628){ return new mosek::fusion::RangedConstraint(_2624,_2625,_2626,_2627,_2628); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2624,    const std::string &  _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627,    int _2628) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2624,_2625,_2626,_2627,_2628); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2624,    const std::string &  _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627,    int _2628){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2626(_2626 ? _2626->raw() : nullptr, _2626 ? _2626->size(0) : 0);
    _checked_ptr_1<int> _ptr__2627(_2627 ? _2627->raw() : nullptr, _2627 ? _2627->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2624,_2625,_2626,_2627,_2628);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2626;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2627;
  }
}monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__upperBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__upperBoundCon(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::upperBoundCon() { return __mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__upperBoundCon(){
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,false);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__lowerBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__lowerBoundCon(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::lowerBoundCon() { return __mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__lowerBoundCon(){
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,true);
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2629){
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2629)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_RangedConstraint::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2630,    monty::rc_ptr< ::mosek::fusion::Model > _2631){ return new mosek::fusion::ConicConstraint(_2630,_2631); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2630,    monty::rc_ptr< ::mosek::fusion::Model > _2631) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2630,_2631); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2630,    monty::rc_ptr< ::mosek::fusion::Model > _2631){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2630,_2631);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->nativeidxs;
    nativeslack = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->nativeslack;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->names_flushed;
  }
}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2632,    const std::string &  _2633,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    int _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638){ return new mosek::fusion::ConicConstraint(_2632,_2633,_2634,_2635,_2636,_2637,_2638); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2632,    const std::string &  _2633,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    int _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2632,_2633,_2634,_2635,_2636,_2637,_2638); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2632,    const std::string &  _2633,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    int _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2635(_2635 ? _2635->raw() : nullptr, _2635 ? _2635->size(0) : 0);
    _checked_ptr_1<int> _ptr__2637(_2637 ? _2637->raw() : nullptr, _2637 ? _2637->size(0) : 0);
    _checked_ptr_1<int> _ptr__2638(_2638 ? _2638->raw() : nullptr, _2638 ? _2638->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2632,_2633,_2635,_2637,_2636);
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2634;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2635;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2633;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2637;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeslack = _2638;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2636;
    names_flushed = false;
  }
}void mosek::fusion::p_ConicConstraint::flushNames(){
  ::mosek::fusion::p_ModelConstraint::flushNames();
  int _2639 = (int)((nativeslack)->size(0));
  monty::rc_ptr< ::mosek::fusion::Model > _2640 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          int _9934 = (int)0;
          int _9935 = _2639;
          for (int _2641 = _9934; _2641 < _9935; ++_2641)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2640.get())->task_var_name(((*nativeslack)(_2641)),std::string (""));
            }
          }
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2642 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          int _9936 = (int)0;
          int _9937 = _2639;
          for (int _2643 = _9936; _2643 < _9937; ++_2643)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2640.get())->task_var_name(((*nativeslack)(_2643)),_2642->__mosek_2fusion_2Utils_2StringBuffer__clear()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,(long long)(_2643)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("].coneslack"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2644 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2644->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2644->toString();
}
void mosek::fusion::p_ConicConstraint::domainToString(long long _2645,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2646){
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2647){
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2647)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_ConicConstraint::destroy(){nativeslack.reset();nativeidxs.reset();shape.reset();dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2648,    monty::rc_ptr< ::mosek::fusion::Model > _2649){ return new mosek::fusion::LinearConstraint(_2648,_2649); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2648,    monty::rc_ptr< ::mosek::fusion::Model > _2649) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2648,_2649); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2648,    monty::rc_ptr< ::mosek::fusion::Model > _2649){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2648,_2649);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2648)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2648)->name;
  }
}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2650,    const std::string &  _2651,    int _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654){ return new mosek::fusion::LinearConstraint(_2650,_2651,_2652,_2653,_2654); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2650,    const std::string &  _2651,    int _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2650,_2651,_2652,_2653,_2654); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2650,    const std::string &  _2651,    int _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2653(_2653 ? _2653->raw() : nullptr, _2653 ? _2653->size(0) : 0);
    _checked_ptr_1<int> _ptr__2654(_2654 ? _2654->raw() : nullptr, _2654 ? _2654->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2650,_2651,_2653,_2654,_2652);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2652;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2651;
  }
}std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2655 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2655->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2655->toString();
}
void mosek::fusion::p_LinearConstraint::domainToString(long long _2656,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2657){
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2658){
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2658)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearConstraint::destroy(){}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2659,    monty::rc_ptr< ::mosek::fusion::Model > _2660){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2659,_2660);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->conid;
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->name;
    names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->names_flushed;
    nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->shape;
  }
}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2661,    const std::string &  _2662,    std::shared_ptr< monty::ndarray< int,1 > > _2663,    std::shared_ptr< monty::ndarray< int,1 > > _2664,    int _2665){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2663(_2663 ? _2663->raw() : nullptr, _2663 ? _2663->size(0) : 0);
    _checked_ptr_1<int> _ptr__2664(_2664 ? _2664->raw() : nullptr, _2664 ? _2664->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2661,_2663,_2664);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2662;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->nativeidxs = _2664;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2663;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = _2665;
  }
}std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2666 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2666->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2666->toString();
}
void mosek::fusion::p_ModelConstraint::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _2667 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if ((!names_flushed))
  {
    {
      if ((_pubthis->getSize() == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      else
      {
        {
          if (((int)((name).size()) == (int)0))
          {
            {
              mosek::fusion::p_Model::_get_impl(_2667.get())->connames(nativeidxs,std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_pubthis->getSize())}),std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
            }
          }
          else
          {
            {
              monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2668 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
              _2668->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
              if ((_pubthis->getND() > (int)0))
              {
                {
                  _2668->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
                  int _9938 = (int)1;
                  int _9939 = _pubthis->getND();
                  for (int _2669 = _9938; _2669 < _9939; ++_2669)
                  {
                    {
                      _2668->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2669);
                    }
                  }
                }
              }
              {}
              _2668->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
              std::shared_ptr< monty::ndarray< int,1 > > _9940;
              bool _9941 = (_pubthis->getND() > (int)0);
              if (_9941)
              {
                _9940 = _pubthis->getShape();
              }
              else
              {
                _9940 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
              }
              mosek::fusion::p_Model::_get_impl(_2667.get())->connames(nativeidxs,_2668->toString(),_9940,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
              names_flushed = true;
            }
          }
        }
      }
    }
  }
  {}
}
void mosek::fusion::ModelConstraint :: remove() { mosek::fusion::p_ModelConstraint::_get_impl(this)->remove(); }void mosek::fusion::p_ModelConstraint::remove(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2Constraint__getModel().get())->removeConstraintBlock(conid);
}
void mosek::fusion::p_ModelConstraint::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2671,    monty::rc_ptr< ::mosek::fusion::Model > _2672){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _2672;
    shape = mosek::fusion::p_Constraint::_get_impl(_2671)->shape;
    nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2671)->nativeidxs;
  }
}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2673,    std::shared_ptr< monty::ndarray< int,1 > > _2674,    std::shared_ptr< monty::ndarray< int,1 > > _2675){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2674(_2674 ? _2674->raw() : nullptr, _2674 ? _2674->size(0) : 0);
    _checked_ptr_1<int> _ptr__2675(_2675 ? _2675->raw() : nullptr, _2675 ? _2675->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2673;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2674;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->nativeidxs = _2675;
  }
}std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< long long,1 > > _2676,long long _2677,std::shared_ptr< monty::ndarray< std::string,1 > > _2678){
  _checked_ptr_1<long long> _ptr__2676(_2676 ? _2676->raw() : nullptr, _2676 ? _2676->size(0) : 0);
}
void mosek::fusion::p_Constraint::dual_lu(int _2679,std::shared_ptr< monty::ndarray< double,1 > > _2680,bool _2681){
  _checked_ptr_1<double> _ptr__2680(_2680 ? _2680->raw() : nullptr, _2680 ? _2680->size(0) : 0);
  model->getConstraintDuals(_2681,nativeidxs,_2680,_2679);
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2682 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2682(_2682 ? _2682->raw() : nullptr,_2682 ? _2682->size(0) : 0);
  values(false,(int)0,_2682);
  return _2682;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2683 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2683(_2683 ? _2683->raw() : nullptr,_2683 ? _2683->size(0) : 0);
  values(true,(int)0,_2683);
  return _2683;
}
void mosek::fusion::p_Constraint::values(bool _2684,int _2685,std::shared_ptr< monty::ndarray< double,1 > > _2686){
  _checked_ptr_1<double> _ptr__2686(_2686 ? _2686->raw() : nullptr, _2686 ? _2686->size(0) : 0);
  model->getConstraintValues(_2684,nativeidxs,_2686,_2685);
}
void mosek::fusion::Constraint :: remove() { mosek::fusion::p_Constraint::_get_impl(this)->remove(); }void mosek::fusion::p_Constraint::remove(){
  throw ::mosek::fusion::DeletionError(std::string ("Only original constraints can be removed"));
}
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2687) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2687); }void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2687){
  _checked_ptr_1<double> _ptr__2687(_2687 ? _2687->raw() : nullptr, _2687 ? _2687->size(0) : 0);
  _pubthis->update(::mosek::fusion::p_Expr::reshape(::mosek::fusion::p_Expr::constTerm(_2687),_pubthis->getShape()),(::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>(),true);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2688) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2688); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2688){
  std::shared_ptr< monty::ndarray< int,1 > > _2689 = _2688->getShape();
  _checked_ptr_1<int> _ptr__2689(_2689 ? _2689->raw() : nullptr,_2689 ? _2689->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2689)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _9942 = (int)0;
  int _9943 = (int)((_2689)->size(0));
  for (int _2690 = _9942; _2690 < _9943; ++_2690)
  {
    {
      if ((_ptr__2689[_2690] != ((*shape)(_2690))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _9944 = (int)((_2689)->size(0));
  int _9945 = (int)((shape)->size(0));
  for (int _2691 = _9944; _2691 < _9945; ++_2691)
  {
    {
      if ((((*shape)(_2691)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2688);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2692,monty::rc_ptr< ::mosek::fusion::Variable > _2693,bool _2694) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2692,_2693,_2694); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2692,monty::rc_ptr< ::mosek::fusion::Variable > _2693,bool _2694){
  int _2695 = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int,1 > > _2696 = _2692->getShape();
  _checked_ptr_1<int> _ptr__2696(_2696 ? _2696->raw() : nullptr,_2696 ? _2696->size(0) : 0);
  if ((_2695 < (int)((_2696)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _9946 = (int)0;
  int _9947 = (int)((_2696)->size(0));
  for (int _2697 = _9946; _2697 < _9947; ++_2697)
  {
    {
      if ((_ptr__2696[_2697] != ((*shape)(_2697))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _9948 = (int)((_2696)->size(0));
  int _9949 = (int)((shape)->size(0));
  for (int _2698 = _9948; _2698 < _9949; ++_2698)
  {
    {
      if ((((*shape)(_2698)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _2699 = _2693->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2700 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2699)));
  _checked_ptr_1<long long> _ptr__2700(_2700 ? _2700->raw() : nullptr,_2700 ? _2700->size(0) : 0);
  if ((_2699 < _2693->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2701 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2699)));
      _checked_ptr_1<long long> _ptr__2701(_2701 ? _2701->raw() : nullptr,_2701 ? _2701->size(0) : 0);
      _2693->inst((int)0,_2701,(int)0,_2700);
    }
  }
  else
  {
    {
      _2693->inst((int)0,_2700);
    }
  }
  int _9950 = (int)0;
  int _9951 = _2699;
  for (int _2702 = _9950; _2702 < _9951; ++_2702)
  {
    {
      if ((_ptr__2700[_2702] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Semidefinite terms cannot be updated"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2703;
  _checked_ptr_1<int> _ptr__2703(_2703 ? _2703->raw() : nullptr,_2703 ? _2703->size(0) : 0);
  {
    bool _2704 = true;
    int _9952 = (int)0;
    int _9953 = (_2699 - (int)1);
    for (int _2705 = _9952; _2705 < _9953; ++_2705)
    {
      {
        _2704 = (_2704 && (_ptr__2700[_2705] < _ptr__2700[safe_add( _2705,(int)1 )]));
      }
    }
    if (_2704)
    {
      {
        if ((!_2694))
        {
          {
            std::vector<int> _9954;
            for (int _2706 = (int)0, _9955 = _2699; _2706 < _9955 ; ++_2706)
            {
              _9954.push_back((int)_ptr__2700[_2706]);
            }
            auto _9956 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9954.size()),_9954.begin(),_9954.end()));
            _2703 = _9956;
            _ptr__2703.update(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
          }
        }
        else
        {
          {
            _2703 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2699,(int)1 ))));
            _ptr__2703.update(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
            _ptr__2703[(int)0] = (int)0;
            int _9957 = (int)0;
            int _9958 = _2699;
            for (int _2707 = _9957; _2707 < _9958; ++_2707)
            {
              {
                _ptr__2703[safe_add( (int)1,_2707 )] = (int)_ptr__2700[_2707];
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::vector<long long> _9959;
        for (int _2709 = (int)0, _9960 = _2699; _2709 < _9960 ; ++_2709)
        {
          _9959.push_back(_2709);
        }
        auto _9961 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9959.size()),_9959.begin(),_9959.end()));
        std::shared_ptr< monty::ndarray< long long,1 > > _2708 = _9961;
        _checked_ptr_1<long long> _ptr__2708(_2708 ? _2708->raw() : nullptr,_2708 ? _2708->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2708,_2700,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2699));
        int _2710 = (int)1;
        int _9962 = (int)1;
        int _9963 = _2699;
        for (int _2711 = _9962; _2711 < _9963; ++_2711)
        {
          {
            if ((_ptr__2700[_ptr__2708[(_2711 - (int)1)]] < _ptr__2700[_ptr__2708[_2711]]))
            {
              {
                ++ _2710;
              }
            }
            {}
          }
        }
        if (_2694)
        {
          {
            _2710 += (int)1;
          }
        }
        {}
        _2703 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2710)));
        _ptr__2703.update(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
        int _2712 = (int)0;
        if (_2694)
        {
          {
            _ptr__2703[(int)0] = (int)0;
            ++ _2712;
          }
        }
        {}
        _ptr__2703[_2712] = (int)_ptr__2700[_ptr__2708[(int)0]];
        int _9964 = (int)1;
        int _9965 = _2699;
        for (int _2713 = _9964; _2713 < _9965; ++_2713)
        {
          {
            if ((_ptr__2700[(_2713 - (int)1)] < _ptr__2700[_2713]))
            {
              {
                _ptr__2703[_2712] = (int)_ptr__2700[_ptr__2708[_2713]];
                ++ _2712;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2692,_2703);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2714,monty::rc_ptr< ::mosek::fusion::Variable > _2715) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2714,_2715); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2714,monty::rc_ptr< ::mosek::fusion::Variable > _2715){
  _pubthis->update(_2714,_2715,false);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model(){
  return model;
}
int mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd(){
  return (int)((shape)->size(0));
}
long long mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size(){
  long long _2716 = (int)1;
  int _9966 = (int)0;
  int _9967 = (int)((shape)->size(0));
  for (int _2717 = _9966; _2717 < _9967; ++_2717)
  {
    {
      _2716 *= ((*shape)(_2717));
    }
  }
  return _2716;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2718,    int _2719) { return mosek::fusion::p_Constraint::stack(_2718,_2719); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2718,int _2719){
  return ::mosek::fusion::p_Constraint::dstack(_2718,_2719);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2720,    monty::rc_ptr< ::mosek::fusion::Constraint > _2721,    monty::rc_ptr< ::mosek::fusion::Constraint > _2722,    int _2723) { return mosek::fusion::p_Constraint::stack(_2720,_2721,_2722,_2723); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2720,monty::rc_ptr< ::mosek::fusion::Constraint > _2721,monty::rc_ptr< ::mosek::fusion::Constraint > _2722,int _2723){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2720.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2721.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2722.get())}),_2723);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2724,    monty::rc_ptr< ::mosek::fusion::Constraint > _2725,    int _2726) { return mosek::fusion::p_Constraint::stack(_2724,_2725,_2726); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2724,monty::rc_ptr< ::mosek::fusion::Constraint > _2725,int _2726){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2724.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2725.get())}),_2726);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2727) { return mosek::fusion::p_Constraint::hstack(_2727); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2727){
  return ::mosek::fusion::p_Constraint::dstack(_2727,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2728) { return mosek::fusion::p_Constraint::vstack(_2728); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2728){
  return ::mosek::fusion::p_Constraint::dstack(_2728,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2729,    monty::rc_ptr< ::mosek::fusion::Constraint > _2730,    monty::rc_ptr< ::mosek::fusion::Constraint > _2731) { return mosek::fusion::p_Constraint::hstack(_2729,_2730,_2731); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2729,monty::rc_ptr< ::mosek::fusion::Constraint > _2730,monty::rc_ptr< ::mosek::fusion::Constraint > _2731){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2729.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2730.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2731.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2732,    monty::rc_ptr< ::mosek::fusion::Constraint > _2733,    monty::rc_ptr< ::mosek::fusion::Constraint > _2734) { return mosek::fusion::p_Constraint::vstack(_2732,_2733,_2734); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2732,monty::rc_ptr< ::mosek::fusion::Constraint > _2733,monty::rc_ptr< ::mosek::fusion::Constraint > _2734){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2732.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2733.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2734.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2735,    monty::rc_ptr< ::mosek::fusion::Constraint > _2736) { return mosek::fusion::p_Constraint::hstack(_2735,_2736); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2735,monty::rc_ptr< ::mosek::fusion::Constraint > _2736){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2735.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2736.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2737,    monty::rc_ptr< ::mosek::fusion::Constraint > _2738) { return mosek::fusion::p_Constraint::vstack(_2737,_2738); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2737,monty::rc_ptr< ::mosek::fusion::Constraint > _2738){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2737.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2738.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2739,int _2740){
  monty::rc_ptr< ::mosek::fusion::Model > _2741 = nullptr;
  {
    int _9968 = (int)0;
    int _9969 = (int)((_2739)->size(0));
    for (int _2742 = _9968; _2742 < _9969; ++_2742)
    {
      {
        if ((NULL == _2741.get()))
        {
          {
            _2741 = ((*_2739)(_2742))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2742)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2742)))->model != _2741)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2743 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _9970;
            bool _9971 = ((int)((mosek::fusion::p_Model::_get_impl(_2741.get())->getName()).size()) > (int)0);
            if (_9971)
            {
              _9970 = mosek::fusion::p_Model::_get_impl(_2741.get())->getName();
            }
            else
            {
              _9970 = std::string ("?");
            }
            std::string _2744 = _9970;
            std::string _9972;
            bool _9973 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2739)(_2742))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_9973)
            {
              _9972 = mosek::fusion::p_Model::_get_impl(((*_2739)(_2742))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _9972 = std::string ("?");
            }
            std::string _2745 = _9972;
            _2743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2744)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2745)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2743->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2739)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2739)->size(0)) == (int)1))
  {
    {
      return ((*_2739)((int)1));
    }
  }
  else
  {
    {
      int _2746 = (int)((_2739)->size(0));
      int _2747 = (int)1;
      int _9974 = (int)0;
      int _9975 = _2746;
      for (int _2748 = _9974; _2748 < _9975; ++_2748)
      {
        {
          int _9976;
          bool _9977 = (((*_2739)(_2748))->getND() > _2747);
          if (_9977)
          {
            _9976 = ((*_2739)(_2748))->getND();
          }
          else
          {
            _9976 = _2747;
          }
          _2747 = _9976;
        }
      }
      if ((_2740 == _2747))
      {
        {
          ++ _2747;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,2 > > _2749 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2746,_2747)));
      int _9978 = (int)0;
      int _9979 = _2746;
      for (int _2750 = _9978; _2750 < _9979; ++_2750)
      {
        {
          int _9980 = (int)0;
          int _9981 = _2747;
          for (int _2751 = _9980; _2751 < _9981; ++_2751)
          {
            {
              ((*_2749)(_2750,_2751)) = (int)1;
            }
          }
        }
      }
      std::vector<int> _9982;
      for (int _2753 = (int)0, _9983 = _2746; _2753 < _9983 ; ++_2753)
      {
        _9982.push_back(((*_2739)(_2753))->getSize());
      }
      auto _9984 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9982.size()),_9982.begin(),_9982.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2752 = _9984;
      _checked_ptr_1<int> _ptr__2752(_2752 ? _2752->raw() : nullptr,_2752 ? _2752->size(0) : 0);
      int _2754 = (int)0;
      int _9985 = (int)0;
      int _9986 = _2746;
      for (int _2755 = _9985; _2755 < _9986; ++_2755)
      {
        {
          _2754 += _ptr__2752[_2755];
        }
      }
      int _9987 = (int)0;
      int _9988 = _2746;
      for (int _2756 = _9987; _2756 < _9988; ++_2756)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2757 = ((*_2739)(_2756))->getShape();
          _checked_ptr_1<int> _ptr__2757(_2757 ? _2757->raw() : nullptr,_2757 ? _2757->size(0) : 0);
          int _9989 = (int)0;
          int _9990 = (int)((_2757)->size(0));
          for (int _2758 = _9989; _2758 < _9990; ++_2758)
          {
            {
              ((*_2749)(_2756,_2758)) = _ptr__2757[_2758];
            }
          }
        }
      }
      if (((_2740 < (int)0) || (_2740 > _2747)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int _9991 = (int)0;
      int _9992 = _2740;
      for (int _2759 = _9991; _2759 < _9992; ++_2759)
      {
        {
          int _9993 = (int)1;
          int _9994 = _2746;
          for (int _2760 = _9993; _2760 < _9994; ++_2760)
          {
            {
              if ((((*_2749)((int)0,_2759)) != ((*_2749)(_2760,_2759))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int _9995 = safe_add( _2740,(int)1 );
      int _9996 = _2747;
      for (int _2761 = _9995; _2761 < _9996; ++_2761)
      {
        {
          int _9997 = (int)1;
          int _9998 = _2746;
          for (int _2762 = _9997; _2762 < _9998; ++_2762)
          {
            {
              if ((((*_2749)((int)0,_2761)) != ((*_2749)(_2762,_2761))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2763 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2754)));
      _checked_ptr_1<int> _ptr__2763(_2763 ? _2763->raw() : nullptr,_2763 ? _2763->size(0) : 0);
      std::vector<int> _9999;
      for (int _2765 = (int)0, _10000 = _2747; _2765 < _10000 ; ++_2765)
      {
        _9999.push_back(((*_2749)((int)0,_2765)));
      }
      auto _10001 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9999.size()),_9999.begin(),_9999.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2764 = _10001;
      _checked_ptr_1<int> _ptr__2764(_2764 ? _2764->raw() : nullptr,_2764 ? _2764->size(0) : 0);
      int _10002 = (int)1;
      int _10003 = _2746;
      for (int _2766 = _10002; _2766 < _10003; ++_2766)
      {
        {
          _ptr__2764[_2740] += ((*_2749)(_2766,_2740));
        }
      }
      {
        int _2767 = (int)((_2764)->size(0));
        std::shared_ptr< monty::ndarray< long long,1 > > _2768 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( (int)((_2739)->size(0)),(int)1 ))));
        _checked_ptr_1<long long> _ptr__2768(_2768 ? _2768->raw() : nullptr,_2768 ? _2768->size(0) : 0);
        int _10004 = (int)0;
        int _10005 = (int)((_2739)->size(0));
        for (int _2769 = _10004; _2769 < _10005; ++_2769)
        {
          {
            _ptr__2768[safe_add( _2769,(int)1 )] = safe_add( _ptr__2768[_2769],((*_2749)(_2769,_2740)) );
          }
        }
        if ((_2740 == (int)0))
        {
          {
            int _2770 = (int)0;
            int _10006 = (int)0;
            int _10007 = _2746;
            for (int _2771 = _10006; _2771 < _10007; ++_2771)
            {
              {
                int _2772 = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2771)))->nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2771)))->nativeidxs,(int)0,_2763,_2770,_2772);
                _2770 += _2772;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _10008;
            for (int _2774 = (int)0, _10009 = _2746; _2774 < _10009 ; ++_2774)
            {
              _10008.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2774)))->nativeidxs);
            }
            auto _10010 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_10008.size()),_10008.begin(),_10008.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2773 = _10010;
            if ((_2740 < _2747))
            {
              {
                int _2775 = (int)1;
                int _10011 = (int)0;
                int _10012 = _2740;
                for (int _2776 = _10011; _2776 < _10012; ++_2776)
                {
                  {
                    _2775 *= _ptr__2764[_2776];
                  }
                }
                int _2777 = (int)1;
                int _10013 = safe_add( _2740,(int)1 );
                int _10014 = _2747;
                for (int _2778 = _10013; _2778 < _10014; ++_2778)
                {
                  {
                    _2777 *= _ptr__2764[_2778];
                  }
                }
                int _2779 = (int)0;
                int _10015 = (int)0;
                int _10016 = _2775;
                for (int _2780 = _10015; _2780 < _10016; ++_2780)
                {
                  {
                    int _10017 = (int)0;
                    int _10018 = _2746;
                    for (int _2781 = _10017; _2781 < _10018; ++_2781)
                    {
                      {
                        int _2782 = (int)0;
                        int _2783 = ((*_2749)(_2781,_2740));
                        int _10019 = (int)0;
                        int _10020 = _2783;
                        for (int _2784 = _10019; _2784 < _10020; ++_2784)
                        {
                          {
                            int _10021 = (int)0;
                            int _10022 = _2777;
                            for (int _2785 = _10021; _2785 < _10022; ++_2785)
                            {
                              {
                                _ptr__2763[_2779] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2746)))->nativeidxs)(safe_add( safe_mul( safe_mul( _2780,_2777 ),_2783 ),_2782 )));
                                ++ _2779;
                                ++ _2782;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int _2786 = (int)1;
                int _10023 = (int)0;
                int _10024 = _2747;
                for (int _2787 = _10023; _2787 < _10024; ++_2787)
                {
                  {
                    _2786 *= _ptr__2764[_2787];
                  }
                }
                int _2788 = (int)0;
                int _10025 = (int)0;
                int _10026 = _2786;
                for (int _2789 = _10025; _2789 < _10026; ++_2789)
                {
                  {
                    int _10027 = (int)0;
                    int _10028 = _2746;
                    for (int _2790 = _10027; _2790 < _10028; ++_2790)
                    {
                      {
                        _ptr__2763[_2788] = ((*((*_2773)(_2790)))(_2789));
                        ++ _2788;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2741,_2764,_2763)).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2791) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2791); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2791) { return __mosek_2fusion_2Constraint__index(_2791); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2791){
  _checked_ptr_1<int> _ptr__2791(_2791 ? _2791->raw() : nullptr, _2791 ? _2791->size(0) : 0);
  if (((int)((_2791)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _10029 = (int)0;
      int _10030 = (int)((shape)->size(0));
      for (int _2792 = _10029; _2792 < _10030; ++_2792)
      {
        {
          if (((_ptr__2791[_2792] < (int)0) || (_ptr__2791[_2792] > ((*shape)(_2792)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int _2793 = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< long long,1 > > _2794 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2793)));
      _checked_ptr_1<long long> _ptr__2794(_2794 ? _2794->raw() : nullptr,_2794 ? _2794->size(0) : 0);
      _ptr__2794[(_2793 - (int)1)] = (int)1;
      int _10031 = (int)1;
      int _10032 = _2793;
      for (int _2795 = _10031; _2795 < _10032; ++_2795)
      {
        {
          _ptr__2794[((_2793 - _2795) - (int)1)] = safe_mul( _ptr__2794[(_2793 - _2795)],((*shape)(_2795)) );
        }
      }
      int _2796 = (int)0;
      int _10033 = (int)0;
      int _10034 = _2793;
      for (int _2797 = _10033; _2797 < _10034; ++_2797)
      {
        {
          _2796 += (int)safe_mul( _ptr__2794[_2797],_ptr__2791[_2797] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2796)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int _2798) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2798); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int _2798) { return __mosek_2fusion_2Constraint__index(_2798); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int _2798){
  if ((((int)((shape)->size(0)) == (int)0) && (_2798 == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_2798 < (int)0) || (_2798 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2798)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2799,std::shared_ptr< monty::ndarray< int,1 > > _2800) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2799,_2800); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2799,std::shared_ptr< monty::ndarray< int,1 > > _2800) { return __mosek_2fusion_2Constraint__slice(_2799,_2800); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2799,std::shared_ptr< monty::ndarray< int,1 > > _2800){
  _checked_ptr_1<int> _ptr__2799(_2799 ? _2799->raw() : nullptr, _2799 ? _2799->size(0) : 0);
  _checked_ptr_1<int> _ptr__2800(_2800 ? _2800->raw() : nullptr, _2800 ? _2800->size(0) : 0);
  if (((int)((_2799)->size(0)) != (int)((_2800)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_2799)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _10035 = (int)0;
      int _10036 = (int)((shape)->size(0));
      for (int _2801 = _10035; _2801 < _10036; ++_2801)
      {
        {
          if (((_ptr__2799[_2801] < (int)0) || (_ptr__2800[_2801] > ((*shape)(_2801)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__2799[_2801] > _ptr__2800[_2801]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int _2802 = (int)((shape)->size(0));
      std::vector<int> _10037;
      for (int _2804 = (int)0, _10038 = _2802; _2804 < _10038 ; ++_2804)
      {
        _10037.push_back((_ptr__2800[_2804] - _ptr__2799[_2804]));
      }
      auto _10039 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10037.size()),_10037.begin(),_10037.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2803 = _10039;
      _checked_ptr_1<int> _ptr__2803(_2803 ? _2803->raw() : nullptr,_2803 ? _2803->size(0) : 0);
      int _2805 = (int)1;
      int _10040 = (int)0;
      int _10041 = _2802;
      for (int _2806 = _10040; _2806 < _10041; ++_2806)
      {
        {
          _2805 *= (_ptr__2800[_2806] - _ptr__2799[_2806]);
        }
      }
      if ((_2805 == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_2803,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2807 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2805)));
          _checked_ptr_1<int> _ptr__2807(_2807 ? _2807->raw() : nullptr,_2807 ? _2807->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2808 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2802)));
            _checked_ptr_1<int> _ptr__2808(_2808 ? _2808->raw() : nullptr,_2808 ? _2808->size(0) : 0);
            _ptr__2808[(_2802 - (int)1)] = (int)1;
            int _10042 = (int)1;
            int _10043 = _2802;
            for (int _2809 = _10042; _2809 < _10043; ++_2809)
            {
              {
                _ptr__2808[((_2802 - _2809) - (int)1)] = safe_mul( _ptr__2808[(_2802 - _2809)],((*shape)((_2802 - _2809))) );
              }
            }
            int _2810 = (int)0;
            int _10044 = (int)0;
            int _10045 = _2802;
            for (int _2811 = _10044; _2811 < _10045; ++_2811)
            {
              {
                _2810 += safe_mul( _ptr__2799[_2811],_ptr__2808[_2811] );
              }
            }
            std::vector<int> _10046;
            for (int _2813 = (int)0, _10047 = _2802; _2813 < _10047 ; ++_2813)
            {
              _10046.push_back(_2810);
            }
            auto _10048 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10046.size()),_10046.begin(),_10046.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2812 = _10048;
            _checked_ptr_1<int> _ptr__2812(_2812 ? _2812->raw() : nullptr,_2812 ? _2812->size(0) : 0);
            std::vector<int> _10049;
            for (int _2815 = (int)0, _10050 = _2802; _2815 < _10050 ; ++_2815)
            {
              _10049.push_back(_ptr__2799[_2815]);
            }
            auto _10051 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10049.size()),_10049.begin(),_10049.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2814 = _10051;
            _checked_ptr_1<int> _ptr__2814(_2814 ? _2814->raw() : nullptr,_2814 ? _2814->size(0) : 0);
            int _10052 = (int)0;
            int _10053 = _2805;
            for (int _2816 = _10052; _2816 < _10053; ++_2816)
            {
              {
                _ptr__2807[_2816] = ((*nativeidxs)(_ptr__2812[(_2802 - (int)1)]));
                _ptr__2814[(_2802 - (int)1)] += (int)1;
                _ptr__2812[(_2802 - (int)1)] += _ptr__2808[(_2802 - (int)1)];
                if ((_ptr__2814[(_2802 - (int)1)] >= _ptr__2800[(_2802 - (int)1)]))
                {
                  {
                    int _2817 = (_2802 - (int)1);
                    while ( ((_2817 > (int)0) && (_ptr__2814[_2817] >= _ptr__2800[_2817])) )
                    {
                      {
                        _ptr__2814[_2817] = _ptr__2799[_2817];
                        _ptr__2814[(_2817 - (int)1)] += (int)1;
                        _ptr__2812[(_2817 - (int)1)] += _ptr__2808[(_2817 - (int)1)];
                        -- _2817;
                      }
                    }
                    int _10054 = safe_add( _2817,(int)1 );
                    int _10055 = _2802;
                    for (int _2818 = _10054; _2818 < _10055; ++_2818)
                    {
                      {
                        _ptr__2812[_2818] = _ptr__2812[_2817];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_2803,_2807)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int _2819,int _2820) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2819,_2820); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int _2819,int _2820) { return __mosek_2fusion_2Constraint__slice(_2819,_2820); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int _2819,int _2820){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2819 == (int)0) && (_2820 == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_2819 < (int)0) || (_2820 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2819 > _2820))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int> _10056;
      for (int _2821 = _2819, _10057 = _2820; _2821 < _10057 ; ++_2821)
      {
        _10056.push_back(((*nativeidxs)(_2821)));
      }
      auto _10058 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10056.size()),_10056.begin(),_10056.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_2820 - _2819))}),_10058)).as<::mosek::fusion::Constraint>();
    }
  }
}
int mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }int mosek::fusion::p_Constraint::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }int mosek::fusion::p_Constraint::getSize(){
  int _2822 = (int)1;
  int _10059 = (int)0;
  int _10060 = (int)((shape)->size(0));
  for (int _2823 = _10059; _2823 < _10060; ++_2823)
  {
    {
      _2822 *= ((*shape)(_2823));
    }
  }
  return _2822;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel(){
  return model;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getShape(){
  std::vector<int> _10061;
  for (int _2824 = (int)0, _10062 = (int)((shape)->size(0)); _2824 < _10062 ; ++_2824)
  {
    _10061.push_back(((*shape)(_2824)));
  }
  auto _10063 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10061.size()),_10061.begin(),_10061.end()));
  return _10063;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getNativeidxs(){
  return nativeidxs;
}
void mosek::fusion::p_Constraint::destroy(){nativeidxs.reset();shape.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::Set::size  ( std::shared_ptr< monty::ndarray< int,1 > > _2825) { return mosek::fusion::p_Set::size(_2825); }long long mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int,1 > > _2825){
  _checked_ptr_1<int> _ptr__2825(_2825 ? _2825->raw() : nullptr, _2825 ? _2825->size(0) : 0);
  long long _2826 = (long long)1;
  int _10064 = (int)0;
  int _10065 = (int)((_2825)->size(0));
  for (int _2827 = _10064; _2827 < _10065; ++_2827)
  {
    {
      _2826 *= _ptr__2825[_2827];
    }
  }
  return _2826;
}
bool mosek::fusion::Set::match  ( std::shared_ptr< monty::ndarray< int,1 > > _2828,    std::shared_ptr< monty::ndarray< int,1 > > _2829) { return mosek::fusion::p_Set::match(_2828,_2829); }bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int,1 > > _2828,std::shared_ptr< monty::ndarray< int,1 > > _2829){
  _checked_ptr_1<int> _ptr__2828(_2828 ? _2828->raw() : nullptr, _2828 ? _2828->size(0) : 0);
  _checked_ptr_1<int> _ptr__2829(_2829 ? _2829->raw() : nullptr, _2829 ? _2829->size(0) : 0);
  if (((int)((_2828)->size(0)) != (int)((_2829)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int _10066 = (int)0;
  int _10067 = (int)((_2828)->size(0));
  for (int _2830 = _10066; _2830 < _10067; ++_2830)
  {
    {
      if ((_ptr__2828[_2830] != _ptr__2829[_2830]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
long long mosek::fusion::Set::linearidx  ( std::shared_ptr< monty::ndarray< int,1 > > _2831,    std::shared_ptr< monty::ndarray< int,1 > > _2832) { return mosek::fusion::p_Set::linearidx(_2831,_2832); }long long mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int,1 > > _2831,std::shared_ptr< monty::ndarray< int,1 > > _2832){
  _checked_ptr_1<int> _ptr__2831(_2831 ? _2831->raw() : nullptr, _2831 ? _2831->size(0) : 0);
  _checked_ptr_1<int> _ptr__2832(_2832 ? _2832->raw() : nullptr, _2832 ? _2832->size(0) : 0);
  long long _2833 = _ptr__2832[(int)0];
  int _10068 = (int)1;
  int _10069 = (int)((_2832)->size(0));
  for (int _2834 = _10068; _2834 < _10069; ++_2834)
  {
    {
      _2833 = safe_add( safe_mul( _2833,_ptr__2831[_2834] ),_ptr__2832[_2834] );
    }
  }
  return _2833;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2835,    long long _2836) { return mosek::fusion::p_Set::idxtokey(_2835,_2836); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2835,long long _2836){
  _checked_ptr_1<int> _ptr__2835(_2835 ? _2835->raw() : nullptr, _2835 ? _2835->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2837 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2835)->size(0)))));
  _checked_ptr_1<int> _ptr__2837(_2837 ? _2837->raw() : nullptr,_2837 ? _2837->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_2835,_2836,_2837);
  return _2837;
}
void mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2838,    long long _2839,    std::shared_ptr< monty::ndarray< int,1 > > _2840) { mosek::fusion::p_Set::idxtokey(_2838,_2839,_2840); }void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2838,long long _2839,std::shared_ptr< monty::ndarray< int,1 > > _2840){
  _checked_ptr_1<int> _ptr__2838(_2838 ? _2838->raw() : nullptr, _2838 ? _2838->size(0) : 0);
  _checked_ptr_1<int> _ptr__2840(_2840 ? _2840->raw() : nullptr, _2840 ? _2840->size(0) : 0);
  int _2841 = (int)((_2838)->size(0));
  if ((_2841 > (int)0))
  {
    {
      long long _2842 = _2839;
      int _10070 = (int)0;
      int _10071 = (_2841 - (int)1);
      for (int _2843 = _10070; _2843 < _10071; ++_2843)
      {
        {
          _ptr__2840[((_2841 - _2843) - (int)1)] = (int)(_2842 % _ptr__2838[((_2841 - _2843) - (int)1)]);
          _2842 /= _ptr__2838[((_2841 - _2843) - (int)1)];
        }
      }
      _ptr__2840[(int)0] = (int)_2842;
    }
  }
  {}
}
std::string mosek::fusion::Set::indexToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2844,    long long _2845) { return mosek::fusion::p_Set::indexToString(_2844,_2845); }std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int,1 > > _2844,long long _2845){
  _checked_ptr_1<int> _ptr__2844(_2844 ? _2844->raw() : nullptr, _2844 ? _2844->size(0) : 0);
  int _2846 = (int)((_2844)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2847 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_2846 == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_2846 == (int)1))
  {
    {
      return _2847->__mosek_2fusion_2Utils_2StringBuffer__a(_2845)->toString();
    }
  }
  else
  {
    {
      long long _2848 = _2845;
      std::shared_ptr< monty::ndarray< int,1 > > _2849 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2846)));
      _checked_ptr_1<int> _ptr__2849(_2849 ? _2849->raw() : nullptr,_2849 ? _2849->size(0) : 0);
      int _10072 = (int)1;
      int _10073 = _2846;
      for (int _2850 = _10072; _2850 < _10073; ++_2850)
      {
        {
          _ptr__2849[(_2846 - _2850)] = (int)(_2848 % _ptr__2844[(_2846 - _2850)]);
          _2848 /= _ptr__2844[(_2846 - _2850)];
        }
      }
      _ptr__2849[(int)0] = (int)_2848;
      _2847->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2849[(int)0]);
      int _10074 = (int)1;
      int _10075 = _2846;
      for (int _2851 = _10074; _2851 < _10075; ++_2851)
      {
        {
          _2847->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2849[_2851]);
        }
      }
      return _2847->toString();
    }
  }
}
std::string mosek::fusion::Set::keyToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2852) { return mosek::fusion::p_Set::keyToString(_2852); }std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int,1 > > _2852){
  _checked_ptr_1<int> _ptr__2852(_2852 ? _2852->raw() : nullptr, _2852 ? _2852->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2853 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2853->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2852[(int)0]);
  int _10076 = (int)1;
  int _10077 = (int)((_2852)->size(0));
  for (int _2854 = _10076; _2854 < _10077; ++_2854)
  {
    {
      _2853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2852[_2854]);
    }
  }
  return _2853->toString();
}
void mosek::fusion::Set::indexToKey  ( std::shared_ptr< monty::ndarray< int,1 > > _2855,    long long _2856,    std::shared_ptr< monty::ndarray< int,1 > > _2857) { mosek::fusion::p_Set::indexToKey(_2855,_2856,_2857); }void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int,1 > > _2855,long long _2856,std::shared_ptr< monty::ndarray< int,1 > > _2857){
  _checked_ptr_1<int> _ptr__2855(_2855 ? _2855->raw() : nullptr, _2855 ? _2855->size(0) : 0);
  _checked_ptr_1<int> _ptr__2857(_2857 ? _2857->raw() : nullptr, _2857 ? _2857->size(0) : 0);
  int _2858 = (int)((_2855)->size(0));
  if ((_2858 == (int)1))
  {
    {
      _ptr__2857[(int)0] = (int)_2856;
    }
  }
  else
  {
    {
      long long _2859 = _2856;
      int _10078 = (int)1;
      int _10079 = _2858;
      for (int _2860 = _10078; _2860 < _10079; ++_2860)
      {
        {
          _ptr__2857[(_2858 - _2860)] = (int)(_2859 % _ptr__2855[(_2858 - _2860)]);
          _2859 /= _ptr__2855[(_2858 - _2860)];
        }
      }
      _ptr__2857[(int)0] = (int)_2859;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::Set::strides  ( std::shared_ptr< monty::ndarray< int,1 > > _2861) { return mosek::fusion::p_Set::strides(_2861); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int,1 > > _2861){
  _checked_ptr_1<int> _ptr__2861(_2861 ? _2861->raw() : nullptr, _2861 ? _2861->size(0) : 0);
  int _2862 = (int)((_2861)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2863 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2862)));
  _checked_ptr_1<long long> _ptr__2863(_2863 ? _2863->raw() : nullptr,_2863 ? _2863->size(0) : 0);
  _ptr__2863[(_2862 - (int)1)] = (int)1;
  int _10080 = (int)1;
  int _10081 = _2862;
  for (int _2864 = _10080; _2864 < _10081; ++_2864)
  {
    {
      _ptr__2863[((_2862 - _2864) - (int)1)] = safe_mul( _ptr__2863[(_2862 - _2864)],_ptr__2861[(_2862 - _2864)] );
    }
  }
  return _2863;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2865,    std::shared_ptr< monty::ndarray< int,1 > > _2866) { return mosek::fusion::p_Set::make(_2865,_2866); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2865,std::shared_ptr< monty::ndarray< int,1 > > _2866){
  _checked_ptr_1<int> _ptr__2865(_2865 ? _2865->raw() : nullptr, _2865 ? _2865->size(0) : 0);
  _checked_ptr_1<int> _ptr__2866(_2866 ? _2866->raw() : nullptr, _2866 ? _2866->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((_2865)->size(0)),(int)((_2866)->size(0)) ))));
  _checked_ptr_1<int> _ptr__2867(_2867 ? _2867->raw() : nullptr,_2867 ? _2867->size(0) : 0);
  int _10082 = (int)0;
  int _10083 = (int)((_2865)->size(0));
  for (int _2868 = _10082; _2868 < _10083; ++_2868)
  {
    {
      _ptr__2867[_2868] = _ptr__2865[_2868];
    }
  }
  int _10084 = (int)0;
  int _10085 = (int)((_2866)->size(0));
  for (int _2869 = _10084; _2869 < _10085; ++_2869)
  {
    {
      _ptr__2867[safe_add( (int)((_2865)->size(0)),_2869 )] = _ptr__2866[_2869];
    }
  }
  return _2867;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2870) { return mosek::fusion::p_Set::make(_2870); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2870){
  _checked_ptr_1<int> _ptr__2870(_2870 ? _2870->raw() : nullptr, _2870 ? _2870->size(0) : 0);
  std::vector<int> _10086;
  for (int _2871 = (int)0, _10087 = (int)((_2870)->size(0)); _2871 < _10087 ; ++_2871)
  {
    _10086.push_back(_ptr__2870[_2871]);
  }
  auto _10088 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10086.size()),_10086.begin(),_10086.end()));
  return _10088;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2872,    int _2873,    int _2874) { return mosek::fusion::p_Set::make(_2872,_2873,_2874); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2872,int _2873,int _2874){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2872),(int)(_2873),(int)(_2874)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2875,    int _2876) { return mosek::fusion::p_Set::make(_2875,_2876); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2875,int _2876){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2875),(int)(_2876)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2877) { return mosek::fusion::p_Set::make(_2877); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2877){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2877)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::scalar(){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _2878) { return mosek::fusion::p_Set::make(_2878); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _2878){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2878)->size(0)))});
}
void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConeDomain::p_ConeDomain  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2879,    double _2880,    std::shared_ptr< monty::ndarray< int,1 > > _2881){ return new mosek::fusion::ConeDomain(_2879,_2880,_2881); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2879,    double _2880,    std::shared_ptr< monty::ndarray< int,1 > > _2881) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2879,_2880,_2881); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2879,    double _2880,    std::shared_ptr< monty::ndarray< int,1 > > _2881){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2881(_2881 ? _2881->raw() : nullptr, _2881 ? _2881->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _10089;
    bool _10090 = (NULL != _2881.get());
    if (_10090)
    {
      _10089 = ::mosek::fusion::p_Set::make(_2881);
    }
    else
    {
      _10089 = nullptr;
    }
    shape = _10089;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2880;
    key = _2879;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2880;
  }
}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2882,    std::shared_ptr< monty::ndarray< int,1 > > _2883){ return new mosek::fusion::ConeDomain(_2882,_2883); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2882,    std::shared_ptr< monty::ndarray< int,1 > > _2883) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2882,_2883); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2882,    std::shared_ptr< monty::ndarray< int,1 > > _2883){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2883(_2883 ? _2883->raw() : nullptr, _2883 ? _2883->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_2882,1.0,_2883);
  }
}bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2884){
  _checked_ptr_1<int> _ptr__2884(_2884 ? _2884->raw() : nullptr, _2884 ? _2884->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_2884,shape));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral(){
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }bool mosek::fusion::p_ConeDomain::axisIsSet(){
  return axisset;
}
int mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_ConeDomain::getAxis(){
  return axisidx;
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int _2885) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_2885); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int _2885) { return __mosek_2fusion_2ConeDomain__axis(_2885); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int _2885){
  axisidx = _2885;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
void mosek::fusion::p_ConeDomain::destroy(){shape.reset();}void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2886,    int _2887){ return new mosek::fusion::LinPSDDomain(_2886,_2887); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2886,    int _2887) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2886,_2887); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2886,    int _2887){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2886(_2886 ? _2886->raw() : nullptr, _2886 ? _2886->size(0) : 0);
    mosek::fusion::p_LinPSDDomain::_get_impl(::mosek::fusion::LinPSDDomain::t(_pubthis))->conedim = _2887;
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2886);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2888){ return new mosek::fusion::LinPSDDomain(_2888); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2888) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2888); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2888){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2888(_2888 ? _2888->raw() : nullptr, _2888 ? _2888->size(0) : 0);
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2888);
    conedim = ((int)((shape)->size(0)) - (int)1);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (){ return new mosek::fusion::LinPSDDomain(); }mosek::fusion::LinPSDDomain::LinPSDDomain  () :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinPSDDomain::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    conedim = (int)0;
    shape = nullptr;
  }
}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2889,    std::shared_ptr< monty::ndarray< int,1 > > _2890,    int _2891,    int _2892){ return new mosek::fusion::PSDDomain(_2889,_2890,_2891,_2892); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2889,    std::shared_ptr< monty::ndarray< int,1 > > _2890,    int _2891,    int _2892) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2889,_2890,_2891,_2892); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2889,    std::shared_ptr< monty::ndarray< int,1 > > _2890,    int _2891,    int _2892){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2890(_2890 ? _2890->raw() : nullptr, _2890 ? _2890->size(0) : 0);
    axisIsSet = true;
    shape = _2890;
    key = _2889;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2891;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2892;
    int _2893 = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _2891) && (((int)((shape)->size(0)) > _2892) && ((_2891 >= (int)0) && ((_2892 >= (int)0) && (_2891 != _2892)))))) && (((*shape)(_2891)) == ((*shape)(_2892)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2894,    std::shared_ptr< monty::ndarray< int,1 > > _2895){ return new mosek::fusion::PSDDomain(_2894,_2895); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2894,    std::shared_ptr< monty::ndarray< int,1 > > _2895) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2894,_2895); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2894,    std::shared_ptr< monty::ndarray< int,1 > > _2895){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2895(_2895 ? _2895->raw() : nullptr, _2895 ? _2895->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_2894,_2895,((int)((_2895)->size(0)) - (int)2),((int)((_2895)->size(0)) - (int)1));
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2896){ return new mosek::fusion::PSDDomain(_2896); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2896) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2896); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2896){monty::rc_reserve __reserve_this(_pubthis);   {
    shape = nullptr;
    key = _2896;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
  }
}monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int _2897,int _2898) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_2897,_2898); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int _2897,int _2898) { return __mosek_2fusion_2PSDDomain__axis(_2897,_2898); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int _2897,int _2898){
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2897;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2898;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_2897 >= (int)0) && ((_2898 >= (int)0) && (_2897 != _2898))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _2897) && (((int)((shape)->size(0)) > _2898) && ((_2897 >= (int)0) && ((_2898 >= (int)0) && (_2897 != _2898)))))) && (((*shape)(_2897)) == ((*shape)(_2898))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2899){ return new mosek::fusion::SymmetricRangeDomain(_2899); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2899) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_2899); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2899){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_RangeDomain::_initialize(_2899);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _10091;
    bool _10092 = (NULL == shape.get());
    if (_10092)
    {
      _10091 = (int)0;
    }
    else
    {
      _10091 = ((*shape)((int)0));
    }
    dim = _10091;
  }
}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< double,1 > > _2902,    std::shared_ptr< monty::ndarray< int,1 > > _2903){ return new mosek::fusion::RangeDomain(_2900,_2901,_2902,_2903); }mosek::fusion::RangeDomain::RangeDomain  (bool _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< double,1 > > _2902,    std::shared_ptr< monty::ndarray< int,1 > > _2903) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2900,_2901,_2902,_2903); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< double,1 > > _2902,    std::shared_ptr< monty::ndarray< int,1 > > _2903){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2901(_2901 ? _2901->raw() : nullptr, _2901 ? _2901->size(0) : 0);
    _checked_ptr_1<double> _ptr__2902(_2902 ? _2902->raw() : nullptr, _2902 ? _2902->size(0) : 0);
    _checked_ptr_1<int> _ptr__2903(_2903 ? _2903->raw() : nullptr, _2903 ? _2903->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2900,_2901,_2902,_2903,nullptr,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< double,1 > > _2906,    std::shared_ptr< monty::ndarray< int,1 > > _2907,    std::shared_ptr< monty::ndarray< int,2 > > _2908){ return new mosek::fusion::RangeDomain(_2904,_2905,_2906,_2907,_2908); }mosek::fusion::RangeDomain::RangeDomain  (bool _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< double,1 > > _2906,    std::shared_ptr< monty::ndarray< int,1 > > _2907,    std::shared_ptr< monty::ndarray< int,2 > > _2908) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2904,_2905,_2906,_2907,_2908); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< double,1 > > _2906,    std::shared_ptr< monty::ndarray< int,1 > > _2907,    std::shared_ptr< monty::ndarray< int,2 > > _2908){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2905(_2905 ? _2905->raw() : nullptr, _2905 ? _2905->size(0) : 0);
    _checked_ptr_1<double> _ptr__2906(_2906 ? _2906->raw() : nullptr, _2906 ? _2906->size(0) : 0);
    _checked_ptr_1<int> _ptr__2907(_2907 ? _2907->raw() : nullptr, _2907 ? _2907->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2904,_2905,_2906,_2907,_2908,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< double,1 > > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    std::shared_ptr< monty::ndarray< int,2 > > _2913,    int _2914){ return new mosek::fusion::RangeDomain(_2909,_2910,_2911,_2912,_2913,_2914); }mosek::fusion::RangeDomain::RangeDomain  (bool _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< double,1 > > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    std::shared_ptr< monty::ndarray< int,2 > > _2913,    int _2914) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2909,_2910,_2911,_2912,_2913,_2914); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< double,1 > > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    std::shared_ptr< monty::ndarray< int,2 > > _2913,    int _2914){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2910(_2910 ? _2910->raw() : nullptr, _2910 ? _2910->size(0) : 0);
    _checked_ptr_1<double> _ptr__2911(_2911 ? _2911->raw() : nullptr, _2911 ? _2911->size(0) : 0);
    _checked_ptr_1<int> _ptr__2912(_2912 ? _2912->raw() : nullptr, _2912 ? _2912->size(0) : 0);
    cardinal_flag = false;
    shape = _2912;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _2909;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _2911;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _2910;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _2913;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2915){ return new mosek::fusion::RangeDomain(_2915); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2915) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2915); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2915){monty::rc_reserve __reserve_this(_pubthis);   {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_2915)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_2915)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_2915)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_2915)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_2915)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_2915)->lb;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_2915)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2916) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2916); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2916) { return __mosek_2fusion_2RangeDomain__sparse(_2916); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2916){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2916)->size(0)),(int)((_2916)->size(1)))));
  {
    int _2917 = (int)0;
    for(;(_2917 < (int)((_2916)->size(0)));++ _2917)
    {
      {
        {
          int _2918 = (int)0;
          for(;(_2918 < (int)((_2916)->size(1)));++ _2918)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2917,_2918)) = ((*_2916)(_2917,_2918));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2919) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2919); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2919) { return __mosek_2fusion_2RangeDomain__sparse(_2919); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2919){
  _checked_ptr_1<int> _ptr__2919(_2919 ? _2919->raw() : nullptr, _2919 ? _2919->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2919)->size(0)),(int)1)));
  int _10093 = (int)0;
  int _10094 = (int)((_2919)->size(0));
  for (int _2920 = _10093; _2920 < _10094; ++_2920)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2920,(int)0)) = _ptr__2919[_2920];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2921,int _2922,int _2923) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2921,_2922,_2923); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2921,int _2922,int _2923) { return __mosek_2fusion_2RangeDomain__withShape(_2921,_2922,_2923); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2921,int _2922,int _2923){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2921),(int)(_2922),(int)(_2923)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2924,int _2925) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2924,_2925); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2924,int _2925) { return __mosek_2fusion_2RangeDomain__withShape(_2924,_2925); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2924,int _2925){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2924),(int)(_2925)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2926) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2926); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2926) { return __mosek_2fusion_2RangeDomain__withShape(_2926); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2926){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2926)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2927) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2927); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2927) { return __mosek_2fusion_2RangeDomain__withShape(_2927); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2927){
  _checked_ptr_1<int> _ptr__2927(_2927 ? _2927->raw() : nullptr, _2927 ? _2927->size(0) : 0);
  shape = _2927;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2928){
  _checked_ptr_1<int> _ptr__2928(_2928 ? _2928->raw() : nullptr, _2928 ? _2928->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_2928)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int _10095 = (int)0;
      int _10096 = (int)((shape)->size(0));
      for (int _2929 = _10095; _2929 < _10096; ++_2929)
      {
        {
          if ((((*shape)(_2929)) != _ptr__2928[_2929]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();sparsity.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2930){ return new mosek::fusion::SymmetricLinearDomain(_2930); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2930) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_2930); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2930){monty::rc_reserve __reserve_this(_pubthis);   {
    dom = _2930;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2930)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2930)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2930)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2930)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _10097;
    bool _10098 = (NULL == shape.get());
    if (_10098)
    {
      _10097 = (int)0;
    }
    else
    {
      _10097 = ((*shape)((int)0));
    }
    dim = _10097;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2931) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2931); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2931) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2931); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2931){
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2931)->size(0)),(int)((_2931)->size(1)))));
  {
    int _2932 = (int)0;
    for(;(_2932 < (int)((_2931)->size(0)));++ _2932)
    {
      {
        {
          int _2933 = (int)0;
          for(;(_2933 < (int)((_2931)->size(1)));++ _2933)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2932,_2933)) = ((*_2931)(_2932,_2933));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2934) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2934); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2934) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2934); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2934){
  _checked_ptr_1<int> _ptr__2934(_2934 ? _2934->raw() : nullptr, _2934 ? _2934->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2934)->size(0)),(int)1)));
  int _10099 = (int)0;
  int _10100 = (int)((_2934)->size(0));
  for (int _2935 = _10099; _2935 < _10100; ++_2935)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2935,(int)0)) = _ptr__2934[_2935];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2936){
  _checked_ptr_1<int> _ptr__2936(_2936 ? _2936->raw() : nullptr, _2936 ? _2936->size(0) : 0);
  int _10101 = (int)0;
  int _10102 = (int)((_2936)->size(0));
  for (int _2937 = _10101; _2937 < _10102; ++_2937)
  {
    {
      if ((_ptr__2936[_2937] == ((*shape)(_2937))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_SymmetricLinearDomain::destroy(){sparsity.reset();shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2938,    bool _2939,    std::shared_ptr< monty::ndarray< double,1 > > _2940,    std::shared_ptr< monty::ndarray< int,1 > > _2941){ return new mosek::fusion::LinearDomain(_2938,_2939,_2940,_2941); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2938,    bool _2939,    std::shared_ptr< monty::ndarray< double,1 > > _2940,    std::shared_ptr< monty::ndarray< int,1 > > _2941) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2938,_2939,_2940,_2941); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2938,    bool _2939,    std::shared_ptr< monty::ndarray< double,1 > > _2940,    std::shared_ptr< monty::ndarray< int,1 > > _2941){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2940(_2940 ? _2940->raw() : nullptr, _2940 ? _2940->size(0) : 0);
    _checked_ptr_1<int> _ptr__2941(_2941 ? _2941->raw() : nullptr, _2941 ? _2941->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_2938,_2939,_2940,_2941,nullptr,(int)1);
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2942,    bool _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< int,1 > > _2945,    std::shared_ptr< monty::ndarray< int,2 > > _2946,    int _2947){ return new mosek::fusion::LinearDomain(_2942,_2943,_2944,_2945,_2946,_2947); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2942,    bool _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< int,1 > > _2945,    std::shared_ptr< monty::ndarray< int,2 > > _2946,    int _2947) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2942,_2943,_2944,_2945,_2946,_2947); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2942,    bool _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< int,1 > > _2945,    std::shared_ptr< monty::ndarray< int,2 > > _2946,    int _2947){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2944(_2944 ? _2944->raw() : nullptr, _2944 ? _2944->size(0) : 0);
    _checked_ptr_1<int> _ptr__2945(_2945 ? _2945->raw() : nullptr, _2945 ? _2945->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _2943;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _2945;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _2942;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _2944;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _2946;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2948){ return new mosek::fusion::LinearDomain(_2948); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2948) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2948); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2948){monty::rc_reserve __reserve_this(_pubthis);   {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_2948)->scalable;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2948)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2948)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_2948)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2948)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2948)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_2948)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2949) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2949); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2949) { return __mosek_2fusion_2LinearDomain__sparse(_2949); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2949){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2949)->size(0)),(int)((_2949)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int _2950 = (int)0;
    for(;(_2950 < (int)((_2949)->size(0)));++ _2950)
    {
      {
        {
          int _2951 = (int)0;
          for(;(_2951 < (int)((_2949)->size(1)));++ _2951)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2950,_2951)) = ((*_2949)(_2950,_2951));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2952) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2952); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2952) { return __mosek_2fusion_2LinearDomain__sparse(_2952); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2952){
  _checked_ptr_1<int> _ptr__2952(_2952 ? _2952->raw() : nullptr, _2952 ? _2952->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2952)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int _10103 = (int)0;
  int _10104 = (int)((_2952)->size(0));
  for (int _2953 = _10103; _2953 < _10104; ++_2953)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2953,(int)0)) = _ptr__2952[_2953];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2954,int _2955,int _2956) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2954,_2955,_2956); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2954,int _2955,int _2956) { return __mosek_2fusion_2LinearDomain__withShape(_2954,_2955,_2956); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2954,int _2955,int _2956){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2954),(int)(_2955),(int)(_2956)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2957,int _2958) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2957,_2958); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2957,int _2958) { return __mosek_2fusion_2LinearDomain__withShape(_2957,_2958); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2957,int _2958){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2957),(int)(_2958)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2959) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2959); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2959) { return __mosek_2fusion_2LinearDomain__withShape(_2959); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2959){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2959)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2960) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2960); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2960) { return __mosek_2fusion_2LinearDomain__withShape(_2960); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2960){
  _checked_ptr_1<int> _ptr__2960(_2960 ? _2960->raw() : nullptr, _2960 ? _2960->size(0) : 0);
  shape = _2960;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2961){
  _checked_ptr_1<int> _ptr__2961(_2961 ? _2961->raw() : nullptr, _2961 ? _2961->size(0) : 0);
  if ((!scalable))
  {
    {
      int _10105 = (int)0;
      int _10106 = (int)((_2961)->size(0));
      for (int _2962 = _10105; _2962 < _10106; ++_2962)
      {
        {
          if ((_ptr__2961[_2962] == ((*shape)(_2962))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinearDomain::destroy(){sparsity.reset();bnd.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int,1 > > _2963){
  _checked_ptr_1<int> _ptr__2963(_2963 ? _2963->raw() : nullptr, _2963 ? _2963->size(0) : 0);
  long long _2964 = (long long)1;
  int _10107 = (int)0;
  int _10108 = (int)((_2963)->size(0));
  for (int _2965 = _10107; _2965 < _10108; ++_2965)
  {
    {
      _2964 *= _ptr__2963[_2965];
    }
  }
  return _2964;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(monty::rc_ptr< ::mosek::fusion::Matrix > _2966,monty::rc_ptr< ::mosek::fusion::Matrix > _2967){
  if (((mosek::fusion::p_Matrix::_get_impl(_2966)->dimi != mosek::fusion::p_Matrix::_get_impl(_2967)->dimi) || (mosek::fusion::p_Matrix::_get_impl(_2966)->dimj != mosek::fusion::p_Matrix::_get_impl(_2967)->dimj)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  if ((_2966->isSparse() && _2967->isSparse()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<int> _ptr__2968(_2968 ? _2968->raw() : nullptr,_2968 ? _2968->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2969 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<int> _ptr__2969(_2969 ? _2969->raw() : nullptr,_2969 ? _2969->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2970 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<double> _ptr__2970(_2970 ? _2970->raw() : nullptr,_2970 ? _2970->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2971 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
      _checked_ptr_1<int> _ptr__2971(_2971 ? _2971->raw() : nullptr,_2971 ? _2971->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2972 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
      _checked_ptr_1<int> _ptr__2972(_2972 ? _2972->raw() : nullptr,_2972 ? _2972->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2973 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2967->numNonzeros())));
      _checked_ptr_1<double> _ptr__2973(_2973 ? _2973->raw() : nullptr,_2973 ? _2973->size(0) : 0);
      _2966->getDataAsTriplets(_2968,_2969,_2970);
      _2967->getDataAsTriplets(_2971,_2972,_2973);
      long long _2974 = (int)0;
      {
        int _2975 = (int)0;
        int _2976 = (int)0;
        while ( ((_2976 < (int)((_2968)->size(0))) && (_2975 < (int)((_2971)->size(0)))) )
        {
          {
            if (((_ptr__2968[_2976] < _ptr__2971[_2975]) || ((_ptr__2968[_2976] == _ptr__2971[_2975]) && (_ptr__2969[_2976] < _ptr__2972[_2975]))))
            {
              {
                ++ _2974;
                ++ _2976;
              }
            }
            else
            {
              {
                if (((_ptr__2968[_2976] > _ptr__2971[_2975]) || ((_ptr__2968[_2976] == _ptr__2971[_2975]) && (_ptr__2969[_2976] > _ptr__2972[_2975]))))
                {
                  {
                    ++ _2974;
                    ++ _2975;
                  }
                }
                else
                {
                  {
                    ++ _2974;
                    ++ _2976;
                    ++ _2975;
                  }
                }
              }
            }
          }
        }
        _2974 += ((int)((_2968)->size(0)) - _2976);
        _2974 += ((int)((_2971)->size(0)) - _2975);
      }
      std::shared_ptr< monty::ndarray< int,2 > > _2977 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2974,(int)2)));
      std::shared_ptr< monty::ndarray< double,1 > > _2978 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2974)));
      _checked_ptr_1<double> _ptr__2978(_2978 ? _2978->raw() : nullptr,_2978 ? _2978->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2979 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2974)));
      _checked_ptr_1<double> _ptr__2979(_2979 ? _2979->raw() : nullptr,_2979 ? _2979->size(0) : 0);
      {
        int _2980 = (int)0;
        int _2981 = (int)0;
        int _2982 = (int)0;
        while ( ((_2982 < (int)((_2968)->size(0))) && (_2981 < (int)((_2971)->size(0)))) )
        {
          {
            if (((_ptr__2968[_2982] < _ptr__2971[_2981]) || ((_ptr__2968[_2982] == _ptr__2971[_2981]) && (_ptr__2969[_2982] < _ptr__2972[_2981]))))
            {
              {
                ((*_2977)(_2980,(int)0)) = _ptr__2968[_2982];
                ((*_2977)(_2980,(int)1)) = _ptr__2969[_2982];
                _ptr__2978[_2980] = _ptr__2970[_2982];
                _ptr__2979[_2980] = 0.0;
                ++ _2980;
                ++ _2982;
              }
            }
            else
            {
              {
                if (((_ptr__2968[_2982] > _ptr__2971[_2981]) || ((_ptr__2968[_2982] == _ptr__2971[_2981]) && (_ptr__2969[_2982] > _ptr__2972[_2981]))))
                {
                  {
                    ((*_2977)(_2980,(int)0)) = _ptr__2971[_2981];
                    ((*_2977)(_2980,(int)1)) = _ptr__2972[_2981];
                    _ptr__2978[_2980] = 0.0;
                    _ptr__2979[_2980] = _ptr__2973[_2981];
                    ++ _2980;
                    ++ _2981;
                  }
                }
                else
                {
                  {
                    ((*_2977)(_2980,(int)0)) = _ptr__2971[_2981];
                    ((*_2977)(_2980,(int)1)) = _ptr__2972[_2981];
                    _ptr__2978[_2980] = _ptr__2970[_2981];
                    _ptr__2979[_2980] = _ptr__2973[_2981];
                    ++ _2980;
                    ++ _2982;
                    ++ _2981;
                  }
                }
              }
            }
          }
        }
        while ( (_2982 < (int)((_2968)->size(0))) )
        {
          {
            ((*_2977)(_2980,(int)0)) = _ptr__2968[_2982];
            ((*_2977)(_2980,(int)1)) = _ptr__2969[_2982];
            _ptr__2978[_2980] = _ptr__2970[_2982];
            _ptr__2979[_2980] = 0.0;
            ++ _2980;
            ++ _2982;
          }
        }
        while ( (_2981 < (int)((_2971)->size(0))) )
        {
          {
            ((*_2977)(_2980,(int)0)) = _ptr__2971[_2981];
            ((*_2977)(_2980,(int)1)) = _ptr__2972[_2981];
            _ptr__2978[_2980] = 0.0;
            _ptr__2979[_2980] = _ptr__2973[_2981];
            ++ _2980;
            ++ _2981;
          }
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2978,_2979,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimj)}),_2977,(int)1);
    }
  }
  else
  {
    {
      int _2983 = mosek::fusion::p_Matrix::_get_impl(_2966)->dimj;
      int _2984 = mosek::fusion::p_Matrix::_get_impl(_2966)->dimi;
      int _2985 = safe_mul( _2984,_2983 );
      std::shared_ptr< monty::ndarray< double,1 > > _2986;
      _checked_ptr_1<double> _ptr__2986(_2986 ? _2986->raw() : nullptr,_2986 ? _2986->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2987;
      _checked_ptr_1<double> _ptr__2987(_2987 ? _2987->raw() : nullptr,_2987 ? _2987->size(0) : 0);
      if (_2966->isSparse())
      {
        {
          _2986 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2985)));
          _ptr__2986.update(_2986 ? _2986->raw() : nullptr, _2986 ? _2986->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<int> _ptr__2988(_2988 ? _2988->raw() : nullptr,_2988 ? _2988->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2989 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<int> _ptr__2989(_2989 ? _2989->raw() : nullptr,_2989 ? _2989->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2990 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<double> _ptr__2990(_2990 ? _2990->raw() : nullptr,_2990 ? _2990->size(0) : 0);
          _2966->getDataAsTriplets(_2988,_2989,_2990);
          int _10109 = (int)0;
          int _10110 = (int)((_2988)->size(0));
          for (int _2991 = _10109; _2991 < _10110; ++_2991)
          {
            {
              _ptr__2986[safe_add( safe_mul( _ptr__2988[_2991],_2983 ),_ptr__2989[_2991] )] = _ptr__2990[_2991];
            }
          }
        }
      }
      else
      {
        {
          _2986 = _2966->getDataAsArray();
          _ptr__2986.update(_2986 ? _2986->raw() : nullptr, _2986 ? _2986->size(0) : 0);
        }
      }
      if (_2967->isSparse())
      {
        {
          _2987 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2985)));
          _ptr__2987.update(_2987 ? _2987->raw() : nullptr, _2987 ? _2987->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2992 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
          _checked_ptr_1<int> _ptr__2992(_2992 ? _2992->raw() : nullptr,_2992 ? _2992->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2993 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
          _checked_ptr_1<int> _ptr__2993(_2993 ? _2993->raw() : nullptr,_2993 ? _2993->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2994 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2967->numNonzeros())));
          _checked_ptr_1<double> _ptr__2994(_2994 ? _2994->raw() : nullptr,_2994 ? _2994->size(0) : 0);
          _2967->getDataAsTriplets(_2992,_2993,_2994);
          int _10111 = (int)0;
          int _10112 = (int)((_2992)->size(0));
          for (int _2995 = _10111; _2995 < _10112; ++_2995)
          {
            {
              _ptr__2987[safe_add( safe_mul( _ptr__2992[_2995],_2983 ),_ptr__2993[_2995] )] = _ptr__2994[_2995];
            }
          }
        }
      }
      else
      {
        {
          _2987 = _2967->getDataAsArray();
          _ptr__2987.update(_2987 ? _2987->raw() : nullptr, _2987 ? _2987->size(0) : 0);
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2986,_2987,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimj)}),nullptr,(int)1);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(std::shared_ptr< monty::ndarray< double,2 > > _2996,std::shared_ptr< monty::ndarray< double,2 > > _2997){
  if ((((int)((_2996)->size(0)) != (int)((_2997)->size(0))) || ((int)((_2996)->size(1)) != (int)((_2997)->size(1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  int _2998 = (int)((_2996)->size(1));
  int _2999 = (int)((_2996)->size(0));
  int _3000 = safe_mul( _2999,_2998 );
  std::shared_ptr< monty::ndarray< double,1 > > _3001 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3000)));
  _checked_ptr_1<double> _ptr__3001(_3001 ? _3001->raw() : nullptr,_3001 ? _3001->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3002 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3000)));
  _checked_ptr_1<double> _ptr__3002(_3002 ? _3002->raw() : nullptr,_3002 ? _3002->size(0) : 0);
  int _3003 = (int)0;
  int _10113 = (int)0;
  int _10114 = _2999;
  for (int _3004 = _10113; _3004 < _10114; ++_3004)
  {
    {
      int _10115 = (int)0;
      int _10116 = _2998;
      for (int _3005 = _10115; _3005 < _10116; ++_3005)
      {
        {
          _ptr__3001[_3003] = ((*_2996)(_3004,_3005));
          _ptr__3002[_3003] = ((*_2997)(_3004,_3005));
          ++ _3003;
        }
      }
    }
  }
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3001,_3002,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2999),(int)(_2998)}),nullptr,(int)1);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _3006,monty::rc_ptr< ::mosek::fusion::Matrix > _3007){
  if (_3007->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _3008 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3007->numNonzeros())));
      _checked_ptr_1<int> _ptr__3008(_3008 ? _3008->raw() : nullptr,_3008 ? _3008->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3009 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3007->numNonzeros())));
      _checked_ptr_1<int> _ptr__3009(_3009 ? _3009->raw() : nullptr,_3009 ? _3009->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3010 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3007->numNonzeros())));
      _checked_ptr_1<double> _ptr__3010(_3010 ? _3010->raw() : nullptr,_3010 ? _3010->size(0) : 0);
      _3007->getDataAsTriplets(_3008,_3009,_3010);
      std::shared_ptr< monty::ndarray< int,2 > > _3011 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_3008)->size(0)),(int)2)));
      int _10117 = (int)0;
      int _10118 = (int)((_3008)->size(0));
      for (int _3012 = _10117; _3012 < _10118; ++_3012)
      {
        {
          ((*_3011)(_3012,(int)0)) = _ptr__3008[_3012];
          ((*_3011)(_3012,(int)1)) = _ptr__3009[_3012];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3006,false,_3010,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimj)}),_3011,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3006,false,_3007->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimj)}),nullptr,(int)1);
    }
  }
}
long long mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int,1 > > _3013){
  _checked_ptr_1<int> _ptr__3013(_3013 ? _3013->raw() : nullptr, _3013 ? _3013->size(0) : 0);
  long long _3014 = (int)1;
  int _10119 = (int)0;
  int _10120 = (int)((_3013)->size(0));
  for (int _3015 = _10119; _3015 < _10120; ++_3015)
  {
    {
      _3014 *= _ptr__3013[_3015];
    }
  }
  return _3014;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _3016,std::shared_ptr< monty::ndarray< double,1 > > _3017,std::shared_ptr< monty::ndarray< double,1 > > _3018,std::shared_ptr< monty::ndarray< int,2 > > _3019,std::shared_ptr< monty::ndarray< int,1 > > _3020){
  _checked_ptr_1<double> _ptr__3017(_3017 ? _3017->raw() : nullptr, _3017 ? _3017->size(0) : 0);
  _checked_ptr_1<double> _ptr__3018(_3018 ? _3018->raw() : nullptr, _3018 ? _3018->size(0) : 0);
  _checked_ptr_1<int> _ptr__3020(_3020 ? _3020->raw() : nullptr, _3020 ? _3020->size(0) : 0);
  if (((!_3016) && ((int)((_3017)->size(0)) != (int)((_3018)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _3019.get()) && ((int)((_3019)->size(0)) != (int)((_3017)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int _10121 = (int)0;
  int _10122 = (int)((_3018)->size(0));
  for (int _3021 = _10121; _3021 < _10122; ++_3021)
  {
    {
      if ((_ptr__3017[_3021] > _ptr__3018[_3021]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _3020.get()) && (::mosek::fusion::p_Domain::dimsize(_3020) != (int)((_3017)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_3016,_3017,_3018,_3020)->__mosek_2fusion_2RangeDomain__sparse(_3019);
}
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3022) { return mosek::fusion::p_Domain::symmetric(_3022); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3022){
  return _3022->__mosek_2fusion_2RangeDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3023) { return mosek::fusion::p_Domain::symmetric(_3023); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3023){
  return _3023->__mosek_2fusion_2LinearDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3024,    std::shared_ptr< monty::ndarray< int,2 > > _3025) { return mosek::fusion::p_Domain::sparse(_3024,_3025); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3024,std::shared_ptr< monty::ndarray< int,2 > > _3025){
  return _3024->__mosek_2fusion_2RangeDomain__sparse(_3025);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3026,    std::shared_ptr< monty::ndarray< int,1 > > _3027) { return mosek::fusion::p_Domain::sparse(_3026,_3027); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3026,std::shared_ptr< monty::ndarray< int,1 > > _3027){
  _checked_ptr_1<int> _ptr__3027(_3027 ? _3027->raw() : nullptr, _3027 ? _3027->size(0) : 0);
  return _3026->__mosek_2fusion_2RangeDomain__sparse(_3027);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3028,    std::shared_ptr< monty::ndarray< int,2 > > _3029) { return mosek::fusion::p_Domain::sparse(_3028,_3029); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3028,std::shared_ptr< monty::ndarray< int,2 > > _3029){
  return _3028->__mosek_2fusion_2LinearDomain__sparse(_3029);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3030,    std::shared_ptr< monty::ndarray< int,1 > > _3031) { return mosek::fusion::p_Domain::sparse(_3030,_3031); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3030,std::shared_ptr< monty::ndarray< int,1 > > _3031){
  _checked_ptr_1<int> _ptr__3031(_3031 ? _3031->raw() : nullptr, _3031 ? _3031->size(0) : 0);
  return _3030->__mosek_2fusion_2LinearDomain__sparse(_3031);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3032) { return mosek::fusion::p_Domain::integral(_3032); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3032){
  return _3032->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3033) { return mosek::fusion::p_Domain::integral(_3033); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3033){
  return _3033->__mosek_2fusion_2LinearDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3034) { return mosek::fusion::p_Domain::integral(_3034); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3034){
  return _3034->__mosek_2fusion_2ConeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3035,    int _3036) { return mosek::fusion::p_Domain::axis(_3035,_3036); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3035,int _3036){
  return _3035->__mosek_2fusion_2ConeDomain__axis(_3036);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3037,    std::shared_ptr< monty::ndarray< int,1 > > _3038) { return mosek::fusion::p_Domain::inDPowerCone(_3037,_3038); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3037,std::shared_ptr< monty::ndarray< int,1 > > _3038){
  _checked_ptr_1<int> _ptr__3038(_3038 ? _3038->raw() : nullptr, _3038 ? _3038->size(0) : 0);
  std::vector<int> _10123;
  for (int _3039 = (int)0, _10124 = (int)((_3038)->size(0)); _3039 < _10124 ; ++_3039)
  {
    _10123.push_back(_ptr__3038[_3039]);
  }
  auto _10125 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10123.size()),_10123.begin(),_10123.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3037,_10125);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3040,    int _3041) { return mosek::fusion::p_Domain::inDPowerCone(_3040,_3041); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3040,int _3041){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3040,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3041),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3042) { return mosek::fusion::p_Domain::inDPowerCone(_3042); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3042){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3042,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3043,    std::shared_ptr< monty::ndarray< int,1 > > _3044) { return mosek::fusion::p_Domain::inPPowerCone(_3043,_3044); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3043,std::shared_ptr< monty::ndarray< int,1 > > _3044){
  _checked_ptr_1<int> _ptr__3044(_3044 ? _3044->raw() : nullptr, _3044 ? _3044->size(0) : 0);
  std::vector<int> _10126;
  for (int _3045 = (int)0, _10127 = (int)((_3044)->size(0)); _3045 < _10127 ; ++_3045)
  {
    _10126.push_back(_ptr__3044[_3045]);
  }
  auto _10128 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10126.size()),_10126.begin(),_10126.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3043,_10128);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3046,    int _3047) { return mosek::fusion::p_Domain::inPPowerCone(_3046,_3047); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3046,int _3047){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3046,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3047),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3048) { return mosek::fusion::p_Domain::inPPowerCone(_3048); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3048){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3048,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3049) { return mosek::fusion::p_Domain::inDExpCone(_3049); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int,1 > > _3049){
  _checked_ptr_1<int> _ptr__3049(_3049 ? _3049->raw() : nullptr, _3049 ? _3049->size(0) : 0);
  std::vector<int> _10129;
  for (int _3050 = (int)0, _10130 = (int)((_3049)->size(0)); _3050 < _10130 ; ++_3050)
  {
    _10129.push_back(_ptr__3049[_3050]);
  }
  auto _10131 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10129.size()),_10129.begin(),_10129.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_10131);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( int _3051) { return mosek::fusion::p_Domain::inDExpCone(_3051); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int _3051){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3051),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3052) { return mosek::fusion::p_Domain::inPExpCone(_3052); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int,1 > > _3052){
  _checked_ptr_1<int> _ptr__3052(_3052 ? _3052->raw() : nullptr, _3052 ? _3052->size(0) : 0);
  std::vector<int> _10132;
  for (int _3053 = (int)0, _10133 = (int)((_3052)->size(0)); _3053 < _10133 ; ++_3053)
  {
    _10132.push_back(_ptr__3052[_3053]);
  }
  auto _10134 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10132.size()),_10132.begin(),_10132.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_10134);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( int _3054) { return mosek::fusion::p_Domain::inPExpCone(_3054); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int _3054){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3054),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3055) { return mosek::fusion::p_Domain::inRotatedQCone(_3055); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int,1 > > _3055){
  _checked_ptr_1<int> _ptr__3055(_3055 ? _3055->raw() : nullptr, _3055 ? _3055->size(0) : 0);
  std::vector<int> _10135;
  for (int _3056 = (int)0, _10136 = (int)((_3055)->size(0)); _3056 < _10136 ; ++_3056)
  {
    _10135.push_back(_ptr__3055[_3056]);
  }
  auto _10137 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10135.size()),_10135.begin(),_10135.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,_10137);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _3057,    int _3058) { return mosek::fusion::p_Domain::inRotatedQCone(_3057,_3058); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _3057,int _3058){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3057),(int)(_3058)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _3059) { return mosek::fusion::p_Domain::inRotatedQCone(_3059); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _3059){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3059)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3060) { return mosek::fusion::p_Domain::inQCone(_3060); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int,1 > > _3060){
  _checked_ptr_1<int> _ptr__3060(_3060 ? _3060->raw() : nullptr, _3060 ? _3060->size(0) : 0);
  std::vector<int> _10138;
  for (int _3061 = (int)0, _10139 = (int)((_3060)->size(0)); _3061 < _10139 ; ++_3061)
  {
    _10138.push_back(_ptr__3060[_3061]);
  }
  auto _10140 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10138.size()),_10138.begin(),_10138.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,_10140);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _3062,    int _3063) { return mosek::fusion::p_Domain::inQCone(_3062,_3063); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _3062,int _3063){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3062),(int)(_3063)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _3064) { return mosek::fusion::p_Domain::inQCone(_3064); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _3064){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3064)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _3065,    int _3066) { return mosek::fusion::p_Domain::isLinPSD(_3065,_3066); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _3065,int _3066){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make(_3066,(safe_mul( _3065,safe_add( _3065,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _3067) { return mosek::fusion::p_Domain::isLinPSD(_3067); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _3067){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _3067,safe_add( _3067,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain();
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _3068,    int _3069) { return mosek::fusion::p_Domain::isTrilPSD(_3068,_3069); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _3068,int _3069){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3069),(int)(_3068),(int)(_3068)}),(int)1,(int)2);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _3070) { return mosek::fusion::p_Domain::isTrilPSD(_3070); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _3070){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3070),(int)(_3070)}),(int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _3071,    int _3072) { return mosek::fusion::p_Domain::inPSDCone(_3071,_3072); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _3071,int _3072){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3072),(int)(_3071),(int)(_3071)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _3073) { return mosek::fusion::p_Domain::inPSDCone(_3073); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _3073){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3073),(int)(_3073)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _3074) { return mosek::fusion::p_Domain::binary(_3074); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int,1 > > _3074){
  _checked_ptr_1<int> _ptr__3074(_3074 ? _3074->raw() : nullptr, _3074 ? _3074->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_3074)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _3075,    int _3076) { return mosek::fusion::p_Domain::binary(_3075,_3076); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _3075,int _3076){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3075),(int)(_3076)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _3077) { return mosek::fusion::p_Domain::binary(_3077); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _3077){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3077)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3078,    monty::rc_ptr< ::mosek::fusion::Matrix > _3079) { return mosek::fusion::p_Domain::inRange(_3078,_3079); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(monty::rc_ptr< ::mosek::fusion::Matrix > _3078,monty::rc_ptr< ::mosek::fusion::Matrix > _3079){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3078,_3079);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,2 > > _3080,    std::shared_ptr< monty::ndarray< double,2 > > _3081) { return mosek::fusion::p_Domain::inRange(_3080,_3081); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,2 > > _3080,std::shared_ptr< monty::ndarray< double,2 > > _3081){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3080,_3081);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3082,    std::shared_ptr< monty::ndarray< double,1 > > _3083,    std::shared_ptr< monty::ndarray< int,1 > > _3084) { return mosek::fusion::p_Domain::inRange(_3082,_3083,_3084); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3082,std::shared_ptr< monty::ndarray< double,1 > > _3083,std::shared_ptr< monty::ndarray< int,1 > > _3084){
  _checked_ptr_1<double> _ptr__3082(_3082 ? _3082->raw() : nullptr, _3082 ? _3082->size(0) : 0);
  _checked_ptr_1<double> _ptr__3083(_3083 ? _3083->raw() : nullptr, _3083 ? _3083->size(0) : 0);
  _checked_ptr_1<int> _ptr__3084(_3084 ? _3084->raw() : nullptr, _3084 ? _3084->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3082,_3083,_3084);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3085,    double _3086,    std::shared_ptr< monty::ndarray< int,1 > > _3087) { return mosek::fusion::p_Domain::inRange(_3085,_3086,_3087); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3085,double _3086,std::shared_ptr< monty::ndarray< int,1 > > _3087){
  _checked_ptr_1<double> _ptr__3085(_3085 ? _3085->raw() : nullptr, _3085 ? _3085->size(0) : 0);
  _checked_ptr_1<int> _ptr__3087(_3087 ? _3087->raw() : nullptr, _3087 ? _3087->size(0) : 0);
  std::vector<double> _10141;
  for (int _3088 = (int)0, _10142 = (int)((_3085)->size(0)); _3088 < _10142 ; ++_3088)
  {
    _10141.push_back(_3086);
  }
  auto _10143 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10141.size()),_10141.begin(),_10141.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3085,_10143,_3087);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3089,    std::shared_ptr< monty::ndarray< double,1 > > _3090,    std::shared_ptr< monty::ndarray< int,1 > > _3091) { return mosek::fusion::p_Domain::inRange(_3089,_3090,_3091); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3089,std::shared_ptr< monty::ndarray< double,1 > > _3090,std::shared_ptr< monty::ndarray< int,1 > > _3091){
  _checked_ptr_1<double> _ptr__3090(_3090 ? _3090->raw() : nullptr, _3090 ? _3090->size(0) : 0);
  _checked_ptr_1<int> _ptr__3091(_3091 ? _3091->raw() : nullptr, _3091 ? _3091->size(0) : 0);
  std::vector<double> _10144;
  for (int _3092 = (int)0, _10145 = (int)((_3090)->size(0)); _3092 < _10145 ; ++_3092)
  {
    _10144.push_back(_3089);
  }
  auto _10146 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10144.size()),_10144.begin(),_10144.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10146,_3090,_3091);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3093,    double _3094,    std::shared_ptr< monty::ndarray< int,1 > > _3095) { return mosek::fusion::p_Domain::inRange(_3093,_3094,_3095); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3093,double _3094,std::shared_ptr< monty::ndarray< int,1 > > _3095){
  _checked_ptr_1<int> _ptr__3095(_3095 ? _3095->raw() : nullptr, _3095 ? _3095->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3093)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3094)}),_3095);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3096,    std::shared_ptr< monty::ndarray< double,1 > > _3097) { return mosek::fusion::p_Domain::inRange(_3096,_3097); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3096,std::shared_ptr< monty::ndarray< double,1 > > _3097){
  _checked_ptr_1<double> _ptr__3096(_3096 ? _3096->raw() : nullptr, _3096 ? _3096->size(0) : 0);
  _checked_ptr_1<double> _ptr__3097(_3097 ? _3097->raw() : nullptr, _3097 ? _3097->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3096,_3097,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3096)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3098,    double _3099) { return mosek::fusion::p_Domain::inRange(_3098,_3099); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3098,double _3099){
  _checked_ptr_1<double> _ptr__3098(_3098 ? _3098->raw() : nullptr, _3098 ? _3098->size(0) : 0);
  std::vector<double> _10147;
  for (int _3100 = (int)0, _10148 = (int)((_3098)->size(0)); _3100 < _10148 ; ++_3100)
  {
    _10147.push_back(_3099);
  }
  auto _10149 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10147.size()),_10147.begin(),_10147.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3098,_10149,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3098)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3101,    std::shared_ptr< monty::ndarray< double,1 > > _3102) { return mosek::fusion::p_Domain::inRange(_3101,_3102); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3101,std::shared_ptr< monty::ndarray< double,1 > > _3102){
  _checked_ptr_1<double> _ptr__3102(_3102 ? _3102->raw() : nullptr, _3102 ? _3102->size(0) : 0);
  std::vector<double> _10150;
  for (int _3103 = (int)0, _10151 = (int)((_3102)->size(0)); _3103 < _10151 ; ++_3103)
  {
    _10150.push_back(_3101);
  }
  auto _10152 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10150.size()),_10150.begin(),_10150.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10152,_3102,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3102)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3104,    double _3105) { return mosek::fusion::p_Domain::inRange(_3104,_3105); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3104,double _3105){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3104)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3105)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3106) { return mosek::fusion::p_Domain::greaterThan(_3106); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3106){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_3106);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3107,    std::shared_ptr< monty::ndarray< int,1 > > _3108) { return mosek::fusion::p_Domain::greaterThan(_3107,_3108); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3107,std::shared_ptr< monty::ndarray< int,1 > > _3108){
  _checked_ptr_1<double> _ptr__3107(_3107 ? _3107->raw() : nullptr, _3107 ? _3107->size(0) : 0);
  _checked_ptr_1<int> _ptr__3108(_3108 ? _3108->raw() : nullptr, _3108 ? _3108->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3107),_3108);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _3109) { return mosek::fusion::p_Domain::greaterThan(_3109); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _3109){
  std::vector<double> _10153;
  for (int _3110 = (int)0, _10154 = (int)((_3109)->size(0)); _3110 < _10154 ; ++_3110)
  {
    for (int _3111 = (int)0, _10155 = (int)((_3109)->size(1)); _3111 < _10155 ; ++_3111)
    {
      _10153.push_back(((*_3109)(_3110,_3111)));
    }
  }
  auto _10156 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10153.size()),_10153.begin(),_10153.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10156,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3109)->size(0))),(int)((int)((_3109)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3112) { return mosek::fusion::p_Domain::greaterThan(_3112); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3112){
  _checked_ptr_1<double> _ptr__3112(_3112 ? _3112->raw() : nullptr, _3112 ? _3112->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3112),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3112)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3113,    std::shared_ptr< monty::ndarray< int,1 > > _3114) { return mosek::fusion::p_Domain::greaterThan(_3113,_3114); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3113,std::shared_ptr< monty::ndarray< int,1 > > _3114){
  _checked_ptr_1<int> _ptr__3114(_3114 ? _3114->raw() : nullptr, _3114 ? _3114->size(0) : 0);
  std::vector<double> _10157;
  for (long long _3115 = (int)0, _10158 = ::mosek::fusion::p_Domain::prod(_3114); _3115 < _10158 ; ++_3115)
  {
    _10157.push_back(_3113);
  }
  auto _10159 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10157.size()),_10157.begin(),_10157.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10159,_3114);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3116,    int _3117,    int _3118) { return mosek::fusion::p_Domain::greaterThan(_3116,_3117,_3118); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3116,int _3117,int _3118){
  std::vector<double> _10160;
  for (int _3119 = (int)0, _10161 = safe_mul( _3118,_3117 ); _3119 < _10161 ; ++_3119)
  {
    _10160.push_back(_3116);
  }
  auto _10162 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10160.size()),_10160.begin(),_10160.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10162,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3117),(int)(_3118)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3120,    int _3121) { return mosek::fusion::p_Domain::greaterThan(_3120,_3121); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3120,int _3121){
  std::vector<double> _10163;
  for (int _3122 = (int)0, _10164 = _3121; _3122 < _10164 ; ++_3122)
  {
    _10163.push_back(_3120);
  }
  auto _10165 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10163.size()),_10163.begin(),_10163.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10165,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3121)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3123) { return mosek::fusion::p_Domain::greaterThan(_3123); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3123){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3123)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3124) { return mosek::fusion::p_Domain::lessThan(_3124); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3124){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_3124);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3125,    std::shared_ptr< monty::ndarray< int,1 > > _3126) { return mosek::fusion::p_Domain::lessThan(_3125,_3126); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3125,std::shared_ptr< monty::ndarray< int,1 > > _3126){
  _checked_ptr_1<double> _ptr__3125(_3125 ? _3125->raw() : nullptr, _3125 ? _3125->size(0) : 0);
  _checked_ptr_1<int> _ptr__3126(_3126 ? _3126->raw() : nullptr, _3126 ? _3126->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3125),_3126);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _3127) { return mosek::fusion::p_Domain::lessThan(_3127); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _3127){
  std::vector<double> _10166;
  for (int _3128 = (int)0, _10167 = (int)((_3127)->size(0)); _3128 < _10167 ; ++_3128)
  {
    for (int _3129 = (int)0, _10168 = (int)((_3127)->size(1)); _3129 < _10168 ; ++_3129)
    {
      _10166.push_back(((*_3127)(_3128,_3129)));
    }
  }
  auto _10169 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10166.size()),_10166.begin(),_10166.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_10169,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3127)->size(0))),(int)((int)((_3127)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3130) { return mosek::fusion::p_Domain::lessThan(_3130); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3130){
  _checked_ptr_1<double> _ptr__3130(_3130 ? _3130->raw() : nullptr, _3130 ? _3130->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3130),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3130)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3131,    std::shared_ptr< monty::ndarray< int,1 > > _3132) { return mosek::fusion::p_Domain::lessThan(_3131,_3132); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3131,std::shared_ptr< monty::ndarray< int,1 > > _3132){
  _checked_ptr_1<int> _ptr__3132(_3132 ? _3132->raw() : nullptr, _3132 ? _3132->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3131)}),_3132);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3133,    int _3134,    int _3135) { return mosek::fusion::p_Domain::lessThan(_3133,_3134,_3135); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3133,int _3134,int _3135){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3133)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3134),(int)(_3135)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3136,    int _3137) { return mosek::fusion::p_Domain::lessThan(_3136,_3137); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3136,int _3137){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3136)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3137)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3138) { return mosek::fusion::p_Domain::lessThan(_3138); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3138){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3138)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3139) { return mosek::fusion::p_Domain::equalsTo(_3139); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _3139){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_3139);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _3140,    std::shared_ptr< monty::ndarray< int,1 > > _3141) { return mosek::fusion::p_Domain::equalsTo(_3140,_3141); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3140,std::shared_ptr< monty::ndarray< int,1 > > _3141){
  _checked_ptr_1<double> _ptr__3140(_3140 ? _3140->raw() : nullptr, _3140 ? _3140->size(0) : 0);
  _checked_ptr_1<int> _ptr__3141(_3141 ? _3141->raw() : nullptr, _3141 ? _3141->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3140),_3141);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _3142) { return mosek::fusion::p_Domain::equalsTo(_3142); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _3142){
  std::vector<double> _10170;
  for (int _3143 = (int)0, _10171 = (int)((_3142)->size(0)); _3143 < _10171 ; ++_3143)
  {
    for (int _3144 = (int)0, _10172 = (int)((_3142)->size(1)); _3144 < _10172 ; ++_3144)
    {
      _10170.push_back(((*_3142)(_3143,_3144)));
    }
  }
  auto _10173 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10170.size()),_10170.begin(),_10170.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_10173,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3142)->size(0))),(int)((int)((_3142)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _3145) { return mosek::fusion::p_Domain::equalsTo(_3145); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3145){
  _checked_ptr_1<double> _ptr__3145(_3145 ? _3145->raw() : nullptr, _3145 ? _3145->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3145),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3145)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3146,    std::shared_ptr< monty::ndarray< int,1 > > _3147) { return mosek::fusion::p_Domain::equalsTo(_3146,_3147); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3146,std::shared_ptr< monty::ndarray< int,1 > > _3147){
  _checked_ptr_1<int> _ptr__3147(_3147 ? _3147->raw() : nullptr, _3147 ? _3147->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3146)}),_3147);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3148,    int _3149,    int _3150) { return mosek::fusion::p_Domain::equalsTo(_3148,_3149,_3150); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3148,int _3149,int _3150){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3148)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3149),(int)(_3150)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3151,    int _3152) { return mosek::fusion::p_Domain::equalsTo(_3151,_3152); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3151,int _3152){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3151)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3152)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3153) { return mosek::fusion::p_Domain::equalsTo(_3153); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3153){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3153)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _3154) { return mosek::fusion::p_Domain::unbounded(_3154); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int,1 > > _3154){
  _checked_ptr_1<int> _ptr__3154(_3154 ? _3154->raw() : nullptr, _3154 ? _3154->size(0) : 0);
  std::vector<int> _10174;
  for (int _3155 = (int)0, _10175 = (int)((_3154)->size(0)); _3155 < _10175 ; ++_3155)
  {
    _10174.push_back(_ptr__3154[_3155]);
  }
  auto _10176 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10174.size()),_10174.begin(),_10174.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_10176);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _3156,    int _3157) { return mosek::fusion::p_Domain::unbounded(_3156,_3157); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _3156,int _3157){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3156),(int)(_3157)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _3158) { return mosek::fusion::p_Domain::unbounded(_3158); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _3158){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3158)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::ExprCode::ExprCode(mosek::fusion::p_ExprCode *_impl) : _impl(_impl) { /*std::cout << "ExprCode() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ExprCode::~ExprCode() { delete _impl; _impl = nullptr; }mosek::fusion::p_ExprCode::p_ExprCode  (::mosek::fusion::ExprCode * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::ExprCode::inplace_relocate  ( std::shared_ptr< monty::ndarray< int,1 > > _3159,    int _3160,    int _3161,    int _3162) { mosek::fusion::p_ExprCode::inplace_relocate(_3159,_3160,_3161,_3162); }void mosek::fusion::p_ExprCode::inplace_relocate(std::shared_ptr< monty::ndarray< int,1 > > _3159,int _3160,int _3161,int _3162){
  _checked_ptr_1<int> _ptr__3159(_3159 ? _3159->raw() : nullptr, _3159 ? _3159->size(0) : 0);
  int _10177 = (int)0;
  int _10178 = _3161;
  int _10179 = (int)2;
  for (int _3163 = _10177; _3163 < _10178; _3163 += _10179)
  {
    {
      if ((_ptr__3159[_3163] == (int)2))
      {
        {
          _ptr__3159[safe_add( _3163,(int)1 )] += _3162;
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprCode::op2str  ( int _3164) { return mosek::fusion::p_ExprCode::op2str(_3164); }std::string mosek::fusion::p_ExprCode::op2str(int _3164){
  if ((_3164 == 0))
  {
    {
      return std::string ("NOP");
    }
  }
  else if((_3164 == 1))
  {
    {
      return std::string ("PARAMREF");
    }
  }
  else if((_3164 == 2))
  {
    {
      return std::string ("CONST");
    }
  }
  else if((_3164 == 3))
  {
    {
      return std::string ("ADD");
    }
  }
  else if((_3164 == 4))
  {
    {
      return std::string ("NEG");
    }
  }
  else if((_3164 == 5))
  {
    {
      return std::string ("MUL");
    }
  }
  else if((_3164 == 6))
  {
    {
      return std::string ("INV");
    }
  }
  else if((_3164 == 8))
  {
    {
      return std::string ("SUM");
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("?("))->__mosek_2fusion_2Utils_2StringBuffer__a(_3164)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
}
void mosek::fusion::ExprCode::eval_add_list  ( std::shared_ptr< monty::ndarray< int,1 > > _3165,    std::shared_ptr< monty::ndarray< int,1 > > _3166,    std::shared_ptr< monty::ndarray< double,1 > > _3167,    int _3168,    std::shared_ptr< monty::ndarray< double,1 > > _3169,    std::shared_ptr< monty::ndarray< double,1 > > _3170,    monty::rc_ptr< ::mosek::fusion::WorkStack > _3171) { mosek::fusion::p_ExprCode::eval_add_list(_3165,_3166,_3167,_3168,_3169,_3170,_3171); }void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int,1 > > _3165,std::shared_ptr< monty::ndarray< int,1 > > _3166,std::shared_ptr< monty::ndarray< double,1 > > _3167,int _3168,std::shared_ptr< monty::ndarray< double,1 > > _3169,std::shared_ptr< monty::ndarray< double,1 > > _3170,monty::rc_ptr< ::mosek::fusion::WorkStack > _3171){
  _checked_ptr_1<int> _ptr__3165(_3165 ? _3165->raw() : nullptr, _3165 ? _3165->size(0) : 0);
  _checked_ptr_1<int> _ptr__3166(_3166 ? _3166->raw() : nullptr, _3166 ? _3166->size(0) : 0);
  _checked_ptr_1<double> _ptr__3167(_3167 ? _3167->raw() : nullptr, _3167 ? _3167->size(0) : 0);
  _checked_ptr_1<double> _ptr__3169(_3169 ? _3169->raw() : nullptr, _3169 ? _3169->size(0) : 0);
  _checked_ptr_1<double> _ptr__3170(_3170 ? _3170->raw() : nullptr, _3170 ? _3170->size(0) : 0);
  int _3172 = _3171->allocf64((int)((_3165)->size(0)));
  int _3173 = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _3174 = mosek::fusion::p_WorkStack::_get_impl(_3171)->f64;
  _checked_ptr_1<double> _ptr__3174(_3174 ? _3174->raw() : nullptr,_3174 ? _3174->size(0) : 0);
  int _10180 = (int)0;
  int _10181 = ((int)((_3166)->size(0)) - (int)1);
  for (int _3175 = _10180; _3175 < _10181; ++_3175)
  {
    {
      int _10182 = _ptr__3166[_3175];
      int _10183 = _ptr__3166[safe_add( _3175,(int)1 )];
      int _10184 = (int)2;
      for (int _3176 = _10182; _3176 < _10183; _3176 += _10184)
      {
        {
          if ((_ptr__3165[_3176] == 0))
          {
            {
            }
          }
          else if((_ptr__3165[_3176] == 1))
          {
            {
              _ptr__3174[safe_add( _3172,_3173 )] = _ptr__3170[_ptr__3165[safe_add( _3176,(int)1 )]];
              ++ _3173;
            }
          }
          else if((_ptr__3165[_3176] == 2))
          {
            {
              _ptr__3174[safe_add( _3172,_3173 )] = _ptr__3167[(_3176 / (int)2)];
              ++ _3173;
            }
          }
          else if((_ptr__3165[_3176] == 3))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)] = (_ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] + _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)]);
              -- _3173;
            }
          }
          else if((_ptr__3165[_3176] == 4))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] = (-_ptr__3174[(safe_add( _3172,_3173 ) - (int)1)]);
            }
          }
          else if((_ptr__3165[_3176] == 5))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)] = (_ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] * _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)]);
              -- _3173;
            }
          }
          else if((_ptr__3165[_3176] == 6))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] = (1.0 / _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)]);
            }
          }
          else if((_ptr__3165[_3176] == 8))
          {
            {
              double _3177 = 0.0;
              int _10185 = (int)0;
              int _10186 = _ptr__3165[safe_add( _3176,(int)1 )];
              for (int _3178 = _10185; _3178 < _10186; ++_3178)
              {
                {
                  -- _3173;
                  _3177 += _ptr__3174[safe_add( _3172,_3173 )];
                }
              }
              _ptr__3174[safe_add( _3172,_3173 )] = _3177;
              ++ _3173;
            }
          }
          {}
        }
      }
      _ptr__3169[safe_add( _3168,_3175 )] += _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)];
    }
  }
  _3171->clear();
}
void mosek::fusion::ExprCode::eval_add_list  ( std::shared_ptr< monty::ndarray< int,1 > > _3179,    std::shared_ptr< monty::ndarray< int,1 > > _3180,    std::shared_ptr< monty::ndarray< double,1 > > _3181,    std::shared_ptr< monty::ndarray< double,1 > > _3182,    std::shared_ptr< monty::ndarray< double,1 > > _3183,    monty::rc_ptr< ::mosek::fusion::WorkStack > _3184) { mosek::fusion::p_ExprCode::eval_add_list(_3179,_3180,_3181,_3182,_3183,_3184); }void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int,1 > > _3179,std::shared_ptr< monty::ndarray< int,1 > > _3180,std::shared_ptr< monty::ndarray< double,1 > > _3181,std::shared_ptr< monty::ndarray< double,1 > > _3182,std::shared_ptr< monty::ndarray< double,1 > > _3183,monty::rc_ptr< ::mosek::fusion::WorkStack > _3184){
  _checked_ptr_1<int> _ptr__3179(_3179 ? _3179->raw() : nullptr, _3179 ? _3179->size(0) : 0);
  _checked_ptr_1<int> _ptr__3180(_3180 ? _3180->raw() : nullptr, _3180 ? _3180->size(0) : 0);
  _checked_ptr_1<double> _ptr__3181(_3181 ? _3181->raw() : nullptr, _3181 ? _3181->size(0) : 0);
  _checked_ptr_1<double> _ptr__3182(_3182 ? _3182->raw() : nullptr, _3182 ? _3182->size(0) : 0);
  _checked_ptr_1<double> _ptr__3183(_3183 ? _3183->raw() : nullptr, _3183 ? _3183->size(0) : 0);
  ::mosek::fusion::p_ExprCode::eval_add_list(_3179,_3180,_3181,(int)0,_3182,_3183,_3184);
}
int mosek::fusion::ExprCode::emit_sum  ( std::shared_ptr< monty::ndarray< int,1 > > _3185,    int _3186,    int _3187) { return mosek::fusion::p_ExprCode::emit_sum(_3185,_3186,_3187); }int mosek::fusion::p_ExprCode::emit_sum(std::shared_ptr< monty::ndarray< int,1 > > _3185,int _3186,int _3187){
  _checked_ptr_1<int> _ptr__3185(_3185 ? _3185->raw() : nullptr, _3185 ? _3185->size(0) : 0);
  _ptr__3185[_3186] = 8;
  _ptr__3185[safe_add( _3186,(int)1 )] = _3187;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_inv  ( std::shared_ptr< monty::ndarray< int,1 > > _3188,    int _3189) { return mosek::fusion::p_ExprCode::emit_inv(_3188,_3189); }int mosek::fusion::p_ExprCode::emit_inv(std::shared_ptr< monty::ndarray< int,1 > > _3188,int _3189){
  _checked_ptr_1<int> _ptr__3188(_3188 ? _3188->raw() : nullptr, _3188 ? _3188->size(0) : 0);
  _ptr__3188[_3189] = 6;
  _ptr__3188[safe_add( _3189,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_mul  ( std::shared_ptr< monty::ndarray< int,1 > > _3190,    int _3191) { return mosek::fusion::p_ExprCode::emit_mul(_3190,_3191); }int mosek::fusion::p_ExprCode::emit_mul(std::shared_ptr< monty::ndarray< int,1 > > _3190,int _3191){
  _checked_ptr_1<int> _ptr__3190(_3190 ? _3190->raw() : nullptr, _3190 ? _3190->size(0) : 0);
  _ptr__3190[_3191] = 5;
  _ptr__3190[safe_add( _3191,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_neg  ( std::shared_ptr< monty::ndarray< int,1 > > _3192,    int _3193) { return mosek::fusion::p_ExprCode::emit_neg(_3192,_3193); }int mosek::fusion::p_ExprCode::emit_neg(std::shared_ptr< monty::ndarray< int,1 > > _3192,int _3193){
  _checked_ptr_1<int> _ptr__3192(_3192 ? _3192->raw() : nullptr, _3192 ? _3192->size(0) : 0);
  _ptr__3192[_3193] = 4;
  _ptr__3192[safe_add( _3193,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_add  ( std::shared_ptr< monty::ndarray< int,1 > > _3194,    int _3195) { return mosek::fusion::p_ExprCode::emit_add(_3194,_3195); }int mosek::fusion::p_ExprCode::emit_add(std::shared_ptr< monty::ndarray< int,1 > > _3194,int _3195){
  _checked_ptr_1<int> _ptr__3194(_3194 ? _3194->raw() : nullptr, _3194 ? _3194->size(0) : 0);
  _ptr__3194[_3195] = 3;
  _ptr__3194[safe_add( _3195,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_constref  ( std::shared_ptr< monty::ndarray< int,1 > > _3196,    int _3197,    int _3198) { return mosek::fusion::p_ExprCode::emit_constref(_3196,_3197,_3198); }int mosek::fusion::p_ExprCode::emit_constref(std::shared_ptr< monty::ndarray< int,1 > > _3196,int _3197,int _3198){
  _checked_ptr_1<int> _ptr__3196(_3196 ? _3196->raw() : nullptr, _3196 ? _3196->size(0) : 0);
  _ptr__3196[_3197] = 2;
  _ptr__3196[safe_add( _3197,(int)1 )] = _3198;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_paramref  ( std::shared_ptr< monty::ndarray< int,1 > > _3199,    int _3200,    int _3201) { return mosek::fusion::p_ExprCode::emit_paramref(_3199,_3200,_3201); }int mosek::fusion::p_ExprCode::emit_paramref(std::shared_ptr< monty::ndarray< int,1 > > _3199,int _3200,int _3201){
  _checked_ptr_1<int> _ptr__3199(_3199 ? _3199->raw() : nullptr, _3199 ? _3199->size(0) : 0);
  _ptr__3199[_3200] = 1;
  _ptr__3199[safe_add( _3200,(int)1 )] = _3201;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_nop  ( std::shared_ptr< monty::ndarray< int,1 > > _3202,    int _3203) { return mosek::fusion::p_ExprCode::emit_nop(_3202,_3203); }int mosek::fusion::p_ExprCode::emit_nop(std::shared_ptr< monty::ndarray< int,1 > > _3202,int _3203){
  _checked_ptr_1<int> _ptr__3202(_3202 ? _3202->raw() : nullptr, _3202 ? _3202->size(0) : 0);
  _ptr__3202[_3203] = 0;
  _ptr__3202[safe_add( _3203,(int)1 )] = (int)0;
  return (int)2;
}
void mosek::fusion::p_ExprCode::destroy(){}void mosek::fusion::ExprCode::destroy() { mosek::fusion::p_ExprCode::_get_impl(this)->destroy(); }mosek::fusion::ExprParameter::ExprParameter(mosek::fusion::p_ExprParameter *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprParameter()" << this << std::endl; */ }mosek::fusion::ExprParameter::~ExprParameter() {  /* std::cout << "~ExprParameter()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprParameter::p_ExprParameter  (::mosek::fusion::ExprParameter * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprParameter::t mosek::fusion::p_ExprParameter::_new_ExprParameter  (monty::rc_ptr< ::mosek::fusion::Parameter > _3204){ return new mosek::fusion::ExprParameter(_3204); }mosek::fusion::ExprParameter::ExprParameter  (monty::rc_ptr< ::mosek::fusion::Parameter > _3204) :    ExprParameter(new mosek::fusion::p_ExprParameter(this)){ mosek::fusion::p_ExprParameter::_get_impl(this)->_initialize(_3204); }void mosek::fusion::p_ExprParameter::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3204){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3204->getShape());
    mosek::fusion::p_ExprParameter::_get_impl(::mosek::fusion::ExprParameter::t(_pubthis))->p = _3204;
  }
}void mosek::fusion::ExprParameter :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3205,monty::rc_ptr< ::mosek::fusion::WorkStack > _3206,monty::rc_ptr< ::mosek::fusion::WorkStack > _3207) { mosek::fusion::p_ExprParameter::_get_impl(this)->eval(_3205,_3206,_3207); }void mosek::fusion::p_ExprParameter::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3205,monty::rc_ptr< ::mosek::fusion::WorkStack > _3206,monty::rc_ptr< ::mosek::fusion::WorkStack > _3207){
  p->eval(_3205,_3206,_3207);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3208,_3209); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209) { return __mosek_2fusion_2ExprParameter__slice(_3208,_3209); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209) { return __mosek_2fusion_2ExprParameter__slice(_3208,_3209); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209){
  _checked_ptr_1<int> _ptr__3208(_3208 ? _3208->raw() : nullptr, _3208 ? _3208->size(0) : 0);
  _checked_ptr_1<int> _ptr__3209(_3209 ? _3209->raw() : nullptr, _3209 ? _3209->size(0) : 0);
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3208,_3209))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(int _3210,int _3211) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3210,_3211); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(int _3210,int _3211) { return __mosek_2fusion_2ExprParameter__slice(_3210,_3211); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(int _3210,int _3211) { return __mosek_2fusion_2ExprParameter__slice(_3210,_3211); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(int _3210,int _3211){
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3210,_3211))).as<::mosek::fusion::Expression>();
}
std::string mosek::fusion::ExprParameter :: toString() { return mosek::fusion::p_ExprParameter::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprParameter::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprParameter("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprParameter::destroy(){p.reset();}void mosek::fusion::ExprParameter::destroy() { mosek::fusion::p_ExprParameter::_get_impl(this)->destroy(); }mosek::fusion::Param::Param(mosek::fusion::p_Param *_impl) : _impl(_impl) { /*std::cout << "Param() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Param::~Param() { delete _impl; _impl = nullptr; }mosek::fusion::p_Param::p_Param  (::mosek::fusion::Param * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::repeat  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3212,    int _3213,    int _3214) { return mosek::fusion::p_Param::repeat(_3212,_3213,_3214); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::repeat(monty::rc_ptr< ::mosek::fusion::Parameter > _3212,int _3213,int _3214){
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10187;
  for (int _3215 = (int)0, _10188 = _3213; _3215 < _10188 ; ++_3215)
  {
    _10187.push_back(_3212);
  }
  auto _10189 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10187.size()),_10187.begin(),_10187.end()));
  return ::mosek::fusion::p_Param::stack(_3214,_10189);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3216,    monty::rc_ptr< ::mosek::fusion::Parameter > _3217,    monty::rc_ptr< ::mosek::fusion::Parameter > _3218,    monty::rc_ptr< ::mosek::fusion::Parameter > _3219) { return mosek::fusion::p_Param::stack(_3216,_3217,_3218,_3219); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3216,monty::rc_ptr< ::mosek::fusion::Parameter > _3217,monty::rc_ptr< ::mosek::fusion::Parameter > _3218,monty::rc_ptr< ::mosek::fusion::Parameter > _3219){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3217.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3218.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3219.get())}),_3216);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3220,    monty::rc_ptr< ::mosek::fusion::Parameter > _3221,    monty::rc_ptr< ::mosek::fusion::Parameter > _3222) { return mosek::fusion::p_Param::stack(_3220,_3221,_3222); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3220,monty::rc_ptr< ::mosek::fusion::Parameter > _3221,monty::rc_ptr< ::mosek::fusion::Parameter > _3222){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3221.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3222.get())}),_3220);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3223,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3224) { return mosek::fusion::p_Param::stack(_3223,_3224); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3223,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3224){
  return ::mosek::fusion::p_Param::dstack(_3224,_3223);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3225) { return mosek::fusion::p_Param::stack(_3225); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3225){
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10190;
  for (int _3226 = (int)0, _10191 = (int)((_3225)->size(0)); _3226 < _10191 ; ++_3226)
  {
    _10190.push_back(::mosek::fusion::p_Param::hstack(((*_3225)(_3226))));
  }
  auto _10192 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10190.size()),_10190.begin(),_10190.end()));
  return ::mosek::fusion::p_Param::vstack(_10192);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3227,    monty::rc_ptr< ::mosek::fusion::Parameter > _3228,    monty::rc_ptr< ::mosek::fusion::Parameter > _3229) { return mosek::fusion::p_Param::hstack(_3227,_3228,_3229); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3227,monty::rc_ptr< ::mosek::fusion::Parameter > _3228,monty::rc_ptr< ::mosek::fusion::Parameter > _3229){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3227.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3228.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3229.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3230,    monty::rc_ptr< ::mosek::fusion::Parameter > _3231) { return mosek::fusion::p_Param::hstack(_3230,_3231); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3230,monty::rc_ptr< ::mosek::fusion::Parameter > _3231){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3230.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3231.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3232) { return mosek::fusion::p_Param::hstack(_3232); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3232){
  return ::mosek::fusion::p_Param::dstack(_3232,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3233,    monty::rc_ptr< ::mosek::fusion::Parameter > _3234,    monty::rc_ptr< ::mosek::fusion::Parameter > _3235) { return mosek::fusion::p_Param::vstack(_3233,_3234,_3235); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3233,monty::rc_ptr< ::mosek::fusion::Parameter > _3234,monty::rc_ptr< ::mosek::fusion::Parameter > _3235){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3233.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3234.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3235.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3236,    monty::rc_ptr< ::mosek::fusion::Parameter > _3237) { return mosek::fusion::p_Param::vstack(_3236,_3237); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3236,monty::rc_ptr< ::mosek::fusion::Parameter > _3237){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3236.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3237.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3238) { return mosek::fusion::p_Param::vstack(_3238); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3238){
  return ::mosek::fusion::p_Param::dstack(_3238,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3239,int _3240){
  if ((_3240 < (int)0))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _3241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3239)->size(0)))));
  _checked_ptr_1<int> _ptr__3241(_3241 ? _3241->raw() : nullptr,_3241 ? _3241->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3242 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3239)->size(0)))));
  _checked_ptr_1<long long> _ptr__3242(_3242 ? _3242->raw() : nullptr,_3242 ? _3242->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3243;
  _checked_ptr_1<int> _ptr__3243(_3243 ? _3243->raw() : nullptr,_3243 ? _3243->size(0) : 0);
  int _3244 = ((*_3239)((int)0))->getND();
  int _10193 = (int)1;
  int _10194 = (int)((_3239)->size(0));
  for (int _3245 = _10193; _3245 < _10194; ++_3245)
  {
    {
      if ((_3244 < ((*_3239)(_3245))->getND()))
      {
        {
          _3244 = ((*_3239)(_3245))->getND();
        }
      }
      {}
    }
  }
  if ((_3240 < _3244))
  {
    {
      int _3246 = (int)0;
      while ( ((_3246 < (int)((_3239)->size(0))) && (_3244 != ((*_3239)(_3246))->getND())) )
      {
        {
          ++ _3246;
        }
      }
      _3243 = ((*_3239)(_3246))->getShape();
      _ptr__3243.update(_3243 ? _3243->raw() : nullptr, _3243 ? _3243->size(0) : 0);
      {
        int _3247 = (int)0;
        while ( ((_3247 < (int)((_3239)->size(0))) && (_3244 != ((*_3239)(_3247))->getND())) )
        {
          {
            ++ _3247;
          }
        }
        _3243 = ((*_3239)(_3247))->getShape();
        _ptr__3243.update(_3243 ? _3243->raw() : nullptr, _3243 ? _3243->size(0) : 0);
      }
    }
  }
  else
  {
    {
      std::vector<int> _10195;
      for (int _3248 = (int)0, _10196 = safe_add( _3240,(int)1 ); _3248 < _10196 ; ++_3248)
      {
        _10195.push_back((int)1);
      }
      auto _10197 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10195.size()),_10195.begin(),_10195.end()));
      _3243 = _10197;
      _ptr__3243.update(_3243 ? _3243->raw() : nullptr, _3243 ? _3243->size(0) : 0);
      {
        int _3249 = (int)0;
        while ( ((_3249 < (int)((_3239)->size(0))) && (_3244 != ((*_3239)(_3249))->getND())) )
        {
          {
            ++ _3249;
          }
        }
        int _3250 = ((*_3239)(_3249))->getND();
        std::shared_ptr< monty::ndarray< int,1 > > _3251 = ((*_3239)(_3249))->getShape();
        _checked_ptr_1<int> _ptr__3251(_3251 ? _3251->raw() : nullptr,_3251 ? _3251->size(0) : 0);
        int _10198 = (int)0;
        int _10199 = _3250;
        for (int _3252 = _10198; _3252 < _10199; ++_3252)
        {
          {
            _ptr__3243[_3252] = _ptr__3251[_3252];
          }
        }
      }
    }
  }
  _3244 = (int)((_3243)->size(0));
  int _3253 = (int)0;
  {
    bool _3254 = false;
    int _10200 = (int)0;
    int _10201 = (int)((_3239)->size(0));
    for (int _3255 = _10200; _3255 < _10201; ++_3255)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _3256 = ((*_3239)(_3255))->getShape();
        _checked_ptr_1<int> _ptr__3256(_3256 ? _3256->raw() : nullptr,_3256 ? _3256->size(0) : 0);
        _ptr__3242[_3255] = ::mosek::fusion::p_Set::size(_3256);
        int _10202 = (int)0;
        int _10203 = (int)((_3256)->size(0));
        for (int _3257 = _10202; _3257 < _10203; ++_3257)
        {
          {
            _3254 = (_3254 && ((_3257 == _3240) || (_ptr__3256[_3257] == _ptr__3243[_3257])));
          }
        }
        if ((_3240 < (int)((_3256)->size(0))))
        {
          {
            _ptr__3241[_3255] = _ptr__3256[_3240];
            _3253 += _ptr__3256[_3240];
            int _10204 = (int)((_3256)->size(0));
            int _10205 = _3244;
            for (int _3258 = _10204; _3258 < _10205; ++_3258)
            {
              {
                _3254 = (_3254 && ((_3258 == _3240) || (_ptr__3243[_3258] == (int)1)));
              }
            }
          }
        }
        else
        {
          {
            _3253 += (int)1;
            _ptr__3241[_3255] = (int)1;
          }
        }
      }
    }
    if (_3254)
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for stacking"));
      }
    }
    {}
  }
  _ptr__3243[_3240] = _3253;
  std::vector<int> _10206;
  for (int _3260 = (int)0, _10207 = (int)((_3239)->size(0)); _3260 < _10207 ; ++_3260)
  {
    _10206.push_back(((*_3239)(_3260))->getNumNonzero());
  }
  auto _10208 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10206.size()),_10206.begin(),_10206.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _3259 = _10208;
  _checked_ptr_1<int> _ptr__3259(_3259 ? _3259->raw() : nullptr,_3259 ? _3259->size(0) : 0);
  int _3261 = (int)0;
  int _10209 = (int)0;
  int _10210 = (int)((_3259)->size(0));
  for (int _3262 = _10209; _3262 < _10210; ++_3262)
  {
    {
      _3261 += _ptr__3259[_3262];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _3263 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3261)));
  _checked_ptr_1<long long> _ptr__3263(_3263 ? _3263->raw() : nullptr,_3263 ? _3263->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3264 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3261)));
  _checked_ptr_1<int> _ptr__3264(_3264 ? _3264->raw() : nullptr,_3264 ? _3264->size(0) : 0);
  long long _3265 = (int)1;
  int _10211 = (int)0;
  int _10212 = _3240;
  for (int _3266 = _10211; _3266 < _10212; ++_3266)
  {
    {
      _3265 *= _ptr__3243[_3266];
    }
  }
  long long _3267 = _3253;
  long long _3268 = (int)1;
  int _10213 = safe_add( _3240,(int)1 );
  int _10214 = _3244;
  for (int _3269 = _10213; _3269 < _10214; ++_3269)
  {
    {
      _3268 *= _ptr__3243[_3269];
    }
  }
  {
    int _3270 = (int)0;
    long long _3271 = (int)0;
    int _10215 = (int)0;
    int _10216 = (int)((_3239)->size(0));
    for (int _3272 = _10215; _3272 < _10216; ++_3272)
    {
      {
        int _3273 = ((*_3239)(_3272))->getNumNonzero();
        ((*_3239)(_3272))->getSp(_3263,_3270);
        ((*_3239)(_3272))->getAllIndexes(_3264,_3270);
        if ((_3240 == (int)0))
        {
          {
            int _10217 = _3270;
            int _10218 = safe_add( _3270,_3273 );
            for (int _3274 = _10217; _3274 < _10218; ++_3274)
            {
              {
                _ptr__3263[_3274] += _3271;
              }
            }
            _3271 += _ptr__3242[_3272];
          }
        }
        else
        {
          {
            int _10219 = _3270;
            int _10220 = safe_add( _3270,_3273 );
            for (int _3275 = _10219; _3275 < _10220; ++_3275)
            {
              {
                long long _3276 = (_ptr__3263[_3275] / safe_mul( _ptr__3241[_3272],_3268 ));
                long long _3277 = ((_ptr__3263[_3275] / _3268) % _ptr__3241[_3272]);
                long long _3278 = (_ptr__3263[_3275] % _3268);
                _ptr__3263[_3275] = safe_add( safe_add( safe_mul( _3276,safe_mul( _3253,_3268 ) ),safe_mul( safe_add( _3277,_3271 ),_3268 ) ),_3278 );
              }
            }
            _3271 += _ptr__3241[_3272];
          }
        }
        _3270 += _3273;
      }
    }
  }
  int _3279 = _ptr__3243[(int)0];
  int _10221 = (int)1;
  int _10222 = _3244;
  for (int _3280 = _10221; _3280 < _10222; ++_3280)
  {
    {
      if ((_3279 < _ptr__3243[_3280]))
      {
        {
          _3279 = _ptr__3243[_3280];
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _3281 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _3279,(int)1 ))));
  _checked_ptr_1<int> _ptr__3281(_3281 ? _3281->raw() : nullptr,_3281 ? _3281->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3282 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3261)));
  _checked_ptr_1<int> _ptr__3282(_3282 ? _3282->raw() : nullptr,_3282 ? _3282->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3283 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3261)));
  _checked_ptr_1<int> _ptr__3283(_3283 ? _3283->raw() : nullptr,_3283 ? _3283->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3284 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3244)));
  _checked_ptr_1<long long> _ptr__3284(_3284 ? _3284->raw() : nullptr,_3284 ? _3284->size(0) : 0);
  _ptr__3284[(_3244 - (int)1)] = (int)1;
  int _10223 = (int)1;
  int _10224 = _3244;
  for (int _3285 = _10223; _3285 < _10224; ++_3285)
  {
    {
      _ptr__3284[((_3244 - _3285) - (int)1)] = safe_mul( _ptr__3284[(_3244 - _3285)],_ptr__3243[(_3244 - _3285)] );
    }
  }
  int _10225 = (int)0;
  int _10226 = _3261;
  for (int _3286 = _10225; _3286 < _10226; ++_3286)
  {
    {
      _ptr__3282[_3286] = _3286;
    }
  }
  int _10227 = (int)0;
  int _10228 = _3244;
  for (int _3287 = _10227; _3287 < _10228; ++_3287)
  {
    {
      int _3288 = ((_3244 - _3287) - (int)1);
      int _10229 = (int)0;
      int _10230 = safe_add( _3279,(int)1 );
      for (int _3289 = _10229; _3289 < _10230; ++_3289)
      {
        {
          _ptr__3281[_3289] = (int)0;
        }
      }
      int _10231 = (int)0;
      int _10232 = _3261;
      for (int _3290 = _10231; _3290 < _10232; ++_3290)
      {
        {
          ++ _ptr__3281[safe_add( (int)1,((_ptr__3263[_3290] / _ptr__3284[_3288]) % _ptr__3243[_3288]) )];
        }
      }
      int _10233 = (int)0;
      int _10234 = _3279;
      for (int _3291 = _10233; _3291 < _10234; ++_3291)
      {
        {
          _ptr__3281[safe_add( _3291,(int)1 )] += _ptr__3281[_3291];
        }
      }
      int _10235 = (int)0;
      int _10236 = _3261;
      for (int _3292 = _10235; _3292 < _10236; ++_3292)
      {
        {
          long long _3293 = ((_ptr__3263[_ptr__3282[_3292]] / _ptr__3284[_3288]) % _ptr__3243[_3288]);
          _ptr__3283[_ptr__3281[_3293]] = _ptr__3282[_3292];
          ++ _ptr__3281[_3293];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3294 = _3283;
      _checked_ptr_1<int> _ptr__3294(_3294 ? _3294->raw() : nullptr,_3294 ? _3294->size(0) : 0);
      _3283 = _3282;
      _ptr__3283.update(_3283 ? _3283->raw() : nullptr, _3283 ? _3283->size(0) : 0);
      _3282 = _3294;
      _ptr__3282.update(_3282 ? _3282->raw() : nullptr, _3282 ? _3282->size(0) : 0);
    }
  }
  std::vector<long long> _10237;
  for (int _3296 = (int)0, _10238 = _3261; _3296 < _10238 ; ++_3296)
  {
    _10237.push_back(_ptr__3263[_ptr__3282[_3296]]);
  }
  auto _10239 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10237.size()),_10237.begin(),_10237.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _3295 = _10239;
  _checked_ptr_1<long long> _ptr__3295(_3295 ? _3295->raw() : nullptr,_3295 ? _3295->size(0) : 0);
  std::vector<int> _10240;
  for (int _3298 = (int)0, _10241 = _3261; _3298 < _10241 ; ++_3298)
  {
    _10240.push_back(_ptr__3264[_ptr__3282[_3298]]);
  }
  auto _10242 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10240.size()),_10240.begin(),_10240.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _3297 = _10242;
  _checked_ptr_1<int> _ptr__3297(_3297 ? _3297->raw() : nullptr,_3297 ? _3297->size(0) : 0);
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(((*_3239)((int)0))->__mosek_2fusion_2Parameter__getModel(),_3243,_3295,_3297)).as<::mosek::fusion::Parameter>();
}
void mosek::fusion::p_Param::destroy(){}void mosek::fusion::Param::destroy() { mosek::fusion::p_Param::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr(mosek::fusion::p_ExprMulParamScalarExpr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalarExpr()" << this << std::endl; */ }mosek::fusion::ExprMulParamScalarExpr::~ExprMulParamScalarExpr() {  /* std::cout << "~ExprMulParamScalarExpr()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamScalarExpr::p_ExprMulParamScalarExpr  (::mosek::fusion::ExprMulParamScalarExpr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamScalarExpr::t mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr  (monty::rc_ptr< ::mosek::fusion::Parameter > _3299,    monty::rc_ptr< ::mosek::fusion::Expression > _3300){ return new mosek::fusion::ExprMulParamScalarExpr(_3299,_3300); }mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr  (monty::rc_ptr< ::mosek::fusion::Parameter > _3299,    monty::rc_ptr< ::mosek::fusion::Expression > _3300) :    ExprMulParamScalarExpr(new mosek::fusion::p_ExprMulParamScalarExpr(this)){ mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->_initialize(_3299,_3300); }void mosek::fusion::p_ExprMulParamScalarExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3299,    monty::rc_ptr< ::mosek::fusion::Expression > _3300){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3299->getShape());
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->p = _3299;
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->e = _3300;
    if ((_3300->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamScalarExpr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3301,monty::rc_ptr< ::mosek::fusion::WorkStack > _3302,monty::rc_ptr< ::mosek::fusion::WorkStack > _3303) { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->eval(_3301,_3302,_3303); }void mosek::fusion::p_ExprMulParamScalarExpr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3301,monty::rc_ptr< ::mosek::fusion::WorkStack > _3302,monty::rc_ptr< ::mosek::fusion::WorkStack > _3303){
  e->eval(_3302,_3301,_3303);
  _3302->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3304 = mosek::fusion::p_WorkStack::_get_impl(_3302)->i32;
  _checked_ptr_1<int> _ptr__3304(_3304 ? _3304->raw() : nullptr,_3304 ? _3304->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3305 = mosek::fusion::p_WorkStack::_get_impl(_3302)->i64;
  _checked_ptr_1<long long> _ptr__3305(_3305 ? _3305->raw() : nullptr,_3305 ? _3305->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3306 = mosek::fusion::p_WorkStack::_get_impl(_3302)->f64;
  _checked_ptr_1<double> _ptr__3306(_3306 ? _3306->raw() : nullptr,_3306 ? _3306->size(0) : 0);
  int _3307 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nd;
  if ((_3307 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3308 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nelem;
  int _3309 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nnz;
  bool _3310 = mosek::fusion::p_WorkStack::_get_impl(_3302)->hassp;
  int _3311 = mosek::fusion::p_WorkStack::_get_impl(_3302)->ptr_base;
  int _3312 = mosek::fusion::p_WorkStack::_get_impl(_3302)->ncodeatom;
  int _3313 = mosek::fusion::p_WorkStack::_get_impl(_3302)->sp_base;
  int _3314 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nidxs_base;
  int _3315 = mosek::fusion::p_WorkStack::_get_impl(_3302)->cof_base;
  int _3316 = mosek::fusion::p_WorkStack::_get_impl(_3302)->cconst_base;
  int _3317 = mosek::fusion::p_WorkStack::_get_impl(_3302)->codeptr_base;
  int _3318 = mosek::fusion::p_WorkStack::_get_impl(_3302)->code_base;
  int _3319 = p->getND();
  int _3320 = p->getNumNonzero();
  int _3321 = safe_mul( _3309,p->getNumNonzero() );
  bool _3322 = (p->getNumNonzero() < p->getSize());
  int _10243;
  bool _10244 = (_3312 > (int)0);
  if (_10244)
  {
    _10243 = safe_add( _3312,safe_mul( _3321,(int)4 ) );
  }
  else
  {
    _10243 = safe_mul( _3321,(int)3 );
  }
  int _3323 = _10243;
  int _3324 = _3303->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3325 = mosek::fusion::p_WorkStack::_get_impl(_3303)->i32;
  _checked_ptr_1<int> _ptr__3325(_3325 ? _3325->raw() : nullptr,_3325 ? _3325->size(0) : 0);
  p->getAllIndexes(_3325,_3324);
  _3301->alloc_expr(_3319,_3320,_3321,_3322,_3323);
  std::shared_ptr< monty::ndarray< long long,1 > > _3326 = mosek::fusion::p_WorkStack::_get_impl(_3301)->i64;
  _checked_ptr_1<long long> _ptr__3326(_3326 ? _3326->raw() : nullptr,_3326 ? _3326->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3327 = mosek::fusion::p_WorkStack::_get_impl(_3301)->f64;
  _checked_ptr_1<double> _ptr__3327(_3327 ? _3327->raw() : nullptr,_3327 ? _3327->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3328 = mosek::fusion::p_WorkStack::_get_impl(_3301)->i32;
  _checked_ptr_1<int> _ptr__3328(_3328 ? _3328->raw() : nullptr,_3328 ? _3328->size(0) : 0);
  int _3329 = mosek::fusion::p_WorkStack::_get_impl(_3301)->ptr_base;
  int _3330 = mosek::fusion::p_WorkStack::_get_impl(_3301)->nidxs_base;
  int _3331 = mosek::fusion::p_WorkStack::_get_impl(_3301)->sp_base;
  int _3332 = mosek::fusion::p_WorkStack::_get_impl(_3301)->cof_base;
  bool _3333 = mosek::fusion::p_WorkStack::_get_impl(_3301)->hassp;
  int _3334 = mosek::fusion::p_WorkStack::_get_impl(_3301)->shape_base;
  int _3335 = mosek::fusion::p_WorkStack::_get_impl(_3301)->codeptr_base;
  int _3336 = mosek::fusion::p_WorkStack::_get_impl(_3301)->code_base;
  int _3337 = mosek::fusion::p_WorkStack::_get_impl(_3301)->cconst_base;
  {
    int _10245 = (int)0;
    int _10246 = _3321;
    for (int _3338 = _10245; _3338 < _10246; ++_3338)
    {
      {
        _ptr__3327[safe_add( _3332,_3338 )] = 0.0;
      }
    }
    int _10247 = (int)0;
    int _10248 = safe_add( _3320,(int)1 );
    for (int _3339 = _10247; _3339 < _10248; ++_3339)
    {
      {
        _ptr__3328[safe_add( _3329,_3339 )] = safe_mul( _3339,_3309 );
      }
    }
    int _10249 = (int)0;
    int _10250 = _3319;
    for (int _3340 = _10249; _3340 < _10250; ++_3340)
    {
      {
        _ptr__3328[safe_add( _3334,_3340 )] = p->getDim(_3340);
      }
    }
    if (_3333)
    {
      {
        p->getSp(_3326,_3331);
      }
    }
    {}
    int _10251 = (int)0;
    int _10252 = _3321;
    for (int _3341 = _10251; _3341 < _10252; ++_3341)
    {
      {
        _ptr__3326[safe_add( _3330,_3341 )] = (-(int)999);
      }
    }
    {
      int _3342 = (int)0;
      int _10253 = (int)0;
      int _10254 = _3320;
      for (int _3343 = _10253; _3343 < _10254; ++_3343)
      {
        {
          int _10255 = (int)0;
          int _10256 = _3309;
          for (int _3344 = _10255; _3344 < _10256; ++_3344)
          {
            {
              _ptr__3326[safe_add( _3330,_3342 )] = _ptr__3305[safe_add( _3314,_3344 )];
              ++ _3342;
            }
          }
        }
      }
    }
    _ptr__3328[_3335] = (int)0;
    {
      if ((_3312 == (int)0))
      {
        {
          int _3345 = (int)0;
          int _3346 = (int)0;
          int _10257 = (int)0;
          int _10258 = _3320;
          for (int _3347 = _10257; _3347 < _10258; ++_3347)
          {
            {
              int _10259 = (int)0;
              int _10260 = _3309;
              for (int _3348 = _10259; _3348 < _10260; ++_3348)
              {
                {
                  _ptr__3328[safe_add( _3336,_3346 )] = 2;
                  _ptr__3327[safe_add( _3337,_3346 )] = _ptr__3306[safe_add( _3315,_3348 )];
                  ++ _3346;
                  _ptr__3328[safe_add( _3336,_3346 )] = 1;
                  _ptr__3327[safe_add( _3337,_3346 )] = _ptr__3325[safe_add( _3324,_3347 )];
                  ++ _3346;
                  _ptr__3328[safe_add( _3336,_3346 )] = 5;
                  ++ _3346;
                  _ptr__3328[safe_add( safe_add( _3335,_3345 ),(int)1 )] = _3346;
                  ++ _3345;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _3349 = (int)0;
          int _3350 = (int)0;
          int _10261 = (int)0;
          int _10262 = _3320;
          for (int _3351 = _10261; _3351 < _10262; ++_3351)
          {
            {
              int _10263 = (int)0;
              int _10264 = _3309;
              for (int _3352 = _10263; _3352 < _10264; ++_3352)
              {
                {
                  _ptr__3328[safe_add( _3336,_3349 )] = 2;
                  _ptr__3327[safe_add( _3337,_3349 )] = _ptr__3306[safe_add( _3315,_3352 )];
                  ++ _3349;
                  int _10265 = _ptr__3304[safe_add( _3317,_3352 )];
                  int _10266 = _ptr__3304[safe_add( safe_add( _3317,_3352 ),(int)1 )];
                  for (int _3353 = _10265; _3353 < _10266; ++_3353)
                  {
                    {
                      _ptr__3328[safe_add( _3336,_3349 )] = _ptr__3304[safe_add( _3318,_3353 )];
                      _ptr__3327[safe_add( _3337,_3349 )] = _ptr__3306[safe_add( _3316,_3353 )];
                      ++ _3349;
                    }
                  }
                  _ptr__3328[safe_add( _3336,_3349 )] = 3;
                  ++ _3349;
                  _ptr__3328[safe_add( _3336,_3349 )] = 1;
                  _ptr__3327[safe_add( _3337,_3349 )] = _ptr__3325[safe_add( _3324,_3351 )];
                  ++ _3349;
                  _ptr__3328[safe_add( _3336,_3349 )] = 5;
                  ++ _3349;
                  _ptr__3328[safe_add( safe_add( _3335,_3350 ),(int)1 )] = _3349;
                  ++ _3350;
                }
              }
            }
          }
        }
      }
    }
  }
  _3303->clear();
}
std::string mosek::fusion::ExprMulParamScalarExpr :: toString() { return mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamScalarExpr::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalarExpr("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamScalarExpr::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamScalarExpr::destroy() { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamScalar::ExprMulParamScalar(mosek::fusion::p_ExprMulParamScalar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalar()" << this << std::endl; */ }mosek::fusion::ExprMulParamScalar::~ExprMulParamScalar() {  /* std::cout << "~ExprMulParamScalar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamScalar::p_ExprMulParamScalar  (::mosek::fusion::ExprMulParamScalar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamScalar::t mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar  (monty::rc_ptr< ::mosek::fusion::Parameter > _3354,    monty::rc_ptr< ::mosek::fusion::Expression > _3355){ return new mosek::fusion::ExprMulParamScalar(_3354,_3355); }mosek::fusion::ExprMulParamScalar::ExprMulParamScalar  (monty::rc_ptr< ::mosek::fusion::Parameter > _3354,    monty::rc_ptr< ::mosek::fusion::Expression > _3355) :    ExprMulParamScalar(new mosek::fusion::p_ExprMulParamScalar(this)){ mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->_initialize(_3354,_3355); }void mosek::fusion::p_ExprMulParamScalar::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3354,    monty::rc_ptr< ::mosek::fusion::Expression > _3355){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3355->getShape());
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->p = _3354;
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->e = _3355;
    if ((_3354->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamScalar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3356,monty::rc_ptr< ::mosek::fusion::WorkStack > _3357,monty::rc_ptr< ::mosek::fusion::WorkStack > _3358) { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->eval(_3356,_3357,_3358); }void mosek::fusion::p_ExprMulParamScalar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3356,monty::rc_ptr< ::mosek::fusion::WorkStack > _3357,monty::rc_ptr< ::mosek::fusion::WorkStack > _3358){
  e->eval(_3357,_3356,_3358);
  _3357->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3359 = mosek::fusion::p_WorkStack::_get_impl(_3357)->i32;
  _checked_ptr_1<int> _ptr__3359(_3359 ? _3359->raw() : nullptr,_3359 ? _3359->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3360 = mosek::fusion::p_WorkStack::_get_impl(_3357)->i64;
  _checked_ptr_1<long long> _ptr__3360(_3360 ? _3360->raw() : nullptr,_3360 ? _3360->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3361 = mosek::fusion::p_WorkStack::_get_impl(_3357)->f64;
  _checked_ptr_1<double> _ptr__3361(_3361 ? _3361->raw() : nullptr,_3361 ? _3361->size(0) : 0);
  int _3362 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nd;
  int _3363 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nelem;
  int _3364 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nnz;
  bool _3365 = mosek::fusion::p_WorkStack::_get_impl(_3357)->hassp;
  int _3366 = mosek::fusion::p_WorkStack::_get_impl(_3357)->ptr_base;
  int _3367 = mosek::fusion::p_WorkStack::_get_impl(_3357)->ncodeatom;
  int _3368 = mosek::fusion::p_WorkStack::_get_impl(_3357)->shape_base;
  int _3369 = mosek::fusion::p_WorkStack::_get_impl(_3357)->sp_base;
  int _3370 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nidxs_base;
  int _3371 = mosek::fusion::p_WorkStack::_get_impl(_3357)->cof_base;
  int _3372 = mosek::fusion::p_WorkStack::_get_impl(_3357)->cconst_base;
  int _3373 = mosek::fusion::p_WorkStack::_get_impl(_3357)->codeptr_base;
  int _3374 = mosek::fusion::p_WorkStack::_get_impl(_3357)->code_base;
  int _3375 = _3362;
  int _3376 = _3363;
  int _3377 = _3364;
  bool _3378 = (p->getNumNonzero() < p->getSize());
  int _10267;
  bool _10268 = (_3367 == (int)0);
  if (_10268)
  {
    _10267 = safe_mul( _3364,(int)3 );
  }
  else
  {
    _10267 = safe_add( safe_mul( _3364,(int)4 ),_3367 );
  }
  int _3379 = _10267;
  _3356->alloc_expr(_3375,_3376,_3377,_3378,_3379);
  std::shared_ptr< monty::ndarray< long long,1 > > _3380 = mosek::fusion::p_WorkStack::_get_impl(_3356)->i64;
  _checked_ptr_1<long long> _ptr__3380(_3380 ? _3380->raw() : nullptr,_3380 ? _3380->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3381 = mosek::fusion::p_WorkStack::_get_impl(_3356)->f64;
  _checked_ptr_1<double> _ptr__3381(_3381 ? _3381->raw() : nullptr,_3381 ? _3381->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3382 = mosek::fusion::p_WorkStack::_get_impl(_3356)->i32;
  _checked_ptr_1<int> _ptr__3382(_3382 ? _3382->raw() : nullptr,_3382 ? _3382->size(0) : 0);
  int _3383 = mosek::fusion::p_WorkStack::_get_impl(_3356)->ptr_base;
  int _3384 = mosek::fusion::p_WorkStack::_get_impl(_3356)->nidxs_base;
  int _3385 = mosek::fusion::p_WorkStack::_get_impl(_3356)->sp_base;
  int _3386 = mosek::fusion::p_WorkStack::_get_impl(_3356)->cof_base;
  bool _3387 = mosek::fusion::p_WorkStack::_get_impl(_3356)->hassp;
  int _3388 = mosek::fusion::p_WorkStack::_get_impl(_3356)->shape_base;
  int _3389 = mosek::fusion::p_WorkStack::_get_impl(_3356)->codeptr_base;
  int _3390 = mosek::fusion::p_WorkStack::_get_impl(_3356)->code_base;
  int _3391 = mosek::fusion::p_WorkStack::_get_impl(_3356)->cconst_base;
  int _3392 = p->getIndex((int)0);
  {
    int _10269 = (int)0;
    int _10270 = _3377;
    for (int _3393 = _10269; _3393 < _10270; ++_3393)
    {
      {
        _ptr__3381[safe_add( _3386,_3393 )] = 0.0;
      }
    }
    int _10271 = (int)0;
    int _10272 = safe_add( _3376,(int)1 );
    for (int _3394 = _10271; _3394 < _10272; ++_3394)
    {
      {
        _ptr__3382[safe_add( _3383,_3394 )] = _ptr__3359[safe_add( _3366,_3394 )];
      }
    }
    int _10273 = (int)0;
    int _10274 = _3375;
    for (int _3395 = _10273; _3395 < _10274; ++_3395)
    {
      {
        _ptr__3382[safe_add( _3388,_3395 )] = _ptr__3359[safe_add( _3368,_3395 )];
      }
    }
    int _10275 = (int)0;
    int _10276 = _3364;
    for (int _3396 = _10275; _3396 < _10276; ++_3396)
    {
      {
        _ptr__3380[safe_add( _3384,_3396 )] = _ptr__3360[safe_add( _3370,_3396 )];
      }
    }
    if (_3387)
    {
      {
        int _10277 = (int)0;
        int _10278 = _3376;
        for (int _3397 = _10277; _3397 < _10278; ++_3397)
        {
          {
            _ptr__3380[safe_add( _3385,_3397 )] = _ptr__3360[safe_add( _3369,_3397 )];
          }
        }
      }
    }
    {}
    int _3398 = (int)0;
    _ptr__3382[_3389] = (int)0;
    int _10279 = (int)0;
    int _10280 = _3364;
    for (int _3399 = _10279; _3399 < _10280; ++_3399)
    {
      {
        _ptr__3382[safe_add( _3390,_3398 )] = 2;
        _ptr__3381[safe_add( _3391,_3398 )] = _ptr__3361[safe_add( _3371,_3399 )];
        ++ _3398;
        if ((_3367 > (int)0))
        {
          {
            int _10281 = _ptr__3359[safe_add( _3373,_3399 )];
            int _10282 = _ptr__3359[safe_add( safe_add( _3373,_3399 ),(int)1 )];
            for (int _3400 = _10281; _3400 < _10282; ++_3400)
            {
              {
                _ptr__3382[safe_add( _3390,_3398 )] = _ptr__3359[safe_add( _3374,_3400 )];
                _ptr__3381[safe_add( _3391,_3398 )] = _ptr__3361[safe_add( _3372,_3400 )];
                ++ _3398;
              }
            }
            _ptr__3382[safe_add( _3390,_3398 )] = 3;
            ++ _3398;
          }
        }
        {}
        _ptr__3382[safe_add( _3390,_3398 )] = 1;
        _ptr__3381[safe_add( _3391,_3398 )] = _3392;
        ++ _3398;
        _ptr__3382[safe_add( _3390,_3398 )] = 5;
        ++ _3398;
        _ptr__3382[safe_add( safe_add( _3389,_3399 ),(int)1 )] = _3398;
      }
    }
  }
  _3358->clear();
}
std::string mosek::fusion::ExprMulParamScalar :: toString() { return mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamScalar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalar("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamScalar::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamScalar::destroy() { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft(mosek::fusion::p_ExprMulParamDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulParamDiagLeft::~ExprMulParamDiagLeft() {  /* std::cout << "~ExprMulParamDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamDiagLeft::p_ExprMulParamDiagLeft  (::mosek::fusion::ExprMulParamDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamDiagLeft::t mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3401,    monty::rc_ptr< ::mosek::fusion::Expression > _3402){ return new mosek::fusion::ExprMulParamDiagLeft(_3401,_3402); }mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3401,    monty::rc_ptr< ::mosek::fusion::Expression > _3402) :    ExprMulParamDiagLeft(new mosek::fusion::p_ExprMulParamDiagLeft(this)){ mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->_initialize(_3401,_3402); }void mosek::fusion::p_ExprMulParamDiagLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3401,    monty::rc_ptr< ::mosek::fusion::Expression > _3402){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3402->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->p = _3401;
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->e = _3402;
    if (((_3401->getND() != (int)2) || (_3402->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3401->getDim((int)1) != _3402->getDim((int)0)) || (_3401->getDim((int)0) != _3402->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3403,monty::rc_ptr< ::mosek::fusion::WorkStack > _3404,monty::rc_ptr< ::mosek::fusion::WorkStack > _3405) { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->eval(_3403,_3404,_3405); }void mosek::fusion::p_ExprMulParamDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3403,monty::rc_ptr< ::mosek::fusion::WorkStack > _3404,monty::rc_ptr< ::mosek::fusion::WorkStack > _3405){
  e->eval(_3404,_3403,_3405);
  _3404->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3406 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i32;
  _checked_ptr_1<int> _ptr__3406(_3406 ? _3406->raw() : nullptr,_3406 ? _3406->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3407 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i64;
  _checked_ptr_1<long long> _ptr__3407(_3407 ? _3407->raw() : nullptr,_3407 ? _3407->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3408 = mosek::fusion::p_WorkStack::_get_impl(_3404)->f64;
  _checked_ptr_1<double> _ptr__3408(_3408 ? _3408->raw() : nullptr,_3408 ? _3408->size(0) : 0);
  int _3409 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nd;
  int _3410 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nelem;
  int _3411 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nnz;
  bool _3412 = mosek::fusion::p_WorkStack::_get_impl(_3404)->hassp;
  int _3413 = mosek::fusion::p_WorkStack::_get_impl(_3404)->ptr_base;
  int _3414 = mosek::fusion::p_WorkStack::_get_impl(_3404)->ncodeatom;
  int _3415 = mosek::fusion::p_WorkStack::_get_impl(_3404)->shape_base;
  int _3416 = mosek::fusion::p_WorkStack::_get_impl(_3404)->sp_base;
  int _3417 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nidxs_base;
  int _3418 = mosek::fusion::p_WorkStack::_get_impl(_3404)->cof_base;
  int _3419 = mosek::fusion::p_WorkStack::_get_impl(_3404)->cconst_base;
  int _3420 = mosek::fusion::p_WorkStack::_get_impl(_3404)->codeptr_base;
  int _3421 = mosek::fusion::p_WorkStack::_get_impl(_3404)->code_base;
  if (((_3409 != (int)2) || ((_ptr__3406[_3415] != p->getDim((int)1)) || (_ptr__3406[safe_add( _3415,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int _3422 = p->getNumNonzero();
  int _3423 = _3405->alloci64(_3422);
  std::shared_ptr< monty::ndarray< long long,1 > > _3424 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i64;
  _checked_ptr_1<long long> _ptr__3424(_3424 ? _3424->raw() : nullptr,_3424 ? _3424->size(0) : 0);
  p->getSp(_3424,_3423);
  int _3425 = p->getDim((int)0);
  int _3426 = p->getDim((int)1);
  int _3427 = _ptr__3406[_3415];
  int _3428 = _ptr__3406[safe_add( _3415,(int)1 )];
  int _3429 = _3405->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3430 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i32;
  _checked_ptr_1<int> _ptr__3430(_3430 ? _3430->raw() : nullptr,_3430 ? _3430->size(0) : 0);
  p->getAllIndexes(_3430,_3429);
  if (_3412)
  {
    {
      int _3431 = _3405->alloci32(_3410);
      int _3432 = _3405->alloci32(safe_add( _3428,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3433 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i32;
      _checked_ptr_1<int> _ptr__3433(_3433 ? _3433->raw() : nullptr,_3433 ? _3433->size(0) : 0);
      int _10283 = (int)0;
      int _10284 = safe_add( _3428,(int)1 );
      for (int _3434 = _10283; _3434 < _10284; ++_3434)
      {
        {
          _ptr__3433[safe_add( _3432,_3434 )] = (int)0;
        }
      }
      int _10285 = (int)0;
      int _10286 = _3410;
      for (int _3435 = _10285; _3435 < _10286; ++_3435)
      {
        {
          ++ _ptr__3433[safe_add( safe_add( _3432,(_ptr__3407[safe_add( _3416,_3435 )] % _3428) ),(int)1 )];
        }
      }
      int _10287 = (int)0;
      int _10288 = _3428;
      for (int _3436 = _10287; _3436 < _10288; ++_3436)
      {
        {
          _ptr__3433[safe_add( safe_add( _3432,_3436 ),(int)1 )] += _ptr__3433[safe_add( _3432,_3436 )];
        }
      }
      int _10289 = (int)0;
      int _10290 = _3410;
      for (int _3437 = _10289; _3437 < _10290; ++_3437)
      {
        {
          long long _3438 = (_ptr__3407[safe_add( _3416,_3437 )] % _3428);
          _ptr__3433[safe_add( _3431,_ptr__3433[safe_add( _3432,_3438 )] )] = _3437;
          ++ _ptr__3433[safe_add( _3432,_3438 )];
        }
      }
      int _3439 = (int)0;
      int _3440 = (int)0;
      int _3441 = (int)0;
      {
        int _3442 = (int)0;
        int _3443 = (int)0;
        while ( ((_3443 < _3422) && (_3442 < _3410)) )
        {
          {
            int _3444 = _ptr__3433[safe_add( _3431,_3442 )];
            long long _3445 = (_ptr__3424[safe_add( _3423,_3443 )] / _3426);
            long long _3446 = (_ptr__3407[safe_add( _3416,_3444 )] % _3428);
            if ((_3445 < _3446))
            {
              {
                while ( ((_3443 < _3422) && (_ptr__3424[safe_add( _3423,_3443 )] < safe_mul( safe_add( _3445,(int)1 ),_3426 ))) )
                {
                  {
                    ++ _3443;
                  }
                }
              }
            }
            else if((_3446 < _3445))
            {
              {
                while ( ((_3442 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3442 )] )] % _3428) == _3446)) )
                {
                  {
                    ++ _3442;
                  }
                }
              }
            }
            else
            {
              {
                int _3447 = _3442;
                int _3448 = _3443;
                while ( ((_3443 < _3422) && (_ptr__3424[safe_add( _3423,_3443 )] < safe_mul( safe_add( _3445,(int)1 ),_3426 ))) )
                {
                  {
                    ++ _3443;
                  }
                }
                while ( ((_3442 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3442 )] )] % _3428) == _3446)) )
                {
                  {
                    ++ _3442;
                  }
                }
                bool _3449 = false;
                while ( ((_3448 < _3443) && (_3447 < _3442)) )
                {
                  {
                    long long _3450 = (_ptr__3424[safe_add( _3423,_3448 )] % _3426);
                    int _3451 = _ptr__3433[safe_add( _3431,_3447 )];
                    long long _3452 = (_ptr__3407[safe_add( _3416,_3451 )] / _3428);
                    if ((_3450 < _3452))
                    {
                      {
                        ++ _3448;
                      }
                    }
                    else if((_3450 > _3452))
                    {
                      {
                        ++ _3447;
                      }
                    }
                    else
                    {
                      {
                        _3440 += (_ptr__3406[safe_add( safe_add( _3413,_3451 ),(int)1 )] - _ptr__3406[safe_add( _3413,_3451 )]);
                        _3449 = true;
                        int _3453 = (_ptr__3406[safe_add( safe_add( _3413,_3451 ),(int)1 )] - _ptr__3406[safe_add( _3413,_3451 )]);
                        int _10291;
                        bool _10292 = (_3414 > (int)0);
                        if (_10292)
                        {
                          _10291 = safe_add( (_ptr__3406[safe_add( _3420,_ptr__3406[safe_add( safe_add( _3413,_3451 ),(int)1 )] )] - _ptr__3406[safe_add( _3420,_ptr__3406[safe_add( _3413,_3451 )] )]),safe_mul( (int)4,_3453 ) );
                        }
                        else
                        {
                          _10291 = safe_mul( (int)3,_3453 );
                        }
                        _3441 += _10291;
                        ++ _3448;
                        ++ _3447;
                      }
                    }
                  }
                }
                if (_3449)
                {
                  {
                    ++ _3439;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int _3454 = (int)1;
      bool _3455 = (_3439 < _3425);
      _3403->alloc_expr(_3454,_3439,_3440,_3455,_3441);
      std::shared_ptr< monty::ndarray< long long,1 > > _3456 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i64;
      _checked_ptr_1<long long> _ptr__3456(_3456 ? _3456->raw() : nullptr,_3456 ? _3456->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3457 = mosek::fusion::p_WorkStack::_get_impl(_3403)->f64;
      _checked_ptr_1<double> _ptr__3457(_3457 ? _3457->raw() : nullptr,_3457 ? _3457->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3458 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i32;
      _checked_ptr_1<int> _ptr__3458(_3458 ? _3458->raw() : nullptr,_3458 ? _3458->size(0) : 0);
      int _3459 = mosek::fusion::p_WorkStack::_get_impl(_3403)->ptr_base;
      int _3460 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nidxs_base;
      int _10293;
      bool _10294 = _3455;
      if (_10294)
      {
        _10293 = mosek::fusion::p_WorkStack::_get_impl(_3403)->sp_base;
      }
      else
      {
        _10293 = _3403->alloci64(_3439);
      }
      int _3461 = _10293;
      int _3462 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cof_base;
      bool _3463 = mosek::fusion::p_WorkStack::_get_impl(_3403)->hassp;
      int _3464 = mosek::fusion::p_WorkStack::_get_impl(_3403)->shape_base;
      int _3465 = mosek::fusion::p_WorkStack::_get_impl(_3403)->codeptr_base;
      int _3466 = mosek::fusion::p_WorkStack::_get_impl(_3403)->code_base;
      int _3467 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cconst_base;
      if ((_3439 > (int)0))
      {
        {
          _ptr__3458[_3459] = (int)0;
          if ((_3440 > (int)0))
          {
            {
              _ptr__3458[_3465] = (int)0;
            }
          }
          {}
          _ptr__3458[_3464] = (int)_3425;
          int _3468 = (int)0;
          int _3469 = (int)0;
          int _3470 = (int)0;
          int _3471 = (int)0;
          int _3472 = (int)0;
          while ( ((_3472 < _3422) && (_3471 < _3410)) )
          {
            {
              int _3473 = _ptr__3433[safe_add( _3431,_3471 )];
              long long _3474 = (_ptr__3424[safe_add( _3423,_3472 )] / _3426);
              long long _3475 = (_ptr__3407[safe_add( _3416,_3473 )] % _3428);
              if ((_3474 < _3475))
              {
                {
                  while ( ((_3472 < _3422) && (_ptr__3424[safe_add( _3423,_3472 )] < safe_mul( safe_add( _3474,(int)1 ),_3426 ))) )
                  {
                    {
                      ++ _3472;
                    }
                  }
                }
              }
              else if((_3475 < _3474))
              {
                {
                  while ( ((_3471 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3471 )] )] % _3428) == _3475)) )
                  {
                    {
                      ++ _3471;
                    }
                  }
                }
              }
              else
              {
                {
                  int _3476 = _3471;
                  int _3477 = _3472;
                  while ( ((_3472 < _3422) && (_ptr__3424[safe_add( _3423,_3472 )] < safe_mul( safe_add( _3474,(int)1 ),_3426 ))) )
                  {
                    {
                      ++ _3472;
                    }
                  }
                  while ( ((_3471 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3471 )] )] % _3428) == _3475)) )
                  {
                    {
                      ++ _3471;
                    }
                  }
                  int _3478 = (int)0;
                  while ( ((_3477 < _3472) && (_3476 < _3471)) )
                  {
                    {
                      long long _3479 = (_ptr__3424[safe_add( _3423,_3477 )] % _3426);
                      int _3480 = _ptr__3433[safe_add( _3431,_3476 )];
                      long long _3481 = (_ptr__3407[safe_add( _3416,_3480 )] / _3428);
                      if ((_3479 < _3481))
                      {
                        {
                          ++ _3477;
                        }
                      }
                      else if((_3479 > _3481))
                      {
                        {
                          ++ _3476;
                        }
                      }
                      else
                      {
                        {
                          int _10295 = _ptr__3406[safe_add( _3413,_3480 )];
                          int _10296 = _ptr__3406[safe_add( safe_add( _3413,_3480 ),(int)1 )];
                          for (int _3482 = _10295; _3482 < _10296; ++_3482)
                          {
                            {
                              _ptr__3457[safe_add( _3462,_3470 )] = 0.0;
                              _ptr__3456[safe_add( _3460,_3470 )] = _ptr__3407[safe_add( _3417,_3482 )];
                              _ptr__3458[safe_add( _3466,_3468 )] = 2;
                              _ptr__3457[safe_add( _3467,_3468 )] = _ptr__3408[safe_add( _3418,_3482 )];
                              ++ _3468;
                              if ((_3414 > (int)0))
                              {
                                {
                                  int _10297 = _ptr__3406[safe_add( _3420,_3482 )];
                                  int _10298 = _ptr__3406[safe_add( safe_add( _3420,_3482 ),(int)1 )];
                                  for (int _3483 = _10297; _3483 < _10298; ++_3483)
                                  {
                                    {
                                      _ptr__3458[safe_add( _3466,_3468 )] = _ptr__3406[safe_add( _3421,_3483 )];
                                      _ptr__3457[safe_add( _3467,_3468 )] = _ptr__3408[safe_add( _3419,_3483 )];
                                      ++ _3468;
                                    }
                                  }
                                  _ptr__3458[safe_add( _3466,_3468 )] = 3;
                                  ++ _3468;
                                }
                              }
                              {}
                              _ptr__3458[safe_add( _3466,_3468 )] = 1;
                              _ptr__3457[safe_add( _3467,_3468 )] = _ptr__3433[safe_add( _3429,_3477 )];
                              ++ _3468;
                              _ptr__3458[safe_add( _3466,_3468 )] = 5;
                              ++ _3468;
                              _ptr__3458[safe_add( safe_add( _3465,_3470 ),(int)1 )] = _3468;
                              ++ _3470;
                            }
                          }
                          ++ _3477;
                          ++ _3476;
                          ++ _3478;
                        }
                      }
                    }
                  }
                  if ((_3478 > (int)0))
                  {
                    {
                      _ptr__3456[safe_add( _3461,_3469 )] = _3474;
                      _ptr__3458[safe_add( safe_add( _3459,_3469 ),(int)1 )] = _3470;
                      ++ _3469;
                    }
                  }
                  {}
                }
              }
            }
          }
        }
      }
      {}
      if ((!_3463))
      {
        {
          _3403->popi64(_3439);
        }
      }
      {}
      _3405->clear();
    }
  }
  else
  {
    {
      int _3484 = (int)0;
      int _3485 = (int)0;
      int _3486 = (int)0;
      std::shared_ptr< monty::ndarray< int,1 > > _3487 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i32;
      _checked_ptr_1<int> _ptr__3487(_3487 ? _3487->raw() : nullptr,_3487 ? _3487->size(0) : 0);
      {
        int _3488 = (int)0;
        while ( (_3488 < _3422) )
        {
          {
            long long _3489 = (_ptr__3424[safe_add( _3423,_3488 )] / _3426);
            long long _3490 = safe_mul( safe_add( _3489,(int)1 ),_3426 );
            bool _3491 = false;
            while ( ((_3488 < _3422) && (_ptr__3424[safe_add( _3423,_3488 )] < _3490)) )
            {
              {
                long long _3492 = (_ptr__3424[safe_add( _3423,_3488 )] % _3426);
                long long _3493 = safe_add( safe_mul( _3492,_3428 ),_3489 );
                int _3494 = (_ptr__3406[safe_add( safe_add( _3413,_3493 ),(int)1 )] - _ptr__3406[safe_add( _3413,_3493 )]);
                _3485 += _3494;
                _3491 = true;
                int _10299;
                bool _10300 = (_3414 > (int)0);
                if (_10300)
                {
                  _10299 = safe_add( (_ptr__3406[safe_add( _3420,_ptr__3406[safe_add( safe_add( _3413,_3493 ),(int)1 )] )] - _ptr__3406[safe_add( _3420,_ptr__3406[safe_add( _3413,_3493 )] )]),safe_mul( _3494,(int)4 ) );
                }
                else
                {
                  _10299 = safe_mul( _3494,(int)3 );
                }
                _3486 += _10299;
                ++ _3488;
              }
            }
            if (_3491)
            {
              {
                ++ _3484;
              }
            }
            {}
          }
        }
      }
      int _3495 = (int)1;
      bool _3496 = (_3484 < _3425);
      _3403->alloc_expr(_3495,_3484,_3485,_3496,_3486);
      std::shared_ptr< monty::ndarray< long long,1 > > _3497 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i64;
      _checked_ptr_1<long long> _ptr__3497(_3497 ? _3497->raw() : nullptr,_3497 ? _3497->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3498 = mosek::fusion::p_WorkStack::_get_impl(_3403)->f64;
      _checked_ptr_1<double> _ptr__3498(_3498 ? _3498->raw() : nullptr,_3498 ? _3498->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3499 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i32;
      _checked_ptr_1<int> _ptr__3499(_3499 ? _3499->raw() : nullptr,_3499 ? _3499->size(0) : 0);
      int _3500 = mosek::fusion::p_WorkStack::_get_impl(_3403)->ptr_base;
      int _3501 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nidxs_base;
      int _10301;
      bool _10302 = _3496;
      if (_10302)
      {
        _10301 = mosek::fusion::p_WorkStack::_get_impl(_3403)->sp_base;
      }
      else
      {
        _10301 = _3403->alloci64(_3484);
      }
      int _3502 = _10301;
      int _3503 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cof_base;
      bool _3504 = mosek::fusion::p_WorkStack::_get_impl(_3403)->hassp;
      int _3505 = mosek::fusion::p_WorkStack::_get_impl(_3403)->shape_base;
      int _3506 = mosek::fusion::p_WorkStack::_get_impl(_3403)->codeptr_base;
      int _3507 = mosek::fusion::p_WorkStack::_get_impl(_3403)->code_base;
      int _3508 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cconst_base;
      {
        _ptr__3499[_3500] = (int)0;
        _ptr__3499[_3506] = (int)0;
        _ptr__3499[_3505] = (int)_3425;
        int _3509 = (int)0;
        int _3510 = (int)0;
        int _3511 = (int)0;
        int _3512 = (int)0;
        while ( (_3512 < _3422) )
        {
          {
            long long _3513 = (_ptr__3424[safe_add( _3423,_3512 )] / _3426);
            long long _3514 = safe_mul( safe_add( _3513,(int)1 ),_3426 );
            int _3515 = (int)0;
            while ( ((_3512 < _3422) && (_ptr__3424[safe_add( _3423,_3512 )] < _3514)) )
            {
              {
                long long _3516 = (_ptr__3424[safe_add( _3423,_3512 )] % _3426);
                long long _3517 = safe_add( safe_mul( _3516,_3428 ),_3513 );
                int _10303 = _ptr__3406[safe_add( _3413,_3517 )];
                int _10304 = _ptr__3406[safe_add( safe_add( _3413,_3517 ),(int)1 )];
                for (int _3518 = _10303; _3518 < _10304; ++_3518)
                {
                  {
                    _ptr__3497[safe_add( _3501,_3511 )] = _ptr__3407[safe_add( _3417,_3518 )];
                    _ptr__3498[safe_add( _3503,_3511 )] = 0.0;
                    _ptr__3499[safe_add( _3507,_3509 )] = 2;
                    _ptr__3498[safe_add( _3508,_3509 )] = _ptr__3408[safe_add( _3418,_3518 )];
                    ++ _3509;
                    if ((_3414 > (int)0))
                    {
                      {
                        int _10305 = _ptr__3406[safe_add( _3420,_3518 )];
                        int _10306 = _ptr__3406[safe_add( safe_add( _3420,_3518 ),(int)1 )];
                        for (int _3519 = _10305; _3519 < _10306; ++_3519)
                        {
                          {
                            _ptr__3499[safe_add( _3507,_3509 )] = _ptr__3406[safe_add( _3421,_3519 )];
                            _ptr__3498[safe_add( _3508,_3509 )] = _ptr__3408[safe_add( _3419,_3519 )];
                            ++ _3509;
                          }
                        }
                        _ptr__3499[safe_add( _3507,_3509 )] = 3;
                        ++ _3509;
                      }
                    }
                    {}
                    _ptr__3499[safe_add( _3507,_3509 )] = 1;
                    _ptr__3498[safe_add( _3508,_3509 )] = _ptr__3487[safe_add( _3429,_3512 )];
                    ++ _3509;
                    _ptr__3499[safe_add( _3507,_3509 )] = 5;
                    ++ _3509;
                    _ptr__3499[safe_add( safe_add( _3506,_3511 ),(int)1 )] = _3509;
                    ++ _3511;
                  }
                }
                ++ _3515;
                ++ _3512;
              }
            }
            if ((_3515 > (int)0))
            {
              {
                _ptr__3497[safe_add( _3502,_3510 )] = _3513;
                _ptr__3499[safe_add( safe_add( _3500,_3510 ),(int)1 )] = _3511;
                ++ _3510;
              }
            }
            {}
          }
        }
      }
      if ((!_3504))
      {
        {
          _3403->popi64(_3484);
        }
      }
      {}
      _3405->clear();
    }
  }
}
std::string mosek::fusion::ExprMulParamDiagLeft :: toString() { return mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamDiagLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamDiagLeft::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamDiagLeft::destroy() { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight(mosek::fusion::p_ExprMulParamDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulParamDiagRight::~ExprMulParamDiagRight() {  /* std::cout << "~ExprMulParamDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamDiagRight::p_ExprMulParamDiagRight  (::mosek::fusion::ExprMulParamDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamDiagRight::t mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3520,    monty::rc_ptr< ::mosek::fusion::Parameter > _3521){ return new mosek::fusion::ExprMulParamDiagRight(_3520,_3521); }mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3520,    monty::rc_ptr< ::mosek::fusion::Parameter > _3521) :    ExprMulParamDiagRight(new mosek::fusion::p_ExprMulParamDiagRight(this)){ mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->_initialize(_3520,_3521); }void mosek::fusion::p_ExprMulParamDiagRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3520,    monty::rc_ptr< ::mosek::fusion::Parameter > _3521){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3520->getDim((int)0))}));
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->p = _3521;
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->e = _3520;
    if (((_3521->getND() != (int)2) || (_3520->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3521->getDim((int)1) != _3520->getDim((int)0)) || (_3521->getDim((int)0) != _3520->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3522,monty::rc_ptr< ::mosek::fusion::WorkStack > _3523,monty::rc_ptr< ::mosek::fusion::WorkStack > _3524) { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->eval(_3522,_3523,_3524); }void mosek::fusion::p_ExprMulParamDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3522,monty::rc_ptr< ::mosek::fusion::WorkStack > _3523,monty::rc_ptr< ::mosek::fusion::WorkStack > _3524){
  e->eval(_3523,_3522,_3524);
  _3523->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3525 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i32;
  _checked_ptr_1<int> _ptr__3525(_3525 ? _3525->raw() : nullptr,_3525 ? _3525->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3526 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i64;
  _checked_ptr_1<long long> _ptr__3526(_3526 ? _3526->raw() : nullptr,_3526 ? _3526->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3527 = mosek::fusion::p_WorkStack::_get_impl(_3523)->f64;
  _checked_ptr_1<double> _ptr__3527(_3527 ? _3527->raw() : nullptr,_3527 ? _3527->size(0) : 0);
  int _3528 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nd;
  int _3529 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nelem;
  int _3530 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nnz;
  bool _3531 = mosek::fusion::p_WorkStack::_get_impl(_3523)->hassp;
  int _3532 = mosek::fusion::p_WorkStack::_get_impl(_3523)->ptr_base;
  int _3533 = mosek::fusion::p_WorkStack::_get_impl(_3523)->ncodeatom;
  int _3534 = mosek::fusion::p_WorkStack::_get_impl(_3523)->shape_base;
  int _3535 = mosek::fusion::p_WorkStack::_get_impl(_3523)->sp_base;
  int _3536 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nidxs_base;
  int _3537 = mosek::fusion::p_WorkStack::_get_impl(_3523)->cof_base;
  int _3538 = mosek::fusion::p_WorkStack::_get_impl(_3523)->cconst_base;
  int _3539 = mosek::fusion::p_WorkStack::_get_impl(_3523)->codeptr_base;
  int _3540 = mosek::fusion::p_WorkStack::_get_impl(_3523)->code_base;
  if (((_3528 != (int)2) || ((_ptr__3525[_3534] != p->getDim((int)1)) || (_ptr__3525[safe_add( _3534,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int _3541 = p->getNumNonzero();
  int _3542 = _3524->alloci64(_3541);
  std::shared_ptr< monty::ndarray< long long,1 > > _3543 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i64;
  _checked_ptr_1<long long> _ptr__3543(_3543 ? _3543->raw() : nullptr,_3543 ? _3543->size(0) : 0);
  int _3544 = _3524->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3545 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i32;
  _checked_ptr_1<int> _ptr__3545(_3545 ? _3545->raw() : nullptr,_3545 ? _3545->size(0) : 0);
  p->getAllIndexes(_3545,_3544);
  p->getSp(_3543,_3542);
  int _3546 = p->getDim((int)0);
  int _3547 = p->getDim((int)1);
  int _3548 = _ptr__3525[_3534];
  int _3549 = _ptr__3525[safe_add( _3534,(int)1 )];
  int _3550 = _3524->alloci32(_3541);
  int _3551 = _3524->alloci32(safe_add( _3547,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _3552 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i32;
  _checked_ptr_1<int> _ptr__3552(_3552 ? _3552->raw() : nullptr,_3552 ? _3552->size(0) : 0);
  int _10307 = (int)0;
  int _10308 = safe_add( _3547,(int)1 );
  for (int _3553 = _10307; _3553 < _10308; ++_3553)
  {
    {
      _ptr__3552[safe_add( _3551,_3553 )] = (int)0;
    }
  }
  int _10309 = (int)0;
  int _10310 = _3541;
  for (int _3554 = _10309; _3554 < _10310; ++_3554)
  {
    {
      ++ _ptr__3552[safe_add( safe_add( _3551,(_ptr__3543[safe_add( _3542,_3554 )] % _3547) ),(int)1 )];
    }
  }
  int _10311 = (int)1;
  int _10312 = _3547;
  for (int _3555 = _10311; _3555 < _10312; ++_3555)
  {
    {
      _ptr__3552[safe_add( _3551,_3555 )] += _ptr__3552[(safe_add( _3551,_3555 ) - (int)1)];
    }
  }
  int _10313 = (int)0;
  int _10314 = _3541;
  for (int _3556 = _10313; _3556 < _10314; ++_3556)
  {
    {
      long long _3557 = (_ptr__3543[safe_add( _3542,_3556 )] % _3547);
      _ptr__3552[safe_add( _3550,_ptr__3552[safe_add( _3551,_3557 )] )] = _3556;
      ++ _ptr__3552[safe_add( _3551,_3557 )];
    }
  }
  if (_3531)
  {
    {
      int _3558 = (int)0;
      int _3559 = (int)0;
      int _3560 = (int)0;
      int _3561 = (int)0;
      int _3562 = (int)0;
      while ( ((_3562 < _3529) && (_3561 < _3541)) )
      {
        {
          long long _3563 = (_ptr__3526[safe_add( _3535,_3562 )] / _3549);
          long long _3564 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3561 )] )] % _3547);
          if ((_3563 < _3564))
          {
            {
              ++ _3562;
            }
          }
          else if((_3563 > _3564))
          {
            {
              ++ _3561;
            }
          }
          else
          {
            {
              int _3565 = _3562;
              ++ _3562;
              int _3566 = _3561;
              ++ _3561;
              while ( ((_3562 < _3529) && ((_ptr__3526[safe_add( _3535,_3562 )] / _3549) == _3563)) )
              {
                {
                  ++ _3562;
                }
              }
              while ( ((_3561 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3561 )] )] % _3547) == _3564)) )
              {
                {
                  ++ _3561;
                }
              }
              int _3567 = _3566;
              int _3568 = _3565;
              bool _3569 = false;
              while ( ((_3568 < _3562) && (_3567 < _3561)) )
              {
                {
                  long long _3570 = (_ptr__3526[safe_add( _3535,_3568 )] % _3549);
                  long long _3571 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3567 )] )] / _3547);
                  if ((_3570 < _3571))
                  {
                    {
                      ++ _3568;
                    }
                  }
                  else if((_3570 > _3571))
                  {
                    {
                      ++ _3567;
                    }
                  }
                  else
                  {
                    {
                      _3569 = true;
                      int _3572 = (_ptr__3525[safe_add( safe_add( _3532,_3568 ),(int)1 )] - _ptr__3525[safe_add( _3532,_3568 )]);
                      _3560 += _3572;
                      int _10315;
                      bool _10316 = (_3533 > (int)0);
                      if (_10316)
                      {
                        _10315 = safe_add( (_ptr__3525[safe_add( _3539,_ptr__3525[safe_add( safe_add( _3532,_3568 ),(int)1 )] )] - _ptr__3525[safe_add( _3539,_ptr__3525[safe_add( _3532,_3568 )] )]),safe_mul( _3572,(int)4 ) );
                      }
                      else
                      {
                        _10315 = safe_mul( _3572,(int)3 );
                      }
                      _3558 += _10315;
                      ++ _3568;
                      ++ _3567;
                    }
                  }
                }
              }
              if (_3569)
              {
                {
                  ++ _3559;
                }
              }
              {}
            }
          }
        }
      }
      int _3573 = (int)1;
      bool _3574 = (_3559 < _3548);
      _3522->alloc_expr(_3573,_3559,_3560,_3574,_3558);
      int _3575 = mosek::fusion::p_WorkStack::_get_impl(_3522)->ptr_base;
      int _3576 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nidxs_base;
      int _10317;
      bool _10318 = _3574;
      if (_10318)
      {
        _10317 = mosek::fusion::p_WorkStack::_get_impl(_3522)->sp_base;
      }
      else
      {
        _10317 = _3522->alloci64(_3559);
      }
      int _3577 = _10317;
      int _3578 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cof_base;
      bool _3579 = mosek::fusion::p_WorkStack::_get_impl(_3522)->hassp;
      int _3580 = mosek::fusion::p_WorkStack::_get_impl(_3522)->shape_base;
      int _3581 = mosek::fusion::p_WorkStack::_get_impl(_3522)->codeptr_base;
      int _3582 = mosek::fusion::p_WorkStack::_get_impl(_3522)->code_base;
      int _3583 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3584 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i64;
      _checked_ptr_1<long long> _ptr__3584(_3584 ? _3584->raw() : nullptr,_3584 ? _3584->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3585 = mosek::fusion::p_WorkStack::_get_impl(_3522)->f64;
      _checked_ptr_1<double> _ptr__3585(_3585 ? _3585->raw() : nullptr,_3585 ? _3585->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3586 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i32;
      _checked_ptr_1<int> _ptr__3586(_3586 ? _3586->raw() : nullptr,_3586 ? _3586->size(0) : 0);
      if ((_3559 > (int)0))
      {
        {
          _ptr__3586[_3575] = (int)0;
          if ((_3558 > (int)0))
          {
            {
              _ptr__3586[_3581] = (int)0;
            }
          }
          {}
          _ptr__3586[_3580] = (int)_3548;
          int _3587 = (int)0;
          int _3588 = (int)0;
          int _3589 = (int)0;
          int _3590 = (int)0;
          int _3591 = (int)0;
          while ( ((_3591 < _3529) && (_3590 < _3541)) )
          {
            {
              long long _3592 = (_ptr__3526[safe_add( _3535,_3591 )] / _3549);
              long long _3593 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3590 )] )] % _3547);
              if ((_3592 < _3593))
              {
                {
                  while ( ((_3591 < _3529) && ((_ptr__3526[safe_add( _3535,_3591 )] / _3549) == _3592)) )
                  {
                    {
                      ++ _3591;
                    }
                  }
                }
              }
              else if((_3592 > _3593))
              {
                {
                  while ( ((_3590 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3590 )] )] % _3547) == _3593)) )
                  {
                    {
                      ++ _3590;
                    }
                  }
                }
              }
              else
              {
                {
                  int _3594 = _3591;
                  ++ _3591;
                  int _3595 = _3590;
                  ++ _3590;
                  while ( ((_3591 < _3529) && ((_ptr__3526[safe_add( _3535,_3591 )] / _3549) == _3592)) )
                  {
                    {
                      ++ _3591;
                    }
                  }
                  while ( ((_3590 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3590 )] )] % _3547) == _3593)) )
                  {
                    {
                      ++ _3590;
                    }
                  }
                  int _3596 = _3595;
                  int _3597 = _3594;
                  int _3598 = (int)0;
                  while ( ((_3597 < _3591) && (_3596 < _3590)) )
                  {
                    {
                      long long _3599 = (_ptr__3526[safe_add( _3535,_3597 )] % _3549);
                      long long _3600 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3596 )] )] / _3547);
                      if ((_3599 < _3600))
                      {
                        {
                          ++ _3597;
                        }
                      }
                      else if((_3599 > _3600))
                      {
                        {
                          ++ _3596;
                        }
                      }
                      else
                      {
                        {
                          int _10319 = _ptr__3525[safe_add( _3532,_3597 )];
                          int _10320 = _ptr__3525[safe_add( safe_add( _3532,_3597 ),(int)1 )];
                          for (int _3601 = _10319; _3601 < _10320; ++_3601)
                          {
                            {
                              _ptr__3584[safe_add( _3576,_3589 )] = _ptr__3526[safe_add( _3536,_3601 )];
                              _ptr__3585[safe_add( _3578,_3589 )] = 0.0;
                              _ptr__3586[safe_add( _3582,_3587 )] = 2;
                              _ptr__3585[safe_add( _3583,_3587 )] = _ptr__3527[safe_add( _3537,_3601 )];
                              ++ _3587;
                              if ((_3533 > (int)0))
                              {
                                {
                                  int _10321 = _ptr__3525[safe_add( _3539,_3601 )];
                                  int _10322 = _ptr__3525[safe_add( safe_add( _3539,_3601 ),(int)1 )];
                                  for (int _3602 = _10321; _3602 < _10322; ++_3602)
                                  {
                                    {
                                      _ptr__3586[safe_add( _3582,_3587 )] = _ptr__3525[safe_add( _3540,_3602 )];
                                      _ptr__3585[safe_add( _3583,_3587 )] = _ptr__3527[safe_add( _3538,_3602 )];
                                      ++ _3587;
                                    }
                                  }
                                  _ptr__3586[safe_add( _3582,_3587 )] = 3;
                                  ++ _3587;
                                }
                              }
                              {}
                              _ptr__3586[safe_add( _3582,_3587 )] = 1;
                              _ptr__3585[safe_add( _3583,_3587 )] = _ptr__3552[safe_add( _3544,_ptr__3552[safe_add( _3550,_3596 )] )];
                              ++ _3587;
                              _ptr__3586[safe_add( _3582,_3587 )] = 5;
                              ++ _3587;
                              _ptr__3586[safe_add( safe_add( _3581,_3589 ),(int)1 )] = _3587;
                              ++ _3589;
                            }
                          }
                          ++ _3598;
                          ++ _3597;
                          ++ _3596;
                        }
                      }
                    }
                  }
                  if ((_3598 > (int)0))
                  {
                    {
                      _ptr__3584[safe_add( _3577,_3588 )] = _3592;
                      _ptr__3586[safe_add( safe_add( _3575,_3588 ),(int)1 )] = _3589;
                      ++ _3588;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((_3559 > _ptr__3586[_3580]))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
            }
          }
          {}
          if ((_3588 != _3559))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_3589 != _3589))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
        }
      }
      {}
      if ((!_3579))
      {
        {
          _3522->popi64(_3559);
        }
      }
      {}
      _3524->clear();
    }
  }
  else
  {
    {
      int _3603 = (int)0;
      int _3604 = (int)0;
      int _3605 = (int)0;
      int _3606 = (int)0;
      while ( (_3606 < _3541) )
      {
        {
          long long _3607 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3606 )] )] % _3547);
          int _3608 = _3606;
          ++ _3606;
          while ( ((_3606 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3606 )] )] % _3547) == _3607)) )
          {
            {
              ++ _3606;
            }
          }
          int _10323 = _3608;
          int _10324 = _3606;
          for (int _3609 = _10323; _3609 < _10324; ++_3609)
          {
            {
              long long _3610 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3606 )] )] / _3547);
              long long _3611 = safe_add( safe_mul( _3607,_3549 ),_3610 );
              int _3612 = (_ptr__3525[safe_add( safe_add( _3532,_3611 ),(int)1 )] - _ptr__3525[safe_add( _3532,_3611 )]);
              _3605 += _3612;
              int _10325;
              bool _10326 = (_3533 > (int)0);
              if (_10326)
              {
                _10325 = safe_add( (_ptr__3525[safe_add( _3539,_ptr__3525[safe_add( safe_add( _3532,_3611 ),(int)1 )] )] - _ptr__3525[safe_add( _3539,_ptr__3525[safe_add( _3532,_3611 )] )]),safe_mul( _3612,(int)4 ) );
              }
              else
              {
                _10325 = safe_mul( _3612,(int)3 );
              }
              _3603 += _10325;
            }
          }
          ++ _3604;
        }
      }
      int _3613 = (int)1;
      bool _3614 = (_3604 < _3548);
      _3522->alloc_expr(_3613,_3604,_3605,_3614,_3603);
      int _3615 = mosek::fusion::p_WorkStack::_get_impl(_3522)->ptr_base;
      int _3616 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nidxs_base;
      int _10327;
      bool _10328 = _3614;
      if (_10328)
      {
        _10327 = mosek::fusion::p_WorkStack::_get_impl(_3522)->sp_base;
      }
      else
      {
        _10327 = _3522->alloci64(_3604);
      }
      int _3617 = _10327;
      int _3618 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cof_base;
      bool _3619 = mosek::fusion::p_WorkStack::_get_impl(_3522)->hassp;
      int _3620 = mosek::fusion::p_WorkStack::_get_impl(_3522)->shape_base;
      int _3621 = mosek::fusion::p_WorkStack::_get_impl(_3522)->codeptr_base;
      int _3622 = mosek::fusion::p_WorkStack::_get_impl(_3522)->code_base;
      int _3623 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3624 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i64;
      _checked_ptr_1<long long> _ptr__3624(_3624 ? _3624->raw() : nullptr,_3624 ? _3624->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3625 = mosek::fusion::p_WorkStack::_get_impl(_3522)->f64;
      _checked_ptr_1<double> _ptr__3625(_3625 ? _3625->raw() : nullptr,_3625 ? _3625->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3626 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i32;
      _checked_ptr_1<int> _ptr__3626(_3626 ? _3626->raw() : nullptr,_3626 ? _3626->size(0) : 0);
      {
        _ptr__3626[_3615] = (int)0;
        _ptr__3626[_3621] = (int)0;
        _ptr__3626[_3620] = (int)_3548;
        int _3627 = (int)0;
        int _3628 = (int)0;
        int _3629 = (int)0;
        int _3630 = (int)0;
        while ( (_3630 < _3541) )
        {
          {
            long long _3631 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3630 )] )] % _3547);
            int _3632 = _3630;
            ++ _3630;
            while ( ((_3630 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3630 )] )] % _3547) == _3631)) )
            {
              {
                ++ _3630;
              }
            }
            int _10329 = _3632;
            int _10330 = _3630;
            for (int _3633 = _10329; _3633 < _10330; ++_3633)
            {
              {
                long long _3634 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3633 )] )] / _3547);
                long long _3635 = safe_add( safe_mul( _3631,_3549 ),_3634 );
                int _10331 = _ptr__3525[safe_add( _3532,_3635 )];
                int _10332 = _ptr__3525[safe_add( safe_add( _3532,_3635 ),(int)1 )];
                for (int _3636 = _10331; _3636 < _10332; ++_3636)
                {
                  {
                    _ptr__3624[safe_add( _3616,_3629 )] = _ptr__3526[safe_add( _3536,_3636 )];
                    _ptr__3625[safe_add( _3618,_3629 )] = 0.0;
                    _ptr__3626[safe_add( _3622,_3627 )] = 2;
                    _ptr__3625[safe_add( _3623,_3627 )] = _ptr__3527[safe_add( _3537,_3636 )];
                    ++ _3627;
                    if ((_3533 > (int)0))
                    {
                      {
                        int _10333 = _ptr__3525[safe_add( _3539,_3636 )];
                        int _10334 = _ptr__3525[safe_add( safe_add( _3539,_3636 ),(int)1 )];
                        for (int _3637 = _10333; _3637 < _10334; ++_3637)
                        {
                          {
                            _ptr__3626[safe_add( _3622,_3627 )] = _ptr__3525[safe_add( _3540,_3637 )];
                            _ptr__3625[safe_add( _3623,_3627 )] = _ptr__3527[safe_add( _3538,_3637 )];
                            ++ _3627;
                          }
                        }
                        _ptr__3626[safe_add( _3622,_3627 )] = 3;
                        ++ _3627;
                      }
                    }
                    {}
                    _ptr__3626[safe_add( _3622,_3627 )] = 1;
                    _ptr__3625[safe_add( _3623,_3627 )] = _ptr__3552[safe_add( _3544,_ptr__3552[safe_add( _3550,_3633 )] )];
                    ++ _3627;
                    _ptr__3626[safe_add( _3622,_3627 )] = 5;
                    ++ _3627;
                    _ptr__3626[safe_add( safe_add( _3621,_3629 ),(int)1 )] = _3627;
                    ++ _3629;
                  }
                }
              }
            }
            _ptr__3624[safe_add( _3617,_3628 )] = _3631;
            _ptr__3626[safe_add( safe_add( _3615,_3628 ),(int)1 )] = _3629;
            ++ _3628;
          }
        }
        if ((_3604 > _ptr__3626[_3620]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
          }
        }
        {}
        if ((_3628 != _3604))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
          }
        }
        {}
        if ((_3629 != _3605))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
          }
        }
        {}
      }
      if ((!_3619))
      {
        {
          _3522->popi64(_3604);
        }
      }
      {}
      _3524->clear();
    }
  }
}
std::string mosek::fusion::ExprMulParamDiagRight :: toString() { return mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamDiagRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamDiagRight::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamDiagRight::destroy() { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprDotParam::ExprDotParam(mosek::fusion::p_ExprDotParam *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDotParam()" << this << std::endl; */ }mosek::fusion::ExprDotParam::~ExprDotParam() {  /* std::cout << "~ExprDotParam()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDotParam::p_ExprDotParam  (::mosek::fusion::ExprDotParam * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDotParam::t mosek::fusion::p_ExprDotParam::_new_ExprDotParam  (monty::rc_ptr< ::mosek::fusion::Parameter > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639){ return new mosek::fusion::ExprDotParam(_3638,_3639); }mosek::fusion::ExprDotParam::ExprDotParam  (monty::rc_ptr< ::mosek::fusion::Parameter > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639) :    ExprDotParam(new mosek::fusion::p_ExprDotParam(this)){ mosek::fusion::p_ExprDotParam::_get_impl(this)->_initialize(_3638,_3639); }void mosek::fusion::p_ExprDotParam::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->p = _3638;
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->e = _3639;
    if ((_3638->getND() != _3639->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int _10335 = (int)0;
    int _10336 = _3638->getND();
    for (int _3640 = _10335; _3640 < _10336; ++_3640)
    {
      {
        if ((_3638->getDim(_3640) != _3639->getDim(_3640)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprDotParam :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642,monty::rc_ptr< ::mosek::fusion::WorkStack > _3643) { mosek::fusion::p_ExprDotParam::_get_impl(this)->eval(_3641,_3642,_3643); }void mosek::fusion::p_ExprDotParam::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642,monty::rc_ptr< ::mosek::fusion::WorkStack > _3643){
  e->eval(_3642,_3641,_3643);
  _3642->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3644 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i32;
  _checked_ptr_1<int> _ptr__3644(_3644 ? _3644->raw() : nullptr,_3644 ? _3644->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3645 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i64;
  _checked_ptr_1<long long> _ptr__3645(_3645 ? _3645->raw() : nullptr,_3645 ? _3645->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3646 = mosek::fusion::p_WorkStack::_get_impl(_3642)->f64;
  _checked_ptr_1<double> _ptr__3646(_3646 ? _3646->raw() : nullptr,_3646 ? _3646->size(0) : 0);
  int _3647 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nd;
  int _3648 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nelem;
  int _3649 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nnz;
  bool _3650 = mosek::fusion::p_WorkStack::_get_impl(_3642)->hassp;
  int _3651 = mosek::fusion::p_WorkStack::_get_impl(_3642)->ptr_base;
  int _3652 = mosek::fusion::p_WorkStack::_get_impl(_3642)->ncodeatom;
  int _3653 = mosek::fusion::p_WorkStack::_get_impl(_3642)->shape_base;
  int _3654 = mosek::fusion::p_WorkStack::_get_impl(_3642)->sp_base;
  int _3655 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nidxs_base;
  int _3656 = mosek::fusion::p_WorkStack::_get_impl(_3642)->cof_base;
  int _3657 = mosek::fusion::p_WorkStack::_get_impl(_3642)->cconst_base;
  int _3658 = mosek::fusion::p_WorkStack::_get_impl(_3642)->codeptr_base;
  int _3659 = mosek::fusion::p_WorkStack::_get_impl(_3642)->code_base;
  int _3660 = p->getNumNonzero();
  int _3661 = _3643->alloci64(_3660);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3643)->i64,_3661);
  int _3662 = _3643->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3663 = mosek::fusion::p_WorkStack::_get_impl(_3643)->i32;
  _checked_ptr_1<int> _ptr__3663(_3663 ? _3663->raw() : nullptr,_3663 ? _3663->size(0) : 0);
  p->getAllIndexes(_3663,_3662);
  std::shared_ptr< monty::ndarray< long long,1 > > _3664 = mosek::fusion::p_WorkStack::_get_impl(_3643)->i64;
  _checked_ptr_1<long long> _ptr__3664(_3664 ? _3664->raw() : nullptr,_3664 ? _3664->size(0) : 0);
  int _3665 = (int)0;
  int _3666 = (int)1;
  int _3667 = (int)0;
  if (_3650)
  {
    {
      int _3668 = (int)0;
      int _3669 = (int)0;
      while ( ((_3668 < _3648) && (_3669 < _3660)) )
      {
        {
          if ((_ptr__3645[safe_add( _3654,_3668 )] < _ptr__3664[safe_add( _3661,_3669 )]))
          {
            {
              ++ _3668;
            }
          }
          else if((_ptr__3645[safe_add( _3654,_3668 )] > _ptr__3664[safe_add( _3661,_3669 )]))
          {
            {
              ++ _3669;
            }
          }
          else
          {
            {
              int _3670 = (_ptr__3644[safe_add( safe_add( _3651,_3668 ),(int)1 )] - _ptr__3644[safe_add( _3651,_3668 )]);
              _3665 += _3670;
              int _10337;
              bool _10338 = (_3652 > (int)0);
              if (_10338)
              {
                _10337 = safe_add( (_ptr__3644[safe_add( _3658,_ptr__3644[safe_add( safe_add( _3651,_3668 ),(int)1 )] )] - _ptr__3644[safe_add( _3658,_ptr__3644[safe_add( _3651,_3668 )] )]),safe_mul( (int)4,_3670 ) );
              }
              else
              {
                _10337 = safe_mul( (int)3,_3670 );
              }
              _3667 += _10337;
              ++ _3668;
              ++ _3669;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10339 = (int)0;
      int _10340 = _3660;
      for (int _3671 = _10339; _3671 < _10340; ++_3671)
      {
        {
          _3665 += (_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3671 )] ),(int)1 )] - _ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3671 )] )]);
        }
      }
      if ((_3652 > (int)0))
      {
        {
          int _10341 = (int)0;
          int _10342 = _3660;
          for (int _3672 = _10341; _3672 < _10342; ++_3672)
          {
            {
              _3667 += safe_add( (_ptr__3644[safe_add( _3658,_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] ),(int)1 )] )] - _ptr__3644[safe_add( _3658,_ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] )] )]),safe_mul( (int)4,(_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] ),(int)1 )] - _ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int _10343 = (int)0;
          int _10344 = _3660;
          for (int _3673 = _10343; _3673 < _10344; ++_3673)
          {
            {
              _3667 += safe_mul( (int)3,(_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3673 )] ),(int)1 )] - _ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3673 )] )]) );
            }
          }
        }
      }
    }
  }
  long long _3674 = (int)1;
  int _10345 = (int)0;
  int _10346 = _3647;
  for (int _3675 = _10345; _3675 < _10346; ++_3675)
  {
    {
      _3674 *= _ptr__3644[safe_add( _3653,_3675 )];
    }
  }
  _3641->alloc_expr((int)0,_3666,_3665,false,_3667);
  int _3676 = mosek::fusion::p_WorkStack::_get_impl(_3641)->ptr_base;
  int _3677 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nidxs_base;
  int _3678 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cof_base;
  bool _3679 = mosek::fusion::p_WorkStack::_get_impl(_3641)->hassp;
  int _3680 = mosek::fusion::p_WorkStack::_get_impl(_3641)->shape_base;
  int _3681 = mosek::fusion::p_WorkStack::_get_impl(_3641)->codeptr_base;
  int _3682 = mosek::fusion::p_WorkStack::_get_impl(_3641)->code_base;
  int _3683 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3684 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i64;
  _checked_ptr_1<long long> _ptr__3684(_3684 ? _3684->raw() : nullptr,_3684 ? _3684->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3685 = mosek::fusion::p_WorkStack::_get_impl(_3641)->f64;
  _checked_ptr_1<double> _ptr__3685(_3685 ? _3685->raw() : nullptr,_3685 ? _3685->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3686 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i32;
  _checked_ptr_1<int> _ptr__3686(_3686 ? _3686->raw() : nullptr,_3686 ? _3686->size(0) : 0);
  _ptr__3686[_3676] = (int)0;
  _ptr__3686[safe_add( _3676,(int)1 )] = _3665;
  _ptr__3686[_3681] = (int)0;
  if (_3650)
  {
    {
      int _3687 = (int)0;
      int _3688 = (int)0;
      int _3689 = (int)0;
      int _3690 = (int)0;
      int _3691 = (int)0;
      while ( ((_3690 < _3648) && (_3691 < _3660)) )
      {
        {
          if ((_ptr__3645[safe_add( _3654,_3690 )] < _ptr__3664[safe_add( _3661,_3691 )]))
          {
            {
              ++ _3690;
            }
          }
          else if((_ptr__3645[safe_add( _3654,_3690 )] > _ptr__3664[safe_add( _3661,_3691 )]))
          {
            {
              ++ _3691;
            }
          }
          else
          {
            {
              int _10347 = _ptr__3644[safe_add( _3651,_3690 )];
              int _10348 = _ptr__3644[safe_add( safe_add( _3651,_3690 ),(int)1 )];
              for (int _3692 = _10347; _3692 < _10348; ++_3692)
              {
                {
                  _ptr__3684[safe_add( _3677,_3688 )] = _ptr__3645[safe_add( _3655,_3692 )];
                  _ptr__3685[safe_add( _3678,_3688 )] = 0.0;
                  _ptr__3686[safe_add( _3682,_3687 )] = 2;
                  _ptr__3685[safe_add( _3683,_3687 )] = _ptr__3646[safe_add( _3656,_3692 )];
                  ++ _3687;
                  if ((_3652 > (int)0))
                  {
                    {
                      int _10349 = _ptr__3644[safe_add( _3658,_3692 )];
                      int _10350 = _ptr__3644[safe_add( safe_add( _3658,_3692 ),(int)1 )];
                      for (int _3693 = _10349; _3693 < _10350; ++_3693)
                      {
                        {
                          _ptr__3686[safe_add( _3682,_3687 )] = _ptr__3644[safe_add( _3659,_3693 )];
                          _ptr__3685[safe_add( _3683,_3687 )] = _ptr__3646[safe_add( _3657,_3693 )];
                          ++ _3687;
                        }
                      }
                      _ptr__3686[safe_add( _3682,_3687 )] = 3;
                      ++ _3687;
                    }
                  }
                  {}
                  _ptr__3686[safe_add( _3682,_3687 )] = 1;
                  _ptr__3685[safe_add( _3683,_3687 )] = _ptr__3663[safe_add( _3662,_3691 )];
                  ++ _3687;
                  _ptr__3686[safe_add( _3682,_3687 )] = 5;
                  ++ _3687;
                  _ptr__3686[safe_add( safe_add( _3681,_3688 ),(int)1 )] = _3687;
                  ++ _3688;
                }
              }
              ++ _3690;
              ++ _3691;
            }
          }
        }
      }
      if ((_3689 != _3666))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3688 != _3665))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3687 != _3667))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _3694 = (int)0;
      int _3695 = (int)0;
      int _10351 = (int)0;
      int _10352 = _3660;
      for (int _3696 = _10351; _3696 < _10352; ++_3696)
      {
        {
          int _3697 = _3696;
          long long _3698 = _ptr__3664[safe_add( _3661,_3696 )];
          int _10353 = _ptr__3644[safe_add( _3651,_3698 )];
          int _10354 = _ptr__3644[safe_add( safe_add( _3651,_3698 ),(int)1 )];
          for (int _3699 = _10353; _3699 < _10354; ++_3699)
          {
            {
              _ptr__3684[safe_add( _3677,_3695 )] = _ptr__3645[safe_add( _3655,_3699 )];
              _ptr__3685[safe_add( _3678,_3695 )] = 0.0;
              _ptr__3686[safe_add( _3682,_3694 )] = 2;
              _ptr__3685[safe_add( _3683,_3694 )] = _ptr__3646[safe_add( _3656,_3699 )];
              ++ _3694;
              if ((_3652 > (int)0))
              {
                {
                  int _10355 = _ptr__3644[safe_add( _3658,_3699 )];
                  int _10356 = _ptr__3644[safe_add( safe_add( _3658,_3699 ),(int)1 )];
                  for (int _3700 = _10355; _3700 < _10356; ++_3700)
                  {
                    {
                      _ptr__3686[safe_add( _3682,_3694 )] = _ptr__3644[safe_add( _3659,_3700 )];
                      _ptr__3685[safe_add( _3683,_3694 )] = _ptr__3646[safe_add( _3657,_3700 )];
                      ++ _3694;
                    }
                  }
                  _ptr__3686[safe_add( _3682,_3694 )] = 3;
                  ++ _3694;
                }
              }
              {}
              _ptr__3686[safe_add( _3682,_3694 )] = 1;
              _ptr__3685[safe_add( _3683,_3694 )] = _ptr__3663[safe_add( _3662,_3696 )];
              ++ _3694;
              _ptr__3686[safe_add( _3682,_3694 )] = 5;
              ++ _3694;
              _ptr__3686[safe_add( safe_add( _3681,_3695 ),(int)1 )] = _3694;
              ++ _3695;
            }
          }
        }
      }
      if ((_3695 != _3665))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nzi"));
        }
      }
      {}
      if ((_3694 != _3667))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
        }
      }
      {}
    }
  }
  _3643->clear();
}
std::string mosek::fusion::ExprDotParam :: toString() { return mosek::fusion::p_ExprDotParam::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDotParam::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDotParam("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDotParam::destroy(){e.reset();p.reset();}void mosek::fusion::ExprDotParam::destroy() { mosek::fusion::p_ExprDotParam::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamElem::ExprMulParamElem(mosek::fusion::p_ExprMulParamElem *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamElem()" << this << std::endl; */ }mosek::fusion::ExprMulParamElem::~ExprMulParamElem() {  /* std::cout << "~ExprMulParamElem()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamElem::p_ExprMulParamElem  (::mosek::fusion::ExprMulParamElem * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamElem::t mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem  (monty::rc_ptr< ::mosek::fusion::Parameter > _3701,    monty::rc_ptr< ::mosek::fusion::Expression > _3702){ return new mosek::fusion::ExprMulParamElem(_3701,_3702); }mosek::fusion::ExprMulParamElem::ExprMulParamElem  (monty::rc_ptr< ::mosek::fusion::Parameter > _3701,    monty::rc_ptr< ::mosek::fusion::Expression > _3702) :    ExprMulParamElem(new mosek::fusion::p_ExprMulParamElem(this)){ mosek::fusion::p_ExprMulParamElem::_get_impl(this)->_initialize(_3701,_3702); }void mosek::fusion::p_ExprMulParamElem::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3701,    monty::rc_ptr< ::mosek::fusion::Expression > _3702){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3702->getShape());
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->p = _3701;
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->e = _3702;
    if ((_3701->getND() != _3702->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int _10357 = (int)0;
    int _10358 = _3701->getND();
    for (int _3703 = _10357; _3703 < _10358; ++_3703)
    {
      {
        if ((_3701->getDim(_3703) != _3702->getDim(_3703)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprMulParamElem :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3704,monty::rc_ptr< ::mosek::fusion::WorkStack > _3705,monty::rc_ptr< ::mosek::fusion::WorkStack > _3706) { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->eval(_3704,_3705,_3706); }void mosek::fusion::p_ExprMulParamElem::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3704,monty::rc_ptr< ::mosek::fusion::WorkStack > _3705,monty::rc_ptr< ::mosek::fusion::WorkStack > _3706){
  e->eval(_3705,_3704,_3706);
  _3705->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3707 = mosek::fusion::p_WorkStack::_get_impl(_3705)->i32;
  _checked_ptr_1<int> _ptr__3707(_3707 ? _3707->raw() : nullptr,_3707 ? _3707->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3708 = mosek::fusion::p_WorkStack::_get_impl(_3705)->i64;
  _checked_ptr_1<long long> _ptr__3708(_3708 ? _3708->raw() : nullptr,_3708 ? _3708->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3709 = mosek::fusion::p_WorkStack::_get_impl(_3705)->f64;
  _checked_ptr_1<double> _ptr__3709(_3709 ? _3709->raw() : nullptr,_3709 ? _3709->size(0) : 0);
  int _3710 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nd;
  int _3711 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nelem;
  int _3712 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nnz;
  bool _3713 = mosek::fusion::p_WorkStack::_get_impl(_3705)->hassp;
  int _3714 = mosek::fusion::p_WorkStack::_get_impl(_3705)->ptr_base;
  int _3715 = mosek::fusion::p_WorkStack::_get_impl(_3705)->ncodeatom;
  int _3716 = mosek::fusion::p_WorkStack::_get_impl(_3705)->shape_base;
  int _3717 = mosek::fusion::p_WorkStack::_get_impl(_3705)->sp_base;
  int _3718 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nidxs_base;
  int _3719 = mosek::fusion::p_WorkStack::_get_impl(_3705)->cof_base;
  int _3720 = mosek::fusion::p_WorkStack::_get_impl(_3705)->cconst_base;
  int _3721 = mosek::fusion::p_WorkStack::_get_impl(_3705)->codeptr_base;
  int _3722 = mosek::fusion::p_WorkStack::_get_impl(_3705)->code_base;
  int _3723 = p->getNumNonzero();
  int _3724 = _3706->alloci64(_3723);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3706)->i64,_3724);
  int _3725 = _3706->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3726 = mosek::fusion::p_WorkStack::_get_impl(_3706)->i32;
  _checked_ptr_1<int> _ptr__3726(_3726 ? _3726->raw() : nullptr,_3726 ? _3726->size(0) : 0);
  p->getAllIndexes(_3726,_3725);
  std::shared_ptr< monty::ndarray< long long,1 > > _3727 = mosek::fusion::p_WorkStack::_get_impl(_3706)->i64;
  _checked_ptr_1<long long> _ptr__3727(_3727 ? _3727->raw() : nullptr,_3727 ? _3727->size(0) : 0);
  int _3728 = _3710;
  int _3729 = (int)0;
  int _3730 = (int)0;
  int _3731 = (int)0;
  if (_3713)
  {
    {
      int _3732 = (int)0;
      int _3733 = (int)0;
      while ( ((_3732 < _3711) && (_3733 < _3723)) )
      {
        {
          if ((_ptr__3708[safe_add( _3717,_3732 )] < _ptr__3727[safe_add( _3724,_3733 )]))
          {
            {
              ++ _3732;
            }
          }
          else if((_ptr__3708[safe_add( _3717,_3732 )] > _ptr__3727[safe_add( _3724,_3733 )]))
          {
            {
              ++ _3733;
            }
          }
          else
          {
            {
              int _3734 = (_ptr__3707[safe_add( safe_add( _3714,_3732 ),(int)1 )] - _ptr__3707[safe_add( _3714,_3732 )]);
              _3729 += _3734;
              int _10359;
              bool _10360 = (_3715 > (int)0);
              if (_10360)
              {
                _10359 = safe_add( (_ptr__3707[safe_add( _3721,_ptr__3707[safe_add( safe_add( _3714,_3732 ),(int)1 )] )] - _ptr__3707[safe_add( _3721,_ptr__3707[safe_add( _3714,_3732 )] )]),safe_mul( (int)4,_3734 ) );
              }
              else
              {
                _10359 = safe_mul( (int)3,_3734 );
              }
              _3731 += _10359;
              _3730 += (int)1;
              ++ _3732;
              ++ _3733;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _3730 = _3723;
      int _10361 = (int)0;
      int _10362 = _3723;
      for (int _3735 = _10361; _3735 < _10362; ++_3735)
      {
        {
          _3729 += (_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3735 )] ),(int)1 )] - _ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3735 )] )]);
        }
      }
      if ((_3715 > (int)0))
      {
        {
          int _10363 = (int)0;
          int _10364 = _3723;
          for (int _3736 = _10363; _3736 < _10364; ++_3736)
          {
            {
              _3731 += safe_add( (_ptr__3707[safe_add( _3721,_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] ),(int)1 )] )] - _ptr__3707[safe_add( _3721,_ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] )] )]),safe_mul( (int)4,(_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] ),(int)1 )] - _ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int _10365 = (int)0;
          int _10366 = _3723;
          for (int _3737 = _10365; _3737 < _10366; ++_3737)
          {
            {
              _3731 += safe_mul( (int)3,(_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3737 )] ),(int)1 )] - _ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3737 )] )]) );
            }
          }
        }
      }
    }
  }
  long long _3738 = (int)1;
  int _10367 = (int)0;
  int _10368 = _3710;
  for (int _3739 = _10367; _3739 < _10368; ++_3739)
  {
    {
      _3738 *= _ptr__3707[safe_add( _3716,_3739 )];
    }
  }
  bool _3740 = (_3730 < _3738);
  _3704->alloc_expr(_3728,_3730,_3729,_3740,_3731);
  int _3741 = mosek::fusion::p_WorkStack::_get_impl(_3704)->ptr_base;
  int _3742 = mosek::fusion::p_WorkStack::_get_impl(_3704)->nidxs_base;
  int _10369;
  bool _10370 = _3740;
  if (_10370)
  {
    _10369 = mosek::fusion::p_WorkStack::_get_impl(_3704)->sp_base;
  }
  else
  {
    _10369 = _3704->alloci64(_3730);
  }
  int _3743 = _10369;
  int _3744 = mosek::fusion::p_WorkStack::_get_impl(_3704)->cof_base;
  bool _3745 = mosek::fusion::p_WorkStack::_get_impl(_3704)->hassp;
  int _3746 = mosek::fusion::p_WorkStack::_get_impl(_3704)->shape_base;
  int _3747 = mosek::fusion::p_WorkStack::_get_impl(_3704)->codeptr_base;
  int _3748 = mosek::fusion::p_WorkStack::_get_impl(_3704)->code_base;
  int _3749 = mosek::fusion::p_WorkStack::_get_impl(_3704)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3750 = mosek::fusion::p_WorkStack::_get_impl(_3704)->i64;
  _checked_ptr_1<long long> _ptr__3750(_3750 ? _3750->raw() : nullptr,_3750 ? _3750->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3751 = mosek::fusion::p_WorkStack::_get_impl(_3704)->f64;
  _checked_ptr_1<double> _ptr__3751(_3751 ? _3751->raw() : nullptr,_3751 ? _3751->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3752 = mosek::fusion::p_WorkStack::_get_impl(_3704)->i32;
  _checked_ptr_1<int> _ptr__3752(_3752 ? _3752->raw() : nullptr,_3752 ? _3752->size(0) : 0);
  int _10371 = (int)0;
  int _10372 = _3710;
  for (int _3753 = _10371; _3753 < _10372; ++_3753)
  {
    {
      _ptr__3752[safe_add( _3746,_3753 )] = _ptr__3707[safe_add( _3716,_3753 )];
    }
  }
  _ptr__3752[_3741] = (int)0;
  _ptr__3752[_3747] = (int)0;
  if (_3713)
  {
    {
      int _3754 = (int)0;
      int _3755 = (int)0;
      int _3756 = (int)0;
      int _3757 = (int)0;
      int _3758 = (int)0;
      while ( ((_3757 < _3711) && (_3758 < _3723)) )
      {
        {
          if ((_ptr__3708[safe_add( _3717,_3757 )] < _ptr__3727[safe_add( _3724,_3758 )]))
          {
            {
              ++ _3757;
            }
          }
          else if((_ptr__3708[safe_add( _3717,_3757 )] > _ptr__3727[safe_add( _3724,_3758 )]))
          {
            {
              ++ _3758;
            }
          }
          else
          {
            {
              int _10373 = _ptr__3707[safe_add( _3714,_3757 )];
              int _10374 = _ptr__3707[safe_add( safe_add( _3714,_3757 ),(int)1 )];
              for (int _3759 = _10373; _3759 < _10374; ++_3759)
              {
                {
                  _ptr__3750[safe_add( _3742,_3755 )] = _ptr__3708[safe_add( _3718,_3759 )];
                  _ptr__3751[safe_add( _3744,_3755 )] = 0.0;
                  _ptr__3752[safe_add( _3748,_3754 )] = 2;
                  _ptr__3751[safe_add( _3749,_3754 )] = _ptr__3709[safe_add( _3719,_3759 )];
                  ++ _3754;
                  if ((_3715 > (int)0))
                  {
                    {
                      int _10375 = _ptr__3707[safe_add( _3721,_3759 )];
                      int _10376 = _ptr__3707[safe_add( safe_add( _3721,_3759 ),(int)1 )];
                      for (int _3760 = _10375; _3760 < _10376; ++_3760)
                      {
                        {
                          _ptr__3752[safe_add( _3748,_3754 )] = _ptr__3707[safe_add( _3722,_3760 )];
                          _ptr__3751[safe_add( _3749,_3754 )] = _ptr__3709[safe_add( _3720,_3760 )];
                          ++ _3754;
                        }
                      }
                      _ptr__3752[safe_add( _3748,_3754 )] = 3;
                      ++ _3754;
                    }
                  }
                  {}
                  _ptr__3752[safe_add( _3748,_3754 )] = 1;
                  _ptr__3751[safe_add( _3749,_3754 )] = _ptr__3726[safe_add( _3725,_3758 )];
                  ++ _3754;
                  _ptr__3752[safe_add( _3748,_3754 )] = 5;
                  ++ _3754;
                  _ptr__3752[safe_add( safe_add( _3747,_3755 ),(int)1 )] = _3754;
                  ++ _3755;
                }
              }
              _ptr__3750[safe_add( _3743,_3756 )] = _ptr__3708[safe_add( _3717,_3757 )];
              _ptr__3752[safe_add( safe_add( _3741,_3756 ),(int)1 )] = _3755;
              ++ _3756;
              ++ _3757;
              ++ _3758;
            }
          }
        }
      }
      if ((_3756 != _3730))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3755 != _3729))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3754 != _3731))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _3761 = (int)0;
      int _3762 = (int)0;
      int _10377 = (int)0;
      int _10378 = _3723;
      for (int _3763 = _10377; _3763 < _10378; ++_3763)
      {
        {
          int _3764 = _3763;
          long long _3765 = _ptr__3727[safe_add( _3724,_3763 )];
          int _10379 = _ptr__3707[safe_add( _3714,_3765 )];
          int _10380 = _ptr__3707[safe_add( safe_add( _3714,_3765 ),(int)1 )];
          for (int _3766 = _10379; _3766 < _10380; ++_3766)
          {
            {
              _ptr__3750[safe_add( _3742,_3762 )] = _ptr__3708[safe_add( _3718,_3766 )];
              _ptr__3751[safe_add( _3744,_3762 )] = 0.0;
              _ptr__3752[safe_add( _3748,_3761 )] = 2;
              _ptr__3751[safe_add( _3749,_3761 )] = _ptr__3709[safe_add( _3719,_3766 )];
              ++ _3761;
              if ((_3715 > (int)0))
              {
                {
                  int _10381 = _ptr__3707[safe_add( _3721,_3766 )];
                  int _10382 = _ptr__3707[safe_add( safe_add( _3721,_3766 ),(int)1 )];
                  for (int _3767 = _10381; _3767 < _10382; ++_3767)
                  {
                    {
                      _ptr__3752[safe_add( _3748,_3761 )] = _ptr__3707[safe_add( _3722,_3767 )];
                      _ptr__3751[safe_add( _3749,_3761 )] = _ptr__3709[safe_add( _3720,_3767 )];
                      ++ _3761;
                    }
                  }
                  _ptr__3752[safe_add( _3748,_3761 )] = 3;
                  ++ _3761;
                }
              }
              {}
              _ptr__3752[safe_add( _3748,_3761 )] = 1;
              _ptr__3751[safe_add( _3749,_3761 )] = _ptr__3726[safe_add( _3725,_3763 )];
              ++ _3761;
              _ptr__3752[safe_add( _3748,_3761 )] = 5;
              ++ _3761;
              _ptr__3752[safe_add( safe_add( _3747,_3762 ),(int)1 )] = _3761;
              ++ _3762;
            }
          }
          _ptr__3750[safe_add( _3743,_3764 )] = _3765;
          _ptr__3752[safe_add( safe_add( _3741,_3764 ),(int)1 )] = _3762;
        }
      }
      if ((_3731 != _3761))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Invalid code list result"));
        }
      }
      {}
    }
  }
  if ((!_3745))
  {
    {
      _3704->popi64(_3730);
    }
  }
  {}
  _3706->clear();
}
std::string mosek::fusion::ExprMulParamElem :: toString() { return mosek::fusion::p_ExprMulParamElem::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamElem::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamElem("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamElem::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamElem::destroy() { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamRight::ExprMulParamRight(mosek::fusion::p_ExprMulParamRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamRight()" << this << std::endl; */ }mosek::fusion::ExprMulParamRight::~ExprMulParamRight() {  /* std::cout << "~ExprMulParamRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamRight::p_ExprMulParamRight  (::mosek::fusion::ExprMulParamRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamRight::t mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3768,    monty::rc_ptr< ::mosek::fusion::Parameter > _3769){ return new mosek::fusion::ExprMulParamRight(_3768,_3769); }mosek::fusion::ExprMulParamRight::ExprMulParamRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3768,    monty::rc_ptr< ::mosek::fusion::Parameter > _3769) :    ExprMulParamRight(new mosek::fusion::p_ExprMulParamRight(this)){ mosek::fusion::p_ExprMulParamRight::_get_impl(this)->_initialize(_3768,_3769); }void mosek::fusion::p_ExprMulParamRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3768,    monty::rc_ptr< ::mosek::fusion::Parameter > _3769){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3768->getDim((int)0)),(int)(_3769->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->p = _3769;
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->e = _3768;
    if (((_3769->getND() != (int)2) || (_3768->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_3769->getDim((int)0) != _3768->getDim((int)1)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3770,monty::rc_ptr< ::mosek::fusion::WorkStack > _3771,monty::rc_ptr< ::mosek::fusion::WorkStack > _3772) { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->eval(_3770,_3771,_3772); }void mosek::fusion::p_ExprMulParamRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3770,monty::rc_ptr< ::mosek::fusion::WorkStack > _3771,monty::rc_ptr< ::mosek::fusion::WorkStack > _3772){
  e->eval(_3771,_3770,_3772);
  _3771->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3773 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i32;
  _checked_ptr_1<int> _ptr__3773(_3773 ? _3773->raw() : nullptr,_3773 ? _3773->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3774 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i64;
  _checked_ptr_1<long long> _ptr__3774(_3774 ? _3774->raw() : nullptr,_3774 ? _3774->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3775 = mosek::fusion::p_WorkStack::_get_impl(_3771)->f64;
  _checked_ptr_1<double> _ptr__3775(_3775 ? _3775->raw() : nullptr,_3775 ? _3775->size(0) : 0);
  int _3776 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nd;
  int _3777 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nelem;
  int _3778 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nnz;
  bool _3779 = mosek::fusion::p_WorkStack::_get_impl(_3771)->hassp;
  int _3780 = mosek::fusion::p_WorkStack::_get_impl(_3771)->ptr_base;
  int _3781 = mosek::fusion::p_WorkStack::_get_impl(_3771)->ncodeatom;
  int _3782 = mosek::fusion::p_WorkStack::_get_impl(_3771)->shape_base;
  int _3783 = mosek::fusion::p_WorkStack::_get_impl(_3771)->sp_base;
  int _3784 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nidxs_base;
  int _3785 = mosek::fusion::p_WorkStack::_get_impl(_3771)->cof_base;
  int _3786 = mosek::fusion::p_WorkStack::_get_impl(_3771)->cconst_base;
  int _3787 = mosek::fusion::p_WorkStack::_get_impl(_3771)->codeptr_base;
  int _3788 = mosek::fusion::p_WorkStack::_get_impl(_3771)->code_base;
  if (((_3776 != (int)2) || (p->getDim((int)0) != _ptr__3773[safe_add( _3782,(int)1 )])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int _3789 = _ptr__3773[_3782];
  int _3790 = _ptr__3773[safe_add( _3782,(int)1 )];
  int _3791 = p->getDim((int)0);
  int _3792 = p->getDim((int)1);
  int _3793 = p->getNumNonzero();
  int _3794 = _3772->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3795 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i32;
  _checked_ptr_1<int> _ptr__3795(_3795 ? _3795->raw() : nullptr,_3795 ? _3795->size(0) : 0);
  p->getAllIndexes(_3795,_3794);
  int _3796 = _3772->alloci32(_3793);
  int _3797 = _3772->alloci64(_3793);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3772)->i64,_3797);
  {
    int _3798 = _3772->alloci32(safe_add( _3792,(int)1 ));
    std::shared_ptr< monty::ndarray< int,1 > > _3799 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i32;
    _checked_ptr_1<int> _ptr__3799(_3799 ? _3799->raw() : nullptr,_3799 ? _3799->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _3800 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i64;
    _checked_ptr_1<long long> _ptr__3800(_3800 ? _3800->raw() : nullptr,_3800 ? _3800->size(0) : 0);
    int _10383 = (int)0;
    int _10384 = safe_add( _3792,(int)1 );
    for (int _3801 = _10383; _3801 < _10384; ++_3801)
    {
      {
        _ptr__3799[safe_add( _3798,_3801 )] = (int)0;
      }
    }
    int _10385 = (int)0;
    int _10386 = _3793;
    for (int _3802 = _10385; _3802 < _10386; ++_3802)
    {
      {
        ++ _ptr__3799[safe_add( safe_add( _3798,(_ptr__3800[safe_add( _3797,_3802 )] % _3792) ),(int)1 )];
      }
    }
    int _10387 = (int)0;
    int _10388 = _3792;
    for (int _3803 = _10387; _3803 < _10388; ++_3803)
    {
      {
        _ptr__3799[safe_add( safe_add( _3798,_3803 ),(int)1 )] += _ptr__3799[safe_add( _3798,_3803 )];
      }
    }
    int _10389 = (int)0;
    int _10390 = _3793;
    for (int _3804 = _10389; _3804 < _10390; ++_3804)
    {
      {
        _ptr__3799[safe_add( _3796,_ptr__3799[safe_add( _3798,(_ptr__3800[safe_add( _3797,_3804 )] % _3792) )] )] = _3804;
        ++ _ptr__3799[safe_add( _3798,(_ptr__3800[safe_add( _3797,_3804 )] % _3792) )];
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _3805 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i32;
  _checked_ptr_1<int> _ptr__3805(_3805 ? _3805->raw() : nullptr,_3805 ? _3805->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3806 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i64;
  _checked_ptr_1<long long> _ptr__3806(_3806 ? _3806->raw() : nullptr,_3806 ? _3806->size(0) : 0);
  int _3807 = (int)0;
  int _3808 = (int)0;
  int _3809 = (int)0;
  if (((!p->isSparse()) && (!_3779)))
  {
    {
      _3809 = safe_mul( _3778,_3792 );
      _3808 = safe_mul( _3789,_3792 );
      int _10391;
      bool _10392 = (_3781 > (int)0);
      if (_10392)
      {
        _10391 = safe_mul( safe_add( _3781,safe_mul( _3778,(int)4 ) ),_3792 );
      }
      else
      {
        _10391 = safe_mul( safe_mul( _3778,_3792 ),(int)3 );
      }
      _3807 = _10391;
    }
  }
  else if((!_3779))
  {
    {
      int _3810 = (int)0;
      while ( (_3810 < _3793) )
      {
        {
          long long _3811 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3810 )] )] % _3792);
          int _3812 = _3810;
          while ( ((_3810 < _3793) && ((_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3810 )] )] % _3792) == _3811)) )
          {
            {
              long long _3813 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3810 )] )] / _3792);
              int _10393 = (int)0;
              int _10394 = _3789;
              for (int _3814 = _10393; _3814 < _10394; ++_3814)
              {
                {
                  long long _3815 = safe_add( safe_mul( _3814,_3790 ),_3813 );
                  int _3816 = (_ptr__3773[safe_add( safe_add( _3780,_3815 ),(int)1 )] - _ptr__3773[safe_add( _3780,_3815 )]);
                  _3809 += _3816;
                  int _10395;
                  bool _10396 = (_3781 > (int)0);
                  if (_10396)
                  {
                    _10395 = safe_add( (_ptr__3773[safe_add( _3787,_ptr__3773[safe_add( safe_add( _3780,_3815 ),(int)1 )] )] - _ptr__3773[safe_add( _3787,_ptr__3773[safe_add( _3780,_3815 )] )]),safe_mul( _3816,(int)4 ) );
                  }
                  else
                  {
                    _10395 = safe_mul( _3816,(int)3 );
                  }
                  _3807 += _10395;
                }
              }
              ++ _3810;
            }
          }
          _3808 += _3789;
        }
      }
    }
  }
  else
  {
    {
      int _3817 = (int)0;
      while ( (_3817 < _3777) )
      {
        {
          long long _3818 = (_ptr__3774[safe_add( _3783,_3817 )] / _3790);
          int _3819 = _3817;
          long long _3820 = safe_mul( safe_add( _3818,(int)1 ),_3790 );
          while ( ((_3817 < _3777) && (_ptr__3774[safe_add( _3783,_3817 )] < _3820)) )
          {
            {
              ++ _3817;
            }
          }
          int _3821 = (int)0;
          while ( (_3821 < _3793) )
          {
            {
              long long _3822 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3821 )] )] % _3792);
              int _3823 = _3821;
              while ( ((_3821 < _3793) && (_3822 == (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3821 )] )] % _3792))) )
              {
                {
                  ++ _3821;
                }
              }
              int _3824 = (int)0;
              int _3825 = _3823;
              int _3826 = _3819;
              while ( ((_3826 < _3817) && (_3825 < _3821)) )
              {
                {
                  long long _3827 = (_ptr__3774[safe_add( _3783,_3826 )] % _3790);
                  long long _3828 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3825 )] )] / _3792);
                  if ((_3827 < _3828))
                  {
                    {
                      ++ _3826;
                    }
                  }
                  else if((_3827 > _3828))
                  {
                    {
                      ++ _3825;
                    }
                  }
                  else
                  {
                    {
                      int _3829 = (_ptr__3773[safe_add( safe_add( _3780,_3826 ),(int)1 )] - _ptr__3773[safe_add( _3780,_3826 )]);
                      _3809 += _3829;
                      int _10397;
                      bool _10398 = (_3781 > (int)0);
                      if (_10398)
                      {
                        _10397 = safe_add( (_ptr__3773[safe_add( _3787,_ptr__3773[safe_add( safe_add( _3780,_3826 ),(int)1 )] )] - _ptr__3773[safe_add( _3787,_ptr__3773[safe_add( _3780,_3826 )] )]),safe_mul( _3829,(int)4 ) );
                      }
                      else
                      {
                        _10397 = safe_mul( _3829,(int)3 );
                      }
                      _3807 += _10397;
                      ++ _3826;
                      ++ _3825;
                      ++ _3824;
                    }
                  }
                }
              }
              if ((_3824 > (int)0))
              {
                {
                  ++ _3808;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  int _3830 = (int)2;
  bool _3831 = (_3808 < safe_mul( _3792,_3789 ));
  _3770->alloc_expr(_3830,_3808,_3809,_3831,_3807);
  std::shared_ptr< monty::ndarray< long long,1 > > _3832 = mosek::fusion::p_WorkStack::_get_impl(_3770)->i64;
  _checked_ptr_1<long long> _ptr__3832(_3832 ? _3832->raw() : nullptr,_3832 ? _3832->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3833 = mosek::fusion::p_WorkStack::_get_impl(_3770)->f64;
  _checked_ptr_1<double> _ptr__3833(_3833 ? _3833->raw() : nullptr,_3833 ? _3833->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3834 = mosek::fusion::p_WorkStack::_get_impl(_3770)->i32;
  _checked_ptr_1<int> _ptr__3834(_3834 ? _3834->raw() : nullptr,_3834 ? _3834->size(0) : 0);
  int _3835 = mosek::fusion::p_WorkStack::_get_impl(_3770)->ptr_base;
  int _3836 = mosek::fusion::p_WorkStack::_get_impl(_3770)->nidxs_base;
  int _10399;
  bool _10400 = _3831;
  if (_10400)
  {
    _10399 = mosek::fusion::p_WorkStack::_get_impl(_3770)->sp_base;
  }
  else
  {
    _10399 = _3770->alloci64(_3808);
  }
  int _3837 = _10399;
  int _3838 = mosek::fusion::p_WorkStack::_get_impl(_3770)->cof_base;
  bool _3839 = mosek::fusion::p_WorkStack::_get_impl(_3770)->hassp;
  int _3840 = mosek::fusion::p_WorkStack::_get_impl(_3770)->shape_base;
  int _3841 = mosek::fusion::p_WorkStack::_get_impl(_3770)->codeptr_base;
  int _3842 = mosek::fusion::p_WorkStack::_get_impl(_3770)->code_base;
  int _3843 = mosek::fusion::p_WorkStack::_get_impl(_3770)->cconst_base;
  _ptr__3834[_3835] = (int)0;
  _ptr__3834[_3841] = (int)0;
  _ptr__3834[_3840] = _3789;
  _ptr__3834[safe_add( _3840,(int)1 )] = _3792;
  int _3844 = (int)0;
  int _3845 = (int)0;
  int _3846 = (int)0;
  if ((!_3779))
  {
    {
      int _10401 = (int)0;
      int _10402 = _3789;
      for (int _3847 = _10401; _3847 < _10402; ++_3847)
      {
        {
          int _3848 = (int)0;
          while ( (_3848 < _3793) )
          {
            {
              int _3849 = _3848;
              long long _3850 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3848 )] )] % _3792);
              while ( ((_3848 < _3793) && (_3850 == (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3848 )] )] % _3792))) )
              {
                {
                  ++ _3848;
                }
              }
              int _3851 = _3849;
              while ( (_3851 < _3848) )
              {
                {
                  long long _3852 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3851 )] )] / _3792);
                  long long _3853 = safe_add( safe_mul( _3847,_3790 ),_3852 );
                  int _3854 = _ptr__3805[safe_add( _3794,_ptr__3805[safe_add( _3796,_3851 )] )];
                  int _10403 = _ptr__3773[safe_add( _3780,_3853 )];
                  int _10404 = _ptr__3773[safe_add( safe_add( _3780,_3853 ),(int)1 )];
                  for (int _3855 = _10403; _3855 < _10404; ++_3855)
                  {
                    {
                      _ptr__3832[safe_add( _3836,_3846 )] = _ptr__3774[safe_add( _3784,_3855 )];
                      _ptr__3833[safe_add( _3838,_3846 )] = (int)0;
                      _ptr__3834[safe_add( _3842,_3844 )] = 2;
                      _ptr__3833[safe_add( _3843,_3844 )] = _ptr__3775[safe_add( _3785,_3855 )];
                      ++ _3844;
                      if ((_3781 > (int)0))
                      {
                        {
                          int _10405 = _ptr__3773[safe_add( _3787,_3855 )];
                          int _10406 = _ptr__3773[safe_add( safe_add( _3787,_3855 ),(int)1 )];
                          for (int _3856 = _10405; _3856 < _10406; ++_3856)
                          {
                            {
                              _ptr__3834[safe_add( _3842,_3844 )] = _ptr__3773[safe_add( _3788,_3856 )];
                              _ptr__3833[safe_add( _3843,_3844 )] = _ptr__3775[safe_add( _3786,_3856 )];
                              ++ _3844;
                            }
                          }
                          _ptr__3834[safe_add( _3842,_3844 )] = 3;
                          ++ _3844;
                        }
                      }
                      {}
                      _ptr__3834[safe_add( _3842,_3844 )] = 1;
                      _ptr__3833[safe_add( _3843,_3844 )] = _3854;
                      ++ _3844;
                      _ptr__3834[safe_add( _3842,_3844 )] = 5;
                      ++ _3844;
                      _ptr__3834[safe_add( safe_add( _3841,_3846 ),(int)1 )] = _3844;
                      ++ _3846;
                    }
                  }
                  ++ _3851;
                }
              }
              _ptr__3834[safe_add( safe_add( _3835,_3845 ),(int)1 )] = _3846;
              _ptr__3832[safe_add( _3837,_3845 )] = safe_add( safe_mul( _3847,_3792 ),_3850 );
              ++ _3845;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _3857 = (int)0;
      while ( (_3857 < _3777) )
      {
        {
          long long _3858 = (_ptr__3774[safe_add( _3783,_3857 )] / _3790);
          int _3859 = _3857;
          long long _3860 = safe_mul( safe_add( _3858,(int)1 ),_3790 );
          while ( ((_3857 < _3777) && (_ptr__3774[safe_add( _3783,_3857 )] < _3860)) )
          {
            {
              ++ _3857;
            }
          }
          int _3861 = (int)0;
          while ( (_3861 < _3793) )
          {
            {
              long long _3862 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3861 )] )] % _3792);
              int _3863 = _3861;
              while ( ((_3861 < _3793) && (_3862 == (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3861 )] )] % _3792))) )
              {
                {
                  ++ _3861;
                }
              }
              int _3864 = (int)0;
              int _3865 = _3863;
              int _3866 = _3859;
              while ( ((_3866 < _3857) && (_3865 < _3861)) )
              {
                {
                  long long _3867 = (_ptr__3774[safe_add( _3783,_3866 )] % _3790);
                  long long _3868 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3865 )] )] / _3792);
                  if ((_3867 < _3868))
                  {
                    {
                      ++ _3866;
                    }
                  }
                  else if((_3867 > _3868))
                  {
                    {
                      ++ _3865;
                    }
                  }
                  else
                  {
                    {
                      int _3869 = _ptr__3805[safe_add( _3794,_ptr__3805[safe_add( _3796,_3865 )] )];
                      int _10407 = _ptr__3773[safe_add( _3780,_3866 )];
                      int _10408 = _ptr__3773[safe_add( safe_add( _3780,_3866 ),(int)1 )];
                      for (int _3870 = _10407; _3870 < _10408; ++_3870)
                      {
                        {
                          _ptr__3832[safe_add( _3836,_3846 )] = _ptr__3774[safe_add( _3784,_3870 )];
                          _ptr__3833[safe_add( _3838,_3846 )] = (int)0;
                          _ptr__3834[safe_add( _3842,_3844 )] = 2;
                          _ptr__3833[safe_add( _3843,_3844 )] = _ptr__3775[safe_add( _3785,_3870 )];
                          ++ _3844;
                          if ((_3781 > (int)0))
                          {
                            {
                              int _10409 = _ptr__3773[safe_add( _3787,_3870 )];
                              int _10410 = _ptr__3773[safe_add( safe_add( _3787,_3870 ),(int)1 )];
                              for (int _3871 = _10409; _3871 < _10410; ++_3871)
                              {
                                {
                                  _ptr__3834[safe_add( _3842,_3844 )] = _ptr__3773[safe_add( _3788,_3871 )];
                                  _ptr__3833[safe_add( _3843,_3844 )] = _ptr__3775[safe_add( _3786,_3871 )];
                                  ++ _3844;
                                }
                              }
                              _ptr__3834[safe_add( _3842,_3844 )] = 3;
                              ++ _3844;
                            }
                          }
                          {}
                          _ptr__3834[safe_add( _3842,_3844 )] = 1;
                          _ptr__3833[safe_add( _3843,_3844 )] = _3869;
                          ++ _3844;
                          _ptr__3834[safe_add( _3842,_3844 )] = 5;
                          ++ _3844;
                          _ptr__3834[safe_add( safe_add( _3841,_3846 ),(int)1 )] = _3844;
                          ++ _3846;
                        }
                      }
                      ++ _3866;
                      ++ _3865;
                      ++ _3864;
                    }
                  }
                }
              }
              if ((_3864 > (int)0))
              {
                {
                  _ptr__3834[safe_add( safe_add( _3835,_3845 ),(int)1 )] = _3846;
                  _ptr__3832[safe_add( _3837,_3845 )] = safe_add( safe_mul( _3858,_3792 ),_3862 );
                  ++ _3845;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((!_3839))
  {
    {
      _3770->popi64(_3808);
    }
  }
  {}
  if ((_3845 != _3808))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken elmi"));
    }
  }
  {}
  if ((_3846 != _3809))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken nzi"));
    }
  }
  {}
  if ((_3844 != _3807))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken codei"));
    }
  }
  {}
  _3772->clear();
}
std::string mosek::fusion::ExprMulParamRight :: toString() { return mosek::fusion::p_ExprMulParamRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamRight::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamRight::destroy() { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamLeft::ExprMulParamLeft(mosek::fusion::p_ExprMulParamLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamLeft()" << this << std::endl; */ }mosek::fusion::ExprMulParamLeft::~ExprMulParamLeft() {  /* std::cout << "~ExprMulParamLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamLeft::p_ExprMulParamLeft  (::mosek::fusion::ExprMulParamLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamLeft::t mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3872,    monty::rc_ptr< ::mosek::fusion::Expression > _3873){ return new mosek::fusion::ExprMulParamLeft(_3872,_3873); }mosek::fusion::ExprMulParamLeft::ExprMulParamLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3872,    monty::rc_ptr< ::mosek::fusion::Expression > _3873) :    ExprMulParamLeft(new mosek::fusion::p_ExprMulParamLeft(this)){ mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->_initialize(_3872,_3873); }void mosek::fusion::p_ExprMulParamLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3872,    monty::rc_ptr< ::mosek::fusion::Expression > _3873){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3872->getDim((int)0)),(int)(_3873->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->p = _3872;
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->e = _3873;
    if (((_3872->getND() != (int)2) || (_3873->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_3872->getDim((int)1) != _3873->getDim((int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3874,monty::rc_ptr< ::mosek::fusion::WorkStack > _3875,monty::rc_ptr< ::mosek::fusion::WorkStack > _3876) { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->eval(_3874,_3875,_3876); }void mosek::fusion::p_ExprMulParamLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3874,monty::rc_ptr< ::mosek::fusion::WorkStack > _3875,monty::rc_ptr< ::mosek::fusion::WorkStack > _3876){
  e->eval(_3875,_3874,_3876);
  _3875->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3877 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i32;
  _checked_ptr_1<int> _ptr__3877(_3877 ? _3877->raw() : nullptr,_3877 ? _3877->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3878 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i64;
  _checked_ptr_1<long long> _ptr__3878(_3878 ? _3878->raw() : nullptr,_3878 ? _3878->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3879 = mosek::fusion::p_WorkStack::_get_impl(_3875)->f64;
  _checked_ptr_1<double> _ptr__3879(_3879 ? _3879->raw() : nullptr,_3879 ? _3879->size(0) : 0);
  int _3880 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nd;
  int _3881 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nelem;
  int _3882 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nnz;
  bool _3883 = mosek::fusion::p_WorkStack::_get_impl(_3875)->hassp;
  int _3884 = mosek::fusion::p_WorkStack::_get_impl(_3875)->ncodeatom;
  int _3885 = mosek::fusion::p_WorkStack::_get_impl(_3875)->ptr_base;
  int _3886 = mosek::fusion::p_WorkStack::_get_impl(_3875)->code_base;
  int _3887 = mosek::fusion::p_WorkStack::_get_impl(_3875)->cconst_base;
  int _3888 = mosek::fusion::p_WorkStack::_get_impl(_3875)->codeptr_base;
  int _3889 = mosek::fusion::p_WorkStack::_get_impl(_3875)->shape_base;
  int _3890 = mosek::fusion::p_WorkStack::_get_impl(_3875)->sp_base;
  int _3891 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nidxs_base;
  int _3892 = mosek::fusion::p_WorkStack::_get_impl(_3875)->cof_base;
  int _3893 = mosek::fusion::p_WorkStack::_get_impl(_3875)->cconst_base;
  if (((_3880 != (int)2) || (_ptr__3877[_3889] != p->getDim((int)1))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int _3894 = p->getDim((int)0);
  int _3895 = p->getDim((int)1);
  int _3896 = _ptr__3877[_3889];
  int _3897 = _ptr__3877[safe_add( _3889,(int)1 )];
  int _3898 = p->getNumNonzero();
  int _3899 = _3876->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3900 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i32;
  _checked_ptr_1<int> _ptr__3900(_3900 ? _3900->raw() : nullptr,_3900 ? _3900->size(0) : 0);
  p->getAllIndexes(_3900,_3899);
  if (((!_3883) && (!p->isSparse())))
  {
    {
      int _3901 = (int)2;
      int _3902 = safe_mul( _3897,p->getDim((int)0) );
      int _3903 = safe_mul( _3882,p->getDim((int)0) );
      int _10411;
      bool _10412 = (_3884 > (int)0);
      if (_10412)
      {
        _10411 = safe_add( safe_mul( p->getDim((int)0),_3884 ),safe_mul( (int)4,_3903 ) );
      }
      else
      {
        _10411 = safe_mul( (int)3,_3903 );
      }
      int _3904 = _10411;
      bool _3905 = false;
      _3874->alloc_expr(_3901,_3902,_3903,_3905,_3904);
      std::shared_ptr< monty::ndarray< long long,1 > > _3906 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
      _checked_ptr_1<long long> _ptr__3906(_3906 ? _3906->raw() : nullptr,_3906 ? _3906->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3907 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
      _checked_ptr_1<double> _ptr__3907(_3907 ? _3907->raw() : nullptr,_3907 ? _3907->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3908 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
      _checked_ptr_1<int> _ptr__3908(_3908 ? _3908->raw() : nullptr,_3908 ? _3908->size(0) : 0);
      int _3909 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
      int _3910 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
      int _3911 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
      int _3912 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
      int _3913 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
      int _3914 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
      bool _3915 = mosek::fusion::p_WorkStack::_get_impl(_3874)->hassp;
      int _3916 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
      _ptr__3908[_3916] = _3894;
      _ptr__3908[safe_add( _3916,(int)1 )] = _3897;
      {
        _ptr__3908[_3909] = (int)0;
        _ptr__3908[_3913] = (int)0;
        int _3917 = (int)0;
        int _3918 = (int)0;
        int _3919 = (int)0;
        int _10413 = (int)0;
        int _10414 = p->getDim((int)0);
        for (int _3920 = _10413; _3920 < _10414; ++_3920)
        {
          {
            int _10415 = (int)0;
            int _10416 = e->getDim((int)1);
            for (int _3921 = _10415; _3921 < _10416; ++_3921)
            {
              {
                int _10417 = (int)0;
                int _10418 = p->getDim((int)1);
                for (int _3922 = _10417; _3922 < _10418; ++_3922)
                {
                  {
                    int _10419 = _ptr__3877[safe_add( safe_add( _3885,safe_mul( _3922,_3897 ) ),_3921 )];
                    int _10420 = _ptr__3877[safe_add( safe_add( safe_add( _3885,safe_mul( _3922,_3897 ) ),_3921 ),(int)1 )];
                    for (int _3923 = _10419; _3923 < _10420; ++_3923)
                    {
                      {
                        _ptr__3906[safe_add( _3910,_3917 )] = _ptr__3878[safe_add( _3891,_3923 )];
                        _ptr__3907[safe_add( _3911,_3917 )] = 0.0;
                        _ptr__3908[safe_add( _3912,_3919 )] = 2;
                        _ptr__3907[safe_add( _3914,_3919 )] = _ptr__3879[safe_add( _3892,_3923 )];
                        ++ _3919;
                        if ((_3884 > (int)0))
                        {
                          {
                            int _10421 = _ptr__3877[safe_add( _3888,_3923 )];
                            int _10422 = _ptr__3877[safe_add( safe_add( _3888,_3923 ),(int)1 )];
                            for (int _3924 = _10421; _3924 < _10422; ++_3924)
                            {
                              {
                                _ptr__3908[safe_add( _3912,_3919 )] = _ptr__3877[safe_add( _3886,_3924 )];
                                _ptr__3907[safe_add( _3914,_3919 )] = _ptr__3879[safe_add( _3887,_3924 )];
                                ++ _3919;
                              }
                            }
                            _ptr__3908[safe_add( _3912,_3919 )] = 3;
                            ++ _3919;
                          }
                        }
                        {}
                        _ptr__3908[safe_add( _3912,_3919 )] = 1;
                        _ptr__3907[safe_add( _3914,_3919 )] = _ptr__3900[safe_add( safe_add( _3899,safe_mul( _3920,_3895 ) ),_3922 )];
                        ++ _3919;
                        _ptr__3908[safe_add( _3912,_3919 )] = 5;
                        ++ _3919;
                        _ptr__3908[safe_add( safe_add( _3913,_3917 ),(int)1 )] = _3919;
                        ++ _3917;
                      }
                    }
                  }
                }
                _ptr__3908[safe_add( safe_add( _3909,_3918 ),(int)1 )] = _3917;
                ++ _3918;
              }
            }
          }
        }
        if ((_3919 != _3904))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_3917 != _3903))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_3918 != _3902))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        int _10423 = (int)0;
        int _10424 = _3902;
        for (int _3925 = _10423; _3925 < _10424; ++_3925)
        {
          {
            if ((_ptr__3908[safe_add( _3909,_3925 )] > _ptr__3908[safe_add( safe_add( _3909,_3925 ),(int)1 )]))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr indexes"));
              }
            }
            {}
          }
        }
      }
    }
  }
  else if((!_3883))
  {
    {
      int _3926 = _3881;
      int _3927 = _3898;
      int _3928 = _3876->alloci64(_3927);
      std::shared_ptr< monty::ndarray< long long,1 > > _3929 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i64;
      _checked_ptr_1<long long> _ptr__3929(_3929 ? _3929->raw() : nullptr,_3929 ? _3929->size(0) : 0);
      p->getSp(_3929,_3928);
      int _3930 = (int)0;
      int _3931 = (int)0;
      int _3932 = (int)0;
      {
        int _3933 = (int)0;
        while ( (_3933 < _3898) )
        {
          {
            int _3934 = (int)(_ptr__3929[safe_add( _3928,_3933 )] / _3895);
            int _3935 = _3933;
            ++ _3933;
            while ( ((_3933 < _3898) && (_ptr__3929[safe_add( _3928,_3933 )] < safe_mul( safe_add( _3934,(int)1 ),_3895 ))) )
            {
              {
                ++ _3933;
              }
            }
            int _3936 = _3933;
            int _10425 = (int)0;
            int _10426 = _3897;
            for (int _3937 = _10425; _3937 < _10426; ++_3937)
            {
              {
                int _10427 = _3935;
                int _10428 = _3936;
                for (int _3938 = _10427; _3938 < _10428; ++_3938)
                {
                  {
                    long long _3939 = safe_add( safe_mul( (_ptr__3929[safe_add( _3928,_3938 )] % _3895),_3897 ),_3937 );
                    int _3940 = (_ptr__3877[safe_add( safe_add( _3885,_3939 ),(int)1 )] - _ptr__3877[safe_add( _3885,_3939 )]);
                    _3931 += _3940;
                    if ((_3884 > (int)0))
                    {
                      {
                        _3932 += safe_add( (_ptr__3877[safe_add( _3888,_ptr__3877[safe_add( safe_add( _3885,_3939 ),(int)1 )] )] - _ptr__3877[safe_add( _3888,_ptr__3877[safe_add( _3885,_3939 )] )]),safe_mul( (int)4,_3940 ) );
                      }
                    }
                    else
                    {
                      {
                        _3932 += safe_mul( (int)3,_3940 );
                      }
                    }
                  }
                }
                ++ _3930;
              }
            }
          }
        }
      }
      bool _3941 = (_3930 < safe_mul( _3894,_3897 ));
      int _3942 = (int)2;
      _3874->alloc_expr(_3942,_3930,_3931,_3941,_3932);
      std::shared_ptr< monty::ndarray< long long,1 > > _3943 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
      _checked_ptr_1<long long> _ptr__3943(_3943 ? _3943->raw() : nullptr,_3943 ? _3943->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3944 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
      _checked_ptr_1<double> _ptr__3944(_3944 ? _3944->raw() : nullptr,_3944 ? _3944->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3945 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
      _checked_ptr_1<int> _ptr__3945(_3945 ? _3945->raw() : nullptr,_3945 ? _3945->size(0) : 0);
      int _3946 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
      int _3947 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
      int _10429;
      bool _10430 = _3941;
      if (_10430)
      {
        _10429 = mosek::fusion::p_WorkStack::_get_impl(_3874)->sp_base;
      }
      else
      {
        _10429 = _3874->alloci64(_3930);
      }
      int _3948 = _10429;
      int _3949 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
      bool _3950 = mosek::fusion::p_WorkStack::_get_impl(_3874)->hassp;
      int _3951 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
      int _3952 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
      int _3953 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
      int _3954 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
      _ptr__3945[_3951] = _3894;
      _ptr__3945[safe_add( _3951,(int)1 )] = _3897;
      {
        int _3955 = (int)0;
        int _3956 = (int)0;
        int _3957 = (int)0;
        _ptr__3945[_3952] = (int)0;
        _ptr__3945[_3946] = (int)0;
        int _10431 = (int)0;
        int _10432 = _3931;
        for (int _3958 = _10431; _3958 < _10432; ++_3958)
        {
          {
            _ptr__3944[safe_add( _3949,_3958 )] = 0.0;
          }
        }
        int _3959 = (int)0;
        while ( (_3959 < _3898) )
        {
          {
            int _3960 = (int)(_ptr__3929[safe_add( _3928,_3959 )] / _3895);
            int _3961 = _3959;
            ++ _3959;
            while ( ((_3959 < _3898) && (_ptr__3929[safe_add( _3928,_3959 )] < safe_mul( safe_add( _3960,(int)1 ),_3895 ))) )
            {
              {
                ++ _3959;
              }
            }
            int _3962 = _3959;
            int _10433 = (int)0;
            int _10434 = _3897;
            for (int _3963 = _10433; _3963 < _10434; ++_3963)
            {
              {
                int _10435 = _3961;
                int _10436 = _3962;
                for (int _3964 = _10435; _3964 < _10436; ++_3964)
                {
                  {
                    long long _3965 = safe_add( safe_mul( (_ptr__3929[safe_add( _3928,_3964 )] % _3895),_3897 ),_3963 );
                    int _10437 = _ptr__3877[safe_add( _3885,_3965 )];
                    int _10438 = _ptr__3877[safe_add( safe_add( _3885,_3965 ),(int)1 )];
                    for (int _3966 = _10437; _3966 < _10438; ++_3966)
                    {
                      {
                        _ptr__3943[safe_add( _3947,_3955 )] = _ptr__3878[safe_add( _3891,_3966 )];
                        _ptr__3945[safe_add( _3953,_3957 )] = 2;
                        _ptr__3944[safe_add( _3954,_3957 )] = _ptr__3879[safe_add( _3892,_3966 )];
                        ++ _3957;
                        if ((_3884 > (int)0))
                        {
                          {
                            int _10439 = _ptr__3877[safe_add( _3888,_3966 )];
                            int _10440 = _ptr__3877[safe_add( safe_add( _3888,_3966 ),(int)1 )];
                            for (int _3967 = _10439; _3967 < _10440; ++_3967)
                            {
                              {
                                _ptr__3945[safe_add( _3953,_3957 )] = _ptr__3877[safe_add( _3886,_3967 )];
                                _ptr__3944[safe_add( _3954,_3957 )] = _ptr__3879[safe_add( _3887,_3967 )];
                                ++ _3957;
                              }
                            }
                            _ptr__3945[safe_add( _3953,_3957 )] = 3;
                            ++ _3957;
                          }
                        }
                        {}
                        _ptr__3945[safe_add( _3953,_3957 )] = 1;
                        _ptr__3944[safe_add( _3954,_3957 )] = _ptr__3900[safe_add( _3899,_3964 )];
                        ++ _3957;
                        _ptr__3945[safe_add( _3953,_3957 )] = 5;
                        ++ _3957;
                        _ptr__3945[safe_add( safe_add( _3952,_3955 ),(int)1 )] = _3957;
                        ++ _3955;
                      }
                    }
                  }
                }
                _ptr__3945[safe_add( safe_add( _3946,_3956 ),(int)1 )] = _3955;
                ++ _3956;
              }
            }
          }
        }
        if ((_3957 != _3932))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect code list"));
          }
        }
        {}
        if ((_3955 != _3931))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_3956 != _3930))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__3945[safe_add( _3946,_3930 )] != _3931))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_3950))
      {
        {
          _3874->popi64(_3930);
        }
      }
      {}
      _3876->clear();
    }
  }
  else
  {
    {
      int _3968 = _3881;
      int _3969 = _3876->alloci32(_3968);
      int _3970 = p->getNumNonzero();
      int _3971 = _3876->alloci64(_3970);
      int _3972 = _3876->alloci32(safe_add( _ptr__3877[safe_add( _3889,(int)1 )],(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3973 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i32;
      _checked_ptr_1<int> _ptr__3973(_3973 ? _3973->raw() : nullptr,_3973 ? _3973->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3974 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i64;
      _checked_ptr_1<long long> _ptr__3974(_3974 ? _3974->raw() : nullptr,_3974 ? _3974->size(0) : 0);
      p->getSp(_3974,_3971);
      {
        int _3975 = _ptr__3877[safe_add( _3889,(int)1 )];
        int _10441 = (int)0;
        int _10442 = safe_add( _ptr__3877[safe_add( _3889,(int)1 )],(int)1 );
        for (int _3976 = _10441; _3976 < _10442; ++_3976)
        {
          {
            _ptr__3973[safe_add( _3972,_3976 )] = (int)0;
          }
        }
        int _10443 = (int)0;
        int _10444 = _3881;
        for (int _3977 = _10443; _3977 < _10444; ++_3977)
        {
          {
            ++ _ptr__3973[safe_add( safe_add( _3972,(_ptr__3878[safe_add( _3890,_3977 )] % _3975) ),(int)1 )];
          }
        }
        int _10445 = (int)0;
        int _10446 = _3975;
        for (int _3978 = _10445; _3978 < _10446; ++_3978)
        {
          {
            _ptr__3973[safe_add( safe_add( _3972,_3978 ),(int)1 )] += _ptr__3973[safe_add( _3972,_3978 )];
          }
        }
        int _10447 = (int)0;
        int _10448 = _3881;
        for (int _3979 = _10447; _3979 < _10448; ++_3979)
        {
          {
            _ptr__3973[safe_add( _3969,_ptr__3973[safe_add( _3972,(_ptr__3878[safe_add( _3890,_3979 )] % _3975) )] )] = _3979;
            ++ _ptr__3973[safe_add( _3972,(_ptr__3878[safe_add( _3890,_3979 )] % _3975) )];
          }
        }
      }
      int _3980 = (int)0;
      int _3981 = (int)0;
      int _3982 = (int)0;
      int _3983 = _ptr__3877[safe_add( _3889,(int)1 )];
      int _3984 = _ptr__3877[_3889];
      int _3985 = p->getDim((int)1);
      int _3986 = p->getDim((int)0);
      {
        int _3987 = (int)0;
        while ( (_3987 < _3970) )
        {
          {
            int _3988 = _3987;
            long long _3989 = (_ptr__3974[safe_add( _3971,_3987 )] / _3985);
            while ( ((_3987 < _3970) && (_ptr__3974[safe_add( _3971,_3987 )] < safe_mul( safe_add( _3989,(int)1 ),_3985 ))) )
            {
              {
                ++ _3987;
              }
            }
            int _3990 = (int)0;
            while ( (_3990 < _3881) )
            {
              {
                int _3991 = _3990;
                long long _3992 = (_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_3990 )] )] % _3983);
                ++ _3990;
                while ( ((_3990 < _3881) && ((_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_3990 )] )] % _3983) == _3992)) )
                {
                  {
                    ++ _3990;
                  }
                }
                int _3993 = _3991;
                int _3994 = _3988;
                bool _3995 = false;
                int _3996 = (int)0;
                while ( ((_3994 < _3987) && (_3993 < _3990)) )
                {
                  {
                    int _3997 = _ptr__3973[safe_add( _3969,_3993 )];
                    if (((_ptr__3974[safe_add( _3971,_3994 )] % _3985) < (_ptr__3878[safe_add( _3890,_3997 )] / _3983)))
                    {
                      {
                        ++ _3994;
                      }
                    }
                    else if(((_ptr__3974[safe_add( _3971,_3994 )] % _3985) > (_ptr__3878[safe_add( _3890,_3997 )] / _3983)))
                    {
                      {
                        ++ _3993;
                      }
                    }
                    else
                    {
                      {
                        int _3998 = (_ptr__3877[safe_add( safe_add( _3885,_3997 ),(int)1 )] - _ptr__3877[safe_add( _3885,_3997 )]);
                        _3981 += _3998;
                        int _10449;
                        bool _10450 = (_3884 > (int)0);
                        if (_10450)
                        {
                          _10449 = safe_add( (_ptr__3877[safe_add( _3888,_ptr__3877[safe_add( safe_add( _3885,_3997 ),(int)1 )] )] - _ptr__3877[safe_add( _3888,_ptr__3877[safe_add( _3885,_3997 )] )]),safe_mul( (int)4,_3998 ) );
                        }
                        else
                        {
                          _10449 = safe_mul( (int)3,_3998 );
                        }
                        _3982 += _10449;
                        ++ _3993;
                        ++ _3994;
                        ++ _3996;
                      }
                    }
                  }
                }
                if ((_3996 > (int)0))
                {
                  {
                    ++ _3980;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int _3999 = (int)2;
      bool _4000 = (_3980 < safe_mul( _3986,_3983 ));
      _3874->alloc_expr(_3999,_3980,_3981,_4000,_3982);
      std::shared_ptr< monty::ndarray< long long,1 > > _4001 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
      _checked_ptr_1<long long> _ptr__4001(_4001 ? _4001->raw() : nullptr,_4001 ? _4001->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4002 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
      _checked_ptr_1<double> _ptr__4002(_4002 ? _4002->raw() : nullptr,_4002 ? _4002->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4003 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
      _checked_ptr_1<int> _ptr__4003(_4003 ? _4003->raw() : nullptr,_4003 ? _4003->size(0) : 0);
      int _4004 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
      int _4005 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
      int _10451;
      bool _10452 = _4000;
      if (_10452)
      {
        _10451 = mosek::fusion::p_WorkStack::_get_impl(_3874)->sp_base;
      }
      else
      {
        _10451 = _3874->alloci64(_3980);
      }
      int _4006 = _10451;
      int _4007 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
      int _4008 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
      int _4009 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
      int _4010 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
      int _4011 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
      int _10453 = (int)0;
      int _10454 = safe_add( _3980,(int)1 );
      for (int _4012 = _10453; _4012 < _10454; ++_4012)
      {
        {
          _ptr__4003[safe_add( _4004,_4012 )] = (-(int)9999);
        }
      }
      {
        _ptr__4003[_4004] = (int)0;
        _ptr__4003[_4009] = (int)0;
        _ptr__4003[_4008] = _3986;
        _ptr__4003[safe_add( _4008,(int)1 )] = _3983;
        int _4013 = (int)0;
        int _4014 = (int)0;
        int _4015 = (int)0;
        int _10455 = (int)0;
        int _10456 = _3981;
        for (int _4016 = _10455; _4016 < _10456; ++_4016)
        {
          {
            _ptr__4002[safe_add( _4007,_4016 )] = 0.0;
          }
        }
        int _4017 = (int)0;
        while ( (_4017 < _3970) )
        {
          {
            int _4018 = _4017;
            long long _4019 = (_ptr__3974[safe_add( _3971,_4017 )] / _3985);
            while ( ((_4017 < _3970) && (_ptr__3974[safe_add( _3971,_4017 )] < safe_mul( safe_add( _4019,(int)1 ),_3985 ))) )
            {
              {
                ++ _4017;
              }
            }
            int _4020 = (int)0;
            while ( (_4020 < _3881) )
            {
              {
                int _4021 = _4020;
                long long _4022 = (_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_4020 )] )] % _3983);
                ++ _4020;
                while ( ((_4020 < _3881) && ((_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_4020 )] )] % _3983) == _4022)) )
                {
                  {
                    ++ _4020;
                  }
                }
                int _4023 = _4021;
                int _4024 = _4018;
                int _4025 = (int)0;
                while ( ((_4024 < _4017) && (_4023 < _4020)) )
                {
                  {
                    int _4026 = _ptr__3973[safe_add( _3969,_4023 )];
                    if (((_ptr__3974[safe_add( _3971,_4024 )] % _3985) < (_ptr__3878[safe_add( _3890,_4026 )] / _3983)))
                    {
                      {
                        ++ _4024;
                      }
                    }
                    else if(((_ptr__3974[safe_add( _3971,_4024 )] % _3985) > (_ptr__3878[safe_add( _3890,_4026 )] / _3983)))
                    {
                      {
                        ++ _4023;
                      }
                    }
                    else
                    {
                      {
                        int _10457 = _ptr__3877[safe_add( _3885,_4026 )];
                        int _10458 = _ptr__3877[safe_add( safe_add( _3885,_4026 ),(int)1 )];
                        for (int _4027 = _10457; _4027 < _10458; ++_4027)
                        {
                          {
                            _ptr__4001[safe_add( _4005,_4013 )] = _ptr__3878[safe_add( _3891,_4027 )];
                            _ptr__4003[safe_add( _4010,_4015 )] = 2;
                            _ptr__4002[safe_add( _4011,_4015 )] = _ptr__3879[safe_add( _3892,_4027 )];
                            ++ _4015;
                            if ((_3884 > (int)0))
                            {
                              {
                                int _10459 = _ptr__3877[safe_add( _3888,_4027 )];
                                int _10460 = _ptr__3877[safe_add( safe_add( _3888,_4027 ),(int)1 )];
                                for (int _4028 = _10459; _4028 < _10460; ++_4028)
                                {
                                  {
                                    _ptr__4003[safe_add( _4010,_4015 )] = _ptr__3877[safe_add( _3886,_4028 )];
                                    _ptr__4002[safe_add( _4011,_4015 )] = _ptr__3879[safe_add( _3887,_4028 )];
                                    ++ _4015;
                                  }
                                }
                                _ptr__4003[safe_add( _4010,_4015 )] = 3;
                                ++ _4015;
                              }
                            }
                            {}
                            _ptr__4003[safe_add( _4010,_4015 )] = 1;
                            _ptr__4002[safe_add( _4011,_4015 )] = _ptr__3973[safe_add( _3899,_4024 )];
                            ++ _4015;
                            _ptr__4003[safe_add( _4010,_4015 )] = 5;
                            ++ _4015;
                            _ptr__4003[safe_add( safe_add( _4009,_4013 ),(int)1 )] = _4015;
                            ++ _4013;
                          }
                        }
                        ++ _4025;
                        ++ _4024;
                        ++ _4023;
                      }
                    }
                  }
                }
                if ((_4025 > (int)0))
                {
                  {
                    _ptr__4001[safe_add( _4006,_4014 )] = safe_add( safe_mul( _4019,_3983 ),_4022 );
                    _ptr__4003[safe_add( safe_add( _4004,_4014 ),(int)1 )] = _4013;
                    ++ _4014;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_4015 != _3982))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4013 != _3981))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4014 != _3980))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4003[safe_add( _4004,_4014 )] != _3981))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_4000))
      {
        {
          _3874->popi64(_3980);
        }
      }
      {}
    }
  }
  _3876->clear();
}
std::string mosek::fusion::ExprMulParamLeft :: toString() { return mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamLeft::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamLeft::destroy() { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->destroy(); }mosek::fusion::ParameterImpl::ParameterImpl(mosek::fusion::p_ParameterImpl *_impl) : _impl(_impl) { /*std::cout << "ParameterImpl() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ParameterImpl::~ParameterImpl() { delete _impl; _impl = nullptr; }mosek::fusion::p_ParameterImpl::p_ParameterImpl  (::mosek::fusion::ParameterImpl * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4029,    monty::rc_ptr< ::mosek::fusion::Model > _4030){ return new mosek::fusion::ParameterImpl(_4029,_4030); }mosek::fusion::ParameterImpl::ParameterImpl  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4029,    monty::rc_ptr< ::mosek::fusion::Model > _4030) :    ParameterImpl(new mosek::fusion::p_ParameterImpl(this)){ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4029,_4030); }void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4029,    monty::rc_ptr< ::mosek::fusion::Model > _4030){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4030;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->shape;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->size;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->nidxs;
  }
}mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl  (monty::rc_ptr< ::mosek::fusion::Model > _4031,    std::shared_ptr< monty::ndarray< int,1 > > _4032,    std::shared_ptr< monty::ndarray< long long,1 > > _4033,    std::shared_ptr< monty::ndarray< int,1 > > _4034){ return new mosek::fusion::ParameterImpl(_4031,_4032,_4033,_4034); }mosek::fusion::ParameterImpl::ParameterImpl  (monty::rc_ptr< ::mosek::fusion::Model > _4031,    std::shared_ptr< monty::ndarray< int,1 > > _4032,    std::shared_ptr< monty::ndarray< long long,1 > > _4033,    std::shared_ptr< monty::ndarray< int,1 > > _4034) :    ParameterImpl(new mosek::fusion::p_ParameterImpl(this)){ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4031,_4032,_4033,_4034); }void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _4031,    std::shared_ptr< monty::ndarray< int,1 > > _4032,    std::shared_ptr< monty::ndarray< long long,1 > > _4033,    std::shared_ptr< monty::ndarray< int,1 > > _4034){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4032(_4032 ? _4032->raw() : nullptr, _4032 ? _4032->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4033(_4033 ? _4033->raw() : nullptr, _4033 ? _4033->size(0) : 0);
    _checked_ptr_1<int> _ptr__4034(_4034 ? _4034->raw() : nullptr, _4034 ? _4034->size(0) : 0);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4031;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = ::mosek::fusion::Utils::Tools::arraycopy(_4032);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = _4033;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = ::mosek::fusion::p_Set::size(_4032);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = ::mosek::fusion::Utils::Tools::arraycopy(_4034);
  }
}monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4035) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__clone(_4035); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::clone(monty::rc_ptr< ::mosek::fusion::Model > _4035) { return __mosek_2fusion_2ParameterImpl__clone(_4035); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__clone(monty::rc_ptr< ::mosek::fusion::Model > _4035) { return __mosek_2fusion_2ParameterImpl__clone(_4035); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4035){
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::ParameterImpl::t(_pubthis),_4035)).as<::mosek::fusion::Parameter>();
}
std::string mosek::fusion::ParameterImpl :: toString() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->toString(); }std::string mosek::fusion::p_ParameterImpl::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4036 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Parameter(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _4036->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _10461 = (int)1;
      int _10462 = (int)((shape)->size(0));
      for (int _4037 = _10461; _4037 < _10462; ++_4037)
      {
        {
          _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_4037)));
        }
      }
    }
  }
  {}
  _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sp.get()))
  {
    {
      _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4036->toString();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,2 > > _4038) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int,2 > > _4038) { return __mosek_2fusion_2ParameterImpl__pick(_4038); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4038) { return __mosek_2fusion_2ParameterImpl__pick(_4038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,2 > > _4038){
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return __mosek_2fusion_2ParameterImpl__pick(_4039); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return __mosek_2fusion_2ParameterImpl__pick(_4039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,1 > > _4039){
  _checked_ptr_1<int> _ptr__4039(_4039 ? _4039->raw() : nullptr, _4039 ? _4039->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int,1 > > _4040) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4040); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(std::shared_ptr< monty::ndarray< int,1 > > _4040) { return __mosek_2fusion_2ParameterImpl__index(_4040); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _4040) { return __mosek_2fusion_2ParameterImpl__index(_4040); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int,1 > > _4040){
  _checked_ptr_1<int> _ptr__4040(_4040 ? _4040->raw() : nullptr, _4040 ? _4040->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)((_4040)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else
  {
    {
      int _10463 = (int)0;
      int _10464 = (int)((_4040)->size(0));
      for (int _4041 = _10463; _4041 < _10464; ++_4041)
      {
        {
          if (((_ptr__4040[_4041] < (int)0) || (_ptr__4040[_4041] >= ((*shape)(_4041)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
            }
          }
          {}
        }
      }
    }
  }
  if ((NULL == sp.get()))
  {
    {
      int _4042 = (int)((_4040)->size(0));
      long long _4043 = _ptr__4040[(_4042 - (int)1)];
      int _10465 = (int)1;
      int _10466 = _4042;
      for (int _4044 = _10465; _4044 < _10466; ++_4044)
      {
        {
          _4043 = safe_add( safe_mul( _4043,((*shape)((_4042 - _4044))) ),_ptr__4040[((_4042 - _4044) - (int)1)] );
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4043)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _4045 = (int)((_4040)->size(0));
      long long _4046 = _ptr__4040[(_4045 - (int)1)];
      int _10467 = (int)1;
      int _10468 = _4045;
      for (int _4047 = _10467; _4047 < _10468; ++_4047)
      {
        {
          _4046 = safe_add( safe_mul( _4046,((*shape)((_4045 - _4047))) ),_ptr__4040[((_4045 - _4047) - (int)1)] );
        }
      }
      int _4048 = (int)0;
      while ( ((_4048 < (int)((sp)->size(0))) && (((*sp)(_4048)) < _4046)) )
      {
        {
          ++ _4048;
        }
      }
      if (((_4048 < (int)((sp)->size(0))) && (((*sp)(_4048)) == _4046)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4048)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(int _4049) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4049); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(int _4049) { return __mosek_2fusion_2ParameterImpl__index(_4049); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(int _4049) { return __mosek_2fusion_2ParameterImpl__index(_4049); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(int _4049){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else if(((_4049 < (int)0) || (_4049 >= ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4049)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _4050 = (int)0;
      while ( ((_4050 < (int)((sp)->size(0))) && (((*sp)(_4050)) < _4049)) )
      {
        {
          ++ _4050;
        }
      }
      if (((_4050 < (int)((sp)->size(0))) && (((*sp)(_4050)) == _4049)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4050)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4051,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052,monty::rc_ptr< ::mosek::fusion::WorkStack > _4053) { mosek::fusion::p_ParameterImpl::_get_impl(this)->eval(_4051,_4052,_4053); }void mosek::fusion::p_ParameterImpl::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4051,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052,monty::rc_ptr< ::mosek::fusion::WorkStack > _4053){
  int _4054 = (int)((shape)->size(0));
  int _4055 = (int)((nidxs)->size(0));
  bool _4056 = (NULL != sp.get());
  _4051->alloc_expr(_4054,_4055,(int)((nidxs)->size(0)),_4056,(int)((nidxs)->size(0)));
  std::shared_ptr< monty::ndarray< int,1 > > _4057 = mosek::fusion::p_WorkStack::_get_impl(_4051)->i32;
  _checked_ptr_1<int> _ptr__4057(_4057 ? _4057->raw() : nullptr,_4057 ? _4057->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4058 = mosek::fusion::p_WorkStack::_get_impl(_4051)->i64;
  _checked_ptr_1<long long> _ptr__4058(_4058 ? _4058->raw() : nullptr,_4058 ? _4058->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4059 = mosek::fusion::p_WorkStack::_get_impl(_4051)->f64;
  _checked_ptr_1<double> _ptr__4059(_4059 ? _4059->raw() : nullptr,_4059 ? _4059->size(0) : 0);
  int _4060 = mosek::fusion::p_WorkStack::_get_impl(_4051)->ptr_base;
  int _4061 = mosek::fusion::p_WorkStack::_get_impl(_4051)->nidxs_base;
  int _4062 = mosek::fusion::p_WorkStack::_get_impl(_4051)->cof_base;
  int _4063 = mosek::fusion::p_WorkStack::_get_impl(_4051)->shape_base;
  int _4064 = mosek::fusion::p_WorkStack::_get_impl(_4051)->codeptr_base;
  int _4065 = mosek::fusion::p_WorkStack::_get_impl(_4051)->code_base;
  int _4066 = mosek::fusion::p_WorkStack::_get_impl(_4051)->cconst_base;
  int _4067 = mosek::fusion::p_WorkStack::_get_impl(_4051)->sp_base;
  {
    _ptr__4057[_4060] = (int)0;
    int _10469 = (int)0;
    int _10470 = _4054;
    for (int _4068 = _10469; _4068 < _10470; ++_4068)
    {
      {
        _ptr__4057[safe_add( _4063,_4068 )] = ((*shape)(_4068));
      }
    }
    int _10471 = (int)0;
    int _10472 = _4055;
    for (int _4069 = _10471; _4069 < _10472; ++_4069)
    {
      {
        _ptr__4058[safe_add( _4061,_4069 )] = (int)0;
      }
    }
    int _10473 = (int)0;
    int _10474 = _4055;
    for (int _4070 = _10473; _4070 < _10474; ++_4070)
    {
      {
        _ptr__4059[safe_add( _4062,_4070 )] = 0.0;
      }
    }
    int _10475 = (int)0;
    int _10476 = safe_add( _4055,(int)1 );
    for (int _4071 = _10475; _4071 < _10476; ++_4071)
    {
      {
        _ptr__4057[safe_add( _4060,_4071 )] = _4071;
      }
    }
    int _10477 = (int)0;
    int _10478 = safe_add( _4055,(int)1 );
    for (int _4072 = _10477; _4072 < _10478; ++_4072)
    {
      {
        _ptr__4057[safe_add( _4064,_4072 )] = _4072;
      }
    }
    if (_4056)
    {
      {
        int _10479 = (int)0;
        int _10480 = _4055;
        for (int _4073 = _10479; _4073 < _10480; ++_4073)
        {
          {
            _ptr__4058[safe_add( _4067,_4073 )] = ((*sp)(_4073));
          }
        }
      }
    }
    {}
    int _10481 = (int)0;
    int _10482 = _4055;
    for (int _4074 = _10481; _4074 < _10482; ++_4074)
    {
      {
        _ptr__4057[safe_add( _4065,_4074 )] = (int)1;
        _ptr__4059[safe_add( _4066,_4074 )] = ((*nidxs)(_4074));
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: getSp(std::shared_ptr< monty::ndarray< long long,1 > > _4075,int _4076) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getSp(_4075,_4076); }void mosek::fusion::p_ParameterImpl::getSp(std::shared_ptr< monty::ndarray< long long,1 > > _4075,int _4076){
  _checked_ptr_1<long long> _ptr__4075(_4075 ? _4075->raw() : nullptr, _4075 ? _4075->size(0) : 0);
  if ((NULL != sp.get()))
  {
    {
      int _10483 = (int)0;
      int _10484 = (int)((sp)->size(0));
      for (int _4077 = _10483; _4077 < _10484; ++_4077)
      {
        {
          _ptr__4075[safe_add( _4077,_4076 )] = ((*sp)(_4077));
        }
      }
    }
  }
  else
  {
    {
      int _10485 = (int)0;
      int _10486 = (int)((nidxs)->size(0));
      for (int _4078 = _10485; _4078 < _10486; ++_4078)
      {
        {
          _ptr__4075[safe_add( _4078,_4076 )] = _4078;
        }
      }
    }
  }
}
bool mosek::fusion::ParameterImpl :: isSparse() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->isSparse(); }bool mosek::fusion::p_ParameterImpl::isSparse(){
  return (NULL != sp.get());
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4079,_4080); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080) { return __mosek_2fusion_2ParameterImpl__slice(_4079,_4080); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080) { return __mosek_2fusion_2ParameterImpl__slice(_4079,_4080); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080){
  _checked_ptr_1<int> _ptr__4079(_4079 ? _4079->raw() : nullptr, _4079 ? _4079->size(0) : 0);
  _checked_ptr_1<int> _ptr__4080(_4080 ? _4080->raw() : nullptr, _4080 ? _4080->size(0) : 0);
  if ((((int)((_4079)->size(0)) != (int)((_4080)->size(0))) || ((int)((_4079)->size(0)) != (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  int _4081 = (int)((_4079)->size(0));
  int _10487 = (int)0;
  int _10488 = _4081;
  for (int _4082 = _10487; _4082 < _10488; ++_4082)
  {
    {
      if (((_ptr__4079[_4082] < (int)0) || ((_ptr__4079[_4082] >= _ptr__4080[_4082]) || (_ptr__4080[_4082] > ((*shape)(_4082))))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _4083 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4081)));
  _checked_ptr_1<long long> _ptr__4083(_4083 ? _4083->raw() : nullptr,_4083 ? _4083->size(0) : 0);
  _ptr__4083[(_4081 - (int)1)] = (int)1;
  int _10489 = (int)1;
  int _10490 = _4081;
  for (int _4084 = _10489; _4084 < _10490; ++_4084)
  {
    {
      _ptr__4083[((_4081 - _4084) - (int)1)] = safe_mul( _ptr__4083[(_4081 - _4084)],((*shape)(_4084)) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4085 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4081)));
  _checked_ptr_1<int> _ptr__4085(_4085 ? _4085->raw() : nullptr,_4085 ? _4085->size(0) : 0);
  std::vector<int> _10491;
  for (int _4087 = (int)0, _10492 = _4081; _4087 < _10492 ; ++_4087)
  {
    _10491.push_back((_ptr__4080[_4087] - _ptr__4079[_4087]));
  }
  auto _10493 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10491.size()),_10491.begin(),_10491.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4086 = _10493;
  _checked_ptr_1<int> _ptr__4086(_4086 ? _4086->raw() : nullptr,_4086 ? _4086->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      int _4088 = (int)1;
      int _10494 = (int)0;
      int _10495 = _4081;
      for (int _4089 = _10494; _4089 < _10495; ++_4089)
      {
        {
          _4088 *= _ptr__4086[_4089];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4090 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4088)));
      _checked_ptr_1<int> _ptr__4090(_4090 ? _4090->raw() : nullptr,_4090 ? _4090->size(0) : 0);
      int _4091 = (int)0;
      int _10496 = (int)0;
      int _10497 = (int)((nidxs)->size(0));
      for (int _4092 = _10496; _4092 < _10497; ++_4092)
      {
        {
          int _10498 = (int)0;
          int _10499 = _4081;
          for (int _4093 = _10498; _4093 < _10499; ++_4093)
          {
            {
              _ptr__4085[_4093] = (int)((_4092 / _ptr__4083[_4093]) % ((*shape)(_4093)));
            }
          }
          bool _4094 = true;
          int _10500 = (int)0;
          int _10501 = _4081;
          for (int _4095 = _10500; _4095 < _10501; ++_4095)
          {
            {
              _4094 = (_4094 && ((_ptr__4079[_4095] <= _ptr__4085[_4095]) && (_ptr__4085[_4095] < _ptr__4080[_4095])));
            }
          }
          if (_4094)
          {
            {
              _ptr__4090[_4091] = ((*nidxs)(_4092));
              ++ _4091;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4086,nullptr,_4090)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int _4096 = (int)0;
      int _10502 = (int)0;
      int _10503 = (int)((nidxs)->size(0));
      for (int _4097 = _10502; _4097 < _10503; ++_4097)
      {
        {
          int _10504 = (int)0;
          int _10505 = _4081;
          for (int _4098 = _10504; _4098 < _10505; ++_4098)
          {
            {
              _ptr__4085[_4098] = (int)((((*sp)(_4097)) / _ptr__4083[_4098]) % ((*shape)(_4098)));
            }
          }
          bool _4099 = true;
          int _10506 = (int)0;
          int _10507 = _4081;
          for (int _4100 = _10506; _4100 < _10507; ++_4100)
          {
            {
              _4099 = (_4099 && ((_ptr__4079[_4100] <= _ptr__4085[_4100]) && (_ptr__4085[_4100] < _ptr__4080[_4100])));
            }
          }
          if (_4099)
          {
            {
              ++ _4096;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4101 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4096)));
      _checked_ptr_1<int> _ptr__4101(_4101 ? _4101->raw() : nullptr,_4101 ? _4101->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4102 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4096)));
      _checked_ptr_1<long long> _ptr__4102(_4102 ? _4102->raw() : nullptr,_4102 ? _4102->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4103 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4081)));
      _checked_ptr_1<long long> _ptr__4103(_4103 ? _4103->raw() : nullptr,_4103 ? _4103->size(0) : 0);
      _ptr__4103[(_4081 - (int)1)] = (int)1;
      int _10508 = (int)1;
      int _10509 = _4081;
      for (int _4104 = _10508; _4104 < _10509; ++_4104)
      {
        {
          _ptr__4103[((_4081 - _4104) - (int)1)] = safe_mul( _ptr__4103[(_4081 - _4104)],_ptr__4086[_4104] );
        }
      }
      int _4105 = (int)0;
      int _10510 = (int)0;
      int _10511 = (int)((nidxs)->size(0));
      for (int _4106 = _10510; _4106 < _10511; ++_4106)
      {
        {
          int _10512 = (int)0;
          int _10513 = _4081;
          for (int _4107 = _10512; _4107 < _10513; ++_4107)
          {
            {
              _ptr__4085[_4106] = (int)((((*sp)(_4106)) / _ptr__4083[_4107]) % ((*shape)(_4107)));
            }
          }
          bool _4108 = true;
          int _10514 = (int)0;
          int _10515 = _4081;
          for (int _4109 = _10514; _4109 < _10515; ++_4109)
          {
            {
              _4108 = (_4108 && ((_ptr__4079[_4109] <= _ptr__4085[_4109]) && (_ptr__4085[_4109] < _ptr__4080[_4109])));
            }
          }
          if (_4108)
          {
            {
              long long _4110 = (long long)0;
              int _10516 = (int)0;
              int _10517 = _4081;
              for (int _4111 = _10516; _4111 < _10517; ++_4111)
              {
                {
                  _4110 += safe_mul( (_ptr__4085[_4111] - _ptr__4079[_4111]),_ptr__4103[_4111] );
                }
              }
              _ptr__4102[_4105] = _4110;
              _ptr__4101[_4105] = ((*nidxs)(_4106));
              ++ _4105;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4086,_4102,_4101)).as<::mosek::fusion::Parameter>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(int _4112,int _4113) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4112,_4113); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(int _4112,int _4113) { return __mosek_2fusion_2ParameterImpl__slice(_4112,_4113); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(int _4112,int _4113) { return __mosek_2fusion_2ParameterImpl__slice(_4112,_4113); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(int _4112,int _4113){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  if (((_4112 < (int)0) || ((_4113 >= _4113) || (_4113 > size))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::vector<int> _10518;
      for (int _4114 = _4112, _10519 = _4113; _4114 < _10519 ; ++_4114)
      {
        _10518.push_back(((*nidxs)(_4114)));
      }
      auto _10520 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10518.size()),_10518.begin(),_10518.end()));
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((_4113 - _4112))}),nullptr,_10520)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int _4115 = (int)0;
      int _10521 = (int)0;
      int _10522 = (int)((sp)->size(0));
      for (int _4116 = _10521; _4116 < _10522; ++_4116)
      {
        {
          if (((_4112 <= ((*sp)(_4116))) && (((*sp)(_4116)) < _4113)))
          {
            {
              ++ _4115;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4117 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4115)));
      _checked_ptr_1<int> _ptr__4117(_4117 ? _4117->raw() : nullptr,_4117 ? _4117->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4118 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4115)));
      _checked_ptr_1<long long> _ptr__4118(_4118 ? _4118->raw() : nullptr,_4118 ? _4118->size(0) : 0);
      int _4119 = (int)0;
      int _10523 = (int)0;
      int _10524 = (int)((sp)->size(0));
      for (int _4120 = _10523; _4120 < _10524; ++_4120)
      {
        {
          if (((_4112 <= ((*sp)(_4120))) && (((*sp)(_4120)) < _4113)))
          {
            {
              _ptr__4117[_4119] = ((*nidxs)(_4120));
              _ptr__4118[_4119] = (((*sp)(_4119)) - _4112);
              ++ _4119;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((_4113 - _4112))}),_4118,_4117)).as<::mosek::fusion::Parameter>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__reshape(_4121); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121) { return __mosek_2fusion_2ParameterImpl__reshape(_4121); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121) { return __mosek_2fusion_2ParameterImpl__reshape(_4121); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121){
  _checked_ptr_1<int> _ptr__4121(_4121 ? _4121->raw() : nullptr, _4121 ? _4121->size(0) : 0);
  if ((::mosek::fusion::p_Set::size(_4121) != ::mosek::fusion::p_Set::size(shape)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incompatible shape for resize"));
    }
  }
  {}
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4121,sp,nidxs)).as<::mosek::fusion::Parameter>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__asExpr() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__asExpr(){
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter((::mosek::fusion::ParameterImpl::t(_pubthis)).as<::mosek::fusion::Parameter>())).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::ParameterImpl :: getSize() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getSize(); }long long mosek::fusion::p_ParameterImpl::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::ParameterImpl :: getNumNonzero() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getNumNonzero(); }int mosek::fusion::p_ParameterImpl::getNumNonzero(){
  return (int)((nidxs)->size(0));
}
int mosek::fusion::ParameterImpl :: getND() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getND(); }int mosek::fusion::p_ParameterImpl::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ParameterImpl :: getShape() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ParameterImpl::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
int mosek::fusion::ParameterImpl :: getDim(int _4122) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getDim(_4122); }int mosek::fusion::p_ParameterImpl::getDim(int _4122){
  return ((*shape)(_4122));
}
void mosek::fusion::ParameterImpl :: getAllIndexes(std::shared_ptr< monty::ndarray< int,1 > > _4123,int _4124) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getAllIndexes(_4123,_4124); }void mosek::fusion::p_ParameterImpl::getAllIndexes(std::shared_ptr< monty::ndarray< int,1 > > _4123,int _4124){
  _checked_ptr_1<int> _ptr__4123(_4123 ? _4123->raw() : nullptr, _4123 ? _4123->size(0) : 0);
  int _10525 = (int)0;
  int _10526 = (int)((nidxs)->size(0));
  for (int _4125 = _10525; _4125 < _10526; ++_4125)
  {
    {
      _ptr__4123[safe_add( _4124,_4125 )] = ((*nidxs)(_4125));
    }
  }
}
int mosek::fusion::ParameterImpl :: getIndex(int _4126) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getIndex(_4126); }int mosek::fusion::p_ParameterImpl::getIndex(int _4126){
  return ((*nidxs)(_4126));
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ParameterImpl :: getValue() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getValue(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_ParameterImpl::getValue(){
  return mosek::fusion::p_Model::_get_impl(model.get())->getParameterValue(nidxs);
}
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,2 > > _4127) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4127); }void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,2 > > _4127){
  if (((_pubthis->getND() != (int)2) || (((int)((_4127)->size(0)) != ((*shape)((int)0))) || ((int)((_4127)->size(1)) != ((*shape)((int)1))))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching value shape"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::vector<double> _10527;
      for (int _4129 = (int)0, _10528 = ((*shape)((int)0)); _4129 < _10528 ; ++_4129)
      {
        for (int _4130 = (int)0, _10529 = ((*shape)((int)1)); _4130 < _10529 ; ++_4130)
        {
          _10527.push_back(((*_4127)(_4129,_4130)));
        }
      }
      auto _10530 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10527.size()),_10527.begin(),_10527.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _4128 = _10530;
      _checked_ptr_1<double> _ptr__4128(_4128 ? _4128->raw() : nullptr,_4128 ? _4128->size(0) : 0);
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4128);
    }
  }
  else
  {
    {
      std::vector<double> _10531;
      for (int _4132 = (int)0, _10532 = (int)((sp)->size(0)); _4132 < _10532 ; ++_4132)
      {
        _10531.push_back(((*_4127)((((*sp)(_4132)) / ((*shape)((int)1))),(((*sp)(_4132)) % ((*shape)((int)1))))));
      }
      auto _10533 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10531.size()),_10531.begin(),_10531.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _4131 = _10533;
      _checked_ptr_1<double> _ptr__4131(_4131 ? _4131->raw() : nullptr,_4131 ? _4131->size(0) : 0);
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4131);
    }
  }
}
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,1 > > _4133) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4133); }void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,1 > > _4133){
  _checked_ptr_1<double> _ptr__4133(_4133 ? _4133->raw() : nullptr, _4133 ? _4133->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      if (((int)((_4133)->size(0)) != (int)((nidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4133);
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_4133)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          std::vector<double> _10534;
          for (int _4135 = (int)0, _10535 = (int)((nidxs)->size(0)); _4135 < _10535 ; ++_4135)
          {
            _10534.push_back(_ptr__4133[((*sp)(_4135))]);
          }
          auto _10536 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10534.size()),_10534.begin(),_10534.end()));
          std::shared_ptr< monty::ndarray< double,1 > > _4134 = _10536;
          _checked_ptr_1<double> _ptr__4134(_4134 ? _4134->raw() : nullptr,_4134 ? _4134->size(0) : 0);
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4134);
        }
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: setValue(double _4136) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4136); }void mosek::fusion::p_ParameterImpl::setValue(double _4136){
  std::vector<double> _10537;
  for (long long _4137 = (int)0, _10538 = size; _4137 < _10538 ; ++_4137)
  {
    _10537.push_back(_4136);
  }
  auto _10539 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10537.size()),_10537.begin(),_10537.end()));
  mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_10539);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__getModel() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__getModel(){
  return model;
}
void mosek::fusion::p_ParameterImpl::destroy(){nidxs.reset();sp.reset();shape.reset();model.reset();}void mosek::fusion::ParameterImpl::destroy() { mosek::fusion::p_ParameterImpl::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::clone(monty::rc_ptr< ::mosek::fusion::Model > _4138) { return __mosek_2fusion_2Parameter__clone(_4138); }
monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Parameter::getModel() { return __mosek_2fusion_2Parameter__getModel(); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4145,std::shared_ptr< monty::ndarray< int,1 > > _4146) { return __mosek_2fusion_2Parameter__slice(_4145,_4146); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(std::shared_ptr< monty::ndarray< int,1 > > _4145,std::shared_ptr< monty::ndarray< int,1 > > _4146) { return __mosek_2fusion_2Parameter__slice(_4145,_4146); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(int _4147,int _4148) { return __mosek_2fusion_2Parameter__slice(_4147,_4148); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(int _4147,int _4148) { return __mosek_2fusion_2Parameter__slice(_4147,_4148); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::reshape(std::shared_ptr< monty::ndarray< int,1 > > _4149) { return __mosek_2fusion_2Parameter__reshape(_4149); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::asExpr() { return __mosek_2fusion_2Parameter__asExpr(); }
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode(mosek::fusion::p_ExprOptimizeCode *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprOptimizeCode()" << this << std::endl; */ }mosek::fusion::ExprOptimizeCode::~ExprOptimizeCode() {  /* std::cout << "~ExprOptimizeCode()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprOptimizeCode::p_ExprOptimizeCode  (::mosek::fusion::ExprOptimizeCode * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprOptimizeCode::t mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode  (monty::rc_ptr< ::mosek::fusion::Expression > _4153){ return new mosek::fusion::ExprOptimizeCode(_4153); }mosek::fusion::ExprOptimizeCode::ExprOptimizeCode  (monty::rc_ptr< ::mosek::fusion::Expression > _4153) :    ExprOptimizeCode(new mosek::fusion::p_ExprOptimizeCode(this)){ mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->_initialize(_4153); }void mosek::fusion::p_ExprOptimizeCode::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4153){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4153->getShape());
    mosek::fusion::p_ExprOptimizeCode::_get_impl(::mosek::fusion::ExprOptimizeCode::t(_pubthis))->expr = _4153;
  }
}void mosek::fusion::p_ExprOptimizeCode::compress_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _4154,int _4155,std::shared_ptr< monty::ndarray< int,1 > > _4156,int _4157,std::shared_ptr< monty::ndarray< int,1 > > _4158,int _4159,std::shared_ptr< monty::ndarray< double,1 > > _4160,int _4161,std::shared_ptr< monty::ndarray< double,1 > > _4162,int _4163,int _4164,int _4165,int _4166){
  _checked_ptr_1<int> _ptr__4156(_4156 ? _4156->raw() : nullptr, _4156 ? _4156->size(0) : 0);
  _checked_ptr_1<int> _ptr__4158(_4158 ? _4158->raw() : nullptr, _4158 ? _4158->size(0) : 0);
  _checked_ptr_1<double> _ptr__4160(_4160 ? _4160->raw() : nullptr, _4160 ? _4160->size(0) : 0);
  _checked_ptr_1<double> _ptr__4162(_4162 ? _4162->raw() : nullptr, _4162 ? _4162->size(0) : 0);
  int _4167 = _ptr__4158[safe_add( _4159,_4155 )];
  int _4168 = _4154->alloci32(safe_add( _4167,(int)2 ));
  int _4169 = (int)0;
  int _4170 = _4154->alloci32(safe_add( _4167,(int)2 ));
  int _4171 = _4154->alloci32(safe_add( _4167,(int)3 ));
  int _4172 = _4154->allocf64(safe_add( _4167,(int)2 ));
  int _4173 = _4154->alloci32(safe_add( _4167,(int)2 ));
  int _4174 = (int)0;
  int _4175 = (-(int)1);
  std::shared_ptr< monty::ndarray< int,1 > > _4176 = mosek::fusion::p_WorkStack::_get_impl(_4154)->i32;
  _checked_ptr_1<int> _ptr__4176(_4176 ? _4176->raw() : nullptr,_4176 ? _4176->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4177 = mosek::fusion::p_WorkStack::_get_impl(_4154)->f64;
  _checked_ptr_1<double> _ptr__4177(_4177 ? _4177->raw() : nullptr,_4177 ? _4177->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4178 = _4176;
  _checked_ptr_1<int> _ptr__4178(_4178 ? _4178->raw() : nullptr,_4178 ? _4178->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4179 = _4177;
  _checked_ptr_1<double> _ptr__4179(_4179 ? _4179->raw() : nullptr,_4179 ? _4179->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4180 = _4176;
  _checked_ptr_1<int> _ptr__4180(_4180 ? _4180->raw() : nullptr,_4180 ? _4180->size(0) : 0);
  int _4181 = mosek::fusion::p_WorkStack::_get_impl(_4154)->pi32;
  int _4182 = mosek::fusion::p_WorkStack::_get_impl(_4154)->pi64;
  int _4183 = mosek::fusion::p_WorkStack::_get_impl(_4154)->pf64;
  _ptr__4180[_4166] = (int)0;
  int _4184 = (int)0;
  int _10540 = (int)0;
  int _10541 = _4155;
  for (int _4185 = _10540; _4185 < _10541; ++_4185)
  {
    {
      int _4186 = _ptr__4158[safe_add( safe_add( _4159,_4185 ),(int)1 )];
      int _4187 = _ptr__4158[safe_add( _4159,_4185 )];
      if ((_4175 < (int)0))
      {
        {
          _4169 = (int)0;
          _4174 = (int)0;
          _ptr__4176[_4171] = (int)0;
          int _10542 = (int)0;
          int _10543 = (_4186 - _4187);
          for (int _4188 = _10542; _4188 < _10543; ++_4188)
          {
            {
              _ptr__4178[safe_add( _4173,_4188 )] = (-(int)9999);
            }
          }
          int _10544 = _4187;
          int _10545 = _4186;
          for (int _4189 = _10544; _4189 < _10545; ++_4189)
          {
            {
              int _4190 = _ptr__4156[safe_add( _4157,_4189 )];
              double _4191 = _ptr__4162[safe_add( _4163,_4189 )];
              if ((_4190 == 0))
              {
                {
                }
              }
              else if((_4190 == 2))
              {
                {
                  _ptr__4178[safe_add( _4173,_4174 )] = 2;
                  _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                  _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                  _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                  ++ _4169;
                  ++ _4174;
                }
              }
              else if((_4190 == 1))
              {
                {
                  _ptr__4176[safe_add( _4173,_4174 )] = _4190;
                  _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                  _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                  _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                  ++ _4169;
                  ++ _4174;
                }
              }
              else if((_4190 == 3))
              {
                {
                  if ((_4169 >= (int)2))
                  {
                    {
                      int _4192 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      int _4193 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if (((_ptr__4176[safe_add( _4173,_4193 )] == 2) && (_ptr__4176[safe_add( _4173,_4192 )] == 2)))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (_ptr__4177[safe_add( _4172,_4193 )] + _ptr__4177[safe_add( _4172,_4192 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4193 )] == 2) && ((_ptr__4177[safe_add( _4172,_4193 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4193 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4192;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4192 )] == 2) && ((_ptr__4177[safe_add( _4172,_4192 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4192 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4193;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)2 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4193;
                          _ptr__4176[safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),(int)1 )] = _4192;
                          _ptr__4176[safe_add( _4173,_4174 )] = _4190;
                          _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 5))
              {
                {
                  if ((_4169 >= (int)2))
                  {
                    {
                      int _4194 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      int _4195 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if (((_ptr__4176[safe_add( _4173,_4195 )] == 2) && (_ptr__4176[safe_add( _4173,_4194 )] == 2)))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (_ptr__4177[safe_add( _4172,_4195 )] * _ptr__4177[safe_add( _4172,_4194 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4195 )] == 2) && ((_ptr__4177[safe_add( _4172,_4195 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4195 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4194 )] == 2) && ((_ptr__4177[safe_add( _4172,_4194 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4194 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4194 )] == 2) && ((_ptr__4177[safe_add( _4172,_4194 )] <= 1.0) && (_ptr__4177[safe_add( _4172,_4194 )] >= 1.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4168,_4169 )] = _4195;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4195 )] == 2) && ((_ptr__4177[safe_add( _4172,_4195 )] <= 1.0) && (_ptr__4177[safe_add( _4172,_4195 )] >= 1.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4168,_4169 )] = _4194;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)2 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4195;
                          _ptr__4176[safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),(int)1 )] = _4194;
                          _ptr__4176[safe_add( _4173,_4174 )] = 5;
                          _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 4))
              {
                {
                  if ((_4169 >= (int)1))
                  {
                    {
                      int _4196 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if ((_ptr__4176[safe_add( _4173,_4196 )] == 2))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (-_ptr__4177[safe_add( _4172,_4196 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = _ptr__4156[safe_add( _4157,_4189 )];
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4196;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 6))
              {
                {
                  if ((_4169 >= (int)1))
                  {
                    {
                      int _4197 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if ((_ptr__4176[safe_add( _4173,_4197 )] == 2))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (1.0 / _ptr__4177[safe_add( _4172,_4197 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = _ptr__4156[safe_add( _4157,_4189 )];
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4197;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 8))
              {
                {
                  int _4198 = (int)_4191;
                  if ((_4198 < (int)0))
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                  else if((_4198 > _4169))
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                  else if((_4198 == (int)0))
                  {
                    {
                      _ptr__4176[safe_add( _4173,_4174 )] = 2;
                      _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                      _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                      _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                      ++ _4169;
                      ++ _4174;
                    }
                  }
                  else if((_4198 == (int)1))
                  {
                    {
                      _ptr__4176[safe_add( _4173,_4174 )] = (int)0;
                      _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                      _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                      ++ _4169;
                      ++ _4174;
                    }
                  }
                  else
                  {
                    {
                      std::vector<int> _10546;
                      for (int _4200 = (int)0, _10547 = _4198; _4200 < _10547 ; ++_4200)
                      {
                        _10546.push_back(_ptr__4176[((safe_add( _4168,_4169 ) - (int)1) - _4200)]);
                      }
                      auto _10548 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10546.size()),_10546.begin(),_10546.end()));
                      std::shared_ptr< monty::ndarray< int,1 > > _4199 = _10548;
                      _checked_ptr_1<int> _ptr__4199(_4199 ? _4199->raw() : nullptr,_4199 ? _4199->size(0) : 0);
                      _4169 -= _4198;
                      {
                        int _4201 = (_4198 - (int)1);
                        int _4202 = (int)0;
                        while ( (_4202 < _4201) )
                        {
                          {
                            while ( ((_4202 < _4201) && (_ptr__4176[safe_add( _4173,_ptr__4199[_4202] )] == 2)) )
                            {
                              {
                                ++ _4202;
                              }
                            }
                            while ( ((_4202 < _4201) && (_ptr__4176[safe_add( _4173,_ptr__4199[_4201] )] != 2)) )
                            {
                              {
                                -- _4201;
                              }
                            }
                            if ((_4202 < _4201))
                            {
                              {
                                int _4203 = _ptr__4199[_4202];
                                _ptr__4199[_4202] = _ptr__4199[_4201];
                                _ptr__4199[_4201] = _4203;
                                ++ _4202;
                                -- _4201;
                              }
                            }
                            {}
                          }
                        }
                        double _4204 = 0.0;
                        int _4205 = (int)0;
                        while ( ((_4205 < _4198) && (_ptr__4176[safe_add( _4173,_ptr__4199[_4205] )] == 2)) )
                        {
                          {
                            _4204 += _ptr__4177[safe_add( _4172,_ptr__4199[_4205] )];
                            ++ _4205;
                          }
                        }
                        int _10549;
                        bool _10550 = (_4205 > (int)0);
                        if (_10550)
                        {
                          _10549 = safe_add( (_4198 - _4205),(int)1 );
                        }
                        else
                        {
                          _10549 = _4198;
                        }
                        int _4206 = _10549;
                        int _4207 = (int)0;
                        if ((_4205 < (int)2))
                        {
                          {
                            int _10551 = (int)0;
                            int _10552 = _4198;
                            for (int _4208 = _10551; _4208 < _10552; ++_4208)
                            {
                              {
                                _ptr__4176[safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),_4208 )] = _ptr__4199[_4208];
                              }
                            }
                            _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],_4198 );
                            _ptr__4176[safe_add( _4173,_4174 )] = 8;
                            _ptr__4177[safe_add( _4172,_4174 )] = _4198;
                            _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                            ++ _4169;
                            ++ _4174;
                          }
                        }
                        else
                        {
                          {
                            _ptr__4176[safe_add( _4173,_4174 )] = 2;
                            _ptr__4177[safe_add( _4172,_4174 )] = _4204;
                            _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                            ++ _4174;
                            if ((_4205 == _4198))
                            {
                              {
                                _ptr__4176[safe_add( _4168,_4169 )] = (_4174 - (int)1);
                                ++ _4169;
                              }
                            }
                            else
                            {
                              {
                                _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = (_4174 - (int)1);
                                int _10553 = _4205;
                                int _10554 = _4198;
                                for (int _4209 = _10553; _4209 < _10554; ++_4209)
                                {
                                  {
                                    _ptr__4176[safe_add( (safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),_4209 ) - _4205),(int)1 )] = _ptr__4199[_4209];
                                  }
                                }
                                _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],_4206 );
                                _ptr__4176[safe_add( _4173,_4174 )] = 8;
                                _ptr__4177[safe_add( _4172,_4174 )] = _4206;
                                _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                                ++ _4169;
                                ++ _4174;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                {
                  _4175 = _4189;
                }
              }
            }
          }
        }
      }
      {}
      if (((_4175 < (int)0) && (_4169 != (int)1)))
      {
        {
          _4175 = _4174;
        }
      }
      {}
      if ((_4175 < (int)0))
      {
        {
          int _4210 = _4184;
          int _4211 = _4210;
          if ((_ptr__4176[safe_add( _4173,_ptr__4176[(safe_add( _4168,_4169 ) - (int)1)] )] == 2))
          {
            {
              _ptr__4160[safe_add( _4161,_4185 )] += _ptr__4177[safe_add( _4172,_ptr__4176[(safe_add( _4168,_4169 ) - (int)1)] )];
              _ptr__4178[safe_add( _4164,_4211 )] = 10;
              _ptr__4179[safe_add( _4165,_4211 )] = 0.0;
              ++ _4211;
            }
          }
          else
          {
            {
              if (((_ptr__4160[safe_add( _4161,_4185 )] < (int)0) || ((int)0 < _ptr__4160[safe_add( _4161,_4185 )])))
              {
                {
                  _ptr__4178[safe_add( _4164,_4211 )] = 3;
                  ++ _4211;
                  _ptr__4178[safe_add( _4164,_4211 )] = 2;
                  _ptr__4179[safe_add( _4165,_4211 )] = _ptr__4160[safe_add( _4161,_4185 )];
                  ++ _4211;
                  _ptr__4160[safe_add( _4161,_4185 )] = (int)0;
                }
              }
              {}
              while ( (_4169 > (int)0) )
              {
                {
                  int _4212 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                  -- _4169;
                  int _4213 = _ptr__4176[safe_add( _4173,_4212 )];
                  double _4214 = _ptr__4177[safe_add( _4172,_4212 )];
                  _ptr__4178[safe_add( _4164,_4211 )] = _4213;
                  _ptr__4179[safe_add( _4165,_4211 )] = _4214;
                  ++ _4211;
                  int _10555 = _ptr__4176[safe_add( _4171,_4212 )];
                  int _10556 = _ptr__4176[safe_add( safe_add( _4171,_4212 ),(int)1 )];
                  for (int _4215 = _10555; _4215 < _10556; ++_4215)
                  {
                    {
                      _ptr__4176[safe_add( _4168,_4169 )] = _ptr__4176[safe_add( _4170,_4215 )];
                      ++ _4169;
                    }
                  }
                }
              }
              int _4216 = _4211;
              -- _4216;
              while ( (_4210 < _4216) )
              {
                {
                  int _4217 = _ptr__4178[safe_add( _4164,_4210 )];
                  double _4218 = _ptr__4179[safe_add( _4165,_4210 )];
                  _ptr__4178[safe_add( _4164,_4210 )] = _ptr__4178[safe_add( _4164,_4216 )];
                  _ptr__4179[safe_add( _4165,_4210 )] = _ptr__4179[safe_add( _4165,_4216 )];
                  _ptr__4178[safe_add( _4164,_4216 )] = _4217;
                  _ptr__4179[safe_add( _4165,_4216 )] = _4218;
                  ++ _4210;
                  -- _4216;
                }
              }
            }
          }
          _ptr__4180[safe_add( safe_add( _4166,_4185 ),(int)1 )] = _4211;
          _4184 = _4211;
        }
      }
      {}
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_4154)->pi32 = _4181;
  mosek::fusion::p_WorkStack::_get_impl(_4154)->pi64 = _4182;
  mosek::fusion::p_WorkStack::_get_impl(_4154)->pf64 = _4183;
  if ((_4175 >= (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid parameterization code list"));
    }
  }
  {}
}
void mosek::fusion::ExprOptimizeCode :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4219,monty::rc_ptr< ::mosek::fusion::WorkStack > _4220,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221) { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->eval(_4219,_4220,_4221); }void mosek::fusion::p_ExprOptimizeCode::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4219,monty::rc_ptr< ::mosek::fusion::WorkStack > _4220,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221){
  expr->eval(_4220,_4219,_4221);
  _4220->pop_expr();
  int _4222 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nd;
  int _4223 = mosek::fusion::p_WorkStack::_get_impl(_4220)->shape_base;
  int _4224 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nelem;
  int _4225 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nnz;
  bool _4226 = mosek::fusion::p_WorkStack::_get_impl(_4220)->hassp;
  int _4227 = mosek::fusion::p_WorkStack::_get_impl(_4220)->ncodeatom;
  int _4228 = mosek::fusion::p_WorkStack::_get_impl(_4220)->ptr_base;
  int _4229 = mosek::fusion::p_WorkStack::_get_impl(_4220)->sp_base;
  int _4230 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nidxs_base;
  int _4231 = mosek::fusion::p_WorkStack::_get_impl(_4220)->cof_base;
  int _4232 = mosek::fusion::p_WorkStack::_get_impl(_4220)->code_base;
  int _4233 = mosek::fusion::p_WorkStack::_get_impl(_4220)->codeptr_base;
  int _4234 = mosek::fusion::p_WorkStack::_get_impl(_4220)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4235 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i32;
  _checked_ptr_1<int> _ptr__4235(_4235 ? _4235->raw() : nullptr,_4235 ? _4235->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4236 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i64;
  _checked_ptr_1<long long> _ptr__4236(_4236 ? _4236->raw() : nullptr,_4236 ? _4236->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4237 = mosek::fusion::p_WorkStack::_get_impl(_4220)->f64;
  _checked_ptr_1<double> _ptr__4237(_4237 ? _4237->raw() : nullptr,_4237 ? _4237->size(0) : 0);
  if ((_4227 == (int)0))
  {
    {
      _4219->alloc_expr(_4222,_4224,_4225,_4226,(int)0);
      int _4238 = mosek::fusion::p_WorkStack::_get_impl(_4219)->ptr_base;
      int _4239 = mosek::fusion::p_WorkStack::_get_impl(_4219)->sp_base;
      int _4240 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nidxs_base;
      int _4241 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cof_base;
      int _4242 = mosek::fusion::p_WorkStack::_get_impl(_4219)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4243 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i32;
      _checked_ptr_1<int> _ptr__4243(_4243 ? _4243->raw() : nullptr,_4243 ? _4243->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4244 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i64;
      _checked_ptr_1<long long> _ptr__4244(_4244 ? _4244->raw() : nullptr,_4244 ? _4244->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4245 = mosek::fusion::p_WorkStack::_get_impl(_4219)->f64;
      _checked_ptr_1<double> _ptr__4245(_4245 ? _4245->raw() : nullptr,_4245 ? _4245->size(0) : 0);
      int _10557 = (int)0;
      int _10558 = safe_add( _4224,(int)1 );
      for (int _4246 = _10557; _4246 < _10558; ++_4246)
      {
        {
          _ptr__4243[safe_add( _4238,_4246 )] = _ptr__4235[safe_add( _4228,_4246 )];
        }
      }
      int _10559 = (int)0;
      int _10560 = _4222;
      for (int _4247 = _10559; _4247 < _10560; ++_4247)
      {
        {
          _ptr__4243[safe_add( _4242,_4247 )] = _ptr__4235[safe_add( _4223,_4247 )];
        }
      }
      int _10561 = (int)0;
      int _10562 = _4225;
      for (int _4248 = _10561; _4248 < _10562; ++_4248)
      {
        {
          _ptr__4244[safe_add( _4240,_4248 )] = _ptr__4236[safe_add( _4230,_4248 )];
        }
      }
      int _10563 = (int)0;
      int _10564 = _4225;
      for (int _4249 = _10563; _4249 < _10564; ++_4249)
      {
        {
          _ptr__4245[safe_add( _4241,_4249 )] = _ptr__4237[safe_add( _4231,_4249 )];
        }
      }
      if (_4226)
      {
        {
          int _10565 = (int)0;
          int _10566 = _4224;
          for (int _4250 = _10565; _4250 < _10566; ++_4250)
          {
            {
              _ptr__4244[safe_add( _4239,_4250 )] = _ptr__4236[safe_add( _4229,_4250 )];
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4251 = _4221->alloci32(_4227);
      int _4252 = _4221->alloci32(safe_add( _4225,(int)1 ));
      int _4253 = _4221->allocf64(_4227);
      ::mosek::fusion::p_ExprOptimizeCode::compress_code(_4221,_4225,_4235,_4232,_4235,_4233,_4237,_4231,_4237,_4234,_4251,_4253,_4252);
      std::shared_ptr< monty::ndarray< int,1 > > _4254 = mosek::fusion::p_WorkStack::_get_impl(_4221)->i32;
      _checked_ptr_1<int> _ptr__4254(_4254 ? _4254->raw() : nullptr,_4254 ? _4254->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4255 = mosek::fusion::p_WorkStack::_get_impl(_4221)->f64;
      _checked_ptr_1<double> _ptr__4255(_4255 ? _4255->raw() : nullptr,_4255 ? _4255->size(0) : 0);
      int _4256 = (int)0;
      int _4257 = (int)0;
      int _4258 = (int)0;
      int _10567 = (int)0;
      int _10568 = _4224;
      for (int _4259 = _10567; _4259 < _10568; ++_4259)
      {
        {
          int _4260 = (int)0;
          int _10569 = _ptr__4235[safe_add( _4228,_4259 )];
          int _10570 = _ptr__4235[safe_add( safe_add( _4228,_4259 ),(int)1 )];
          for (int _4261 = _10569; _4261 < _10570; ++_4261)
          {
            {
              if (((_ptr__4237[safe_add( _4231,_4261 )] < (int)0) || ((int)0 < _ptr__4237[safe_add( _4231,_4261 )])))
              {
                {
                  ++ _4257;
                  ++ _4260;
                  ++ _4256;
                }
              }
              else
              {
                {
                  if (((_ptr__4254[safe_add( safe_add( _4252,_4261 ),(int)1 )] - _ptr__4254[safe_add( _4252,_4261 )]) > (int)1))
                  {
                    {
                      ++ _4257;
                      ++ _4260;
                      _4256 += (_ptr__4254[safe_add( safe_add( _4252,_4261 ),(int)1 )] - _ptr__4254[safe_add( _4252,_4261 )]);
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__4254[safe_add( _4251,_ptr__4254[safe_add( _4252,_4261 )] )] != 10))
                      {
                        {
                          ++ _4257;
                          ++ _4260;
                          ++ _4256;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          if ((_4260 > (int)0))
          {
            {
              ++ _4258;
            }
          }
          {}
        }
      }
      bool _4262 = false;
      {
        long long _4263 = (long long)1;
        int _10571 = (int)0;
        int _10572 = _4222;
        for (int _4264 = _10571; _4264 < _10572; ++_4264)
        {
          {
            _4263 *= _ptr__4235[safe_add( _4223,_4264 )];
          }
        }
        _4262 = (_4263 > _4258);
      }
      _4219->alloc_expr(_4222,_4258,_4257,_4262,_4256);
      int _4265 = mosek::fusion::p_WorkStack::_get_impl(_4219)->ptr_base;
      int _4266 = mosek::fusion::p_WorkStack::_get_impl(_4219)->sp_base;
      int _4267 = mosek::fusion::p_WorkStack::_get_impl(_4219)->shape_base;
      int _4268 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nidxs_base;
      int _4269 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cof_base;
      int _4270 = mosek::fusion::p_WorkStack::_get_impl(_4219)->code_base;
      int _4271 = mosek::fusion::p_WorkStack::_get_impl(_4219)->codeptr_base;
      int _4272 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4273 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i32;
      _checked_ptr_1<int> _ptr__4273(_4273 ? _4273->raw() : nullptr,_4273 ? _4273->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4274 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i64;
      _checked_ptr_1<long long> _ptr__4274(_4274 ? _4274->raw() : nullptr,_4274 ? _4274->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4275 = mosek::fusion::p_WorkStack::_get_impl(_4219)->f64;
      _checked_ptr_1<double> _ptr__4275(_4275 ? _4275->raw() : nullptr,_4275 ? _4275->size(0) : 0);
      int _10573 = (int)0;
      int _10574 = _4222;
      for (int _4276 = _10573; _4276 < _10574; ++_4276)
      {
        {
          _ptr__4273[safe_add( _4267,_4276 )] = _ptr__4235[safe_add( _4223,_4276 )];
        }
      }
      if ((_4256 == (int)0))
      {
        {
          int _10575 = (int)0;
          int _10576 = _4225;
          for (int _4277 = _10575; _4277 < _10576; ++_4277)
          {
            {
              _ptr__4274[safe_add( _4268,_4277 )] = _ptr__4236[safe_add( _4230,_4277 )];
            }
          }
          int _10577 = (int)0;
          int _10578 = _4225;
          for (int _4278 = _10577; _4278 < _10578; ++_4278)
          {
            {
              _ptr__4275[safe_add( _4269,_4278 )] = _ptr__4237[safe_add( _4231,_4278 )];
            }
          }
          int _10579 = (int)0;
          int _10580 = safe_add( _4224,(int)1 );
          for (int _4279 = _10579; _4279 < _10580; ++_4279)
          {
            {
              _ptr__4273[safe_add( _4265,_4279 )] = _ptr__4273[safe_add( _4228,_4279 )];
            }
          }
          if (_4226)
          {
            {
              int _10581 = (int)0;
              int _10582 = _4224;
              for (int _4280 = _10581; _4280 < _10582; ++_4280)
              {
                {
                  _ptr__4274[safe_add( _4266,_4280 )] = _ptr__4274[safe_add( _4229,_4280 )];
                }
              }
            }
          }
          {}
        }
      }
      else
      {
        {
          int _4281 = (int)0;
          int _4282 = (int)0;
          int _4283 = (int)0;
          _ptr__4273[_4265] = (int)0;
          if ((_4256 > (int)0))
          {
            {
              _ptr__4273[_4271] = (int)0;
            }
          }
          {}
          int _10583 = (int)0;
          int _10584 = _4224;
          for (int _4284 = _10583; _4284 < _10584; ++_4284)
          {
            {
              int _4285 = (int)0;
              int _10585 = _ptr__4235[safe_add( _4228,_4284 )];
              int _10586 = _ptr__4235[safe_add( safe_add( _4228,_4284 ),(int)1 )];
              for (int _4286 = _10585; _4286 < _10586; ++_4286)
              {
                {
                  if (((_ptr__4237[safe_add( _4231,_4286 )] < (int)0) || ((int)0 < _ptr__4237[safe_add( _4231,_4286 )])))
                  {
                    {
                      _ptr__4274[safe_add( _4268,_4283 )] = _ptr__4236[safe_add( _4230,_4286 )];
                      _ptr__4275[safe_add( _4269,_4283 )] = _ptr__4237[safe_add( _4231,_4286 )];
                      _ptr__4273[safe_add( _4270,_4281 )] = _ptr__4254[safe_add( _4251,_ptr__4254[safe_add( _4252,_4286 )] )];
                      _ptr__4275[safe_add( _4272,_4281 )] = _ptr__4255[safe_add( _4253,_ptr__4254[safe_add( _4252,_4286 )] )];
                      ++ _4281;
                      _ptr__4273[safe_add( safe_add( _4271,_4283 ),(int)1 )] = _4281;
                      ++ _4283;
                      ++ _4285;
                    }
                  }
                  else
                  {
                    {
                      if ((((_ptr__4254[safe_add( safe_add( _4252,_4286 ),(int)1 )] - _ptr__4254[safe_add( _4252,_4286 )]) > (int)1) || (_ptr__4254[safe_add( _4251,_ptr__4254[safe_add( _4252,_4286 )] )] != 10)))
                      {
                        {
                          _ptr__4274[safe_add( _4268,_4283 )] = _ptr__4236[safe_add( _4230,_4286 )];
                          _ptr__4275[safe_add( _4269,_4283 )] = 0.0;
                          int _10587 = _ptr__4254[safe_add( _4252,_4286 )];
                          int _10588 = _ptr__4254[safe_add( safe_add( _4252,_4286 ),(int)1 )];
                          for (int _4287 = _10587; _4287 < _10588; ++_4287)
                          {
                            {
                              _ptr__4273[safe_add( _4270,_4281 )] = _ptr__4254[safe_add( _4251,_4287 )];
                              _ptr__4275[safe_add( _4272,_4281 )] = _ptr__4255[safe_add( _4253,_4287 )];
                              ++ _4281;
                            }
                          }
                          _ptr__4273[safe_add( safe_add( _4271,_4283 ),(int)1 )] = _4281;
                          ++ _4283;
                          ++ _4285;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              if ((_4285 > (int)0))
              {
                {
                  _ptr__4273[safe_add( safe_add( _4265,_4282 ),(int)1 )] = _4283;
                  if (_4262)
                  {
                    {
                      _ptr__4274[safe_add( _4266,_4282 )] = _ptr__4236[safe_add( _4229,_4284 )];
                    }
                  }
                  {}
                  ++ _4282;
                }
              }
              {}
            }
          }
          if ((_4282 != _4258))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nelem"));
            }
          }
          {}
          if ((_4283 != _4257))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nnz"));
            }
          }
          {}
          if ((_4281 != _4256))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result num code atoms"));
            }
          }
          {}
          if ((_4256 > (int)0))
          {
            {
              if ((_ptr__4273[safe_add( _4271,_4257 )] != _4256))
              {
                {
                  throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
}
std::string mosek::fusion::ExprOptimizeCode :: toString() { return mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprOptimizeCode::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprOptimizeCode("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprOptimizeCode::destroy(){expr.reset();}void mosek::fusion::ExprOptimizeCode::destroy() { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->destroy(); }mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCompress::p_ExprCompress  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4288){ return new mosek::fusion::ExprCompress(_4288); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4288) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4288); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4288){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4288->getShape());
    eps = 0.0;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4288;
  }
}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4289,    double _4290){ return new mosek::fusion::ExprCompress(_4289,_4290); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4289,    double _4290) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4289,_4290); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4289,    double _4290){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4289->getShape());
    eps = _4290;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4289;
  }
}void mosek::fusion::ExprCompress::arg_sort  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4291,    monty::rc_ptr< ::mosek::fusion::WorkStack > _4292,    int _4293,    int _4294,    int _4295,    int _4296,    int _4297) { mosek::fusion::p_ExprCompress::arg_sort(_4291,_4292,_4293,_4294,_4295,_4296,_4297); }void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4291,monty::rc_ptr< ::mosek::fusion::WorkStack > _4292,int _4293,int _4294,int _4295,int _4296,int _4297){
  int _4298 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4299 = mosek::fusion::p_WorkStack::_get_impl(_4291)->i32;
  _checked_ptr_1<int> _ptr__4299(_4299 ? _4299->raw() : nullptr,_4299 ? _4299->size(0) : 0);
  int _10589 = (int)0;
  int _10590 = _4294;
  for (int _4300 = _10589; _4300 < _10590; ++_4300)
  {
    {
      if (((_ptr__4299[safe_add( safe_add( _4296,_4300 ),(int)1 )] - _ptr__4299[safe_add( _4296,_4300 )]) > _4298))
      {
        {
          _4298 = (_ptr__4299[safe_add( safe_add( _4296,_4300 ),(int)1 )] - _ptr__4299[safe_add( _4296,_4300 )]);
        }
      }
      {}
    }
  }
  int _10591;
  bool _10592 = (_4298 > (int)2);
  if (_10592)
  {
    _10591 = _4292->alloci32(safe_mul( _4298,(int)2 ));
  }
  else
  {
    _10591 = (int)99999;
  }
  int _4301 = _10591;
  std::shared_ptr< monty::ndarray< int,1 > > _4302 = mosek::fusion::p_WorkStack::_get_impl(_4292)->i32;
  _checked_ptr_1<int> _ptr__4302(_4302 ? _4302->raw() : nullptr,_4302 ? _4302->size(0) : 0);
  _4299 = mosek::fusion::p_WorkStack::_get_impl(_4291)->i32;
  _ptr__4299.update(_4299 ? _4299->raw() : nullptr, _4299 ? _4299->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4303 = mosek::fusion::p_WorkStack::_get_impl(_4291)->i64;
  _checked_ptr_1<long long> _ptr__4303(_4303 ? _4303->raw() : nullptr,_4303 ? _4303->size(0) : 0);
  int _10593 = (int)0;
  int _10594 = _4294;
  for (int _4304 = _10593; _4304 < _10594; ++_4304)
  {
    {
      int _4305 = _ptr__4299[safe_add( _4296,_4304 )];
      int _4306 = _ptr__4299[safe_add( safe_add( _4296,_4304 ),(int)1 )];
      int _4307 = (_4306 - _4305);
      if ((_4307 == (int)0))
      {
        {
        }
      }
      else if((_4307 == (int)1))
      {
        {
          _ptr__4302[safe_add( _4293,_4305 )] = _4305;
        }
      }
      else if((_4307 == (int)2))
      {
        {
          if ((_ptr__4303[safe_add( _4297,_4305 )] <= _ptr__4303[safe_add( safe_add( _4297,_4305 ),(int)1 )]))
          {
            {
              _ptr__4302[safe_add( _4293,_4305 )] = _4305;
              _ptr__4302[safe_add( safe_add( _4293,_4305 ),(int)1 )] = safe_add( _4305,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4302[safe_add( _4293,_4305 )] = safe_add( _4305,(int)1 );
              _ptr__4302[safe_add( safe_add( _4293,_4305 ),(int)1 )] = _4305;
            }
          }
        }
      }
      else
      {
        {
          long long _4308 = _ptr__4303[safe_add( _4297,_4305 )];
          long long _4309 = _ptr__4303[safe_add( _4297,_4305 )];
          bool _4310 = false;
          int _10595 = safe_add( _4305,(int)1 );
          int _10596 = _4306;
          for (int _4311 = _10595; _4311 < _10596; ++_4311)
          {
            {
              _4310 = (_4310 && (_ptr__4303[(safe_add( _4297,_4311 ) - (int)1)] <= _ptr__4303[safe_add( _4297,_4311 )]));
              if ((_4308 > _ptr__4303[safe_add( _4297,_4311 )]))
              {
                {
                  _4308 = _ptr__4303[safe_add( _4297,_4311 )];
                }
              }
              {}
              if ((_4309 < _ptr__4303[safe_add( _4297,_4311 )]))
              {
                {
                  _4309 = _ptr__4303[safe_add( _4297,_4311 )];
                }
              }
              {}
            }
          }
          if (_4310)
          {
            {
              int _10597 = _4305;
              int _10598 = _4306;
              for (int _4312 = _10597; _4312 < _10598; ++_4312)
              {
                {
                  _ptr__4302[safe_add( _4293,_4312 )] = _4312;
                }
              }
            }
          }
          else if((safe_add( (_4309 - _4308),(int)1 ) <= _4307))
          {
            {
              long long _4313 = safe_add( (_4309 - _4308),(int)1 );
              int _10599 = (int)0;
              long long _10600 = safe_add( _4313,(int)1 );
              for (long long _4314 = _10599; _4314 < _10600; ++_4314)
              {
                {
                  _ptr__4302[safe_add( _4301,_4314 )] = (int)0;
                }
              }
              int _10601 = _4305;
              int _10602 = _4306;
              for (int _4315 = _10601; _4315 < _10602; ++_4315)
              {
                {
                  ++ _ptr__4302[safe_add( (safe_add( _4301,_ptr__4303[safe_add( _4297,_4315 )] ) - _4308),(int)1 )];
                }
              }
              int _10603 = (int)0;
              long long _10604 = _4313;
              for (long long _4316 = _10603; _4316 < _10604; ++_4316)
              {
                {
                  _ptr__4302[safe_add( safe_add( _4301,_4316 ),(int)1 )] += _ptr__4302[safe_add( _4301,_4316 )];
                }
              }
              int _10605 = _4305;
              int _10606 = _4306;
              for (int _4317 = _10605; _4317 < _10606; ++_4317)
              {
                {
                  _ptr__4302[safe_add( safe_add( _4293,_4305 ),_ptr__4302[(safe_add( _4301,_ptr__4303[safe_add( _4297,_4317 )] ) - _4308)] )] = _4317;
                  ++ _ptr__4302[(safe_add( _4301,_ptr__4303[safe_add( _4297,_4317 )] ) - _4308)];
                }
              }
            }
          }
          else
          {
            {
              int _4318 = (int)1;
              int _4319 = _4301;
              int _4320 = safe_add( _4301,_4307 );
              int _10607 = (int)0;
              int _10608 = _4307;
              for (int _4321 = _10607; _4321 < _10608; ++_4321)
              {
                {
                  _ptr__4302[safe_add( _4319,_4321 )] = _4321;
                }
              }
              while ( (_4318 < _4307) )
              {
                {
                  int _4322 = safe_mul( _4318,(int)2 );
                  int _4323 = (_4307 / _4322);
                  if ((safe_add( safe_mul( _4323,_4322 ),_4318 ) < _4307))
                  {
                    {
                      ++ _4323;
                    }
                  }
                  {}
                  int _4324 = (int)0;
                  int _10609 = (int)0;
                  int _10610 = _4323;
                  for (int _4325 = _10609; _4325 < _10610; ++_4325)
                  {
                    {
                      int _4326 = safe_mul( _4325,_4322 );
                      int _4327 = safe_add( _4326,_4318 );
                      int _4328 = _4327;
                      int _4329 = safe_add( _4328,_4318 );
                      if ((_4329 > _4307))
                      {
                        {
                          _4329 = _4307;
                        }
                      }
                      {}
                      while ( ((_4326 < _4327) && (_4328 < _4329)) )
                      {
                        {
                          if ((_ptr__4303[safe_add( safe_add( _4297,_ptr__4302[safe_add( _4319,_4326 )] ),_4305 )] <= _ptr__4303[safe_add( safe_add( _4297,_ptr__4302[safe_add( _4319,_4328 )] ),_4305 )]))
                          {
                            {
                              _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4326 )];
                              ++ _4324;
                              ++ _4326;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4328 )];
                              ++ _4324;
                              ++ _4328;
                            }
                          }
                        }
                      }
                      while ( (_4326 < _4327) )
                      {
                        {
                          _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4326 )];
                          ++ _4324;
                          ++ _4326;
                        }
                      }
                      while ( (_4328 < _4329) )
                      {
                        {
                          _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4328 )];
                          ++ _4324;
                          ++ _4328;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4323,_4322 ) < _4307))
                  {
                    {
                      int _4330 = safe_mul( _4323,_4322 );
                      while ( (_4330 < _4307) )
                      {
                        {
                          _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4330 )];
                          ++ _4330;
                          ++ _4324;
                        }
                      }
                    }
                  }
                  {}
                  int _4331 = _4319;
                  _4319 = _4320;
                  _4320 = _4331;
                  _4318 *= (int)2;
                }
              }
              int _10611 = (int)0;
              int _10612 = _4307;
              for (int _4332 = _10611; _4332 < _10612; ++_4332)
              {
                {
                  _ptr__4302[safe_add( safe_add( _4293,_4305 ),_4332 )] = safe_add( _ptr__4302[safe_add( _4319,_4332 )],_4305 );
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress::merge_sort  ( int _4333,    int _4334,    int _4335,    int _4336,    int _4337,    int _4338,    std::shared_ptr< monty::ndarray< int,1 > > _4339,    std::shared_ptr< monty::ndarray< long long,1 > > _4340) { mosek::fusion::p_ExprCompress::merge_sort(_4333,_4334,_4335,_4336,_4337,_4338,_4339,_4340); }void mosek::fusion::p_ExprCompress::merge_sort(int _4333,int _4334,int _4335,int _4336,int _4337,int _4338,std::shared_ptr< monty::ndarray< int,1 > > _4339,std::shared_ptr< monty::ndarray< long long,1 > > _4340){
  _checked_ptr_1<int> _ptr__4339(_4339 ? _4339->raw() : nullptr, _4339 ? _4339->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4340(_4340 ? _4340->raw() : nullptr, _4340 ? _4340->size(0) : 0);
  int _4341 = _4333;
  int _4342 = _4334;
  int _10613 = (int)0;
  int _10614 = _4336;
  for (int _4343 = _10613; _4343 < _10614; ++_4343)
  {
    {
      _ptr__4339[safe_add( _4341,_4343 )] = _4343;
    }
  }
  int _10615 = (int)0;
  int _10616 = _4335;
  for (int _4344 = _10615; _4344 < _10616; ++_4344)
  {
    {
      _4341 = _4333;
      _4342 = _4334;
      int _4345 = _ptr__4339[safe_add( safe_add( _4337,_4344 ),(int)1 )];
      int _4346 = _ptr__4339[safe_add( _4337,_4344 )];
      if ((safe_add( _4346,(int)1 ) < _4345))
      {
        {
          int _4347 = (_4345 - _4346);
          int _4348 = (int)0;
          while ( (_4347 > (int)1) )
          {
            {
              ++ _4348;
              _4347 /= (int)2;
            }
          }
          _4347 = (_4345 - _4346);
          int _4349 = (int)1;
          int _10617 = (int)0;
          int _10618 = safe_add( _4348,(int)1 );
          for (int _4350 = _10617; _4350 < _10618; ++_4350)
          {
            {
              int _4351 = ((safe_add( _4347,_4349 ) - (int)1) / _4349);
              int _4352 = (_4351 / (int)2);
              int _4353 = _4346;
              int _10619 = (int)0;
              int _10620 = _4352;
              for (int _4354 = _10619; _4354 < _10620; ++_4354)
              {
                {
                  int _4355 = safe_mul( safe_mul( _4354,_4349 ),(int)2 );
                  int _10621;
                  bool _10622 = (safe_add( safe_add( _4346,_4355 ),safe_mul( (int)2,_4349 ) ) < _4345);
                  if (_10622)
                  {
                    _10621 = safe_add( safe_add( _4346,_4355 ),safe_mul( (int)2,_4349 ) );
                  }
                  else
                  {
                    _10621 = _4345;
                  }
                  int _4356 = _10621;
                  int _4357 = safe_add( safe_add( _4346,_4355 ),_4349 );
                  int _4358 = safe_add( safe_add( _4346,_4355 ),_4349 );
                  int _4359 = safe_add( _4346,_4355 );
                  while ( ((_4359 < _4358) && (_4357 < _4356)) )
                  {
                    {
                      if ((_ptr__4340[safe_add( _4338,_ptr__4339[safe_add( _4341,_4359 )] )] <= _ptr__4340[safe_add( _4338,_ptr__4339[safe_add( _4341,_4357 )] )]))
                      {
                        {
                          _ptr__4339[safe_add( _4342,_4353 )] = _ptr__4339[safe_add( _4341,_4359 )];
                          ++ _4353;
                          ++ _4359;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4339[safe_add( _4342,_4353 )] = _ptr__4339[safe_add( _4341,_4357 )];
                          ++ _4353;
                          ++ _4357;
                        }
                      }
                    }
                  }
                  while ( (_4359 < _4358) )
                  {
                    {
                      _ptr__4339[safe_add( _4342,_4353 )] = _ptr__4339[safe_add( _4341,_4359 )];
                      ++ _4353;
                      ++ _4359;
                    }
                  }
                  while ( (_4357 < _4356) )
                  {
                    {
                      _ptr__4339[safe_add( _4342,_4353 )] = _ptr__4339[safe_add( _4341,_4357 )];
                      ++ _4353;
                      ++ _4357;
                    }
                  }
                }
              }
              int _10623 = _4353;
              int _10624 = _4345;
              for (int _4360 = _10623; _4360 < _10624; ++_4360)
              {
                {
                  _ptr__4339[safe_add( _4342,_4360 )] = _ptr__4339[safe_add( _4341,_4360 )];
                }
              }
              int _4361 = _4341;
              _4341 = _4342;
              _4342 = _4361;
              _4349 *= (int)2;
            }
          }
        }
      }
      {}
      int _10625 = _4346;
      int _10626 = _4345;
      for (int _4362 = _10625; _4362 < _10626; ++_4362)
      {
        {
          _ptr__4339[safe_add( _4333,_4362 )] = _ptr__4339[safe_add( _4341,_4362 )];
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4363,monty::rc_ptr< ::mosek::fusion::WorkStack > _4364,monty::rc_ptr< ::mosek::fusion::WorkStack > _4365) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4363,_4364,_4365); }void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4363,monty::rc_ptr< ::mosek::fusion::WorkStack > _4364,monty::rc_ptr< ::mosek::fusion::WorkStack > _4365){
  expr->eval(_4364,_4363,_4365);
  _4364->pop_expr();
  int _4366 = mosek::fusion::p_WorkStack::_get_impl(_4364)->nd;
  int _4367 = mosek::fusion::p_WorkStack::_get_impl(_4364)->shape_base;
  int _4368 = mosek::fusion::p_WorkStack::_get_impl(_4364)->nelem;
  int _4369 = mosek::fusion::p_WorkStack::_get_impl(_4364)->nnz;
  bool _4370 = mosek::fusion::p_WorkStack::_get_impl(_4364)->hassp;
  int _4371 = mosek::fusion::p_WorkStack::_get_impl(_4364)->ncodeatom;
  int _4372 = mosek::fusion::p_WorkStack::_get_impl(_4364)->ptr_base;
  int _4373 = mosek::fusion::p_WorkStack::_get_impl(_4364)->sp_base;
  int _4374 = mosek::fusion::p_WorkStack::_get_impl(_4364)->nidxs_base;
  int _4375 = mosek::fusion::p_WorkStack::_get_impl(_4364)->cof_base;
  int _4376 = mosek::fusion::p_WorkStack::_get_impl(_4364)->code_base;
  int _4377 = mosek::fusion::p_WorkStack::_get_impl(_4364)->codeptr_base;
  int _4378 = mosek::fusion::p_WorkStack::_get_impl(_4364)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4379 = mosek::fusion::p_WorkStack::_get_impl(_4364)->i32;
  _checked_ptr_1<int> _ptr__4379(_4379 ? _4379->raw() : nullptr,_4379 ? _4379->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4380 = mosek::fusion::p_WorkStack::_get_impl(_4364)->i64;
  _checked_ptr_1<long long> _ptr__4380(_4380 ? _4380->raw() : nullptr,_4380 ? _4380->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4381 = mosek::fusion::p_WorkStack::_get_impl(_4364)->f64;
  _checked_ptr_1<double> _ptr__4381(_4381 ? _4381->raw() : nullptr,_4381 ? _4381->size(0) : 0);
  bool _4382 = true;
  {
    std::shared_ptr< monty::ndarray< int,1 > > _4383 = mosek::fusion::p_WorkStack::_get_impl(_4365)->i32;
    _checked_ptr_1<int> _ptr__4383(_4383 ? _4383->raw() : nullptr,_4383 ? _4383->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _4384 = mosek::fusion::p_WorkStack::_get_impl(_4365)->i64;
    _checked_ptr_1<long long> _ptr__4384(_4384 ? _4384->raw() : nullptr,_4384 ? _4384->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _4385 = mosek::fusion::p_WorkStack::_get_impl(_4365)->f64;
    _checked_ptr_1<double> _ptr__4385(_4385 ? _4385->raw() : nullptr,_4385 ? _4385->size(0) : 0);
    int _10627 = (int)0;
    int _10628 = _4368;
    for (int _4386 = _10627; _4386 < _10628; ++_4386)
    {
      {
        int _10629 = _ptr__4379[safe_add( _4372,_4386 )];
        int _10630 = (_ptr__4379[safe_add( safe_add( _4372,_4386 ),(int)1 )] - (int)1);
        for (int _4387 = _10629; _4387 < _10630; ++_4387)
        {
          {
            _4382 = (_4382 && (_ptr__4380[safe_add( _4374,_4387 )] < _ptr__4380[safe_add( safe_add( _4374,_4387 ),(int)1 )]));
          }
        }
      }
    }
    if (_4382)
    {
      {
        if ((_4371 > (int)0))
        {
          {
            int _10631 = (int)0;
            int _10632 = _4369;
            for (int _4388 = _10631; _4388 < _10632; ++_4388)
            {
              {
                _4382 = (_4382 && ((_ptr__4381[safe_add( _4375,_4388 )] <= (0.0 - eps)) || (((0.0 + eps) <= _ptr__4381[safe_add( _4375,_4388 )]) || (((_ptr__4379[safe_add( safe_add( _4377,_4388 ),(int)1 )] - _ptr__4379[safe_add( _4377,_4388 )]) == (int)0) || (!(((_ptr__4379[safe_add( safe_add( _4377,_4388 ),(int)1 )] - _ptr__4379[safe_add( _4377,_4388 )]) == (int)1) && ((_ptr__4379[safe_add( _4376,_ptr__4379[safe_add( _4377,_4388 )] )] == 2) && ((_ptr__4381[safe_add( _4378,_ptr__4379[safe_add( _4377,_4388 )] )] <= 0.0) || (_ptr__4381[safe_add( _4378,_ptr__4383[safe_add( _4377,_4388 )] )] >= 0.0)))))))));
              }
            }
          }
        }
        else
        {
          {
            int _10633 = (int)0;
            int _10634 = _4369;
            for (int _4389 = _10633; _4389 < _10634; ++_4389)
            {
              {
                _4382 = (_4382 && ((_ptr__4381[safe_add( _4375,_4389 )] <= (0.0 - eps)) || ((0.0 + eps) <= _ptr__4381[safe_add( _4375,_4389 )])));
              }
            }
          }
        }
      }
    }
    {}
  }
  if (_4382)
  {
    {
      _4363->alloc_expr(_4366,_4368,_4369,_4370,_4371);
      int _4390 = mosek::fusion::p_WorkStack::_get_impl(_4363)->ptr_base;
      int _4391 = mosek::fusion::p_WorkStack::_get_impl(_4363)->nidxs_base;
      int _4392 = mosek::fusion::p_WorkStack::_get_impl(_4363)->sp_base;
      int _4393 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cof_base;
      int _4394 = mosek::fusion::p_WorkStack::_get_impl(_4363)->shape_base;
      int _4395 = mosek::fusion::p_WorkStack::_get_impl(_4363)->code_base;
      int _4396 = mosek::fusion::p_WorkStack::_get_impl(_4363)->codeptr_base;
      int _4397 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4398 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i32;
      _checked_ptr_1<int> _ptr__4398(_4398 ? _4398->raw() : nullptr,_4398 ? _4398->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4399 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i64;
      _checked_ptr_1<long long> _ptr__4399(_4399 ? _4399->raw() : nullptr,_4399 ? _4399->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4400 = mosek::fusion::p_WorkStack::_get_impl(_4363)->f64;
      _checked_ptr_1<double> _ptr__4400(_4400 ? _4400->raw() : nullptr,_4400 ? _4400->size(0) : 0);
      {
        int _10635 = (int)0;
        int _10636 = _4366;
        for (int _4401 = _10635; _4401 < _10636; ++_4401)
        {
          {
            _ptr__4398[safe_add( _4394,_4401 )] = _ptr__4379[safe_add( _4367,_4401 )];
          }
        }
        int _10637 = (int)0;
        int _10638 = safe_add( _4368,(int)1 );
        for (int _4402 = _10637; _4402 < _10638; ++_4402)
        {
          {
            _ptr__4398[safe_add( _4390,_4402 )] = _ptr__4379[safe_add( _4372,_4402 )];
          }
        }
        int _10639 = (int)0;
        int _10640 = _4369;
        for (int _4403 = _10639; _4403 < _10640; ++_4403)
        {
          {
            _ptr__4399[safe_add( _4391,_4403 )] = _ptr__4380[safe_add( _4374,_4403 )];
          }
        }
        int _10641 = (int)0;
        int _10642 = _4369;
        for (int _4404 = _10641; _4404 < _10642; ++_4404)
        {
          {
            _ptr__4400[safe_add( _4393,_4404 )] = _ptr__4381[safe_add( _4375,_4404 )];
          }
        }
        if (_4370)
        {
          {
            int _10643 = (int)0;
            int _10644 = _4368;
            for (int _4405 = _10643; _4405 < _10644; ++_4405)
            {
              {
                _ptr__4399[safe_add( _4392,_4405 )] = _ptr__4380[safe_add( _4373,_4405 )];
              }
            }
          }
        }
        {}
        if ((_4371 > (int)0))
        {
          {
            int _10645 = (int)0;
            int _10646 = _4371;
            for (int _4406 = _10645; _4406 < _10646; ++_4406)
            {
              {
                _ptr__4398[safe_add( _4395,_4406 )] = _ptr__4379[safe_add( _4376,_4406 )];
              }
            }
            int _10647 = (int)0;
            int _10648 = _4371;
            for (int _4407 = _10647; _4407 < _10648; ++_4407)
            {
              {
                _ptr__4400[safe_add( _4397,_4407 )] = _ptr__4381[safe_add( _4378,_4407 )];
              }
            }
            int _10649 = (int)0;
            int _10650 = safe_add( _4369,(int)1 );
            for (int _4408 = _10649; _4408 < _10650; ++_4408)
            {
              {
                _ptr__4398[safe_add( _4396,_4408 )] = _ptr__4379[safe_add( _4377,_4408 )];
              }
            }
          }
        }
        {}
      }
      if ((_4371 > (int)0))
      {
        {
          if ((_ptr__4398[safe_add( _4396,_4369 )] != _4371))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4409 = _4365->alloci32(_4369);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4364,_4365,_4409,_4368,_4369,_4372,_4374);
      std::shared_ptr< monty::ndarray< int,1 > > _4410 = mosek::fusion::p_WorkStack::_get_impl(_4365)->i32;
      _checked_ptr_1<int> _ptr__4410(_4410 ? _4410->raw() : nullptr,_4410 ? _4410->size(0) : 0);
      int _4411 = (int)0;
      int _4412 = _4371;
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4413 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i32;
        _checked_ptr_1<int> _ptr__4413(_4413 ? _4413->raw() : nullptr,_4413 ? _4413->size(0) : 0);
        int _10651 = (int)0;
        int _10652 = _4368;
        for (int _4414 = _10651; _4414 < _10652; ++_4414)
        {
          {
            int _4415 = _ptr__4379[safe_add( safe_add( _4372,_4414 ),(int)1 )];
            int _4416 = _ptr__4379[safe_add( _4372,_4414 )];
            if ((_4416 < _4415))
            {
              {
                int _4417 = _4416;
                while ( (_4417 < _4415) )
                {
                  {
                    double _4418 = 0.0;
                    long long _4419 = _ptr__4380[safe_add( _4374,_ptr__4410[safe_add( _4409,_4417 )] )];
                    int _4420 = _4417;
                    while ( ((_4417 < _4415) && (_ptr__4380[safe_add( _4374,_ptr__4410[safe_add( _4409,_4417 )] )] == _4419)) )
                    {
                      {
                        _4418 += _ptr__4381[safe_add( _4375,_ptr__4410[safe_add( _4409,_4417 )] )];
                        ++ _4417;
                      }
                    }
                    if (((_4418 < 0.0) || ((0.0 < _4418) || (_4371 > (int)0))))
                    {
                      {
                        ++ _4411;
                        if (((safe_add( _4420,(int)1 ) < _4417) && (_4371 > (int)0)))
                        {
                          {
                            _4412 += (int)1;
                          }
                        }
                        {}
                      }
                    }
                    {}
                  }
                }
              }
            }
            {}
          }
        }
      }
      _4363->alloc_expr(_4366,_4368,_4411,_4370,_4412);
      int _4421 = mosek::fusion::p_WorkStack::_get_impl(_4363)->nidxs_base;
      int _4422 = mosek::fusion::p_WorkStack::_get_impl(_4363)->shape_base;
      int _4423 = mosek::fusion::p_WorkStack::_get_impl(_4363)->sp_base;
      int _4424 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cof_base;
      int _4425 = mosek::fusion::p_WorkStack::_get_impl(_4363)->ptr_base;
      int _4426 = mosek::fusion::p_WorkStack::_get_impl(_4363)->code_base;
      int _4427 = mosek::fusion::p_WorkStack::_get_impl(_4363)->codeptr_base;
      int _4428 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4429 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i32;
      _checked_ptr_1<int> _ptr__4429(_4429 ? _4429->raw() : nullptr,_4429 ? _4429->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4430 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i64;
      _checked_ptr_1<long long> _ptr__4430(_4430 ? _4430->raw() : nullptr,_4430 ? _4430->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4431 = mosek::fusion::p_WorkStack::_get_impl(_4363)->f64;
      _checked_ptr_1<double> _ptr__4431(_4431 ? _4431->raw() : nullptr,_4431 ? _4431->size(0) : 0);
      {
        int _10653 = (int)0;
        int _10654 = _4366;
        for (int _4432 = _10653; _4432 < _10654; ++_4432)
        {
          {
            _ptr__4429[safe_add( _4422,_4432 )] = _ptr__4379[safe_add( _4367,_4432 )];
          }
        }
        int _10655 = (int)0;
        int _10656 = _4368;
        for (int _4433 = _10655; _4433 < _10656; ++_4433)
        {
          {
            _ptr__4431[safe_add( _4424,_4433 )] = 0.0;
          }
        }
        if (_4370)
        {
          {
            int _10657 = (int)0;
            int _10658 = _4368;
            for (int _4434 = _10657; _4434 < _10658; ++_4434)
            {
              {
                _ptr__4430[safe_add( _4423,_4434 )] = _ptr__4380[safe_add( _4373,_4434 )];
              }
            }
          }
        }
        {}
        int _4435 = (int)0;
        int _4436 = (int)0;
        {
          _ptr__4429[_4425] = (int)0;
          if ((_4412 > (int)0))
          {
            {
              _ptr__4429[_4427] = (int)0;
            }
          }
          {}
          int _10659 = (int)0;
          int _10660 = _4368;
          for (int _4437 = _10659; _4437 < _10660; ++_4437)
          {
            {
              int _4438 = _ptr__4379[safe_add( safe_add( _4372,_4437 ),(int)1 )];
              int _4439 = _ptr__4379[safe_add( _4372,_4437 )];
              if ((_4439 < _4438))
              {
                {
                  int _4440 = _4439;
                  int _4441 = _4440;
                  while ( (_4440 < _4438) )
                  {
                    {
                      double _4442 = 0.0;
                      int _4443 = safe_add( _4440,(int)1 );
                      int _4444 = _4440;
                      long long _4445 = _ptr__4380[safe_add( _4374,_ptr__4410[safe_add( _4409,_4444 )] )];
                      while ( ((_4443 < _4438) && (_ptr__4380[safe_add( _4374,_ptr__4410[safe_add( _4409,_4443 )] )] == _4445)) )
                      {
                        {
                          ++ _4443;
                        }
                      }
                      if ((_4371 > (int)0))
                      {
                        {
                          while ( (_4440 < _4443) )
                          {
                            {
                              _4442 += _ptr__4381[safe_add( _4375,_ptr__4410[safe_add( _4409,_4440 )] )];
                              int _10661 = _ptr__4379[safe_add( _4377,_ptr__4410[safe_add( _4409,_4440 )] )];
                              int _10662 = _ptr__4379[safe_add( safe_add( _4377,_ptr__4410[safe_add( _4409,_4440 )] ),(int)1 )];
                              for (int _4446 = _10661; _4446 < _10662; ++_4446)
                              {
                                {
                                  _ptr__4429[safe_add( _4426,_4436 )] = _ptr__4379[safe_add( _4376,_4446 )];
                                  _ptr__4431[safe_add( _4428,_4436 )] = _ptr__4381[safe_add( _4378,_4446 )];
                                  ++ _4436;
                                }
                              }
                              ++ _4440;
                            }
                          }
                          if (((_4443 - _4444) > (int)1))
                          {
                            {
                              _ptr__4429[safe_add( _4426,_4436 )] = 8;
                              _ptr__4431[safe_add( _4428,_4436 )] = (_4443 - _4444);
                              ++ _4436;
                            }
                          }
                          {}
                          _ptr__4429[safe_add( safe_add( _4427,_4435 ),(int)1 )] = _4436;
                          _ptr__4430[safe_add( _4421,_4435 )] = _4445;
                          _ptr__4431[safe_add( _4424,_4435 )] = _4442;
                          ++ _4435;
                        }
                      }
                      else
                      {
                        {
                          while ( (_4440 < _4443) )
                          {
                            {
                              _4442 += _ptr__4381[safe_add( _4375,_ptr__4410[safe_add( _4409,_4440 )] )];
                              ++ _4440;
                            }
                          }
                          if (((_4442 < (int)0) || ((int)0 < _4442)))
                          {
                            {
                              _ptr__4430[safe_add( _4421,_4435 )] = _4445;
                              _ptr__4431[safe_add( _4424,_4435 )] = _4442;
                              ++ _4435;
                            }
                          }
                          {}
                        }
                      }
                    }
                  }
                }
              }
              {}
              _ptr__4429[safe_add( safe_add( _4425,_4437 ),(int)1 )] = _4435;
            }
          }
        }
        if ((_4412 != _4436))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ncodeatom"));
          }
        }
        {}
        if ((_4435 != _4411))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
          }
        }
        {}
        if ((_4411 != _ptr__4429[safe_add( _4425,_4368 )]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
          }
        }
        {}
      }
      if ((_4412 > (int)0))
      {
        {
          if ((_ptr__4429[safe_add( _4427,_4411 )] != _4412))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  _4365->clear();
}
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCompress::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCompress::destroy(){expr.reset();}void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprConst::p_ExprConst  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4447,    std::shared_ptr< monty::ndarray< long long,1 > > _4448,    std::shared_ptr< monty::ndarray< double,1 > > _4449){ return new mosek::fusion::ExprConst(_4447,_4448,_4449); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4447,    std::shared_ptr< monty::ndarray< long long,1 > > _4448,    std::shared_ptr< monty::ndarray< double,1 > > _4449) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4447,_4448,_4449); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4447,    std::shared_ptr< monty::ndarray< long long,1 > > _4448,    std::shared_ptr< monty::ndarray< double,1 > > _4449){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4447(_4447 ? _4447->raw() : nullptr, _4447 ? _4447->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4448(_4448 ? _4448->raw() : nullptr, _4448 ? _4448->size(0) : 0);
    _checked_ptr_1<double> _ptr__4449(_4449 ? _4449->raw() : nullptr, _4449 ? _4449->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4447);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_4449);
    std::shared_ptr< monty::ndarray< long long,1 > > _10663;
    bool _10664 = (NULL != _4448.get());
    if (_10664)
    {
      _10663 = ::mosek::fusion::Utils::Tools::arraycopy(_4448);
    }
    else
    {
      _10663 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _10663;
    ::mosek::fusion::p_ExprConst::validate(_4447,_4449,_4448);
  }
}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4450,    std::shared_ptr< monty::ndarray< long long,1 > > _4451,    double _4452){ return new mosek::fusion::ExprConst(_4450,_4451,_4452); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4450,    std::shared_ptr< monty::ndarray< long long,1 > > _4451,    double _4452) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4450,_4451,_4452); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4450,    std::shared_ptr< monty::ndarray< long long,1 > > _4451,    double _4452){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4450(_4450 ? _4450->raw() : nullptr, _4450 ? _4450->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4451(_4451 ? _4451->raw() : nullptr, _4451 ? _4451->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4450);
    long long _10665;
    bool _10666 = (NULL == _4451.get());
    if (_10666)
    {
      _10665 = ::mosek::fusion::p_Set::size(_4450);
    }
    else
    {
      _10665 = (int)((_4451)->size(0));
    }
    long long _4453 = _10665;
    std::vector<double> _10667;
    for (long long _4454 = (int)0, _10668 = _4453; _4454 < _10668 ; ++_4454)
    {
      _10667.push_back(_4452);
    }
    auto _10669 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10667.size()),_10667.begin(),_10667.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _10669;
    std::shared_ptr< monty::ndarray< long long,1 > > _10670;
    bool _10671 = (NULL != _4451.get());
    if (_10671)
    {
      _10670 = ::mosek::fusion::Utils::Tools::arraycopy(_4451);
    }
    else
    {
      _10670 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _10670;
    ::mosek::fusion::p_ExprConst::validate(_4450,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_4451);
  }
}void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4455,monty::rc_ptr< ::mosek::fusion::WorkStack > _4456,monty::rc_ptr< ::mosek::fusion::WorkStack > _4457) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_4455,_4456,_4457); }void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4455,monty::rc_ptr< ::mosek::fusion::WorkStack > _4456,monty::rc_ptr< ::mosek::fusion::WorkStack > _4457){
  std::shared_ptr< monty::ndarray< int,1 > > _4458 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4458(_4458 ? _4458->raw() : nullptr,_4458 ? _4458->size(0) : 0);
  int _4459 = (int)((_4458)->size(0));
  int _4460 = (int)0;
  int _10672 = (int)0;
  int _10673 = (int)((bfix)->size(0));
  for (int _4461 = _10672; _4461 < _10673; ++_4461)
  {
    {
      if (((((*bfix)(_4461)) < (int)0) || (((*bfix)(_4461)) > (int)0)))
      {
        {
          ++ _4460;
        }
      }
      {}
    }
  }
  int _4462 = (int)((bfix)->size(0));
  bool _4463 = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_4458)));
  _4455->alloc_expr(_4459,_4462,_4460,_4463,(int)0);
  int _4464 = mosek::fusion::p_WorkStack::_get_impl(_4455)->shape_base;
  int _4465 = mosek::fusion::p_WorkStack::_get_impl(_4455)->ptr_base;
  int _4466 = mosek::fusion::p_WorkStack::_get_impl(_4455)->sp_base;
  int _4467 = mosek::fusion::p_WorkStack::_get_impl(_4455)->nidxs_base;
  int _4468 = mosek::fusion::p_WorkStack::_get_impl(_4455)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4469 = mosek::fusion::p_WorkStack::_get_impl(_4455)->i32;
  _checked_ptr_1<int> _ptr__4469(_4469 ? _4469->raw() : nullptr,_4469 ? _4469->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4470 = mosek::fusion::p_WorkStack::_get_impl(_4455)->i64;
  _checked_ptr_1<long long> _ptr__4470(_4470 ? _4470->raw() : nullptr,_4470 ? _4470->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4471 = mosek::fusion::p_WorkStack::_get_impl(_4455)->f64;
  _checked_ptr_1<double> _ptr__4471(_4471 ? _4471->raw() : nullptr,_4471 ? _4471->size(0) : 0);
  int _10674 = (int)0;
  int _10675 = _4459;
  for (int _4472 = _10674; _4472 < _10675; ++_4472)
  {
    {
      _ptr__4469[safe_add( _4464,_4472 )] = _ptr__4458[_4472];
    }
  }
  int _4473 = (int)0;
  _ptr__4469[_4465] = (int)0;
  if (_4463)
  {
    {
      int _10676 = (int)0;
      int _10677 = _4462;
      for (int _4474 = _10676; _4474 < _10677; ++_4474)
      {
        {
          _ptr__4470[safe_add( _4466,_4474 )] = ((*sparsity)(_4474));
        }
      }
    }
  }
  {}
  int _10678 = (int)0;
  int _10679 = _4462;
  for (int _4475 = _10678; _4475 < _10679; ++_4475)
  {
    {
      if (((((*bfix)(_4475)) < (int)0) || (((*bfix)(_4475)) > (int)0)))
      {
        {
          _ptr__4470[safe_add( _4467,_4473 )] = (int)0;
          _ptr__4471[safe_add( _4468,_4473 )] = ((*bfix)(_4475));
          ++ _4473;
        }
      }
      {}
      _ptr__4469[safe_add( safe_add( _4465,_4475 ),(int)1 )] = _4473;
    }
  }
}
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int,1 > > _4476,std::shared_ptr< monty::ndarray< double,1 > > _4477,std::shared_ptr< monty::ndarray< long long,1 > > _4478){
  _checked_ptr_1<int> _ptr__4476(_4476 ? _4476->raw() : nullptr, _4476 ? _4476->size(0) : 0);
  _checked_ptr_1<double> _ptr__4477(_4477 ? _4477->raw() : nullptr, _4477 ? _4477->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4478(_4478 ? _4478->raw() : nullptr, _4478 ? _4478->size(0) : 0);
  long long _4479 = ::mosek::fusion::p_Set::size(_4476);
  if ((NULL != _4478.get()))
  {
    {
      if (((int)((_4478)->size(0)) != (int)((_4477)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _4480 = false;
      int _10680 = (int)0;
      int _10681 = (int)((_4478)->size(0));
      for (int _4481 = _10680; _4481 < _10681; ++_4481)
      {
        {
          if (((_ptr__4478[_4481] < (int)0) || (_ptr__4478[_4481] >= _4479)))
          {
            {
              _4480 = true;
            }
          }
          {}
        }
      }
      if (_4480)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_4477)->size(0)) != _4479))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprConst::toString(){
  return std::string ("ExprConst()");
}
void mosek::fusion::p_ExprConst::destroy(){sparsity.reset();bfix.reset();}void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPick::p_ExprPick  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4482,    std::shared_ptr< monty::ndarray< int,2 > > _4483){ return new mosek::fusion::ExprPick(_4482,_4483); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4482,    std::shared_ptr< monty::ndarray< int,2 > > _4483) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4482,_4483); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4482,    std::shared_ptr< monty::ndarray< int,2 > > _4483){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_4483)->size(0)))}));
    std::shared_ptr< monty::ndarray< int,1 > > _4484 = _4482->getShape();
    _checked_ptr_1<int> _ptr__4484(_4484 ? _4484->raw() : nullptr,_4484 ? _4484->size(0) : 0);
    int _4485 = (int)((_4484)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4482;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4483)->size(0)))));
    std::shared_ptr< monty::ndarray< long long,1 > > _4486 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<long long> _ptr__4486(_4486 ? _4486->raw() : nullptr,_4486 ? _4486->size(0) : 0);
    if (((int)((_4483)->size(1)) != _4485))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _4487 = false;
    int _10682 = (int)0;
    int _10683 = (int)((_4483)->size(0));
    for (int _4488 = _10682; _4488 < _10683; ++_4488)
    {
      {
        int _10684 = (int)0;
        int _10685 = _4485;
        for (int _4489 = _10684; _4489 < _10685; ++_4489)
        {
          {
            if (((((*_4483)(_4488,_4489)) < (int)0) || (((*_4483)(_4488,_4489)) >= _ptr__4484[_4489])))
            {
              {
                _4487 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_4487)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4490 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4485)));
      _checked_ptr_1<long long> _ptr__4490(_4490 ? _4490->raw() : nullptr,_4490 ? _4490->size(0) : 0);
      _ptr__4490[(_4485 - (int)1)] = (int)1;
      int _10686 = (int)1;
      int _10687 = _4485;
      for (int _4491 = _10686; _4491 < _10687; ++_4491)
      {
        {
          _ptr__4490[((_4485 - _4491) - (int)1)] = safe_mul( _ptr__4490[(_4485 - _4491)],_ptr__4484[(_4485 - _4491)] );
        }
      }
      int _10688 = (int)0;
      int _10689 = (int)((_4483)->size(0));
      for (int _4492 = _10688; _4492 < _10689; ++_4492)
      {
        {
          long long _4493 = (long long)0;
          int _10690 = (int)0;
          int _10691 = _4485;
          for (int _4494 = _10690; _4494 < _10691; ++_4494)
          {
            {
              _4493 += safe_mul( _ptr__4490[_4494],((*_4483)(_4492,_4494)) );
            }
          }
          _ptr__4486[_4492] = _4493;
        }
      }
    }
  }
}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4495,    std::shared_ptr< monty::ndarray< long long,1 > > _4496){ return new mosek::fusion::ExprPick(_4495,_4496); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4495,    std::shared_ptr< monty::ndarray< long long,1 > > _4496) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4495,_4496); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4495,    std::shared_ptr< monty::ndarray< long long,1 > > _4496){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__4496(_4496 ? _4496->raw() : nullptr, _4496 ? _4496->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_4496)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4495;
    std::shared_ptr< monty::ndarray< int,1 > > _4497 = _4495->getShape();
    _checked_ptr_1<int> _ptr__4497(_4497 ? _4497->raw() : nullptr,_4497 ? _4497->size(0) : 0);
    long long _4498 = ::mosek::fusion::p_Set::size(_4497);
    bool _4499 = false;
    int _10692 = (int)0;
    int _10693 = (int)((_4496)->size(0));
    for (int _4500 = _10692; _4500 < _10693; ++_4500)
    {
      {
        if (((_ptr__4496[_4500] < (int)0) || (_ptr__4496[_4500] >= _4498)))
        {
          {
            _4499 = true;
          }
        }
        {}
      }
    }
    if (_4499)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_4496);
  }
}void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4501,monty::rc_ptr< ::mosek::fusion::WorkStack > _4502,monty::rc_ptr< ::mosek::fusion::WorkStack > _4503) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_4501,_4502,_4503); }void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4501,monty::rc_ptr< ::mosek::fusion::WorkStack > _4502,monty::rc_ptr< ::mosek::fusion::WorkStack > _4503){
  expr->eval(_4502,_4501,_4503);
  _4502->pop_expr();
  int _4504 = mosek::fusion::p_WorkStack::_get_impl(_4502)->nd;
  int _4505 = mosek::fusion::p_WorkStack::_get_impl(_4502)->shape_base;
  int _4506 = mosek::fusion::p_WorkStack::_get_impl(_4502)->nelem;
  int _4507 = mosek::fusion::p_WorkStack::_get_impl(_4502)->nnz;
  int _4508 = mosek::fusion::p_WorkStack::_get_impl(_4502)->ncodeatom;
  bool _4509 = mosek::fusion::p_WorkStack::_get_impl(_4502)->hassp;
  int _4510 = mosek::fusion::p_WorkStack::_get_impl(_4502)->ptr_base;
  int _4511 = mosek::fusion::p_WorkStack::_get_impl(_4502)->sp_base;
  int _4512 = mosek::fusion::p_WorkStack::_get_impl(_4502)->nidxs_base;
  int _4513 = mosek::fusion::p_WorkStack::_get_impl(_4502)->cof_base;
  int _4514 = mosek::fusion::p_WorkStack::_get_impl(_4502)->code_base;
  int _4515 = mosek::fusion::p_WorkStack::_get_impl(_4502)->codeptr_base;
  int _4516 = mosek::fusion::p_WorkStack::_get_impl(_4502)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4517 = mosek::fusion::p_WorkStack::_get_impl(_4502)->i32;
  _checked_ptr_1<int> _ptr__4517(_4517 ? _4517->raw() : nullptr,_4517 ? _4517->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4518 = mosek::fusion::p_WorkStack::_get_impl(_4502)->i64;
  _checked_ptr_1<long long> _ptr__4518(_4518 ? _4518->raw() : nullptr,_4518 ? _4518->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4519 = mosek::fusion::p_WorkStack::_get_impl(_4502)->f64;
  _checked_ptr_1<double> _ptr__4519(_4519 ? _4519->raw() : nullptr,_4519 ? _4519->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4520 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<long long> _ptr__4520(_4520 ? _4520->raw() : nullptr,_4520 ? _4520->size(0) : 0);
  if ((!_4509))
  {
    {
      int _4521 = (int)((_4520)->size(0));
      int _4522 = (int)1;
      int _4523 = (int)0;
      int _4524 = (int)0;
      int _10694 = (int)0;
      int _10695 = (int)((_4520)->size(0));
      for (int _4525 = _10694; _4525 < _10695; ++_4525)
      {
        {
          _4523 += (_ptr__4517[safe_add( safe_add( _4510,_ptr__4520[_4525] ),(int)1 )] - _ptr__4517[safe_add( _4510,_ptr__4520[_4525] )]);
          if ((_4508 > (int)0))
          {
            {
              _4524 += (_ptr__4517[safe_add( _4515,_ptr__4517[safe_add( safe_add( _4510,_ptr__4520[_4525] ),(int)1 )] )] - _ptr__4517[safe_add( _4515,_ptr__4517[safe_add( _4510,_ptr__4520[_4525] )] )]);
            }
          }
          {}
        }
      }
      _4501->alloc_expr(_4522,_4521,_4523,false,_4524);
      int _4526 = mosek::fusion::p_WorkStack::_get_impl(_4501)->cof_base;
      int _4527 = mosek::fusion::p_WorkStack::_get_impl(_4501)->nidxs_base;
      int _4528 = mosek::fusion::p_WorkStack::_get_impl(_4501)->ptr_base;
      int _4529 = mosek::fusion::p_WorkStack::_get_impl(_4501)->shape_base;
      int _4530 = mosek::fusion::p_WorkStack::_get_impl(_4501)->code_base;
      int _4531 = mosek::fusion::p_WorkStack::_get_impl(_4501)->codeptr_base;
      int _4532 = mosek::fusion::p_WorkStack::_get_impl(_4501)->cconst_base;
      {
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4533 = mosek::fusion::p_WorkStack::_get_impl(_4501)->i32;
      _checked_ptr_1<int> _ptr__4533(_4533 ? _4533->raw() : nullptr,_4533 ? _4533->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4534 = mosek::fusion::p_WorkStack::_get_impl(_4501)->i64;
      _checked_ptr_1<long long> _ptr__4534(_4534 ? _4534->raw() : nullptr,_4534 ? _4534->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4535 = mosek::fusion::p_WorkStack::_get_impl(_4501)->f64;
      _checked_ptr_1<double> _ptr__4535(_4535 ? _4535->raw() : nullptr,_4535 ? _4535->size(0) : 0);
      _ptr__4533[_4529] = (int)((_4520)->size(0));
      int _4536 = (int)0;
      int _4537 = (int)0;
      _ptr__4533[_4528] = (int)0;
      int _10696 = (int)0;
      int _10697 = (int)((_4520)->size(0));
      for (int _4538 = _10696; _4538 < _10697; ++_4538)
      {
        {
          int _10698 = _ptr__4517[safe_add( _4510,_ptr__4520[_4538] )];
          int _10699 = _ptr__4517[safe_add( safe_add( _4510,_ptr__4520[_4538] ),(int)1 )];
          for (int _4539 = _10698; _4539 < _10699; ++_4539)
          {
            {
              _ptr__4534[safe_add( _4527,_4537 )] = _ptr__4518[safe_add( _4512,_4539 )];
              _ptr__4535[safe_add( _4526,_4537 )] = _ptr__4519[safe_add( _4513,_4539 )];
              if ((_4508 > (int)0))
              {
                {
                  int _10700 = _ptr__4517[safe_add( _4515,_4539 )];
                  int _10701 = _ptr__4517[safe_add( safe_add( _4515,_4539 ),(int)1 )];
                  for (int _4540 = _10700; _4540 < _10701; ++_4540)
                  {
                    {
                      _ptr__4533[safe_add( _4530,_4536 )] = _ptr__4517[safe_add( _4514,_4540 )];
                      _ptr__4535[safe_add( _4532,_4536 )] = _ptr__4519[safe_add( _4516,_4540 )];
                      ++ _4536;
                    }
                  }
                  _ptr__4533[safe_add( safe_add( _4531,_4537 ),(int)1 )] = _4536;
                }
              }
              {}
              ++ _4537;
            }
          }
          _ptr__4533[safe_add( safe_add( _4528,_4538 ),(int)1 )] = _4537;
        }
      }
    }
  }
  else
  {
    {
      int _4541 = (int)1;
      int _4542 = (int)((_4520)->size(0));
      int _4543 = (int)0;
      int _4544 = (int)0;
      std::shared_ptr< monty::ndarray< long long,1 > > _4545 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<long long> _ptr__4545(_4545 ? _4545->raw() : nullptr,_4545 ? _4545->size(0) : 0);
      int _4546 = _4503->alloci32((int)((_4545)->size(0)));
      std::shared_ptr< monty::ndarray< int,1 > > _4547 = mosek::fusion::p_WorkStack::_get_impl(_4503)->i32;
      _checked_ptr_1<int> _ptr__4547(_4547 ? _4547->raw() : nullptr,_4547 ? _4547->size(0) : 0);
      int _10702 = (int)0;
      int _10703 = (int)((_4545)->size(0));
      for (int _4548 = _10702; _4548 < _10703; ++_4548)
      {
        {
          int _4549 = _4506;
          int _4550 = (int)0;
          while ( (_4550 < (_4549 - (int)1)) )
          {
            {
              int _4551 = (safe_add( safe_add( _4549,_4550 ),(int)1 ) / (int)2);
              if ((_ptr__4518[safe_add( _4511,_4551 )] >= _ptr__4545[_4548]))
              {
                {
                  _4549 = _4551;
                }
              }
              else
              {
                {
                  _4550 = _4551;
                }
              }
            }
          }
          ++ _4550;
          if (((_4550 < _4506) && (_ptr__4518[safe_add( _4511,_4550 )] == _ptr__4545[_4548])))
          {
            {
              _ptr__4547[safe_add( _4546,_4548 )] = _4550;
              _4543 += (_ptr__4517[safe_add( safe_add( _4510,_4550 ),(int)1 )] - _ptr__4517[safe_add( _4510,_4550 )]);
              if ((_4508 > (int)0))
              {
                {
                  _4544 += (_ptr__4517[safe_add( _4515,_ptr__4517[safe_add( safe_add( _4510,_ptr__4545[_4548] ),(int)1 )] )] - _ptr__4517[safe_add( _4515,_ptr__4517[safe_add( _4510,_ptr__4545[_4548] )] )]);
                }
              }
              {}
            }
          }
          else
          {
            {
              _ptr__4547[safe_add( _4546,_4548 )] = (-(int)1);
            }
          }
        }
      }
      _4501->alloc_expr(_4541,_4542,_4543,false,_4544);
      int _4552 = mosek::fusion::p_WorkStack::_get_impl(_4501)->ptr_base;
      int _4553 = mosek::fusion::p_WorkStack::_get_impl(_4501)->nidxs_base;
      int _4554 = mosek::fusion::p_WorkStack::_get_impl(_4501)->cof_base;
      int _4555 = mosek::fusion::p_WorkStack::_get_impl(_4501)->shape_base;
      int _4556 = mosek::fusion::p_WorkStack::_get_impl(_4501)->code_base;
      int _4557 = mosek::fusion::p_WorkStack::_get_impl(_4501)->codeptr_base;
      int _4558 = mosek::fusion::p_WorkStack::_get_impl(_4501)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4559 = mosek::fusion::p_WorkStack::_get_impl(_4501)->i32;
      _checked_ptr_1<int> _ptr__4559(_4559 ? _4559->raw() : nullptr,_4559 ? _4559->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4560 = mosek::fusion::p_WorkStack::_get_impl(_4501)->i64;
      _checked_ptr_1<long long> _ptr__4560(_4560 ? _4560->raw() : nullptr,_4560 ? _4560->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4561 = mosek::fusion::p_WorkStack::_get_impl(_4501)->f64;
      _checked_ptr_1<double> _ptr__4561(_4561 ? _4561->raw() : nullptr,_4561 ? _4561->size(0) : 0);
      _ptr__4559[_4555] = (int)((_4545)->size(0));
      _ptr__4559[_4552] = (int)0;
      int _4562 = (int)0;
      int _4563 = (int)0;
      int _10704 = (int)0;
      int _10705 = (int)((_4545)->size(0));
      for (int _4564 = _10704; _4564 < _10705; ++_4564)
      {
        {
          if ((_ptr__4547[safe_add( _4546,_4564 )] >= (int)0))
          {
            {
              int _4565 = _ptr__4547[safe_add( _4546,_4564 )];
              int _10706 = _ptr__4517[safe_add( _4510,_4565 )];
              int _10707 = _ptr__4517[safe_add( safe_add( _4510,_4565 ),(int)1 )];
              for (int _4566 = _10706; _4566 < _10707; ++_4566)
              {
                {
                  _ptr__4560[safe_add( _4553,_4563 )] = _ptr__4518[safe_add( _4512,_4566 )];
                  _ptr__4561[safe_add( _4554,_4563 )] = _ptr__4519[safe_add( _4513,_4566 )];
                  if ((_4508 > (int)0))
                  {
                    {
                      int _10708 = _ptr__4517[safe_add( _4515,_4566 )];
                      int _10709 = _ptr__4517[safe_add( safe_add( _4515,_4566 ),(int)1 )];
                      for (int _4567 = _10708; _4567 < _10709; ++_4567)
                      {
                        {
                          _ptr__4559[safe_add( _4556,_4562 )] = _ptr__4517[safe_add( _4514,_4567 )];
                          _ptr__4561[safe_add( _4558,_4562 )] = _ptr__4519[safe_add( _4516,_4567 )];
                          ++ _4562;
                        }
                      }
                      _ptr__4559[safe_add( safe_add( _4557,_4563 ),(int)1 )] = _4562;
                    }
                  }
                  {}
                  ++ _4563;
                }
              }
            }
          }
          {}
          _ptr__4559[safe_add( safe_add( _4552,_4564 ),(int)1 )] = _4563;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprPick::toString(){
  return std::string ("ExprPick()");
}
void mosek::fusion::p_ExprPick::destroy(){idxs.reset();expr.reset();}void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSlice::p_ExprSlice  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _4568,    std::shared_ptr< monty::ndarray< int,1 > > _4569,    std::shared_ptr< monty::ndarray< int,1 > > _4570){ return new mosek::fusion::ExprSlice(_4568,_4569,_4570); }mosek::fusion::ExprSlice::ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _4568,    std::shared_ptr< monty::ndarray< int,1 > > _4569,    std::shared_ptr< monty::ndarray< int,1 > > _4570) :    ExprSlice(new mosek::fusion::p_ExprSlice(this)){ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_4568,_4569,_4570); }void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4568,    std::shared_ptr< monty::ndarray< int,1 > > _4569,    std::shared_ptr< monty::ndarray< int,1 > > _4570){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4569(_4569 ? _4569->raw() : nullptr, _4569 ? _4569->size(0) : 0);
    _checked_ptr_1<int> _ptr__4570(_4570 ? _4570->raw() : nullptr, _4570 ? _4570->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_4568->getShape(),_4569,_4570));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _4568;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _4569;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _4570;
  }
}void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4571,monty::rc_ptr< ::mosek::fusion::WorkStack > _4572,monty::rc_ptr< ::mosek::fusion::WorkStack > _4573) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_4571,_4572,_4573); }void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4571,monty::rc_ptr< ::mosek::fusion::WorkStack > _4572,monty::rc_ptr< ::mosek::fusion::WorkStack > _4573){
  expr->eval(_4572,_4571,_4573);
  _4572->pop_expr();
  int _4574 = mosek::fusion::p_WorkStack::_get_impl(_4572)->nd;
  int _4575 = mosek::fusion::p_WorkStack::_get_impl(_4572)->nelem;
  int _4576 = mosek::fusion::p_WorkStack::_get_impl(_4572)->nnz;
  int _4577 = mosek::fusion::p_WorkStack::_get_impl(_4572)->ncodeatom;
  bool _4578 = mosek::fusion::p_WorkStack::_get_impl(_4572)->hassp;
  int _4579 = mosek::fusion::p_WorkStack::_get_impl(_4572)->shape_base;
  int _4580 = mosek::fusion::p_WorkStack::_get_impl(_4572)->ptr_base;
  int _4581 = mosek::fusion::p_WorkStack::_get_impl(_4572)->sp_base;
  int _4582 = mosek::fusion::p_WorkStack::_get_impl(_4572)->nidxs_base;
  int _4583 = mosek::fusion::p_WorkStack::_get_impl(_4572)->cof_base;
  int _4584 = mosek::fusion::p_WorkStack::_get_impl(_4572)->code_base;
  int _4585 = mosek::fusion::p_WorkStack::_get_impl(_4572)->codeptr_base;
  int _4586 = mosek::fusion::p_WorkStack::_get_impl(_4572)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4587 = mosek::fusion::p_WorkStack::_get_impl(_4572)->i32;
  _checked_ptr_1<int> _ptr__4587(_4587 ? _4587->raw() : nullptr,_4587 ? _4587->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4588 = mosek::fusion::p_WorkStack::_get_impl(_4572)->i64;
  _checked_ptr_1<long long> _ptr__4588(_4588 ? _4588->raw() : nullptr,_4588 ? _4588->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4589 = mosek::fusion::p_WorkStack::_get_impl(_4572)->f64;
  _checked_ptr_1<double> _ptr__4589(_4589 ? _4589->raw() : nullptr,_4589 ? _4589->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4590 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4574)));
  _checked_ptr_1<long long> _ptr__4590(_4590 ? _4590->raw() : nullptr,_4590 ? _4590->size(0) : 0);
  _ptr__4590[(_4574 - (int)1)] = (int)1;
  int _10710 = (int)1;
  int _10711 = _4574;
  for (int _4591 = _10710; _4591 < _10711; ++_4591)
  {
    {
      _ptr__4590[((_4574 - _4591) - (int)1)] = safe_mul( _ptr__4590[(_4574 - _4591)],_ptr__4587[(safe_add( _4579,_4574 ) - _4591)] );
    }
  }
  int _4592 = (int)0;
  int _4593 = (int)0;
  int _4594 = (int)0;
  if (_4578)
  {
    {
      int _10712 = (int)0;
      int _10713 = _4575;
      for (int _4595 = _10712; _4595 < _10713; ++_4595)
      {
        {
          bool _4596 = true;
          int _10714 = (int)0;
          int _10715 = _4574;
          for (int _4597 = _10714; _4597 < _10715; ++_4597)
          {
            {
              long long _4598 = ((_ptr__4588[safe_add( _4581,_4595 )] / _ptr__4590[_4597]) % _ptr__4587[safe_add( _4579,_4597 )]);
              _4596 = (_4596 && ((_4598 >= ((*first)(_4597))) && (_4598 < ((*last)(_4597)))));
            }
          }
          if (_4596)
          {
            {
              _4594 += (_ptr__4587[safe_add( safe_add( _4580,_4595 ),(int)1 )] - _ptr__4587[safe_add( _4580,_4595 )]);
              if ((_4577 > (int)0))
              {
                {
                  _4592 += (_ptr__4587[safe_add( _4585,_ptr__4587[safe_add( safe_add( _4580,_4595 ),(int)1 )] )] - _ptr__4587[safe_add( _4585,_ptr__4587[safe_add( _4580,_4595 )] )]);
                }
              }
              {}
              ++ _4593;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _4593 = (int)1;
      int _10716 = (int)0;
      int _10717 = _4574;
      for (int _4599 = _10716; _4599 < _10717; ++_4599)
      {
        {
          _4593 *= (((*last)(_4599)) - ((*first)(_4599)));
        }
      }
      int _10718 = (int)0;
      int _10719 = _4575;
      for (int _4600 = _10718; _4600 < _10719; ++_4600)
      {
        {
          bool _4601 = true;
          int _10720 = (int)0;
          int _10721 = _4574;
          for (int _4602 = _10720; _4602 < _10721; ++_4602)
          {
            {
              long long _4603 = ((_4600 / _ptr__4590[_4602]) % _ptr__4587[safe_add( _4579,_4602 )]);
              _4601 = (_4601 && ((_4603 >= ((*first)(_4602))) && (_4603 < ((*last)(_4602)))));
            }
          }
          if (_4601)
          {
            {
              _4594 += (_ptr__4587[safe_add( safe_add( _4580,_4600 ),(int)1 )] - _ptr__4587[safe_add( _4580,_4600 )]);
              if ((_4577 > (int)0))
              {
                {
                  _4592 += (_ptr__4587[safe_add( _4585,_ptr__4587[safe_add( safe_add( _4580,_4600 ),(int)1 )] )] - _ptr__4587[safe_add( _4585,_ptr__4587[safe_add( _4580,_4600 )] )]);
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _10722;
  for (int _4605 = (int)0, _10723 = _4574; _4605 < _10723 ; ++_4605)
  {
    _10722.push_back((((*last)(_4605)) - ((*first)(_4605))));
  }
  auto _10724 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10722.size()),_10722.begin(),_10722.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4604 = _10724;
  _checked_ptr_1<int> _ptr__4604(_4604 ? _4604->raw() : nullptr,_4604 ? _4604->size(0) : 0);
  bool _4606 = (_4593 < ::mosek::fusion::p_Set::size(_4604));
  _4571->alloc_expr(_4574,_4593,_4594,_4606,_4592);
  int _4607 = mosek::fusion::p_WorkStack::_get_impl(_4571)->shape_base;
  int _4608 = mosek::fusion::p_WorkStack::_get_impl(_4571)->cof_base;
  int _4609 = mosek::fusion::p_WorkStack::_get_impl(_4571)->nidxs_base;
  int _10725;
  bool _10726 = _4606;
  if (_10726)
  {
    _10725 = mosek::fusion::p_WorkStack::_get_impl(_4571)->sp_base;
  }
  else
  {
    _10725 = _4571->alloci64(_4593);
  }
  int _4610 = _10725;
  int _4611 = mosek::fusion::p_WorkStack::_get_impl(_4571)->ptr_base;
  int _4612 = mosek::fusion::p_WorkStack::_get_impl(_4571)->code_base;
  int _4613 = mosek::fusion::p_WorkStack::_get_impl(_4571)->codeptr_base;
  int _4614 = mosek::fusion::p_WorkStack::_get_impl(_4571)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4615 = mosek::fusion::p_WorkStack::_get_impl(_4571)->i32;
  _checked_ptr_1<int> _ptr__4615(_4615 ? _4615->raw() : nullptr,_4615 ? _4615->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4616 = mosek::fusion::p_WorkStack::_get_impl(_4571)->i64;
  _checked_ptr_1<long long> _ptr__4616(_4616 ? _4616->raw() : nullptr,_4616 ? _4616->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4617 = mosek::fusion::p_WorkStack::_get_impl(_4571)->f64;
  _checked_ptr_1<double> _ptr__4617(_4617 ? _4617->raw() : nullptr,_4617 ? _4617->size(0) : 0);
  int _10727 = (int)0;
  int _10728 = _4574;
  for (int _4618 = _10727; _4618 < _10728; ++_4618)
  {
    {
      _ptr__4615[safe_add( _4607,_4618 )] = _ptr__4604[_4618];
    }
  }
  _ptr__4615[_4611] = (int)0;
  if ((_4577 > (int)0))
  {
    {
      _ptr__4615[_4613] = (int)0;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _4619 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4574)));
  _checked_ptr_1<long long> _ptr__4619(_4619 ? _4619->raw() : nullptr,_4619 ? _4619->size(0) : 0);
  _ptr__4619[(_4574 - (int)1)] = (int)1;
  int _10729 = (int)1;
  int _10730 = _4574;
  for (int _4620 = _10729; _4620 < _10730; ++_4620)
  {
    {
      _ptr__4619[((_4574 - _4620) - (int)1)] = safe_mul( _ptr__4619[(_4574 - _4620)],_ptr__4604[(_4574 - _4620)] );
    }
  }
  int _4621 = (int)0;
  int _4622 = (int)0;
  int _4623 = (int)0;
  if (_4578)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _4624 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4574)));
      _checked_ptr_1<int> _ptr__4624(_4624 ? _4624->raw() : nullptr,_4624 ? _4624->size(0) : 0);
      int _10731 = (int)0;
      int _10732 = _4575;
      for (int _4625 = _10731; _4625 < _10732; ++_4625)
      {
        {
          bool _4626 = true;
          int _10733 = (int)0;
          int _10734 = _4574;
          for (int _4627 = _10733; _4627 < _10734; ++_4627)
          {
            {
              _ptr__4624[_4627] = (int)((_ptr__4588[safe_add( _4581,_4625 )] / _ptr__4590[_4627]) % _ptr__4587[safe_add( _4579,_4627 )]);
              _4626 = (_4626 && ((_ptr__4624[_4627] >= ((*first)(_4627))) && (_ptr__4624[_4627] < ((*last)(_4627)))));
            }
          }
          if (_4626)
          {
            {
              int _10735 = _ptr__4587[safe_add( _4580,_4625 )];
              int _10736 = _ptr__4587[safe_add( safe_add( _4580,_4625 ),(int)1 )];
              for (int _4628 = _10735; _4628 < _10736; ++_4628)
              {
                {
                  _ptr__4616[safe_add( _4609,_4623 )] = _ptr__4588[safe_add( _4582,_4628 )];
                  _ptr__4617[safe_add( _4608,_4623 )] = _ptr__4589[safe_add( _4583,_4628 )];
                  if ((_4577 > (int)0))
                  {
                    {
                      int _10737 = _ptr__4587[safe_add( _4585,_4628 )];
                      int _10738 = _ptr__4587[safe_add( safe_add( _4585,_4628 ),(int)1 )];
                      for (int _4629 = _10737; _4629 < _10738; ++_4629)
                      {
                        {
                          _ptr__4615[safe_add( _4612,_4621 )] = _ptr__4587[safe_add( _4584,_4629 )];
                          _ptr__4617[safe_add( _4614,_4621 )] = _ptr__4589[safe_add( _4586,_4629 )];
                          ++ _4621;
                        }
                      }
                      _ptr__4615[safe_add( safe_add( _4613,_4623 ),(int)1 )] = _4621;
                    }
                  }
                  {}
                  ++ _4623;
                }
              }
              long long _4630 = (long long)0;
              int _10739 = (int)0;
              int _10740 = _4574;
              for (int _4631 = _10739; _4631 < _10740; ++_4631)
              {
                {
                  _4630 += safe_mul( _ptr__4619[_4631],(_ptr__4624[_4631] - ((*first)(_4631))) );
                }
              }
              _ptr__4616[safe_add( _4610,_4622 )] = _4630;
              _ptr__4615[safe_add( safe_add( _4611,_4622 ),(int)1 )] = _4623;
              ++ _4622;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _10741 = (int)0;
      int _10742 = _4575;
      for (int _4632 = _10741; _4632 < _10742; ++_4632)
      {
        {
          bool _4633 = true;
          int _10743 = (int)0;
          int _10744 = _4574;
          for (int _4634 = _10743; _4634 < _10744; ++_4634)
          {
            {
              long long _4635 = ((_4632 / _ptr__4590[_4634]) % _ptr__4587[safe_add( _4579,_4634 )]);
              _4633 = (_4633 && ((_4635 >= ((*first)(_4634))) && (_4635 < ((*last)(_4634)))));
            }
          }
          if (_4633)
          {
            {
              int _10745 = _ptr__4587[safe_add( _4580,_4632 )];
              int _10746 = _ptr__4587[safe_add( safe_add( _4580,_4632 ),(int)1 )];
              for (int _4636 = _10745; _4636 < _10746; ++_4636)
              {
                {
                  _ptr__4616[safe_add( _4609,_4623 )] = _ptr__4588[safe_add( _4582,_4636 )];
                  _ptr__4617[safe_add( _4608,_4623 )] = _ptr__4589[safe_add( _4583,_4636 )];
                  if ((_4577 > (int)0))
                  {
                    {
                      int _10747 = _ptr__4587[safe_add( _4585,_4636 )];
                      int _10748 = _ptr__4587[safe_add( safe_add( _4585,_4636 ),(int)1 )];
                      for (int _4637 = _10747; _4637 < _10748; ++_4637)
                      {
                        {
                          _ptr__4615[safe_add( _4612,_4621 )] = _ptr__4587[safe_add( _4584,_4637 )];
                          _ptr__4617[safe_add( _4614,_4621 )] = _ptr__4589[safe_add( _4586,_4637 )];
                          ++ _4621;
                        }
                      }
                      _ptr__4615[safe_add( safe_add( _4613,_4623 ),(int)1 )] = _4621;
                    }
                  }
                  {}
                  ++ _4623;
                }
              }
              _ptr__4615[safe_add( safe_add( _4611,_4622 ),(int)1 )] = _4623;
              ++ _4622;
            }
          }
          {}
        }
      }
    }
  }
  if ((!_4606))
  {
    {
      _4571->popi64(_4593);
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int,1 > > _4638,std::shared_ptr< monty::ndarray< int,1 > > _4639,std::shared_ptr< monty::ndarray< int,1 > > _4640){
  _checked_ptr_1<int> _ptr__4638(_4638 ? _4638->raw() : nullptr, _4638 ? _4638->size(0) : 0);
  _checked_ptr_1<int> _ptr__4639(_4639 ? _4639->raw() : nullptr, _4639 ? _4639->size(0) : 0);
  _checked_ptr_1<int> _ptr__4640(_4640 ? _4640->raw() : nullptr, _4640 ? _4640->size(0) : 0);
  if ((((int)((_4638)->size(0)) != (int)((_4639)->size(0))) || ((int)((_4638)->size(0)) != (int)((_4640)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int _10749 = (int)0;
  int _10750 = (int)((_4638)->size(0));
  for (int _4641 = _10749; _4641 < _10750; ++_4641)
  {
    {
      if (((_ptr__4639[_4641] < (int)0) || ((_ptr__4640[_4641] < _ptr__4639[_4641]) || (_ptr__4640[_4641] > _ptr__4638[_4641]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _10751;
  for (int _4642 = (int)0, _10752 = (int)((_4638)->size(0)); _4642 < _10752 ; ++_4642)
  {
    _10751.push_back((_ptr__4640[_4642] - _ptr__4639[_4642]));
  }
  auto _10753 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10751.size()),_10751.begin(),_10751.end()));
  return _10753;
}
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSlice::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4643 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int _10754 = (int)1;
  int _10755 = (int)((first)->size(0));
  for (int _4644 = _10754; _4644 < _10755; ++_4644)
  {
    {
      _4643->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_4644)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_4644)));
    }
  }
  _4643->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4643->toString();
}
void mosek::fusion::p_ExprSlice::destroy(){last.reset();first.reset();expr.reset();}void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4645,    monty::rc_ptr< ::mosek::fusion::Expression > _4646){ return new mosek::fusion::ExprPermuteDims(_4645,_4646); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4645,    monty::rc_ptr< ::mosek::fusion::Expression > _4646) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4645,_4646); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4645,    monty::rc_ptr< ::mosek::fusion::Expression > _4646){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4645(_4645 ? _4645->raw() : nullptr, _4645 ? _4645->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_4645,_4646,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4647 = _4646->getShape();
    _checked_ptr_1<int> _ptr__4647(_4647 ? _4647->raw() : nullptr,_4647 ? _4647->size(0) : 0);
    if (((int)((_4645)->size(0)) != (int)((_4647)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int> _10756;
    for (int _4649 = (int)0, _10757 = (int)((_4645)->size(0)); _4649 < _10757 ; ++_4649)
    {
      _10756.push_back((int)0);
    }
    auto _10758 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10756.size()),_10756.begin(),_10756.end()));
    std::shared_ptr< monty::ndarray< int,1 > > _4648 = _10758;
    _checked_ptr_1<int> _ptr__4648(_4648 ? _4648->raw() : nullptr,_4648 ? _4648->size(0) : 0);
    int _10759 = (int)0;
    int _10760 = (int)((_4648)->size(0));
    for (int _4650 = _10759; _4650 < _10760; ++_4650)
    {
      {
        if (((_ptr__4645[_4650] < (int)0) || (_ptr__4645[_4650] > (int)((_4647)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__4648[_ptr__4645[_4650]];
      }
    }
    int _10761 = (int)0;
    int _10762 = (int)((_4648)->size(0));
    for (int _4651 = _10761; _4651 < _10762; ++_4651)
    {
      {
        if (((_ptr__4648[_4651] < (int)1) || (_ptr__4648[_4651] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4652,    monty::rc_ptr< ::mosek::fusion::Expression > _4653,    int _4654){ return new mosek::fusion::ExprPermuteDims(_4652,_4653,_4654); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4652,    monty::rc_ptr< ::mosek::fusion::Expression > _4653,    int _4654) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4652,_4653,_4654); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4652,    monty::rc_ptr< ::mosek::fusion::Expression > _4653,    int _4654){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4652(_4652 ? _4652->raw() : nullptr, _4652 ? _4652->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_4652,_4653->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _4653;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_4652);
  }
}void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4655,monty::rc_ptr< ::mosek::fusion::WorkStack > _4656,monty::rc_ptr< ::mosek::fusion::WorkStack > _4657) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_4655,_4656,_4657); }void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4655,monty::rc_ptr< ::mosek::fusion::WorkStack > _4656,monty::rc_ptr< ::mosek::fusion::WorkStack > _4657){
  expr->eval(_4656,_4655,_4657);
  _4656->pop_expr();
  int _4658 = mosek::fusion::p_WorkStack::_get_impl(_4656)->nd;
  int _4659 = mosek::fusion::p_WorkStack::_get_impl(_4656)->nelem;
  int _4660 = mosek::fusion::p_WorkStack::_get_impl(_4656)->nnz;
  int _4661 = mosek::fusion::p_WorkStack::_get_impl(_4656)->ncodeatom;
  bool _4662 = mosek::fusion::p_WorkStack::_get_impl(_4656)->hassp;
  int _4663 = mosek::fusion::p_WorkStack::_get_impl(_4656)->shape_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _4664 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4658)));
  _checked_ptr_1<long long> _ptr__4664(_4664 ? _4664->raw() : nullptr,_4664 ? _4664->size(0) : 0);
  _ptr__4664[(_4658 - (int)1)] = (int)1;
  int _10763 = (int)1;
  int _10764 = _4658;
  for (int _4665 = _10763; _4665 < _10764; ++_4665)
  {
    {
      _ptr__4664[((_4658 - _4665) - (int)1)] = safe_mul( _ptr__4664[(_4658 - _4665)],((*mosek::fusion::p_WorkStack::_get_impl(_4656)->i32)((safe_add( _4663,_4658 ) - _4665))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4666 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4658)));
  _checked_ptr_1<int> _ptr__4666(_4666 ? _4666->raw() : nullptr,_4666 ? _4666->size(0) : 0);
  _ptr__4666[(_4658 - (int)1)] = (int)1;
  int _10765 = (int)1;
  int _10766 = _4658;
  for (int _4667 = _10765; _4667 < _10766; ++_4667)
  {
    {
      _ptr__4666[((_4658 - _4667) - (int)1)] = safe_mul( _ptr__4666[(_4658 - _4667)],((*mosek::fusion::p_WorkStack::_get_impl(_4656)->i32)(safe_add( _4663,((*dperm)((_4658 - _4667))) ))) );
    }
  }
  int _4668 = mosek::fusion::p_WorkStack::_get_impl(_4656)->ptr_base;
  int _4669 = mosek::fusion::p_WorkStack::_get_impl(_4656)->sp_base;
  int _4670 = mosek::fusion::p_WorkStack::_get_impl(_4656)->nidxs_base;
  int _4671 = mosek::fusion::p_WorkStack::_get_impl(_4656)->cof_base;
  int _4672 = mosek::fusion::p_WorkStack::_get_impl(_4656)->code_base;
  int _4673 = mosek::fusion::p_WorkStack::_get_impl(_4656)->codeptr_base;
  int _4674 = mosek::fusion::p_WorkStack::_get_impl(_4656)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4675 = mosek::fusion::p_WorkStack::_get_impl(_4656)->i32;
  _checked_ptr_1<int> _ptr__4675(_4675 ? _4675->raw() : nullptr,_4675 ? _4675->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4676 = mosek::fusion::p_WorkStack::_get_impl(_4656)->i64;
  _checked_ptr_1<long long> _ptr__4676(_4676 ? _4676->raw() : nullptr,_4676 ? _4676->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4677 = mosek::fusion::p_WorkStack::_get_impl(_4656)->f64;
  _checked_ptr_1<double> _ptr__4677(_4677 ? _4677->raw() : nullptr,_4677 ? _4677->size(0) : 0);
  _4655->alloc_expr(_4658,_4659,_4660,_4662,_4661);
  int _4678 = mosek::fusion::p_WorkStack::_get_impl(_4655)->ptr_base;
  int _4679 = mosek::fusion::p_WorkStack::_get_impl(_4655)->shape_base;
  int _4680 = mosek::fusion::p_WorkStack::_get_impl(_4655)->nidxs_base;
  int _4681 = mosek::fusion::p_WorkStack::_get_impl(_4655)->sp_base;
  int _4682 = mosek::fusion::p_WorkStack::_get_impl(_4655)->cof_base;
  int _4683 = mosek::fusion::p_WorkStack::_get_impl(_4655)->code_base;
  int _4684 = mosek::fusion::p_WorkStack::_get_impl(_4655)->codeptr_base;
  int _4685 = mosek::fusion::p_WorkStack::_get_impl(_4655)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4686 = mosek::fusion::p_WorkStack::_get_impl(_4655)->i32;
  _checked_ptr_1<int> _ptr__4686(_4686 ? _4686->raw() : nullptr,_4686 ? _4686->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4687 = mosek::fusion::p_WorkStack::_get_impl(_4655)->i64;
  _checked_ptr_1<long long> _ptr__4687(_4687 ? _4687->raw() : nullptr,_4687 ? _4687->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4688 = mosek::fusion::p_WorkStack::_get_impl(_4655)->f64;
  _checked_ptr_1<double> _ptr__4688(_4688 ? _4688->raw() : nullptr,_4688 ? _4688->size(0) : 0);
  int _10767 = (int)0;
  int _10768 = _4658;
  for (int _4689 = _10767; _4689 < _10768; ++_4689)
  {
    {
      _ptr__4686[safe_add( _4679,_4689 )] = _ptr__4675[safe_add( _4663,((*dperm)(_4689)) )];
    }
  }
  if (_4662)
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4690 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4659)));
      _checked_ptr_1<long long> _ptr__4690(_4690 ? _4690->raw() : nullptr,_4690 ? _4690->size(0) : 0);
      {
        int _10769 = (int)0;
        int _10770 = _4659;
        for (int _4691 = _10769; _4691 < _10770; ++_4691)
        {
          {
            long long _4692 = (long long)0;
            int _10771 = (int)0;
            int _10772 = _4658;
            for (int _4693 = _10771; _4693 < _10772; ++_4693)
            {
              {
                _4692 += safe_mul( ((_ptr__4676[safe_add( _4669,_4691 )] / _ptr__4664[_4693]) % _ptr__4675[safe_add( _4663,_4693 )]),_ptr__4666[((*dperm)(_4693))] );
              }
            }
            _ptr__4690[_4691] = _4692;
          }
        }
      }
      std::vector<long long> _10773;
      for (int _4695 = (int)0, _10774 = _4659; _4695 < _10774 ; ++_4695)
      {
        _10773.push_back(_4695);
      }
      auto _10775 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10773.size()),_10773.begin(),_10773.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _4694 = _10775;
      _checked_ptr_1<long long> _ptr__4694(_4694 ? _4694->raw() : nullptr,_4694 ? _4694->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_4694,_4690,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_4659));
      _ptr__4686[_4678] = (int)0;
      if ((_4661 > (int)0))
      {
        {
          _ptr__4686[_4684] = (int)0;
        }
      }
      {}
      int _4696 = (int)0;
      int _4697 = (int)0;
      int _4698 = (int)0;
      int _10776 = (int)0;
      int _10777 = _4659;
      for (int _4699 = _10776; _4699 < _10777; ++_4699)
      {
        {
          long long _4700 = _ptr__4694[_4699];
          int _10778 = _ptr__4675[safe_add( _4668,_4700 )];
          int _10779 = _ptr__4675[safe_add( safe_add( _4668,_4700 ),(int)1 )];
          for (int _4701 = _10778; _4701 < _10779; ++_4701)
          {
            {
              _ptr__4687[safe_add( _4680,_4698 )] = _ptr__4676[safe_add( _4670,_4701 )];
              _ptr__4688[safe_add( _4682,_4698 )] = _ptr__4677[safe_add( _4671,_4701 )];
              if ((_4661 > (int)0))
              {
                {
                  int _10780 = _ptr__4675[safe_add( _4673,_4701 )];
                  int _10781 = _ptr__4675[safe_add( safe_add( _4673,_4701 ),(int)1 )];
                  for (int _4702 = _10780; _4702 < _10781; ++_4702)
                  {
                    {
                      _ptr__4686[safe_add( _4683,_4696 )] = _ptr__4675[safe_add( _4672,_4702 )];
                      _ptr__4688[safe_add( _4685,_4696 )] = _ptr__4677[safe_add( _4674,_4702 )];
                      ++ _4696;
                    }
                  }
                  _ptr__4686[safe_add( safe_add( _4684,_4698 ),(int)1 )] = _4696;
                }
              }
              {}
              ++ _4698;
            }
          }
          _ptr__4687[safe_add( _4681,_4699 )] = _ptr__4690[_4700];
          ++ _4697;
          _ptr__4686[safe_add( safe_add( _4678,_4699 ),(int)1 )] = _4698;
        }
      }
    }
  }
  else
  {
    {
      _ptr__4686[_4678] = (int)0;
      if ((_4661 > (int)0))
      {
        {
          _ptr__4686[_4684] = (int)0;
        }
      }
      {}
      int _4703 = (int)0;
      int _4704 = (int)0;
      int _4705 = (int)0;
      int _10782 = (int)0;
      int _10783 = _4659;
      for (int _4706 = _10782; _4706 < _10783; ++_4706)
      {
        {
          long long _4707 = (long long)0;
          int _10784 = (int)0;
          int _10785 = _4658;
          for (int _4708 = _10784; _4708 < _10785; ++_4708)
          {
            {
              _4707 += safe_mul( ((_4706 / _ptr__4664[((*dperm)(_4708))]) % _ptr__4675[safe_add( _4663,((*dperm)(_4708)) )]),_ptr__4666[_4708] );
            }
          }
          int _10786 = _ptr__4675[safe_add( _4668,_4707 )];
          int _10787 = _ptr__4675[safe_add( safe_add( _4668,_4707 ),(int)1 )];
          for (int _4709 = _10786; _4709 < _10787; ++_4709)
          {
            {
              _ptr__4687[safe_add( _4680,_4705 )] = _ptr__4676[safe_add( _4670,_4709 )];
              _ptr__4688[safe_add( _4682,_4705 )] = _ptr__4677[safe_add( _4671,_4709 )];
              if ((_4661 > (int)0))
              {
                {
                  int _10788 = _ptr__4675[safe_add( _4673,_4709 )];
                  int _10789 = _ptr__4675[safe_add( safe_add( _4673,_4709 ),(int)1 )];
                  for (int _4710 = _10788; _4710 < _10789; ++_4710)
                  {
                    {
                      _ptr__4686[safe_add( _4683,_4703 )] = _ptr__4675[safe_add( _4672,_4710 )];
                      _ptr__4688[safe_add( _4685,_4703 )] = _ptr__4677[safe_add( _4674,_4710 )];
                      ++ _4703;
                    }
                  }
                  _ptr__4686[safe_add( safe_add( _4684,_4705 ),(int)1 )] = _4703;
                }
              }
              {}
              ++ _4705;
            }
          }
          ++ _4704;
          _ptr__4686[safe_add( _4678,_4704 )] = _4705;
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int,1 > > _4711,std::shared_ptr< monty::ndarray< int,1 > > _4712){
  _checked_ptr_1<int> _ptr__4711(_4711 ? _4711->raw() : nullptr, _4711 ? _4711->size(0) : 0);
  _checked_ptr_1<int> _ptr__4712(_4712 ? _4712->raw() : nullptr, _4712 ? _4712->size(0) : 0);
  std::vector<int> _10790;
  for (int _4713 = (int)0, _10791 = (int)((_4711)->size(0)); _4713 < _10791 ; ++_4713)
  {
    _10790.push_back(_ptr__4712[_ptr__4711[_4713]]);
  }
  auto _10792 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10790.size()),_10790.begin(),_10790.end()));
  return _10792;
}
void mosek::fusion::p_ExprPermuteDims::destroy(){dperm.reset();expr.reset();}void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprTranspose::p_ExprTranspose  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _4714){ return new mosek::fusion::ExprTranspose(_4714); }mosek::fusion::ExprTranspose::ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _4714) :    ExprTranspose(new mosek::fusion::p_ExprTranspose(this)){ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_4714); }void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4714){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_4714->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _4714;
  }
}void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4715,monty::rc_ptr< ::mosek::fusion::WorkStack > _4716,monty::rc_ptr< ::mosek::fusion::WorkStack > _4717) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_4715,_4716,_4717); }void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4715,monty::rc_ptr< ::mosek::fusion::WorkStack > _4716,monty::rc_ptr< ::mosek::fusion::WorkStack > _4717){
  expr->eval(_4716,_4715,_4717);
  _4716->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_4716)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int _4718 = mosek::fusion::p_WorkStack::_get_impl(_4716)->shape_base;
      int _4719 = mosek::fusion::p_WorkStack::_get_impl(_4716)->nelem;
      int _4720 = mosek::fusion::p_WorkStack::_get_impl(_4716)->nnz;
      bool _4721 = mosek::fusion::p_WorkStack::_get_impl(_4716)->hassp;
      int _4722 = mosek::fusion::p_WorkStack::_get_impl(_4716)->ncodeatom;
      int _4723 = mosek::fusion::p_WorkStack::_get_impl(_4716)->ptr_base;
      int _4724 = mosek::fusion::p_WorkStack::_get_impl(_4716)->sp_base;
      int _4725 = mosek::fusion::p_WorkStack::_get_impl(_4716)->nidxs_base;
      int _4726 = mosek::fusion::p_WorkStack::_get_impl(_4716)->cof_base;
      int _4727 = mosek::fusion::p_WorkStack::_get_impl(_4716)->code_base;
      int _4728 = mosek::fusion::p_WorkStack::_get_impl(_4716)->codeptr_base;
      int _4729 = mosek::fusion::p_WorkStack::_get_impl(_4716)->cconst_base;
      int _4730 = ((*mosek::fusion::p_WorkStack::_get_impl(_4716)->i32)(_4718));
      int _4731 = ((*mosek::fusion::p_WorkStack::_get_impl(_4716)->i32)(safe_add( _4718,(int)1 )));
      std::shared_ptr< monty::ndarray< int,1 > > _4732 = mosek::fusion::p_WorkStack::_get_impl(_4716)->i32;
      _checked_ptr_1<int> _ptr__4732(_4732 ? _4732->raw() : nullptr,_4732 ? _4732->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4733 = mosek::fusion::p_WorkStack::_get_impl(_4716)->i64;
      _checked_ptr_1<long long> _ptr__4733(_4733 ? _4733->raw() : nullptr,_4733 ? _4733->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4734 = mosek::fusion::p_WorkStack::_get_impl(_4716)->f64;
      _checked_ptr_1<double> _ptr__4734(_4734 ? _4734->raw() : nullptr,_4734 ? _4734->size(0) : 0);
      _4715->alloc_expr((int)2,_4719,_4720,_4721,_4722);
      int _4735 = mosek::fusion::p_WorkStack::_get_impl(_4715)->ptr_base;
      int _4736 = mosek::fusion::p_WorkStack::_get_impl(_4715)->nidxs_base;
      int _4737 = mosek::fusion::p_WorkStack::_get_impl(_4715)->sp_base;
      int _4738 = mosek::fusion::p_WorkStack::_get_impl(_4715)->cof_base;
      int _4739 = mosek::fusion::p_WorkStack::_get_impl(_4715)->shape_base;
      int _4740 = mosek::fusion::p_WorkStack::_get_impl(_4715)->code_base;
      int _4741 = mosek::fusion::p_WorkStack::_get_impl(_4715)->codeptr_base;
      int _4742 = mosek::fusion::p_WorkStack::_get_impl(_4715)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4743 = mosek::fusion::p_WorkStack::_get_impl(_4715)->i32;
      _checked_ptr_1<int> _ptr__4743(_4743 ? _4743->raw() : nullptr,_4743 ? _4743->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4744 = mosek::fusion::p_WorkStack::_get_impl(_4715)->i64;
      _checked_ptr_1<long long> _ptr__4744(_4744 ? _4744->raw() : nullptr,_4744 ? _4744->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4745 = mosek::fusion::p_WorkStack::_get_impl(_4715)->f64;
      _checked_ptr_1<double> _ptr__4745(_4745 ? _4745->raw() : nullptr,_4745 ? _4745->size(0) : 0);
      _ptr__4743[_4739] = _4731;
      _ptr__4743[safe_add( _4739,(int)1 )] = _4730;
      _ptr__4743[_4735] = (int)0;
      if ((_4722 > (int)0))
      {
        {
          _ptr__4743[_4741] = (int)0;
        }
      }
      {}
      if (_4721)
      {
        {
          int _4746 = _4717->alloci32(_4719);
          int _4747 = _4717->alloci32(safe_add( _4731,(int)1 ));
          std::shared_ptr< monty::ndarray< int,1 > > _4748 = mosek::fusion::p_WorkStack::_get_impl(_4717)->i32;
          _checked_ptr_1<int> _ptr__4748(_4748 ? _4748->raw() : nullptr,_4748 ? _4748->size(0) : 0);
          {
            int _10793 = (int)0;
            int _10794 = safe_add( _4731,(int)1 );
            for (int _4749 = _10793; _4749 < _10794; ++_4749)
            {
              {
                _ptr__4748[safe_add( _4747,_4749 )] = (int)0;
              }
            }
            int _10795 = (int)0;
            int _10796 = _4719;
            for (int _4750 = _10795; _4750 < _10796; ++_4750)
            {
              {
                ++ _ptr__4748[safe_add( safe_add( _4747,(_ptr__4733[safe_add( _4724,_4750 )] % _4731) ),(int)1 )];
              }
            }
            int _10797 = (int)0;
            int _10798 = _4731;
            for (int _4751 = _10797; _4751 < _10798; ++_4751)
            {
              {
                _ptr__4748[safe_add( safe_add( _4747,_4751 ),(int)1 )] += _ptr__4748[safe_add( _4747,_4751 )];
              }
            }
            int _10799 = (int)0;
            int _10800 = _4719;
            for (int _4752 = _10799; _4752 < _10800; ++_4752)
            {
              {
                long long _4753 = (_ptr__4733[safe_add( _4724,_4752 )] % _4731);
                _ptr__4748[safe_add( _4746,_ptr__4748[safe_add( _4747,_4753 )] )] = _4752;
                ++ _ptr__4748[safe_add( _4747,_4753 )];
              }
            }
            _ptr__4743[_4735] = (int)0;
            int _4754 = (int)0;
            int _4755 = (int)0;
            int _10801 = (int)0;
            int _10802 = _4719;
            for (int _4756 = _10801; _4756 < _10802; ++_4756)
            {
              {
                int _4757 = _ptr__4748[safe_add( _4746,_4756 )];
                int _10803 = _ptr__4732[safe_add( _4723,_4757 )];
                int _10804 = _ptr__4732[safe_add( safe_add( _4723,_4757 ),(int)1 )];
                for (int _4758 = _10803; _4758 < _10804; ++_4758)
                {
                  {
                    _ptr__4744[safe_add( _4736,_4755 )] = _ptr__4733[safe_add( _4725,_4758 )];
                    _ptr__4745[safe_add( _4738,_4755 )] = _ptr__4734[safe_add( _4726,_4758 )];
                    if ((_4722 > (int)0))
                    {
                      {
                        int _10805 = _ptr__4732[safe_add( _4728,_4758 )];
                        int _10806 = _ptr__4732[safe_add( safe_add( _4728,_4758 ),(int)1 )];
                        for (int _4759 = _10805; _4759 < _10806; ++_4759)
                        {
                          {
                            _ptr__4743[safe_add( _4740,_4754 )] = _ptr__4732[safe_add( _4727,_4759 )];
                            _ptr__4745[safe_add( _4742,_4754 )] = _ptr__4734[safe_add( _4729,_4759 )];
                            ++ _4754;
                          }
                        }
                        _ptr__4743[safe_add( safe_add( _4741,_4755 ),(int)1 )] = _4754;
                      }
                    }
                    {}
                    ++ _4755;
                  }
                }
                long long _4760 = (_ptr__4733[safe_add( _4724,_4757 )] / _4731);
                long long _4761 = (_ptr__4733[safe_add( _4724,_4757 )] % _4731);
                _ptr__4743[safe_add( safe_add( _4735,_4756 ),(int)1 )] = _4755;
                _ptr__4744[safe_add( _4737,_4756 )] = safe_add( safe_mul( _4761,_4730 ),_4760 );
              }
            }
          }
        }
      }
      else
      {
        {
          _ptr__4743[_4735] = (int)0;
          int _4762 = (int)0;
          int _4763 = (int)0;
          int _4764 = (int)0;
          int _10807 = (int)0;
          int _10808 = _4731;
          for (int _4765 = _10807; _4765 < _10808; ++_4765)
          {
            {
              int _10809 = (int)0;
              int _10810 = _4730;
              for (int _4766 = _10809; _4766 < _10810; ++_4766)
              {
                {
                  int _4767 = safe_add( safe_mul( _4766,_4731 ),_4765 );
                  int _10811 = _ptr__4732[safe_add( _4723,_4767 )];
                  int _10812 = _ptr__4732[safe_add( safe_add( _4723,_4767 ),(int)1 )];
                  for (int _4768 = _10811; _4768 < _10812; ++_4768)
                  {
                    {
                      _ptr__4744[safe_add( _4736,_4763 )] = _ptr__4733[safe_add( _4725,_4768 )];
                      _ptr__4745[safe_add( _4738,_4763 )] = _ptr__4734[safe_add( _4726,_4768 )];
                      if ((_4722 > (int)0))
                      {
                        {
                          int _10813 = _ptr__4732[safe_add( _4728,_4768 )];
                          int _10814 = _ptr__4732[safe_add( safe_add( _4728,_4768 ),(int)1 )];
                          for (int _4769 = _10813; _4769 < _10814; ++_4769)
                          {
                            {
                              _ptr__4743[safe_add( _4740,_4762 )] = _ptr__4732[safe_add( _4727,_4769 )];
                              _ptr__4745[safe_add( _4742,_4762 )] = _ptr__4734[safe_add( _4729,_4769 )];
                              ++ _4762;
                            }
                          }
                          _ptr__4743[safe_add( safe_add( _4741,_4763 ),(int)1 )] = _4762;
                        }
                      }
                      {}
                      ++ _4763;
                    }
                  }
                  _ptr__4743[safe_add( safe_add( _4735,_4764 ),(int)1 )] = _4763;
                  ++ _4764;
                }
              }
            }
          }
        }
      }
      _4717->clear();
    }
  }
}
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprTranspose::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int,1 > > _4770){
  _checked_ptr_1<int> _ptr__4770(_4770 ? _4770->raw() : nullptr, _4770 ? _4770->size(0) : 0);
  if (((int)((_4770)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__4770[(int)1]),(int)(_ptr__4770[(int)0])});
    }
  }
}
void mosek::fusion::p_ExprTranspose::destroy(){expr.reset();}void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }mosek::fusion::ExprRepeat::ExprRepeat(mosek::fusion::p_ExprRepeat *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprRepeat()" << this << std::endl; */ }mosek::fusion::ExprRepeat::~ExprRepeat() {  /* std::cout << "~ExprRepeat()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprRepeat::p_ExprRepeat  (::mosek::fusion::ExprRepeat * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprRepeat::t mosek::fusion::p_ExprRepeat::_new_ExprRepeat  (monty::rc_ptr< ::mosek::fusion::Expression > _4771,    int _4772,    int _4773){ return new mosek::fusion::ExprRepeat(_4771,_4772,_4773); }mosek::fusion::ExprRepeat::ExprRepeat  (monty::rc_ptr< ::mosek::fusion::Expression > _4771,    int _4772,    int _4773) :    ExprRepeat(new mosek::fusion::p_ExprRepeat(this)){ mosek::fusion::p_ExprRepeat::_get_impl(this)->_initialize(_4771,_4772,_4773); }void mosek::fusion::p_ExprRepeat::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4771,    int _4772,    int _4773){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprRepeat::getshape(_4771,_4772,_4773));
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->expr = _4771;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->dim = _4772;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->n = _4773;
  }
}void mosek::fusion::ExprRepeat :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4774,monty::rc_ptr< ::mosek::fusion::WorkStack > _4775,monty::rc_ptr< ::mosek::fusion::WorkStack > _4776) { mosek::fusion::p_ExprRepeat::_get_impl(this)->eval(_4774,_4775,_4776); }void mosek::fusion::p_ExprRepeat::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4774,monty::rc_ptr< ::mosek::fusion::WorkStack > _4775,monty::rc_ptr< ::mosek::fusion::WorkStack > _4776){
  expr->eval(_4775,_4774,_4776);
  _4775->pop_expr();
  int _4777 = mosek::fusion::p_WorkStack::_get_impl(_4775)->nd;
  int _4778 = mosek::fusion::p_WorkStack::_get_impl(_4775)->shape_base;
  int _4779 = mosek::fusion::p_WorkStack::_get_impl(_4775)->nelem;
  int _4780 = mosek::fusion::p_WorkStack::_get_impl(_4775)->nnz;
  int _4781 = mosek::fusion::p_WorkStack::_get_impl(_4775)->ncodeatom;
  bool _4782 = mosek::fusion::p_WorkStack::_get_impl(_4775)->hassp;
  int _4783 = mosek::fusion::p_WorkStack::_get_impl(_4775)->ptr_base;
  int _4784 = mosek::fusion::p_WorkStack::_get_impl(_4775)->sp_base;
  int _4785 = mosek::fusion::p_WorkStack::_get_impl(_4775)->nidxs_base;
  int _4786 = mosek::fusion::p_WorkStack::_get_impl(_4775)->cof_base;
  int _4787 = mosek::fusion::p_WorkStack::_get_impl(_4775)->code_base;
  int _4788 = mosek::fusion::p_WorkStack::_get_impl(_4775)->codeptr_base;
  int _4789 = mosek::fusion::p_WorkStack::_get_impl(_4775)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4790 = mosek::fusion::p_WorkStack::_get_impl(_4775)->i32;
  _checked_ptr_1<int> _ptr__4790(_4790 ? _4790->raw() : nullptr,_4790 ? _4790->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4791 = mosek::fusion::p_WorkStack::_get_impl(_4775)->i64;
  _checked_ptr_1<long long> _ptr__4791(_4791 ? _4791->raw() : nullptr,_4791 ? _4791->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4792 = mosek::fusion::p_WorkStack::_get_impl(_4775)->f64;
  _checked_ptr_1<double> _ptr__4792(_4792 ? _4792->raw() : nullptr,_4792 ? _4792->size(0) : 0);
  int _10815;
  bool _10816 = (dim < _4777);
  if (_10816)
  {
    _10815 = _4777;
  }
  else
  {
    _10815 = safe_add( _4777,(int)1 );
  }
  int _4793 = _10815;
  int _4794 = safe_mul( _4779,n );
  int _4795 = safe_mul( _4780,n );
  int _4796 = safe_mul( _4781,n );
  _4774->alloc_expr(_4793,_4794,_4795,_4782,_4796);
  std::shared_ptr< monty::ndarray< int,1 > > _4797 = mosek::fusion::p_WorkStack::_get_impl(_4774)->i32;
  _checked_ptr_1<int> _ptr__4797(_4797 ? _4797->raw() : nullptr,_4797 ? _4797->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4798 = mosek::fusion::p_WorkStack::_get_impl(_4774)->i64;
  _checked_ptr_1<long long> _ptr__4798(_4798 ? _4798->raw() : nullptr,_4798 ? _4798->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4799 = mosek::fusion::p_WorkStack::_get_impl(_4774)->f64;
  _checked_ptr_1<double> _ptr__4799(_4799 ? _4799->raw() : nullptr,_4799 ? _4799->size(0) : 0);
  int _4800 = mosek::fusion::p_WorkStack::_get_impl(_4774)->shape_base;
  int _4801 = mosek::fusion::p_WorkStack::_get_impl(_4774)->ptr_base;
  int _4802 = mosek::fusion::p_WorkStack::_get_impl(_4774)->sp_base;
  int _4803 = mosek::fusion::p_WorkStack::_get_impl(_4774)->nidxs_base;
  int _4804 = mosek::fusion::p_WorkStack::_get_impl(_4774)->cof_base;
  int _4805 = mosek::fusion::p_WorkStack::_get_impl(_4774)->code_base;
  int _4806 = mosek::fusion::p_WorkStack::_get_impl(_4774)->codeptr_base;
  int _4807 = mosek::fusion::p_WorkStack::_get_impl(_4774)->cconst_base;
  int _4808 = (int)1;
  int _10817 = (int)0;
  int _10818 = dim;
  for (int _4809 = _10817; _4809 < _10818; ++_4809)
  {
    {
      _4808 *= _ptr__4790[safe_add( _4778,_4809 )];
    }
  }
  int _10819;
  bool _10820 = (dim < _4777);
  if (_10820)
  {
    _10819 = _ptr__4790[safe_add( _4778,dim )];
  }
  else
  {
    _10819 = (int)1;
  }
  int _4810 = _10819;
  int _4811 = safe_mul( n,_4810 );
  int _4812 = (int)1;
  int _10821 = safe_add( dim,(int)1 );
  int _10822 = _4777;
  for (int _4813 = _10821; _4813 < _10822; ++_4813)
  {
    {
      _4812 *= _ptr__4790[safe_add( _4778,_4813 )];
    }
  }
  {
    int _10823 = (int)0;
    int _10824 = _4777;
    for (int _4814 = _10823; _4814 < _10824; ++_4814)
    {
      {
        _ptr__4797[safe_add( _4800,_4814 )] = _ptr__4790[safe_add( _4778,_4814 )];
      }
    }
    _ptr__4797[safe_add( _4800,dim )] = _4811;
    _ptr__4797[_4801] = (int)0;
    if ((_4796 != (int)0))
    {
      {
        _ptr__4797[_4806] = (int)0;
      }
    }
    {}
    if (_4782)
    {
      {
        int _4815 = (int)0;
        int _4816 = (int)0;
        int _4817 = (int)0;
        int _4818 = (int)0;
        int _4819 = (int)0;
        while ( (_4817 < _4779) )
        {
          {
            long long _4820 = _ptr__4791[safe_add( _4784,_4817 )];
            long long _4821 = safe_add( (_4820 - (_4820 % safe_mul( _4810,_4812 ))),safe_mul( _4810,_4812 ) );
            int _4822 = _4817;
            ++ _4817;
            while ( ((_4817 < _4779) && (_ptr__4791[safe_add( _4784,_4817 )] < _4821)) )
            {
              {
                ++ _4817;
              }
            }
            int _4823 = _4817;
            int _10825 = (int)0;
            int _10826 = n;
            for (int _4824 = _10825; _4824 < _10826; ++_4824)
            {
              {
                int _10827 = _4822;
                int _10828 = _4823;
                for (int _4825 = _10827; _4825 < _10828; ++_4825)
                {
                  {
                    long long _4826 = (_ptr__4791[safe_add( _4784,_4825 )] / safe_mul( _4810,_4812 ));
                    long long _4827 = ((_ptr__4791[safe_add( _4784,_4825 )] / _4812) % _4810);
                    long long _4828 = (_ptr__4791[safe_add( _4784,_4825 )] % _4812);
                    int _10829 = _ptr__4790[safe_add( _4783,_4825 )];
                    int _10830 = _ptr__4790[safe_add( safe_add( _4783,_4825 ),(int)1 )];
                    for (int _4829 = _10829; _4829 < _10830; ++_4829)
                    {
                      {
                        _ptr__4798[safe_add( _4803,_4819 )] = _ptr__4791[safe_add( _4785,_4829 )];
                        _ptr__4799[safe_add( _4804,_4819 )] = _ptr__4792[safe_add( _4786,_4829 )];
                        if ((_4781 > (int)0))
                        {
                          {
                            int _10831 = _ptr__4790[safe_add( _4788,_4829 )];
                            int _10832 = _ptr__4790[safe_add( safe_add( _4788,_4829 ),(int)1 )];
                            for (int _4830 = _10831; _4830 < _10832; ++_4830)
                            {
                              {
                                _ptr__4797[safe_add( _4805,_4815 )] = _ptr__4790[safe_add( _4787,_4830 )];
                                _ptr__4799[safe_add( _4807,_4815 )] = _ptr__4792[safe_add( _4789,_4830 )];
                                ++ _4815;
                              }
                            }
                            _ptr__4797[safe_add( safe_add( _4806,_4819 ),(int)1 )] = _4815;
                          }
                        }
                        {}
                        ++ _4819;
                      }
                    }
                    _ptr__4797[safe_add( safe_add( _4801,_4818 ),(int)1 )] = _4819;
                    _ptr__4798[safe_add( _4802,_4818 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4826,_4811 ),safe_mul( _4824,_4810 ) ),_4827 ),_4812 ),_4828 );
                    ++ _4818;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _4831 = (int)0;
        int _4832 = (int)0;
        int _4833 = (int)0;
        int _4834 = (int)0;
        int _10833 = (int)0;
        int _10834 = _4808;
        for (int _4835 = _10833; _4835 < _10834; ++_4835)
        {
          {
            int _10835 = (int)0;
            int _10836 = n;
            for (int _4836 = _10835; _4836 < _10836; ++_4836)
            {
              {
                int _4837 = safe_mul( safe_mul( _4835,_4810 ),_4812 );
                int _10837 = (int)0;
                int _10838 = safe_mul( _4810,_4812 );
                for (int _4838 = _10837; _4838 < _10838; ++_4838)
                {
                  {
                    int _10839 = _ptr__4790[safe_add( _4783,_4837 )];
                    int _10840 = _ptr__4790[safe_add( safe_add( _4783,_4837 ),(int)1 )];
                    for (int _4839 = _10839; _4839 < _10840; ++_4839)
                    {
                      {
                        _ptr__4798[safe_add( _4803,_4833 )] = _ptr__4791[safe_add( _4785,_4839 )];
                        _ptr__4799[safe_add( _4804,_4833 )] = _ptr__4792[safe_add( _4786,_4839 )];
                        if ((_4781 > (int)0))
                        {
                          {
                            int _10841 = _ptr__4790[safe_add( _4788,_4839 )];
                            int _10842 = _ptr__4790[safe_add( safe_add( _4788,_4839 ),(int)1 )];
                            for (int _4840 = _10841; _4840 < _10842; ++_4840)
                            {
                              {
                                _ptr__4797[safe_add( _4805,_4831 )] = _ptr__4790[safe_add( _4787,_4840 )];
                                _ptr__4799[safe_add( _4807,_4831 )] = _ptr__4792[safe_add( _4789,_4840 )];
                                ++ _4831;
                              }
                            }
                            _ptr__4797[safe_add( safe_add( _4806,_4833 ),(int)1 )] = _4831;
                          }
                        }
                        {}
                        ++ _4833;
                      }
                    }
                    _ptr__4797[safe_add( safe_add( _4801,_4832 ),(int)1 )] = _4833;
                    ++ _4832;
                    ++ _4837;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprRepeat::getshape(monty::rc_ptr< ::mosek::fusion::Expression > _4841,int _4842,int _4843){
  std::shared_ptr< monty::ndarray< int,1 > > _4844 = _4841->getShape();
  _checked_ptr_1<int> _ptr__4844(_4844 ? _4844->raw() : nullptr,_4844 ? _4844->size(0) : 0);
  int _4845 = (int)((_4844)->size(0));
  if ((_4842 < _4845))
  {
    {
      _ptr__4844[_4842] *= _4843;
      return _4844;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _10843;
      bool _10844 = (_4842 == _4845);
      if (_10844)
      {
        _10843 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _4845,(int)1 ))));
      }
      else
      {
        _10843 = _4844;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4846 = _10843;
      _checked_ptr_1<int> _ptr__4846(_4846 ? _4846->raw() : nullptr,_4846 ? _4846->size(0) : 0);
      int _10845 = (int)0;
      int _10846 = _4845;
      for (int _4847 = _10845; _4847 < _10846; ++_4847)
      {
        {
          _ptr__4846[_4847] = _ptr__4844[_4847];
        }
      }
      _ptr__4846[_4842] = _4843;
      return _4846;
    }
  }
}
std::string mosek::fusion::ExprRepeat :: toString() { return mosek::fusion::p_ExprRepeat::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprRepeat::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprRepeat(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprRepeat::destroy(){expr.reset();}void mosek::fusion::ExprRepeat::destroy() { mosek::fusion::p_ExprRepeat::_get_impl(this)->destroy(); }mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprStack::p_ExprStack  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4848,    int _4849){ return new mosek::fusion::ExprStack(_4848,_4849); }mosek::fusion::ExprStack::ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4848,    int _4849) :    ExprStack(new mosek::fusion::p_ExprStack(this)){ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_4848,_4849); }void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4848,    int _4849){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_4848,_4849));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _10847;
    for (int _4850 = (int)0, _10848 = (int)((_4848)->size(0)); _4850 < _10848 ; ++_4850)
    {
      _10847.push_back(((*_4848)(_4850)));
    }
    auto _10849 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_10847.size()),_10847.begin(),_10847.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _10849;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _4849;
  }
}void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4851,monty::rc_ptr< ::mosek::fusion::WorkStack > _4852,monty::rc_ptr< ::mosek::fusion::WorkStack > _4853) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_4851,_4852,_4853); }void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4851,monty::rc_ptr< ::mosek::fusion::WorkStack > _4852,monty::rc_ptr< ::mosek::fusion::WorkStack > _4853){
  int _4854 = (int)((exprs)->size(0));
  if ((_4854 == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_4851,_4852,_4853);
    }
  }
  else
  {
    {
      int _10850 = (int)0;
      int _10851 = _4854;
      for (int _4855 = _10850; _4855 < _10851; ++_4855)
      {
        {
          ((*exprs)(((_4854 - _4855) - (int)1)))->eval(_4852,_4851,_4853);
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4856 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4856(_4856 ? _4856->raw() : nullptr,_4856 ? _4856->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4857 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4857(_4857 ? _4857->raw() : nullptr,_4857 ? _4857->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4858 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4858(_4858 ? _4858->raw() : nullptr,_4858 ? _4858->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4859 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4859(_4859 ? _4859->raw() : nullptr,_4859 ? _4859->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4860 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4860(_4860 ? _4860->raw() : nullptr,_4860 ? _4860->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4861 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4861(_4861 ? _4861->raw() : nullptr,_4861 ? _4861->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4862 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4862(_4862 ? _4862->raw() : nullptr,_4862 ? _4862->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4863 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4863(_4863 ? _4863->raw() : nullptr,_4863 ? _4863->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4864 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4864(_4864 ? _4864->raw() : nullptr,_4864 ? _4864->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4865 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4865(_4865 ? _4865->raw() : nullptr,_4865 ? _4865->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4866 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4866(_4866 ? _4866->raw() : nullptr,_4866 ? _4866->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4867(_4867 ? _4867->raw() : nullptr,_4867 ? _4867->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4868 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4868(_4868 ? _4868->raw() : nullptr,_4868 ? _4868->size(0) : 0);
      int _10852 = (int)0;
      int _10853 = _4854;
      for (int _4869 = _10852; _4869 < _10853; ++_4869)
      {
        {
          _4852->pop_expr();
          _ptr__4856[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->nd;
          _ptr__4857[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->shape_base;
          _ptr__4858[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->nelem;
          _ptr__4859[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->nnz;
          _ptr__4860[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->ncodeatom;
          int _10854;
          bool _10855 = mosek::fusion::p_WorkStack::_get_impl(_4852)->hassp;
          if (_10855)
          {
            _10854 = (int)1;
          }
          else
          {
            _10854 = (int)0;
          }
          _ptr__4861[_4869] = _10854;
          _ptr__4862[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->ptr_base;
          _ptr__4864[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->sp_base;
          _ptr__4863[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->nidxs_base;
          _ptr__4865[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->cof_base;
          _ptr__4866[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->code_base;
          _ptr__4867[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->codeptr_base;
          _ptr__4868[_4869] = mosek::fusion::p_WorkStack::_get_impl(_4852)->cconst_base;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4870 = mosek::fusion::p_WorkStack::_get_impl(_4852)->i32;
      _checked_ptr_1<int> _ptr__4870(_4870 ? _4870->raw() : nullptr,_4870 ? _4870->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4871 = mosek::fusion::p_WorkStack::_get_impl(_4852)->i64;
      _checked_ptr_1<long long> _ptr__4871(_4871 ? _4871->raw() : nullptr,_4871 ? _4871->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4872 = mosek::fusion::p_WorkStack::_get_impl(_4852)->f64;
      _checked_ptr_1<double> _ptr__4872(_4872 ? _4872->raw() : nullptr,_4872 ? _4872->size(0) : 0);
      int _4873 = _ptr__4856[(int)0];
      int _4874 = _ptr__4857[(int)0];
      bool _4875 = (_ptr__4861[(int)0] == (int)0);
      bool _4876 = false;
      int _10856 = (int)1;
      int _10857 = _4854;
      for (int _4877 = _10856; _4877 < _10857; ++_4877)
      {
        {
          _4876 = (_4876 || ((dim != _4877) && (_ptr__4856[_4877] != _4873)));
          if ((!_4876))
          {
            {
              int _10858 = (int)0;
              int _10859 = dim;
              for (int _4878 = _10858; _4878 < _10859; ++_4878)
              {
                {
                  _4876 = (_4876 || (_ptr__4870[safe_add( _4874,_4878 )] != _ptr__4870[safe_add( _ptr__4857[_4877],_4878 )]));
                }
              }
            }
          }
          {}
          if ((!_4876))
          {
            {
              int _10860 = safe_add( dim,(int)1 );
              int _10861 = _4873;
              for (int _4879 = _10860; _4879 < _10861; ++_4879)
              {
                {
                  _4876 = (_4876 || (_ptr__4870[safe_add( _4874,_4879 )] != _ptr__4870[safe_add( _ptr__4857[_4877],_4879 )]));
                }
              }
            }
          }
          {}
          _4875 = (_4875 && ((int)0 == _ptr__4861[_4877]));
        }
      }
      if (_4876)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int _4880 = (int)0;
      if ((dim < _4873))
      {
        {
          int _10862 = (int)0;
          int _10863 = _4854;
          for (int _4881 = _10862; _4881 < _10863; ++_4881)
          {
            {
              _4880 += _ptr__4870[safe_add( _ptr__4857[_4881],dim )];
            }
          }
        }
      }
      else
      {
        {
          _4880 = _4854;
        }
      }
      int _10864;
      bool _10865 = (dim < _4873);
      if (_10865)
      {
        _10864 = _4873;
      }
      else
      {
        _10864 = safe_add( _4873,(int)1 );
      }
      int _4882 = _10864;
      if ((_4882 != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching dimensions"));
        }
      }
      {}
      int _4883 = (int)0;
      int _4884 = (int)0;
      int _4885 = (int)0;
      bool _4886 = false;
      {
        int _10866 = (int)0;
        int _10867 = _4854;
        for (int _4887 = _10866; _4887 < _10867; ++_4887)
        {
          {
            _4886 = (_4886 || (_ptr__4860[_4887] > (int)0));
          }
        }
        int _10868 = (int)0;
        int _10869 = _4854;
        for (int _4888 = _10868; _4888 < _10869; ++_4888)
        {
          {
            _4885 += _ptr__4859[_4888];
          }
        }
        int _10870 = (int)0;
        int _10871 = _4854;
        for (int _4889 = _10870; _4889 < _10871; ++_4889)
        {
          {
            _4884 += _ptr__4858[_4889];
          }
        }
        if (_4886)
        {
          {
            int _10872 = (int)0;
            int _10873 = _4854;
            for (int _4890 = _10872; _4890 < _10873; ++_4890)
            {
              {
                int _10874;
                bool _10875 = (_ptr__4860[_4890] > (int)0);
                if (_10875)
                {
                  _10874 = _ptr__4860[_4890];
                }
                else
                {
                  _10874 = _ptr__4859[_4890];
                }
                _4883 += _10874;
              }
            }
          }
        }
        {}
      }
      int _4891 = (int)1;
      int _10876 = (int)0;
      int _10877 = dim;
      for (int _4892 = _10876; _4892 < _10877; ++_4892)
      {
        {
          _4891 *= _ptr__4870[safe_add( _4874,_4892 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _10878;
      bool _10879 = (dim < _4873);
      if (_10879)
      {
        std::vector<int> _10880;
        for (int _4894 = (int)0, _10881 = _4854; _4894 < _10881 ; ++_4894)
        {
          _10880.push_back(_ptr__4870[safe_add( _ptr__4857[_4894],dim )]);
        }
        auto _10882 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10880.size()),_10880.begin(),_10880.end()));
        _10878 = _10882;
      }
      else
      {
        std::vector<int> _10883;
        for (int _4895 = (int)0, _10884 = _4854; _4895 < _10884 ; ++_4895)
        {
          _10883.push_back((int)1);
        }
        auto _10885 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10883.size()),_10883.begin(),_10883.end()));
        _10878 = _10885;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4893 = _10878;
      _checked_ptr_1<int> _ptr__4893(_4893 ? _4893->raw() : nullptr,_4893 ? _4893->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4896 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4854)));
      _checked_ptr_1<int> _ptr__4896(_4896 ? _4896->raw() : nullptr,_4896 ? _4896->size(0) : 0);
      _ptr__4896[(int)0] = (int)0;
      int _10886 = (int)1;
      int _10887 = _4854;
      for (int _4897 = _10886; _4897 < _10887; ++_4897)
      {
        {
          _ptr__4896[_4897] = safe_add( _ptr__4896[(_4897 - (int)1)],_ptr__4893[(_4897 - (int)1)] );
        }
      }
      int _4898 = (int)0;
      int _10888 = (int)0;
      int _10889 = _4854;
      for (int _4899 = _10888; _4899 < _10889; ++_4899)
      {
        {
          _4898 += _ptr__4893[_4899];
        }
      }
      int _4900 = (int)1;
      int _10890 = safe_add( dim,(int)1 );
      int _10891 = _4873;
      for (int _4901 = _10890; _4901 < _10891; ++_4901)
      {
        {
          _4900 *= _ptr__4870[safe_add( _4874,_4901 )];
        }
      }
      if (_4875)
      {
        {
          _4851->alloc_expr(_4882,_4884,_4885,false,_4883);
          int _4902 = mosek::fusion::p_WorkStack::_get_impl(_4851)->ptr_base;
          int _4903 = mosek::fusion::p_WorkStack::_get_impl(_4851)->shape_base;
          int _4904 = mosek::fusion::p_WorkStack::_get_impl(_4851)->nidxs_base;
          int _4905 = mosek::fusion::p_WorkStack::_get_impl(_4851)->cof_base;
          int _4906 = mosek::fusion::p_WorkStack::_get_impl(_4851)->code_base;
          int _4907 = mosek::fusion::p_WorkStack::_get_impl(_4851)->codeptr_base;
          int _4908 = mosek::fusion::p_WorkStack::_get_impl(_4851)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _4909 = mosek::fusion::p_WorkStack::_get_impl(_4851)->i32;
          _checked_ptr_1<int> _ptr__4909(_4909 ? _4909->raw() : nullptr,_4909 ? _4909->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4910 = mosek::fusion::p_WorkStack::_get_impl(_4851)->i64;
          _checked_ptr_1<long long> _ptr__4910(_4910 ? _4910->raw() : nullptr,_4910 ? _4910->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4911 = mosek::fusion::p_WorkStack::_get_impl(_4851)->f64;
          _checked_ptr_1<double> _ptr__4911(_4911 ? _4911->raw() : nullptr,_4911 ? _4911->size(0) : 0);
          int _10892;
          bool _10893 = (_4883 > (int)0);
          if (_10893)
          {
            _10892 = _4853->alloci32(safe_add( _4884,(int)1 ));
          }
          else
          {
            _10892 = (-(int)9999);
          }
          int _4912 = _10892;
          std::shared_ptr< monty::ndarray< int,1 > > _4913 = mosek::fusion::p_WorkStack::_get_impl(_4853)->i32;
          _checked_ptr_1<int> _ptr__4913(_4913 ? _4913->raw() : nullptr,_4913 ? _4913->size(0) : 0);
          int _10894 = (int)0;
          int _10895 = _4873;
          for (int _4914 = _10894; _4914 < _10895; ++_4914)
          {
            {
              _ptr__4909[safe_add( _4903,_4914 )] = _ptr__4870[safe_add( _4874,_4914 )];
            }
          }
          _ptr__4909[safe_add( _4903,dim )] = _4880;
          {
            int _4915 = (int)0;
            int _4916 = (int)0;
            int _4917 = (int)0;
            _ptr__4909[_4902] = (int)0;
            if (_4886)
            {
              {
                _ptr__4909[_4907] = (int)0;
              }
            }
            {}
            int _10896 = (int)0;
            int _10897 = _4891;
            for (int _4918 = _10896; _4918 < _10897; ++_4918)
            {
              {
                int _10898 = (int)0;
                int _10899 = _4854;
                for (int _4919 = _10898; _4919 < _10899; ++_4919)
                {
                  {
                    int _10900 = (int)0;
                    int _10901 = _ptr__4893[_4919];
                    for (int _4920 = _10900; _4920 < _10901; ++_4920)
                    {
                      {
                        int _10902 = (int)0;
                        int _10903 = _4900;
                        for (int _4921 = _10902; _4921 < _10903; ++_4921)
                        {
                          {
                            int _4922 = safe_add( safe_add( safe_mul( safe_mul( _4918,_ptr__4893[_4919] ),_4900 ),safe_mul( _4920,_4900 ) ),_4921 );
                            int _10904 = _ptr__4870[safe_add( _ptr__4862[_4919],_4922 )];
                            int _10905 = _ptr__4870[safe_add( safe_add( _ptr__4862[_4919],_4922 ),(int)1 )];
                            for (int _4923 = _10904; _4923 < _10905; ++_4923)
                            {
                              {
                                _ptr__4910[safe_add( _4904,_4917 )] = _ptr__4871[safe_add( _ptr__4863[_4919],_4923 )];
                                _ptr__4911[safe_add( _4905,_4917 )] = _ptr__4872[safe_add( _ptr__4865[_4919],_4923 )];
                                if ((_ptr__4860[_4919] > (int)0))
                                {
                                  {
                                    int _10906 = _ptr__4870[safe_add( _ptr__4867[_4919],_4923 )];
                                    int _10907 = _ptr__4870[safe_add( safe_add( _ptr__4867[_4919],_4923 ),(int)1 )];
                                    for (int _4924 = _10906; _4924 < _10907; ++_4924)
                                    {
                                      {
                                        _ptr__4909[safe_add( _4906,_4915 )] = _ptr__4870[safe_add( _ptr__4866[_4919],_4924 )];
                                        _ptr__4911[safe_add( _4908,_4915 )] = _ptr__4872[safe_add( _ptr__4868[_4919],_4924 )];
                                        ++ _4915;
                                      }
                                    }
                                    _ptr__4909[safe_add( safe_add( _4907,_4917 ),(int)1 )] = _4915;
                                  }
                                }
                                else if(_4886)
                                {
                                  {
                                    _ptr__4909[safe_add( _4906,_4915 )] = 2;
                                    _ptr__4911[safe_add( _4908,_4915 )] = 0.0;
                                    ++ _4915;
                                    _ptr__4909[safe_add( safe_add( _4907,_4917 ),(int)1 )] = _4915;
                                  }
                                }
                                {}
                                ++ _4917;
                              }
                            }
                            _ptr__4909[safe_add( safe_add( _4902,_4916 ),(int)1 )] = _4917;
                            ++ _4916;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _4925 = (int)1;
          int _10908 = (int)0;
          int _10909 = dim;
          for (int _4926 = _10908; _4926 < _10909; ++_4926)
          {
            {
              _4925 *= _ptr__4870[safe_add( _4874,_4926 )];
            }
          }
          _4925 *= _4880;
          int _10910 = safe_add( dim,(int)1 );
          int _10911 = _4873;
          for (int _4927 = _10910; _4927 < _10911; ++_4927)
          {
            {
              _4925 *= _ptr__4870[safe_add( _4874,_4927 )];
            }
          }
          bool _4928 = (_4884 < _4925);
          _4851->alloc_expr(_4882,_4884,_4885,_4928,_4883);
          int _4929 = mosek::fusion::p_WorkStack::_get_impl(_4851)->ptr_base;
          int _4930 = mosek::fusion::p_WorkStack::_get_impl(_4851)->nidxs_base;
          int _10912;
          bool _10913 = _4928;
          if (_10913)
          {
            _10912 = mosek::fusion::p_WorkStack::_get_impl(_4851)->sp_base;
          }
          else
          {
            _10912 = _4851->alloci64(_4884);
          }
          int _4931 = _10912;
          int _4932 = mosek::fusion::p_WorkStack::_get_impl(_4851)->cof_base;
          int _4933 = mosek::fusion::p_WorkStack::_get_impl(_4851)->code_base;
          int _4934 = mosek::fusion::p_WorkStack::_get_impl(_4851)->codeptr_base;
          int _4935 = mosek::fusion::p_WorkStack::_get_impl(_4851)->cconst_base;
          int _4936 = mosek::fusion::p_WorkStack::_get_impl(_4851)->shape_base;
          int _10914 = (int)0;
          int _10915 = _4873;
          for (int _4937 = _10914; _4937 < _10915; ++_4937)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_4851)->i32)(safe_add( _4936,_4937 ))) = _ptr__4870[safe_add( _4874,_4937 )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_4851)->i32)(safe_add( _4936,dim ))) = _4880;
          std::shared_ptr< monty::ndarray< int,1 > > _4938 = mosek::fusion::p_WorkStack::_get_impl(_4851)->i32;
          _checked_ptr_1<int> _ptr__4938(_4938 ? _4938->raw() : nullptr,_4938 ? _4938->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4939 = mosek::fusion::p_WorkStack::_get_impl(_4851)->i64;
          _checked_ptr_1<long long> _ptr__4939(_4939 ? _4939->raw() : nullptr,_4939 ? _4939->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4940 = mosek::fusion::p_WorkStack::_get_impl(_4851)->f64;
          _checked_ptr_1<double> _ptr__4940(_4940 ? _4940->raw() : nullptr,_4940 ? _4940->size(0) : 0);
          if ((dim == (int)0))
          {
            {
              int _4941 = (int)0;
              int _4942 = (int)0;
              int _4943 = (int)0;
              long long _4944 = (long long)0;
              _ptr__4938[_4929] = (int)0;
              if ((_4883 > (int)0))
              {
                {
                  _ptr__4938[_4934] = (int)0;
                }
              }
              {}
              int _10916 = (int)0;
              int _10917 = _4854;
              for (int _4945 = _10916; _4945 < _10917; ++_4945)
              {
                {
                  int _10918 = (int)0;
                  int _10919 = _ptr__4858[_4945];
                  for (int _4946 = _10918; _4946 < _10919; ++_4946)
                  {
                    {
                      int _10920 = _ptr__4870[safe_add( _ptr__4862[_4945],_4946 )];
                      int _10921 = _ptr__4870[safe_add( safe_add( _ptr__4862[_4945],_4946 ),(int)1 )];
                      for (int _4947 = _10920; _4947 < _10921; ++_4947)
                      {
                        {
                          _ptr__4939[safe_add( _4930,_4942 )] = _ptr__4871[safe_add( _ptr__4863[_4945],_4947 )];
                          _ptr__4940[safe_add( _4932,_4942 )] = _ptr__4872[safe_add( _ptr__4865[_4945],_4947 )];
                          if ((_ptr__4860[_4945] > (int)0))
                          {
                            {
                              int _10922 = _ptr__4870[safe_add( _ptr__4867[_4945],_4947 )];
                              int _10923 = _ptr__4870[safe_add( safe_add( _ptr__4867[_4945],_4947 ),(int)1 )];
                              for (int _4948 = _10922; _4948 < _10923; ++_4948)
                              {
                                {
                                  _ptr__4938[safe_add( _4933,_4941 )] = _ptr__4870[safe_add( _ptr__4866[_4945],_4948 )];
                                  _ptr__4940[safe_add( _4935,_4941 )] = _ptr__4872[safe_add( _ptr__4868[_4945],_4948 )];
                                  ++ _4941;
                                }
                              }
                              _ptr__4938[safe_add( safe_add( _4934,_4942 ),(int)1 )] = _4941;
                            }
                          }
                          else if((_4883 > (int)0))
                          {
                            {
                              _ptr__4938[safe_add( _4933,_4941 )] = 2;
                              _ptr__4940[safe_add( _4935,_4941 )] = 0.0;
                              ++ _4941;
                              _ptr__4938[safe_add( safe_add( _4934,_4942 ),(int)1 )] = _4941;
                            }
                          }
                          {}
                          ++ _4942;
                        }
                      }
                      _ptr__4938[safe_add( safe_add( _4929,_4943 ),(int)1 )] = _4942;
                      if ((_ptr__4861[_4945] != (int)0))
                      {
                        {
                          _ptr__4939[safe_add( _4931,_4943 )] = safe_add( _4944,_ptr__4871[safe_add( _ptr__4864[_4945],_4946 )] );
                        }
                      }
                      else
                      {
                        {
                          _ptr__4939[safe_add( _4931,_4943 )] = safe_add( _4944,_4946 );
                        }
                      }
                      ++ _4943;
                    }
                  }
                  long long _4949 = (long long)1;
                  int _10924 = (int)0;
                  int _10925 = _4873;
                  for (int _4950 = _10924; _4950 < _10925; ++_4950)
                  {
                    {
                      _4949 *= _ptr__4870[safe_add( _ptr__4857[_4945],_4950 )];
                    }
                  }
                  _4944 += _4949;
                }
              }
            }
          }
          else
          {
            {
              int _4951 = (int)0;
              int _10926 = (int)0;
              int _10927 = _4882;
              for (int _4952 = _10926; _4952 < _10927; ++_4952)
              {
                {
                  if ((_4951 < _ptr__4938[safe_add( _4936,_4952 )]))
                  {
                    {
                      _4951 = _ptr__4938[safe_add( _4936,_4952 )];
                    }
                  }
                  {}
                }
              }
              int _4953 = _4853->alloci64(_4884);
              int _4954 = _4853->alloci32(_4884);
              int _4955 = _4853->alloci32(_4884);
              int _4956 = _4853->alloci32(_4884);
              int _4957 = _4853->alloci32(_4884);
              int _4958 = _4853->alloci32(safe_add( _4951,(int)1 ));
              std::shared_ptr< monty::ndarray< int,1 > > _4959 = mosek::fusion::p_WorkStack::_get_impl(_4853)->i32;
              _checked_ptr_1<int> _ptr__4959(_4959 ? _4959->raw() : nullptr,_4959 ? _4959->size(0) : 0);
              std::shared_ptr< monty::ndarray< long long,1 > > _4960 = mosek::fusion::p_WorkStack::_get_impl(_4853)->i64;
              _checked_ptr_1<long long> _ptr__4960(_4960 ? _4960->raw() : nullptr,_4960 ? _4960->size(0) : 0);
              {
                int _4961 = (int)0;
                int _10928 = (int)0;
                int _10929 = _4854;
                for (int _4962 = _10928; _4962 < _10929; ++_4962)
                {
                  {
                    int _4963 = _ptr__4893[_4962];
                    int _4964 = safe_mul( _4963,_4900 );
                    int _4965 = _4900;
                    if ((_ptr__4861[_4962] != (int)0))
                    {
                      {
                        int _10930 = (int)0;
                        int _10931 = _ptr__4858[_4962];
                        for (int _4966 = _10930; _4966 < _10931; ++_4966)
                        {
                          {
                            long long _4967 = (_ptr__4871[safe_add( _ptr__4864[_4962],_4966 )] / _4964);
                            long long _4968 = ((_ptr__4871[safe_add( _ptr__4864[_4962],_4966 )] / _4965) % _4963);
                            long long _4969 = (_ptr__4871[safe_add( _ptr__4864[_4962],_4966 )] % _4900);
                            _ptr__4960[safe_add( _4953,_4961 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4967,_4880 ),_4968 ),_ptr__4896[_4962] ),_4900 ),_4969 );
                            _ptr__4959[safe_add( _4954,_4961 )] = _4962;
                            _ptr__4959[safe_add( _4955,_4961 )] = _4966;
                            ++ _4961;
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        int _10932 = (int)0;
                        int _10933 = _ptr__4858[_4962];
                        for (int _4970 = _10932; _4970 < _10933; ++_4970)
                        {
                          {
                            long long _4971 = ((long long)_4970 / _4964);
                            long long _4972 = (((long long)_4970 / _4965) % _4963);
                            long long _4973 = ((long long)_4970 % _4900);
                            _ptr__4960[safe_add( _4953,_4961 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4971,_4880 ),_4972 ),_ptr__4896[_4962] ),_4900 ),_4973 );
                            _ptr__4959[safe_add( _4954,_4961 )] = _4962;
                            _ptr__4959[safe_add( _4955,_4961 )] = _4970;
                            ++ _4961;
                          }
                        }
                      }
                    }
                  }
                }
              }
              {
                std::shared_ptr< monty::ndarray< long long,1 > > _4974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4882)));
                _checked_ptr_1<long long> _ptr__4974(_4974 ? _4974->raw() : nullptr,_4974 ? _4974->size(0) : 0);
                _ptr__4974[(_4882 - (int)1)] = (int)1;
                int _10934 = (int)1;
                int _10935 = _4882;
                for (int _4975 = _10934; _4975 < _10935; ++_4975)
                {
                  {
                    _ptr__4974[((_4882 - _4975) - (int)1)] = safe_mul( _ptr__4974[(_4882 - _4975)],_ptr__4938[(safe_add( _4936,_4882 ) - _4975)] );
                  }
                }
                int _10936 = (int)0;
                int _10937 = _4884;
                for (int _4976 = _10936; _4976 < _10937; ++_4976)
                {
                  {
                    _ptr__4959[safe_add( _4956,_4976 )] = _4976;
                  }
                }
                int _10938 = (int)0;
                int _10939 = _4882;
                for (int _4977 = _10938; _4977 < _10939; ++_4977)
                {
                  {
                    int _4978 = ((_4882 - _4977) - (int)1);
                    int _4979 = _ptr__4938[safe_add( _4936,_4978 )];
                    int _10940 = (int)0;
                    int _10941 = safe_add( _4979,(int)1 );
                    for (int _4980 = _10940; _4980 < _10941; ++_4980)
                    {
                      {
                        _ptr__4959[safe_add( _4958,_4980 )] = (int)0;
                      }
                    }
                    int _10942 = (int)0;
                    int _10943 = _4884;
                    for (int _4981 = _10942; _4981 < _10943; ++_4981)
                    {
                      {
                        int _4982 = _ptr__4959[safe_add( _4956,_4981 )];
                        long long _4983 = ((_ptr__4960[safe_add( _4953,_4982 )] / _ptr__4974[_4978]) % _4979);
                        ++ _ptr__4959[safe_add( safe_add( _4958,_4983 ),(int)1 )];
                      }
                    }
                    {
                      int _10944 = (int)0;
                      int _10945 = _4979;
                      for (int _4984 = _10944; _4984 < _10945; ++_4984)
                      {
                        {
                          _ptr__4959[safe_add( safe_add( _4958,_4984 ),(int)1 )] += _ptr__4959[safe_add( _4958,_4984 )];
                        }
                      }
                      int _10946 = (int)0;
                      int _10947 = _4884;
                      for (int _4985 = _10946; _4985 < _10947; ++_4985)
                      {
                        {
                          int _4986 = _ptr__4959[safe_add( _4956,_4985 )];
                          long long _4987 = ((_ptr__4960[safe_add( _4953,_4986 )] / _ptr__4974[_4978]) % _4979);
                          _ptr__4959[safe_add( _4957,_ptr__4959[safe_add( _4958,_4987 )] )] = _4986;
                          ++ _ptr__4959[safe_add( _4958,_4987 )];
                        }
                      }
                    }
                    int _4988 = _4956;
                    _4956 = _4957;
                    _4957 = _4988;
                  }
                }
              }
              {
                int _4989 = (int)0;
                int _4990 = (int)0;
                _ptr__4938[_4929] = (int)0;
                if ((_4883 > (int)0))
                {
                  {
                    _ptr__4938[_4934] = (int)0;
                  }
                }
                {}
                int _10948 = (int)0;
                int _10949 = _4884;
                for (int _4991 = _10948; _4991 < _10949; ++_4991)
                {
                  {
                    int _4992 = _ptr__4959[safe_add( _4956,_4991 )];
                    int _4993 = _ptr__4959[safe_add( _4954,_4992 )];
                    int _4994 = _ptr__4959[safe_add( _4955,_4992 )];
                    int _10950 = _ptr__4870[safe_add( _ptr__4862[_4993],_4994 )];
                    int _10951 = _ptr__4870[safe_add( safe_add( _ptr__4862[_4993],_4994 ),(int)1 )];
                    for (int _4995 = _10950; _4995 < _10951; ++_4995)
                    {
                      {
                        _ptr__4939[safe_add( _4930,_4990 )] = _ptr__4871[safe_add( _ptr__4863[_4993],_4995 )];
                        _ptr__4940[safe_add( _4932,_4990 )] = _ptr__4872[safe_add( _ptr__4865[_4993],_4995 )];
                        if ((_ptr__4860[_4993] > (int)0))
                        {
                          {
                            int _10952 = _ptr__4870[safe_add( _ptr__4867[_4993],_4995 )];
                            int _10953 = _ptr__4870[safe_add( safe_add( _ptr__4867[_4993],_4995 ),(int)1 )];
                            for (int _4996 = _10952; _4996 < _10953; ++_4996)
                            {
                              {
                                _ptr__4938[safe_add( _4933,_4989 )] = _ptr__4870[safe_add( _ptr__4866[_4993],_4996 )];
                                _ptr__4940[safe_add( _4935,_4989 )] = _ptr__4872[safe_add( _ptr__4868[_4993],_4996 )];
                                ++ _4989;
                              }
                            }
                            _ptr__4938[safe_add( safe_add( _4934,_4990 ),(int)1 )] = _4989;
                          }
                        }
                        else if(_4886)
                        {
                          {
                            _ptr__4938[safe_add( _4933,_4989 )] = 2;
                            _ptr__4940[safe_add( _4935,_4989 )] = 0.0;
                            ++ _4989;
                            _ptr__4938[safe_add( safe_add( _4934,_4990 ),(int)1 )] = _4989;
                          }
                        }
                        {}
                        ++ _4990;
                      }
                    }
                    _ptr__4938[safe_add( safe_add( _4929,_4991 ),(int)1 )] = _4990;
                    _ptr__4939[safe_add( _4931,_4991 )] = _ptr__4960[safe_add( _4953,_4992 )];
                  }
                }
              }
            }
          }
          if ((!_4928))
          {
            {
              _4851->popi64(_4884);
            }
          }
          {}
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4997,int _4998){
  if (((int)((_4997)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_4997)->size(0)) == (int)1))
  {
    {
      return ((*_4997)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _10954;
      for (int _5000 = (int)0, _10955 = (int)((_4997)->size(0)); _5000 < _10955 ; ++_5000)
      {
        _10954.push_back(((*_4997)(_5000))->getShape());
      }
      auto _10956 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_10954.size()),_10954.begin(),_10954.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _4999 = _10956;
      std::shared_ptr< monty::ndarray< int,1 > > _5001 = ((*_4999)((int)0));
      _checked_ptr_1<int> _ptr__5001(_5001 ? _5001->raw() : nullptr,_5001 ? _5001->size(0) : 0);
      int _5002 = (int)((_5001)->size(0));
      int _10957 = (int)1;
      int _10958 = (int)((_4999)->size(0));
      for (int _5003 = _10957; _5003 < _10958; ++_5003)
      {
        {
          if ((_5002 != (int)((((*_4999)(_5003)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int _10959 = (int)0;
          int _10960 = _4998;
          for (int _5004 = _10959; _5004 < _10960; ++_5004)
          {
            {
              if ((_ptr__5001[_5004] != ((*((*_4999)(_5003)))(_5004))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int _10961 = safe_add( _4998,(int)1 );
          int _10962 = _5002;
          for (int _5005 = _10961; _5005 < _10962; ++_5005)
          {
            {
              if ((_ptr__5001[_5005] != ((*((*_4999)(_5003)))(_5005))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_4998 == _5002))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5006 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _5002,(int)1 ))));
          _checked_ptr_1<int> _ptr__5006(_5006 ? _5006->raw() : nullptr,_5006 ? _5006->size(0) : 0);
          int _10963 = (int)0;
          int _10964 = _5002;
          for (int _5007 = _10963; _5007 < _10964; ++_5007)
          {
            {
              _ptr__5006[_5007] = _ptr__5001[_5007];
            }
          }
          _ptr__5006[_5002] = (int)((_4999)->size(0));
          return _5006;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5008 = _5001;
          _checked_ptr_1<int> _ptr__5008(_5008 ? _5008->raw() : nullptr,_5008 ? _5008->size(0) : 0);
          int _10965 = (int)1;
          int _10966 = (int)((_4999)->size(0));
          for (int _5009 = _10965; _5009 < _10966; ++_5009)
          {
            {
              _ptr__5008[_4998] += ((*((*_4999)(_5009)))(_4998));
            }
          }
          return _5008;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprStack::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5010 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int _10967 = (int)1;
  int _10968 = (int)((exprs)->size(0));
  for (int _5011 = _10967; _5011 < _10968; ++_5011)
  {
    {
      _5010->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_5011))->toString());
    }
  }
  _5010->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _5010->toString();
}
void mosek::fusion::p_ExprStack::destroy(){exprs.reset();}void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprInner::p_ExprInner  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5012,    std::shared_ptr< monty::ndarray< long long,1 > > _5013,    std::shared_ptr< monty::ndarray< double,1 > > _5014){ return new mosek::fusion::ExprInner(_5012,_5013,_5014); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5012,    std::shared_ptr< monty::ndarray< long long,1 > > _5013,    std::shared_ptr< monty::ndarray< double,1 > > _5014) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5012,_5013,_5014); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5012,    std::shared_ptr< monty::ndarray< long long,1 > > _5013,    std::shared_ptr< monty::ndarray< double,1 > > _5014){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__5013(_5013 ? _5013->raw() : nullptr, _5013 ? _5013->size(0) : 0);
    _checked_ptr_1<double> _ptr__5014(_5014 ? _5014->raw() : nullptr, _5014 ? _5014->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _5012;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _5013;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _5014;
    if (((int)((_5013)->size(0)) != (int)((_5014)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int,1 > > _5015 = _5012->getShape();
    _checked_ptr_1<int> _ptr__5015(_5015 ? _5015->raw() : nullptr,_5015 ? _5015->size(0) : 0);
    long long _5016 = ::mosek::fusion::p_Set::size(_5015);
    bool _5017 = false;
    bool _5018 = false;
    {
      int _10969 = (int)1;
      int _10970 = (int)((_5013)->size(0));
      for (int _5019 = _10969; _5019 < _10970; ++_5019)
      {
        {
          if ((_ptr__5013[_5019] <= _ptr__5013[(_5019 - (int)1)]))
          {
            {
              _5017 = true;
            }
          }
          {}
        }
      }
      if (((int)((_5013)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5013[(int)0] < (int)0) || (_ptr__5013[((int)((_5013)->size(0)) - (int)1)] > _5016)))
          {
            {
              _5018 = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_5017)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_5018)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5020,    std::shared_ptr< monty::ndarray< double,1 > > _5021){ return new mosek::fusion::ExprInner(_5020,_5021); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5020,    std::shared_ptr< monty::ndarray< double,1 > > _5021) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5020,_5021); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5020,    std::shared_ptr< monty::ndarray< double,1 > > _5021){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5021(_5021 ? _5021->raw() : nullptr, _5021 ? _5021->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5020,::mosek::fusion::p_ExprInner::range((int)((_5021)->size(0))),_5021);
    std::shared_ptr< monty::ndarray< int,1 > > _5022 = _5020->getShape();
    _checked_ptr_1<int> _ptr__5022(_5022 ? _5022->raw() : nullptr,_5022 ? _5022->size(0) : 0);
    if ((((int)((_5022)->size(0)) != (int)1) || (_ptr__5022[(int)0] != (int)((_5021)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5023,    std::shared_ptr< monty::ndarray< int,2 > > _5024,    std::shared_ptr< monty::ndarray< double,1 > > _5025){ return new mosek::fusion::ExprInner(_5023,_5024,_5025); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5023,    std::shared_ptr< monty::ndarray< int,2 > > _5024,    std::shared_ptr< monty::ndarray< double,1 > > _5025) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5023,_5024,_5025); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5023,    std::shared_ptr< monty::ndarray< int,2 > > _5024,    std::shared_ptr< monty::ndarray< double,1 > > _5025){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5025(_5025 ? _5025->raw() : nullptr, _5025 ? _5025->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5023,::mosek::fusion::p_ExprInner::convert(_5023->getShape(),_5024),_5025);
  }
}void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5026,monty::rc_ptr< ::mosek::fusion::WorkStack > _5027,monty::rc_ptr< ::mosek::fusion::WorkStack > _5028) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_5026,_5027,_5028); }void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5026,monty::rc_ptr< ::mosek::fusion::WorkStack > _5027,monty::rc_ptr< ::mosek::fusion::WorkStack > _5028){
  expr->eval(_5027,_5026,_5028);
  _5027->pop_expr();
  int _5029 = mosek::fusion::p_WorkStack::_get_impl(_5027)->nd;
  int _5030 = mosek::fusion::p_WorkStack::_get_impl(_5027)->nelem;
  int _5031 = mosek::fusion::p_WorkStack::_get_impl(_5027)->nnz;
  int _5032 = mosek::fusion::p_WorkStack::_get_impl(_5027)->ncodeatom;
  bool _5033 = mosek::fusion::p_WorkStack::_get_impl(_5027)->hassp;
  int _5034 = mosek::fusion::p_WorkStack::_get_impl(_5027)->shape_base;
  int _5035 = mosek::fusion::p_WorkStack::_get_impl(_5027)->ptr_base;
  int _5036 = mosek::fusion::p_WorkStack::_get_impl(_5027)->nidxs_base;
  int _5037 = mosek::fusion::p_WorkStack::_get_impl(_5027)->sp_base;
  int _5038 = mosek::fusion::p_WorkStack::_get_impl(_5027)->cof_base;
  int _5039 = mosek::fusion::p_WorkStack::_get_impl(_5027)->code_base;
  int _5040 = mosek::fusion::p_WorkStack::_get_impl(_5027)->codeptr_base;
  int _5041 = mosek::fusion::p_WorkStack::_get_impl(_5027)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5042 = mosek::fusion::p_WorkStack::_get_impl(_5027)->i32;
  _checked_ptr_1<int> _ptr__5042(_5042 ? _5042->raw() : nullptr,_5042 ? _5042->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5043 = mosek::fusion::p_WorkStack::_get_impl(_5027)->i64;
  _checked_ptr_1<long long> _ptr__5043(_5043 ? _5043->raw() : nullptr,_5043 ? _5043->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5044 = mosek::fusion::p_WorkStack::_get_impl(_5027)->f64;
  _checked_ptr_1<double> _ptr__5044(_5044 ? _5044->raw() : nullptr,_5044 ? _5044->size(0) : 0);
  int _5045 = (int)0;
  if (_5033)
  {
    {
      int _5046 = (int)0;
      int _5047 = (int)0;
      while ( ((_5047 < (int)((vsub)->size(0))) && (_5046 < _5030)) )
      {
        {
          if ((_ptr__5043[safe_add( _5037,_5046 )] < ((*vsub)(_5047))))
          {
            {
              ++ _5046;
            }
          }
          else if((_ptr__5043[safe_add( _5037,_5046 )] > ((*vsub)(_5047))))
          {
            {
              ++ _5047;
            }
          }
          else
          {
            {
              _5045 += (_ptr__5042[safe_add( safe_add( _5035,_5046 ),(int)1 )] - _ptr__5042[safe_add( _5035,_5046 )]);
              ++ _5047;
              ++ _5046;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10971 = (int)0;
      int _10972 = (int)((vsub)->size(0));
      for (int _5048 = _10971; _5048 < _10972; ++_5048)
      {
        {
          _5045 += (_ptr__5042[safe_add( safe_add( _5035,((*vsub)(_5048)) ),(int)1 )] - _ptr__5042[safe_add( _5035,((*vsub)(_5048)) )]);
        }
      }
    }
  }
  int _10973;
  bool _10974 = (_5032 > (int)0);
  if (_10974)
  {
    _10973 = safe_add( _5032,safe_mul( (int)2,_5031 ) );
  }
  else
  {
    _10973 = (int)0;
  }
  int _5049 = _10973;
  _5026->alloc_expr((int)0,(int)1,_5045,false,_5049);
  int _5050 = mosek::fusion::p_WorkStack::_get_impl(_5026)->ptr_base;
  int _5051 = mosek::fusion::p_WorkStack::_get_impl(_5026)->nidxs_base;
  int _5052 = mosek::fusion::p_WorkStack::_get_impl(_5026)->cof_base;
  int _5053 = mosek::fusion::p_WorkStack::_get_impl(_5026)->code_base;
  int _5054 = mosek::fusion::p_WorkStack::_get_impl(_5026)->codeptr_base;
  int _5055 = mosek::fusion::p_WorkStack::_get_impl(_5026)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5056 = mosek::fusion::p_WorkStack::_get_impl(_5026)->i32;
  _checked_ptr_1<int> _ptr__5056(_5056 ? _5056->raw() : nullptr,_5056 ? _5056->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5057 = mosek::fusion::p_WorkStack::_get_impl(_5026)->i64;
  _checked_ptr_1<long long> _ptr__5057(_5057 ? _5057->raw() : nullptr,_5057 ? _5057->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5058 = mosek::fusion::p_WorkStack::_get_impl(_5026)->f64;
  _checked_ptr_1<double> _ptr__5058(_5058 ? _5058->raw() : nullptr,_5058 ? _5058->size(0) : 0);
  _ptr__5056[_5050] = (int)0;
  _ptr__5056[safe_add( _5050,(int)1 )] = _5045;
  if ((_5049 > (int)0))
  {
    {
      _ptr__5056[_5054] = (int)0;
    }
  }
  {}
  int _5059 = (int)0;
  int _5060 = (int)0;
  if (_5033)
  {
    {
      int _5061 = (int)0;
      int _5062 = (int)0;
      while ( ((_5062 < (int)((vsub)->size(0))) && (_5061 < _5030)) )
      {
        {
          if ((_ptr__5043[safe_add( _5037,_5061 )] < ((*vsub)(_5062))))
          {
            {
              ++ _5061;
            }
          }
          else if((_ptr__5043[safe_add( _5037,_5061 )] > ((*vsub)(_5062))))
          {
            {
              ++ _5062;
            }
          }
          else
          {
            {
              int _5063 = _ptr__5042[safe_add( _5035,_5061 )];
              int _5064 = _ptr__5042[safe_add( safe_add( _5035,_5061 ),(int)1 )];
              int _10975 = _5063;
              int _10976 = _5064;
              for (int _5065 = _10975; _5065 < _10976; ++_5065)
              {
                {
                  _ptr__5057[safe_add( _5051,_5060 )] = _ptr__5043[safe_add( _5036,_5065 )];
                  _ptr__5058[safe_add( _5052,_5060 )] = (((*vcof)(_5062)) * _ptr__5044[safe_add( _5038,_5065 )]);
                  if ((_5049 > (int)0))
                  {
                    {
                      int _10977 = _ptr__5042[safe_add( _5040,_5065 )];
                      int _10978 = _ptr__5042[safe_add( safe_add( _5040,_5065 ),(int)1 )];
                      for (int _5066 = _10977; _5066 < _10978; ++_5066)
                      {
                        {
                          _ptr__5056[safe_add( _5053,_5059 )] = _ptr__5042[safe_add( _5039,_5066 )];
                          _ptr__5058[safe_add( _5055,_5059 )] = _ptr__5044[safe_add( _5041,_5066 )];
                          ++ _5059;
                        }
                      }
                      _ptr__5056[safe_add( _5053,_5059 )] = 2;
                      _ptr__5058[safe_add( _5055,_5059 )] = ((*vcof)(_5062));
                      ++ _5059;
                      _ptr__5056[safe_add( _5053,_5059 )] = 5;
                      ++ _5059;
                      _ptr__5056[safe_add( safe_add( _5054,_5060 ),(int)1 )] = _5059;
                    }
                  }
                  {}
                  ++ _5060;
                }
              }
              ++ _5062;
              ++ _5061;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10979 = (int)0;
      int _10980 = (int)((vsub)->size(0));
      for (int _5067 = _10979; _5067 < _10980; ++_5067)
      {
        {
          int _5068 = _ptr__5042[safe_add( _5035,((*vsub)(_5067)) )];
          int _5069 = _ptr__5042[safe_add( safe_add( _5035,((*vsub)(_5067)) ),(int)1 )];
          int _10981 = _5068;
          int _10982 = _5069;
          for (int _5070 = _10981; _5070 < _10982; ++_5070)
          {
            {
              _ptr__5057[safe_add( _5051,_5060 )] = _ptr__5043[safe_add( _5036,_5070 )];
              _ptr__5058[safe_add( _5052,_5060 )] = (((*vcof)(_5067)) * _ptr__5044[safe_add( _5038,_5070 )]);
              if ((_5049 > (int)0))
              {
                {
                  int _10983 = _ptr__5042[safe_add( _5040,_5070 )];
                  int _10984 = _ptr__5042[safe_add( safe_add( _5040,_5070 ),(int)1 )];
                  for (int _5071 = _10983; _5071 < _10984; ++_5071)
                  {
                    {
                      _ptr__5056[safe_add( _5053,_5059 )] = _ptr__5042[safe_add( _5039,_5071 )];
                      _ptr__5058[safe_add( _5055,_5059 )] = _ptr__5042[safe_add( _5041,_5071 )];
                      ++ _5059;
                    }
                  }
                  _ptr__5056[safe_add( _5053,_5059 )] = 2;
                  _ptr__5058[safe_add( _5055,_5059 )] = ((*vcof)(_5067));
                  ++ _5059;
                  _ptr__5056[safe_add( _5053,_5059 )] = 5;
                  ++ _5059;
                  _ptr__5056[safe_add( safe_add( _5054,_5060 ),(int)1 )] = _5059;
                }
              }
              {}
              ++ _5060;
            }
          }
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::range(int _5072){
  std::vector<long long> _10985;
  for (int _5073 = (int)0, _10986 = _5072; _5073 < _10986 ; ++_5073)
  {
    _10985.push_back(_5073);
  }
  auto _10987 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10985.size()),_10985.begin(),_10985.end()));
  return _10987;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int,1 > > _5074,std::shared_ptr< monty::ndarray< int,2 > > _5075){
  _checked_ptr_1<int> _ptr__5074(_5074 ? _5074->raw() : nullptr, _5074 ? _5074->size(0) : 0);
  int _5076 = (int)((_5074)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5077 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5076)));
  _checked_ptr_1<long long> _ptr__5077(_5077 ? _5077->raw() : nullptr,_5077 ? _5077->size(0) : 0);
  _ptr__5077[(_5076 - (int)1)] = (int)1;
  int _10988 = (int)1;
  int _10989 = _5076;
  for (int _5078 = _10988; _5078 < _10989; ++_5078)
  {
    {
      _ptr__5077[((_5076 - _5078) - (int)1)] = safe_mul( _ptr__5077[(_5076 - _5078)],_ptr__5074[(_5076 - _5078)] );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5079 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5075)->size(0)))));
  _checked_ptr_1<long long> _ptr__5079(_5079 ? _5079->raw() : nullptr,_5079 ? _5079->size(0) : 0);
  int _10990 = (int)0;
  int _10991 = (int)((_5075)->size(0));
  for (int _5080 = _10990; _5080 < _10991; ++_5080)
  {
    {
      int _10992 = (int)0;
      int _10993 = _5076;
      for (int _5081 = _10992; _5081 < _10993; ++_5081)
      {
        {
          _ptr__5079[_5080] += safe_mul( _ptr__5077[_5081],((*_5075)(_5080,_5081)) );
        }
      }
    }
  }
  return _5079;
}
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprInner::toString(){
  return std::string ("ExprInner()");
}
void mosek::fusion::p_ExprInner::destroy(){vcof.reset();vsub.reset();expr.reset();}void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _5082,    int _5083,    std::shared_ptr< monty::ndarray< int,1 > > _5084,    std::shared_ptr< monty::ndarray< int,1 > > _5085,    std::shared_ptr< monty::ndarray< double,1 > > _5086,    monty::rc_ptr< ::mosek::fusion::Expression > _5087,    int _5088){ return new mosek::fusion::ExprMulDiagRight(_5082,_5083,_5084,_5085,_5086,_5087,_5088); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _5082,    int _5083,    std::shared_ptr< monty::ndarray< int,1 > > _5084,    std::shared_ptr< monty::ndarray< int,1 > > _5085,    std::shared_ptr< monty::ndarray< double,1 > > _5086,    monty::rc_ptr< ::mosek::fusion::Expression > _5087,    int _5088) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5082,_5083,_5084,_5085,_5086,_5087,_5088); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _5082,    int _5083,    std::shared_ptr< monty::ndarray< int,1 > > _5084,    std::shared_ptr< monty::ndarray< int,1 > > _5085,    std::shared_ptr< monty::ndarray< double,1 > > _5086,    monty::rc_ptr< ::mosek::fusion::Expression > _5087,    int _5088){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5084(_5084 ? _5084->raw() : nullptr, _5084 ? _5084->size(0) : 0);
    _checked_ptr_1<int> _ptr__5085(_5085 ? _5085->raw() : nullptr, _5085 ? _5085->size(0) : 0);
    _checked_ptr_1<double> _ptr__5086(_5086 ? _5086->raw() : nullptr, _5086 ? _5086->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5083)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _5082;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _5083;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _5084;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _5085;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _5086;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _5087;
  }
}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _5089,    int _5090,    std::shared_ptr< monty::ndarray< int,1 > > _5091,    std::shared_ptr< monty::ndarray< int,1 > > _5092,    std::shared_ptr< monty::ndarray< double,1 > > _5093,    monty::rc_ptr< ::mosek::fusion::Expression > _5094){ return new mosek::fusion::ExprMulDiagRight(_5089,_5090,_5091,_5092,_5093,_5094); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _5089,    int _5090,    std::shared_ptr< monty::ndarray< int,1 > > _5091,    std::shared_ptr< monty::ndarray< int,1 > > _5092,    std::shared_ptr< monty::ndarray< double,1 > > _5093,    monty::rc_ptr< ::mosek::fusion::Expression > _5094) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5089,_5090,_5091,_5092,_5093,_5094); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _5089,    int _5090,    std::shared_ptr< monty::ndarray< int,1 > > _5091,    std::shared_ptr< monty::ndarray< int,1 > > _5092,    std::shared_ptr< monty::ndarray< double,1 > > _5093,    monty::rc_ptr< ::mosek::fusion::Expression > _5094){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5091(_5091 ? _5091->raw() : nullptr, _5091 ? _5091->size(0) : 0);
    _checked_ptr_1<int> _ptr__5092(_5092 ? _5092->raw() : nullptr, _5092 ? _5092->size(0) : 0);
    _checked_ptr_1<double> _ptr__5093(_5093 ? _5093->raw() : nullptr, _5093 ? _5093->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_5089,_5090,_5091,_5092,_5093,_5094,::mosek::fusion::p_ExprMulDiagRight::validate(_5089,_5090,_5091,_5092,_5093,_5094));
  }
}void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5095,monty::rc_ptr< ::mosek::fusion::WorkStack > _5096,monty::rc_ptr< ::mosek::fusion::WorkStack > _5097) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_5095,_5096,_5097); }void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5095,monty::rc_ptr< ::mosek::fusion::WorkStack > _5096,monty::rc_ptr< ::mosek::fusion::WorkStack > _5097){
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_5096,_5095,_5097);
  _5096->pop_expr();
  int _5098 = mosek::fusion::p_WorkStack::_get_impl(_5096)->nd;
  int _5099 = mosek::fusion::p_WorkStack::_get_impl(_5096)->nnz;
  int _5100 = mosek::fusion::p_WorkStack::_get_impl(_5096)->nelem;
  int _5101 = mosek::fusion::p_WorkStack::_get_impl(_5096)->ncodeatom;
  bool _5102 = mosek::fusion::p_WorkStack::_get_impl(_5096)->hassp;
  int _5103 = mosek::fusion::p_WorkStack::_get_impl(_5096)->shape_base;
  int _5104 = mosek::fusion::p_WorkStack::_get_impl(_5096)->ptr_base;
  int _5105 = mosek::fusion::p_WorkStack::_get_impl(_5096)->sp_base;
  int _5106 = mosek::fusion::p_WorkStack::_get_impl(_5096)->nidxs_base;
  int _5107 = mosek::fusion::p_WorkStack::_get_impl(_5096)->cof_base;
  int _5108 = mosek::fusion::p_WorkStack::_get_impl(_5096)->codeptr_base;
  int _5109 = mosek::fusion::p_WorkStack::_get_impl(_5096)->code_base;
  int _5110 = mosek::fusion::p_WorkStack::_get_impl(_5096)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5111 = mosek::fusion::p_WorkStack::_get_impl(_5096)->i32;
  _checked_ptr_1<int> _ptr__5111(_5111 ? _5111->raw() : nullptr,_5111 ? _5111->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5112 = mosek::fusion::p_WorkStack::_get_impl(_5096)->i64;
  _checked_ptr_1<long long> _ptr__5112(_5112 ? _5112->raw() : nullptr,_5112 ? _5112->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5113 = mosek::fusion::p_WorkStack::_get_impl(_5096)->f64;
  _checked_ptr_1<double> _ptr__5113(_5113 ? _5113->raw() : nullptr,_5113 ? _5113->size(0) : 0);
  int _5114 = _ptr__5111[_5103];
  int _5115 = _ptr__5111[safe_add( _5103,(int)1 )];
  int _5116 = (int)((mval)->size(0));
  int _5117 = _5097->alloci32(_5116);
  int _5118 = _5097->alloci32(safe_add( mdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5119 = mosek::fusion::p_WorkStack::_get_impl(_5097)->i32;
  _checked_ptr_1<int> _ptr__5119(_5119 ? _5119->raw() : nullptr,_5119 ? _5119->size(0) : 0);
  {
    int _10994 = (int)0;
    int _10995 = safe_add( mdim1,(int)1 );
    for (int _5120 = _10994; _5120 < _10995; ++_5120)
    {
      {
        _ptr__5119[safe_add( _5118,_5120 )] = (int)0;
      }
    }
    int _10996 = (int)0;
    int _10997 = _5116;
    for (int _5121 = _10996; _5121 < _10997; ++_5121)
    {
      {
        ++ _ptr__5119[safe_add( safe_add( _5118,((*msubj)(_5121)) ),(int)1 )];
      }
    }
    int _10998 = (int)0;
    int _10999 = mdim1;
    for (int _5122 = _10998; _5122 < _10999; ++_5122)
    {
      {
        _ptr__5119[safe_add( safe_add( _5118,_5122 ),(int)1 )] += _ptr__5119[safe_add( _5118,_5122 )];
      }
    }
    int _11000 = (int)0;
    int _11001 = _5116;
    for (int _5123 = _11000; _5123 < _11001; ++_5123)
    {
      {
        _ptr__5119[safe_add( _5117,_ptr__5119[safe_add( _5118,((*msubj)(_5123)) )] )] = _5123;
        ++ _ptr__5119[safe_add( _5118,((*msubj)(_5123)) )];
      }
    }
    int _11002 = (int)0;
    int _11003 = mdim1;
    for (int _5124 = _11002; _5124 < _11003; ++_5124)
    {
      {
        _ptr__5119[(safe_add( _5118,mdim1 ) - _5124)] = _ptr__5119[((safe_add( _5118,mdim1 ) - _5124) - (int)1)];
      }
    }
    _ptr__5119[_5118] = (int)0;
  }
  int _5125 = (int)0;
  int _5126 = (int)0;
  int _5127 = (int)0;
  if ((!_5102))
  {
    {
      int _5128 = (int)0;
      while ( (_5128 < _5116) )
      {
        {
          int _5129 = ((*msubj)(_ptr__5119[safe_add( _5117,_5128 )]));
          int _5130 = _5128;
          while ( ((_5128 < _5116) && (_5129 == ((*msubj)(_ptr__5119[safe_add( _5117,_5128 )])))) )
          {
            {
              ++ _5128;
            }
          }
          int _11004 = _5130;
          int _11005 = _5128;
          for (int _5131 = _11004; _5131 < _11005; ++_5131)
          {
            {
              int _5132 = safe_add( safe_mul( ((*msubj)(_ptr__5119[safe_add( _5117,_5131 )])),_5115 ),((*msubi)(_ptr__5119[safe_add( _5117,_5131 )])) );
              _5126 += (_ptr__5111[safe_add( safe_add( _5104,_5132 ),(int)1 )] - _ptr__5111[safe_add( _5104,_5132 )]);
              if ((_5101 > (int)0))
              {
                {
                  _5125 += safe_add( (_ptr__5111[safe_add( _5108,_ptr__5111[safe_add( safe_add( _5104,_5132 ),(int)1 )] )] - _ptr__5111[safe_add( _5108,_ptr__5111[safe_add( _5104,_5132 )] )]),safe_mul( (int)2,(_ptr__5111[safe_add( safe_add( _5104,_5132 ),(int)1 )] - _ptr__5111[safe_add( _5104,_5132 )]) ) );
                }
              }
              {}
            }
          }
          ++ _5127;
        }
      }
    }
  }
  else
  {
    {
      int _5133 = (int)0;
      int _5134 = (int)0;
      int _11006 = (int)0;
      int _11007 = mdim1;
      for (int _5135 = _11006; _5135 < _11007; ++_5135)
      {
        {
          int _5136 = _5133;
          int _5137 = _5134;
          while ( ((_5133 < _5116) && (_5135 == ((*msubj)(_ptr__5119[safe_add( _5117,_5133 )])))) )
          {
            {
              ++ _5133;
            }
          }
          while ( ((_5134 < _5100) && (_5135 == (_ptr__5112[safe_add( _5105,_5134 )] / _5115))) )
          {
            {
              ++ _5134;
            }
          }
          int _5138 = _5136;
          int _5139 = _5137;
          int _5140 = (int)0;
          while ( ((_5139 < _5134) && (_5138 < _5133)) )
          {
            {
              if (((_ptr__5112[safe_add( _5105,_5139 )] % _5115) < ((*msubi)(_ptr__5119[safe_add( _5117,_5138 )]))))
              {
                {
                  ++ _5139;
                }
              }
              else if(((_ptr__5112[safe_add( _5105,_5139 )] % _5115) > ((*msubi)(_ptr__5119[safe_add( _5117,_5138 )]))))
              {
                {
                  ++ _5138;
                }
              }
              else
              {
                {
                  _5126 += (_ptr__5111[safe_add( safe_add( _5104,_5139 ),(int)1 )] - _ptr__5111[safe_add( _5104,_5139 )]);
                  if ((_5101 > (int)0))
                  {
                    {
                      _5125 += safe_add( (_ptr__5111[safe_add( _5108,_ptr__5111[safe_add( safe_add( _5104,_5139 ),(int)1 )] )] - _ptr__5111[safe_add( _5108,_ptr__5111[safe_add( _5104,_5139 )] )]),safe_mul( (int)2,(_ptr__5111[safe_add( safe_add( _5104,_5139 ),(int)1 )] - _ptr__5111[safe_add( _5104,_5139 )]) ) );
                    }
                  }
                  {}
                  ++ _5140;
                  ++ _5139;
                  ++ _5138;
                }
              }
            }
          }
          if ((_5140 > (int)0))
          {
            {
              ++ _5127;
            }
          }
          {}
        }
      }
    }
  }
  bool _5141 = (_5127 < _5114);
  _5095->alloc_expr((int)1,_5127,_5126,_5141,_5125);
  int _5142 = mosek::fusion::p_WorkStack::_get_impl(_5095)->ptr_base;
  int _5143 = mosek::fusion::p_WorkStack::_get_impl(_5095)->nidxs_base;
  int _11008;
  bool _11009 = _5141;
  if (_11009)
  {
    _11008 = mosek::fusion::p_WorkStack::_get_impl(_5095)->sp_base;
  }
  else
  {
    _11008 = _5095->alloci64(_5127);
  }
  int _5144 = _11008;
  int _5145 = mosek::fusion::p_WorkStack::_get_impl(_5095)->cof_base;
  int _5146 = mosek::fusion::p_WorkStack::_get_impl(_5095)->shape_base;
  int _5147 = mosek::fusion::p_WorkStack::_get_impl(_5095)->code_base;
  int _5148 = mosek::fusion::p_WorkStack::_get_impl(_5095)->codeptr_base;
  int _5149 = mosek::fusion::p_WorkStack::_get_impl(_5095)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _5150 = mosek::fusion::p_WorkStack::_get_impl(_5095)->i64;
  _checked_ptr_1<long long> _ptr__5150(_5150 ? _5150->raw() : nullptr,_5150 ? _5150->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5151 = mosek::fusion::p_WorkStack::_get_impl(_5095)->f64;
  _checked_ptr_1<double> _ptr__5151(_5151 ? _5151->raw() : nullptr,_5151 ? _5151->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5152 = mosek::fusion::p_WorkStack::_get_impl(_5095)->i32;
  _checked_ptr_1<int> _ptr__5152(_5152 ? _5152->raw() : nullptr,_5152 ? _5152->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5153 = mosek::fusion::p_WorkStack::_get_impl(_5097)->i32;
  _checked_ptr_1<int> _ptr__5153(_5153 ? _5153->raw() : nullptr,_5153 ? _5153->size(0) : 0);
  {
    int _5154 = (int)0;
    int _5155 = (int)0;
    int _5156 = (int)0;
    _ptr__5152[_5142] = (int)0;
    if ((_5125 > (int)0))
    {
      {
        _ptr__5152[_5148] = (int)0;
      }
    }
    {}
    _ptr__5152[_5146] = mdim1;
    if ((!_5102))
    {
      {
        int _5157 = (int)0;
        while ( (_5157 < _5116) )
        {
          {
            int _5158 = ((*msubj)(_ptr__5153[safe_add( _5117,_5157 )]));
            int _5159 = _5157;
            while ( ((_5157 < _5116) && (_5158 == ((*msubj)(_ptr__5153[safe_add( _5117,_5157 )])))) )
            {
              {
                ++ _5157;
              }
            }
            int _11010 = _5159;
            int _11011 = _5157;
            for (int _5160 = _11010; _5160 < _11011; ++_5160)
            {
              {
                int _5161 = _ptr__5153[safe_add( _5117,_5160 )];
                int _5162 = safe_add( safe_mul( ((*msubj)(_5161)),_5115 ),((*msubi)(_5161)) );
                int _11012 = _ptr__5111[safe_add( _5104,_5162 )];
                int _11013 = _ptr__5111[safe_add( safe_add( _5104,_5162 ),(int)1 )];
                for (int _5163 = _11012; _5163 < _11013; ++_5163)
                {
                  {
                    _ptr__5150[safe_add( _5143,_5155 )] = _ptr__5112[safe_add( _5106,_5163 )];
                    _ptr__5151[safe_add( _5145,_5155 )] = (_ptr__5113[safe_add( _5107,_5163 )] * ((*mval)(_5161)));
                    if ((_5101 > (int)0))
                    {
                      {
                        int _11014 = _ptr__5111[safe_add( _5108,_5163 )];
                        int _11015 = _ptr__5111[safe_add( safe_add( _5108,_5163 ),(int)1 )];
                        for (int _5164 = _11014; _5164 < _11015; ++_5164)
                        {
                          {
                            _ptr__5152[safe_add( _5147,_5154 )] = _ptr__5111[safe_add( _5109,_5164 )];
                            _ptr__5151[safe_add( _5149,_5154 )] = _ptr__5113[safe_add( _5110,_5164 )];
                            ++ _5154;
                          }
                        }
                        _ptr__5152[safe_add( _5147,_5154 )] = 2;
                        _ptr__5151[safe_add( _5149,_5154 )] = ((*mval)(_5161));
                        ++ _5154;
                        _ptr__5152[safe_add( _5147,_5154 )] = 5;
                        ++ _5154;
                        _ptr__5152[safe_add( safe_add( _5148,_5155 ),(int)1 )] = _5154;
                      }
                    }
                    {}
                    ++ _5155;
                  }
                }
              }
            }
            _ptr__5150[safe_add( _5144,_5156 )] = _5158;
            _ptr__5152[safe_add( safe_add( _5142,_5156 ),(int)1 )] = _5155;
            ++ _5156;
          }
        }
      }
    }
    else
    {
      {
        int _5165 = (int)0;
        int _5166 = (int)0;
        int _11016 = (int)0;
        int _11017 = mdim1;
        for (int _5167 = _11016; _5167 < _11017; ++_5167)
        {
          {
            int _5168 = _5165;
            int _5169 = _5166;
            while ( ((_5166 < _5100) && (_5167 == (_ptr__5112[safe_add( _5105,_5166 )] / _5115))) )
            {
              {
                ++ _5166;
              }
            }
            while ( ((_5165 < _5116) && (_5167 == ((*msubj)(_ptr__5153[safe_add( _5117,_5165 )])))) )
            {
              {
                ++ _5165;
              }
            }
            int _5170 = _5168;
            int _5171 = _5169;
            int _5172 = (int)0;
            while ( ((_5171 < _5166) && (_5170 < _5165)) )
            {
              {
                if (((_ptr__5112[safe_add( _5105,_5171 )] % _5115) < ((*msubi)(_ptr__5153[safe_add( _5117,_5170 )]))))
                {
                  {
                    ++ _5171;
                  }
                }
                else if(((_ptr__5112[safe_add( _5105,_5171 )] % _5115) > ((*msubi)(_ptr__5153[safe_add( _5117,_5170 )]))))
                {
                  {
                    ++ _5170;
                  }
                }
                else
                {
                  {
                    int _5173 = _ptr__5153[safe_add( _5117,_5170 )];
                    int _11018 = _ptr__5111[safe_add( _5104,_5171 )];
                    int _11019 = _ptr__5111[safe_add( safe_add( _5104,_5171 ),(int)1 )];
                    for (int _5174 = _11018; _5174 < _11019; ++_5174)
                    {
                      {
                        _ptr__5150[safe_add( _5143,_5155 )] = _ptr__5112[safe_add( _5106,_5174 )];
                        _ptr__5151[safe_add( _5145,_5155 )] = (_ptr__5113[safe_add( _5107,_5174 )] * ((*mval)(_5173)));
                        if ((_5101 > (int)0))
                        {
                          {
                            int _11020 = _ptr__5111[safe_add( _5108,_5174 )];
                            int _11021 = _ptr__5111[safe_add( safe_add( _5108,_5174 ),(int)1 )];
                            for (int _5175 = _11020; _5175 < _11021; ++_5175)
                            {
                              {
                                _ptr__5152[safe_add( _5147,_5154 )] = _ptr__5111[safe_add( _5109,_5175 )];
                                _ptr__5151[safe_add( _5149,_5154 )] = _ptr__5113[safe_add( _5110,_5175 )];
                                ++ _5154;
                              }
                            }
                            _ptr__5152[safe_add( _5147,_5154 )] = 2;
                            _ptr__5151[safe_add( _5149,_5154 )] = ((*mval)(_5173));
                            ++ _5154;
                            _ptr__5152[safe_add( _5147,_5154 )] = 5;
                            ++ _5154;
                            _ptr__5152[safe_add( safe_add( _5148,_5155 ),(int)1 )] = _5154;
                          }
                        }
                        {}
                        ++ _5155;
                      }
                    }
                    ++ _5172;
                    ++ _5171;
                    ++ _5170;
                  }
                }
              }
            }
            if ((_5172 > (int)0))
            {
              {
                _ptr__5152[safe_add( safe_add( _5142,_5156 ),(int)1 )] = _5155;
                _ptr__5150[safe_add( _5144,_5156 )] = _5167;
                ++ _5156;
              }
            }
            {}
          }
        }
      }
    }
    if ((!_5141))
    {
      {
        _5095->popi64(_5127);
      }
    }
    {}
    if ((!(_5126 == _5155)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of non-zeros"));
      }
    }
    {}
    if ((!(_5127 == _5156)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of elements"));
      }
    }
    {}
  }
  _5097->clear();
}
int mosek::fusion::p_ExprMulDiagRight::validate(int _5176,int _5177,std::shared_ptr< monty::ndarray< int,1 > > _5178,std::shared_ptr< monty::ndarray< int,1 > > _5179,std::shared_ptr< monty::ndarray< double,1 > > _5180,monty::rc_ptr< ::mosek::fusion::Expression > _5181){
  _checked_ptr_1<int> _ptr__5178(_5178 ? _5178->raw() : nullptr, _5178 ? _5178->size(0) : 0);
  _checked_ptr_1<int> _ptr__5179(_5179 ? _5179->raw() : nullptr, _5179 ? _5179->size(0) : 0);
  _checked_ptr_1<double> _ptr__5180(_5180 ? _5180->raw() : nullptr, _5180 ? _5180->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5182 = _5181->getShape();
  _checked_ptr_1<int> _ptr__5182(_5182 ? _5182->raw() : nullptr,_5182 ? _5182->size(0) : 0);
  if (((int)((_5182)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5183 = _ptr__5182[(int)0];
  int _5184 = _ptr__5182[(int)1];
  if (((_5176 < (int)0) || ((_5177 < (int)0) || ((_5183 < (int)0) || (_5184 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5176 != _5184) || (_5177 != _5183)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5178)->size(0)) != (int)((_5179)->size(0))) || ((int)((_5178)->size(0)) != (int)((_5180)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5185 = (int)((_5178)->size(0));
  bool _5186 = false;
  bool _5187 = false;
  {
    int _11022 = (int)0;
    int _11023 = _5185;
    for (int _5188 = _11022; _5188 < _11023; ++_5188)
    {
      {
        if (((_ptr__5178[_5188] < (int)0) || ((_ptr__5178[_5188] >= _5176) || ((_ptr__5179[_5188] < (int)0) || (_ptr__5179[_5188] >= _5177)))))
        {
          {
            _5186 = true;
          }
        }
        {}
      }
    }
    int _11024 = (int)0;
    int _11025 = (_5185 - (int)1);
    for (int _5189 = _11024; _5189 < _11025; ++_5189)
    {
      {
        if (((_ptr__5178[_5189] > _ptr__5178[safe_add( _5189,(int)1 )]) || ((_ptr__5178[_5189] == _ptr__5178[safe_add( _5189,(int)1 )]) && (_ptr__5179[_5189] >= _ptr__5179[safe_add( _5189,(int)1 )]))))
        {
          {
            _5187 = true;
          }
        }
        {}
      }
    }
  }
  if (_5186)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5187)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",m)"))->toString();
}
void mosek::fusion::p_ExprMulDiagRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _5190,    int _5191,    std::shared_ptr< monty::ndarray< int,1 > > _5192,    std::shared_ptr< monty::ndarray< int,1 > > _5193,    std::shared_ptr< monty::ndarray< double,1 > > _5194,    monty::rc_ptr< ::mosek::fusion::Expression > _5195,    int _5196){ return new mosek::fusion::ExprMulDiagLeft(_5190,_5191,_5192,_5193,_5194,_5195,_5196); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _5190,    int _5191,    std::shared_ptr< monty::ndarray< int,1 > > _5192,    std::shared_ptr< monty::ndarray< int,1 > > _5193,    std::shared_ptr< monty::ndarray< double,1 > > _5194,    monty::rc_ptr< ::mosek::fusion::Expression > _5195,    int _5196) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5190,_5191,_5192,_5193,_5194,_5195,_5196); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _5190,    int _5191,    std::shared_ptr< monty::ndarray< int,1 > > _5192,    std::shared_ptr< monty::ndarray< int,1 > > _5193,    std::shared_ptr< monty::ndarray< double,1 > > _5194,    monty::rc_ptr< ::mosek::fusion::Expression > _5195,    int _5196){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5192(_5192 ? _5192->raw() : nullptr, _5192 ? _5192->size(0) : 0);
    _checked_ptr_1<int> _ptr__5193(_5193 ? _5193->raw() : nullptr, _5193 ? _5193->size(0) : 0);
    _checked_ptr_1<double> _ptr__5194(_5194 ? _5194->raw() : nullptr, _5194 ? _5194->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5190)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _5190;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _5191;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _5192;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _5193;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _5194;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _5195;
  }
}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _5197,    int _5198,    std::shared_ptr< monty::ndarray< int,1 > > _5199,    std::shared_ptr< monty::ndarray< int,1 > > _5200,    std::shared_ptr< monty::ndarray< double,1 > > _5201,    monty::rc_ptr< ::mosek::fusion::Expression > _5202){ return new mosek::fusion::ExprMulDiagLeft(_5197,_5198,_5199,_5200,_5201,_5202); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _5197,    int _5198,    std::shared_ptr< monty::ndarray< int,1 > > _5199,    std::shared_ptr< monty::ndarray< int,1 > > _5200,    std::shared_ptr< monty::ndarray< double,1 > > _5201,    monty::rc_ptr< ::mosek::fusion::Expression > _5202) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5197,_5198,_5199,_5200,_5201,_5202); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _5197,    int _5198,    std::shared_ptr< monty::ndarray< int,1 > > _5199,    std::shared_ptr< monty::ndarray< int,1 > > _5200,    std::shared_ptr< monty::ndarray< double,1 > > _5201,    monty::rc_ptr< ::mosek::fusion::Expression > _5202){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5199(_5199 ? _5199->raw() : nullptr, _5199 ? _5199->size(0) : 0);
    _checked_ptr_1<int> _ptr__5200(_5200 ? _5200->raw() : nullptr, _5200 ? _5200->size(0) : 0);
    _checked_ptr_1<double> _ptr__5201(_5201 ? _5201->raw() : nullptr, _5201 ? _5201->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_5197,_5198,_5199,_5200,_5201,_5202,::mosek::fusion::p_ExprMulDiagLeft::validate(_5197,_5198,_5199,_5200,_5201,_5202));
  }
}void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5203,monty::rc_ptr< ::mosek::fusion::WorkStack > _5204,monty::rc_ptr< ::mosek::fusion::WorkStack > _5205) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_5203,_5204,_5205); }void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5203,monty::rc_ptr< ::mosek::fusion::WorkStack > _5204,monty::rc_ptr< ::mosek::fusion::WorkStack > _5205){
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_5204,_5203,_5205);
  _5204->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5206 = mosek::fusion::p_WorkStack::_get_impl(_5204)->i32;
  _checked_ptr_1<int> _ptr__5206(_5206 ? _5206->raw() : nullptr,_5206 ? _5206->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5207 = mosek::fusion::p_WorkStack::_get_impl(_5204)->i64;
  _checked_ptr_1<long long> _ptr__5207(_5207 ? _5207->raw() : nullptr,_5207 ? _5207->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5208 = mosek::fusion::p_WorkStack::_get_impl(_5204)->f64;
  _checked_ptr_1<double> _ptr__5208(_5208 ? _5208->raw() : nullptr,_5208 ? _5208->size(0) : 0);
  int _5209 = mosek::fusion::p_WorkStack::_get_impl(_5204)->nd;
  int _5210 = mosek::fusion::p_WorkStack::_get_impl(_5204)->nelem;
  int _5211 = mosek::fusion::p_WorkStack::_get_impl(_5204)->nnz;
  bool _5212 = mosek::fusion::p_WorkStack::_get_impl(_5204)->hassp;
  int _5213 = mosek::fusion::p_WorkStack::_get_impl(_5204)->ncodeatom;
  int _5214 = mosek::fusion::p_WorkStack::_get_impl(_5204)->ptr_base;
  int _5215 = mosek::fusion::p_WorkStack::_get_impl(_5204)->code_base;
  int _5216 = mosek::fusion::p_WorkStack::_get_impl(_5204)->cconst_base;
  int _5217 = mosek::fusion::p_WorkStack::_get_impl(_5204)->codeptr_base;
  int _5218 = mosek::fusion::p_WorkStack::_get_impl(_5204)->shape_base;
  int _5219 = mosek::fusion::p_WorkStack::_get_impl(_5204)->sp_base;
  int _5220 = mosek::fusion::p_WorkStack::_get_impl(_5204)->nidxs_base;
  int _5221 = mosek::fusion::p_WorkStack::_get_impl(_5204)->cof_base;
  int _5222 = mosek::fusion::p_WorkStack::_get_impl(_5204)->cconst_base;
  if ((_5209 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5223 = _ptr__5206[_5218];
  int _5224 = _ptr__5206[safe_add( _5218,(int)1 )];
  int _5225 = (int)((msubi)->size(0));
  if ((!_5212))
  {
    {
      int _5226 = (int)0;
      int _5227 = (int)0;
      int _5228 = (int)0;
      int _5229 = (int)0;
      while ( (_5229 < (int)((msubi)->size(0))) )
      {
        {
          int _5230 = ((*msubi)(_5229));
          while ( ((_5229 < (int)((msubi)->size(0))) && (((*msubi)(_5229)) == _5230)) )
          {
            {
              int _5231 = safe_add( safe_mul( ((*msubj)(_5229)),_5224 ),((*msubi)(_5229)) );
              _5226 += (_ptr__5206[safe_add( safe_add( _5214,_5231 ),(int)1 )] - _ptr__5206[safe_add( _5214,_5231 )]);
              if ((_5213 > (int)0))
              {
                {
                  _5228 += safe_add( (_ptr__5206[safe_add( _5217,_ptr__5206[safe_add( safe_add( _5214,_5231 ),(int)1 )] )] - _ptr__5206[safe_add( _5217,_ptr__5206[safe_add( _5214,_5231 )] )]),safe_mul( (int)2,(_ptr__5206[safe_add( safe_add( _5214,_5231 ),(int)1 )] - _ptr__5206[safe_add( _5214,_5231 )]) ) );
                }
              }
              {}
              ++ _5229;
            }
          }
          ++ _5227;
        }
      }
      bool _5232 = (_5227 < mdim0);
      _5203->alloc_expr((int)1,_5227,_5226,_5232,_5228);
      int _5233 = mosek::fusion::p_WorkStack::_get_impl(_5203)->ptr_base;
      int _5234 = mosek::fusion::p_WorkStack::_get_impl(_5203)->nidxs_base;
      int _11026;
      bool _11027 = _5232;
      if (_11027)
      {
        _11026 = mosek::fusion::p_WorkStack::_get_impl(_5203)->sp_base;
      }
      else
      {
        _11026 = _5203->alloci64(_5227);
      }
      int _5235 = _11026;
      int _5236 = mosek::fusion::p_WorkStack::_get_impl(_5203)->cof_base;
      int _5237 = mosek::fusion::p_WorkStack::_get_impl(_5203)->shape_base;
      int _5238 = mosek::fusion::p_WorkStack::_get_impl(_5203)->code_base;
      int _5239 = mosek::fusion::p_WorkStack::_get_impl(_5203)->codeptr_base;
      int _5240 = mosek::fusion::p_WorkStack::_get_impl(_5203)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _5241 = mosek::fusion::p_WorkStack::_get_impl(_5203)->i64;
      _checked_ptr_1<long long> _ptr__5241(_5241 ? _5241->raw() : nullptr,_5241 ? _5241->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5242 = mosek::fusion::p_WorkStack::_get_impl(_5203)->f64;
      _checked_ptr_1<double> _ptr__5242(_5242 ? _5242->raw() : nullptr,_5242 ? _5242->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5243 = mosek::fusion::p_WorkStack::_get_impl(_5203)->i32;
      _checked_ptr_1<int> _ptr__5243(_5243 ? _5243->raw() : nullptr,_5243 ? _5243->size(0) : 0);
      {
        _ptr__5243[_5233] = (int)0;
        if ((_5213 > (int)0))
        {
          {
            _ptr__5243[_5239] = (int)0;
          }
        }
        {}
        _ptr__5243[_5237] = mdim0;
        int _5244 = (int)0;
        int _5245 = (int)0;
        int _5246 = (int)0;
        {
        }
        {
          int _5247 = (int)0;
          while ( (_5247 < (int)((msubi)->size(0))) )
          {
            {
              int _5248 = ((*msubi)(_5247));
              while ( ((_5247 < (int)((msubi)->size(0))) && (((*msubi)(_5247)) == _5248)) )
              {
                {
                  int _5249 = safe_add( safe_mul( ((*msubj)(_5247)),_5224 ),((*msubi)(_5247)) );
                  int _11028 = _ptr__5206[safe_add( _5214,_5249 )];
                  int _11029 = _ptr__5206[safe_add( safe_add( _5214,_5249 ),(int)1 )];
                  for (int _5250 = _11028; _5250 < _11029; ++_5250)
                  {
                    {
                      _ptr__5241[safe_add( _5234,_5244 )] = _ptr__5207[safe_add( _5220,_5250 )];
                      _ptr__5242[safe_add( _5236,_5244 )] = (_ptr__5208[safe_add( _5221,_5250 )] * ((*mval)(_5247)));
                      if ((_5228 > (int)0))
                      {
                        {
                          int _11030 = _ptr__5206[safe_add( _5217,_5250 )];
                          int _11031 = _ptr__5206[safe_add( safe_add( _5217,_5250 ),(int)1 )];
                          for (int _5251 = _11030; _5251 < _11031; ++_5251)
                          {
                            {
                              _ptr__5243[safe_add( _5238,_5246 )] = _ptr__5206[safe_add( _5215,_5251 )];
                              _ptr__5242[safe_add( _5240,_5246 )] = _ptr__5208[safe_add( _5216,_5251 )];
                              ++ _5246;
                            }
                          }
                          _ptr__5243[safe_add( _5238,_5246 )] = 2;
                          _ptr__5242[safe_add( _5240,_5246 )] = ((*mval)(_5247));
                          ++ _5246;
                          _ptr__5243[safe_add( _5238,_5246 )] = 5;
                          ++ _5246;
                          _ptr__5243[safe_add( safe_add( _5239,_5244 ),(int)1 )] = _5246;
                        }
                      }
                      {}
                      ++ _5244;
                    }
                  }
                  ++ _5247;
                }
              }
              _ptr__5243[safe_add( safe_add( _5233,_5245 ),(int)1 )] = _5244;
              _ptr__5241[safe_add( _5235,_5245 )] = _5248;
              ++ _5245;
            }
          }
        }
      }
      if ((!_5232))
      {
        {
          _5203->popi64(_5227);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _5252 = _5205->alloci32(safe_add( _5224,(int)1 ));
      int _5253 = _5205->alloci32(_5210);
      int _5254 = _5205->alloci32(safe_add( mdim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5255 = mosek::fusion::p_WorkStack::_get_impl(_5205)->i32;
      _checked_ptr_1<int> _ptr__5255(_5255 ? _5255->raw() : nullptr,_5255 ? _5255->size(0) : 0);
      int _5256 = (int)0;
      int _5257 = (int)0;
      int _5258 = (int)0;
      {
        int _11032 = (int)0;
        int _11033 = safe_add( _5224,(int)1 );
        for (int _5259 = _11032; _5259 < _11033; ++_5259)
        {
          {
            _ptr__5255[safe_add( _5252,_5259 )] = (int)0;
          }
        }
        int _11034 = (int)0;
        int _11035 = _5210;
        for (int _5260 = _11034; _5260 < _11035; ++_5260)
        {
          {
            ++ _ptr__5255[safe_add( safe_add( _5252,(_ptr__5207[safe_add( _5219,_5260 )] % _5224) ),(int)1 )];
          }
        }
        int _11036 = (int)0;
        int _11037 = _5224;
        for (int _5261 = _11036; _5261 < _11037; ++_5261)
        {
          {
            _ptr__5255[safe_add( safe_add( _5252,_5261 ),(int)1 )] += _ptr__5255[safe_add( _5252,_5261 )];
          }
        }
        int _11038 = (int)0;
        int _11039 = _5210;
        for (int _5262 = _11038; _5262 < _11039; ++_5262)
        {
          {
            long long _5263 = (_ptr__5207[safe_add( _5219,_5262 )] % _5224);
            _ptr__5255[safe_add( _5253,_ptr__5255[safe_add( _5252,_5263 )] )] = _5262;
            ++ _ptr__5255[safe_add( _5252,_5263 )];
          }
        }
        int _11040 = (int)0;
        int _11041 = _5224;
        for (int _5264 = _11040; _5264 < _11041; ++_5264)
        {
          {
            _ptr__5255[(safe_add( _5252,_5224 ) - _5264)] = _ptr__5255[((safe_add( _5252,_5224 ) - _5264) - (int)1)];
          }
        }
        _ptr__5255[_5252] = (int)0;
        int _5265 = (int)0;
        int _5266 = (int)0;
        while ( ((_5266 < (int)((msubi)->size(0))) && (_5265 < _5210)) )
        {
          {
            if ((((*msubi)(_5266)) < (_ptr__5207[safe_add( _5219,_ptr__5255[safe_add( _5253,_5265 )] )] % _5224)))
            {
              {
                ++ _5266;
              }
            }
            else if((((*msubi)(_5266)) > (_ptr__5207[safe_add( _5219,_ptr__5255[safe_add( _5253,_5265 )] )] % _5224)))
            {
              {
                ++ _5265;
              }
            }
            else
            {
              {
                int _5267 = (int)0;
                long long _5268 = (_ptr__5207[safe_add( _5219,_ptr__5255[safe_add( _5253,_5265 )] )] % _5224);
                int _5269 = _5266;
                while ( ((_5266 < (int)((msubi)->size(0))) && (((*msubi)(_5266)) == ((*msubi)(_5269)))) )
                {
                  {
                    ++ _5266;
                  }
                }
                int _5270 = _5265;
                while ( ((_5265 < _5210) && ((_ptr__5207[safe_add( _5219,_ptr__5255[safe_add( _5253,_5265 )] )] % _5224) == _5268)) )
                {
                  {
                    ++ _5265;
                  }
                }
                int _5271 = _5270;
                int _5272 = _5269;
                int _5273 = (int)0;
                while ( ((_5272 < _5266) && (_5271 < _5265)) )
                {
                  {
                    int _5274 = _ptr__5255[safe_add( _5253,_5271 )];
                    if ((((*msubj)(_5272)) < (_ptr__5207[safe_add( _5219,_5274 )] / _5224)))
                    {
                      {
                        ++ _5272;
                      }
                    }
                    else if((((*msubj)(_5272)) > (_ptr__5207[safe_add( _5219,_5274 )] / _5224)))
                    {
                      {
                        ++ _5271;
                      }
                    }
                    else
                    {
                      {
                        _5257 += (_ptr__5206[safe_add( safe_add( _5214,_5274 ),(int)1 )] - _ptr__5206[safe_add( _5214,_5274 )]);
                        if ((_5213 > (int)0))
                        {
                          {
                            _5256 += safe_add( (_ptr__5206[safe_add( _5217,_ptr__5206[safe_add( safe_add( _5214,_5274 ),(int)1 )] )] - _ptr__5206[safe_add( _5217,_ptr__5206[safe_add( _5214,_5274 )] )]),safe_mul( (int)2,(_ptr__5206[safe_add( safe_add( _5214,_5274 ),(int)1 )] - _ptr__5206[safe_add( _5214,_5274 )]) ) );
                          }
                        }
                        {}
                        ++ _5273;
                        ++ _5272;
                        ++ _5271;
                      }
                    }
                  }
                }
                if ((_5273 > (int)0))
                {
                  {
                    ++ _5258;
                  }
                }
                {}
              }
            }
          }
        }
      }
      bool _5275 = (_5258 < mdim0);
      _5203->alloc_expr((int)1,_5258,_5257,_5275,_5256);
      int _5276 = mosek::fusion::p_WorkStack::_get_impl(_5203)->ptr_base;
      int _5277 = mosek::fusion::p_WorkStack::_get_impl(_5203)->nidxs_base;
      int _11042;
      bool _11043 = _5275;
      if (_11043)
      {
        _11042 = mosek::fusion::p_WorkStack::_get_impl(_5203)->sp_base;
      }
      else
      {
        _11042 = _5203->alloci64(_5258);
      }
      int _5278 = _11042;
      int _5279 = mosek::fusion::p_WorkStack::_get_impl(_5203)->cof_base;
      int _5280 = mosek::fusion::p_WorkStack::_get_impl(_5203)->shape_base;
      int _5281 = mosek::fusion::p_WorkStack::_get_impl(_5203)->code_base;
      int _5282 = mosek::fusion::p_WorkStack::_get_impl(_5203)->codeptr_base;
      int _5283 = mosek::fusion::p_WorkStack::_get_impl(_5203)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _5284 = mosek::fusion::p_WorkStack::_get_impl(_5203)->i64;
      _checked_ptr_1<long long> _ptr__5284(_5284 ? _5284->raw() : nullptr,_5284 ? _5284->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5285 = mosek::fusion::p_WorkStack::_get_impl(_5203)->f64;
      _checked_ptr_1<double> _ptr__5285(_5285 ? _5285->raw() : nullptr,_5285 ? _5285->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5286 = mosek::fusion::p_WorkStack::_get_impl(_5203)->i32;
      _checked_ptr_1<int> _ptr__5286(_5286 ? _5286->raw() : nullptr,_5286 ? _5286->size(0) : 0);
      {
        int _5287 = (int)0;
        int _5288 = (int)0;
        int _5289 = (int)0;
        int _5290 = (int)0;
        int _5291 = (int)0;
        _ptr__5286[_5276] = (int)0;
        if ((_5213 > (int)0))
        {
          {
            _ptr__5286[_5282] = (int)0;
          }
        }
        {}
        _ptr__5286[_5280] = mdim0;
        while ( ((_5291 < (int)((msubi)->size(0))) && (_5290 < _5210)) )
        {
          {
            if ((((*msubi)(_5291)) < (_ptr__5207[safe_add( _5219,_ptr__5255[safe_add( _5253,_5290 )] )] % _5224)))
            {
              {
                ++ _5291;
              }
            }
            else if((((*msubi)(_5291)) > (_ptr__5207[safe_add( _5219,_ptr__5255[safe_add( _5253,_5290 )] )] % _5224)))
            {
              {
                ++ _5290;
              }
            }
            else
            {
              {
                int _5292 = (int)0;
                long long _5293 = (_ptr__5207[safe_add( _5219,_ptr__5255[safe_add( _5253,_5290 )] )] % _5224);
                int _5294 = _5291;
                while ( ((_5291 < (int)((msubi)->size(0))) && (((*msubi)(_5291)) == ((*msubi)(_5294)))) )
                {
                  {
                    ++ _5291;
                  }
                }
                int _5295 = _5290;
                while ( ((_5290 < _5210) && ((_ptr__5207[safe_add( _5219,_ptr__5255[safe_add( _5253,_5290 )] )] % _5224) == _5293)) )
                {
                  {
                    ++ _5290;
                  }
                }
                int _5296 = _5295;
                int _5297 = _5294;
                int _5298 = (int)0;
                int _5299 = ((*msubi)(_5294));
                while ( ((_5297 < _5291) && (_5296 < _5290)) )
                {
                  {
                    int _5300 = _ptr__5255[safe_add( _5253,_5296 )];
                    if ((((*msubj)(_5297)) < (_ptr__5207[safe_add( _5219,_5300 )] / _5224)))
                    {
                      {
                        ++ _5297;
                      }
                    }
                    else if((((*msubj)(_5297)) > (_ptr__5207[safe_add( _5219,_5300 )] / _5224)))
                    {
                      {
                        ++ _5296;
                      }
                    }
                    else
                    {
                      {
                        int _11044 = _ptr__5206[safe_add( _5214,_5300 )];
                        int _11045 = _ptr__5206[safe_add( safe_add( _5214,_5300 ),(int)1 )];
                        for (int _5301 = _11044; _5301 < _11045; ++_5301)
                        {
                          {
                            _ptr__5284[safe_add( _5277,_5288 )] = _ptr__5207[safe_add( _5220,_5301 )];
                            _ptr__5285[safe_add( _5279,_5288 )] = (_ptr__5208[safe_add( _5221,_5301 )] * ((*mval)(_5297)));
                            if ((_5213 > (int)0))
                            {
                              {
                                int _11046 = _ptr__5206[safe_add( _5217,_5301 )];
                                int _11047 = _ptr__5206[safe_add( safe_add( _5217,_5301 ),(int)1 )];
                                for (int _5302 = _11046; _5302 < _11047; ++_5302)
                                {
                                  {
                                    _ptr__5286[safe_add( _5281,_5289 )] = _ptr__5206[safe_add( _5215,_5302 )];
                                    _ptr__5285[safe_add( _5283,_5289 )] = _ptr__5208[safe_add( _5216,_5302 )];
                                    ++ _5289;
                                  }
                                }
                                _ptr__5286[safe_add( _5281,_5289 )] = 2;
                                _ptr__5285[safe_add( _5283,_5289 )] = ((*mval)(_5297));
                                ++ _5289;
                                _ptr__5286[safe_add( _5281,_5289 )] = 5;
                                ++ _5289;
                                _ptr__5286[safe_add( safe_add( _5282,_5288 ),(int)1 )] = _5289;
                              }
                            }
                            {}
                            ++ _5288;
                            ++ _5298;
                          }
                        }
                        ++ _5297;
                        ++ _5296;
                      }
                    }
                  }
                }
                if ((_5298 > (int)0))
                {
                  {
                    _ptr__5286[safe_add( safe_add( _5276,_5287 ),(int)1 )] = _5288;
                    _ptr__5284[safe_add( _5278,_5287 )] = _5299;
                    ++ _5287;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_5288 != _5257))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
          }
        }
        {}
        if ((_5287 != _5258))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
          }
        }
        {}
      }
      if ((!_5275))
      {
        {
          _5203->popi64(_5258);
        }
      }
      {}
    }
  }
  _5205->clear();
}
int mosek::fusion::p_ExprMulDiagLeft::validate(int _5303,int _5304,std::shared_ptr< monty::ndarray< int,1 > > _5305,std::shared_ptr< monty::ndarray< int,1 > > _5306,std::shared_ptr< monty::ndarray< double,1 > > _5307,monty::rc_ptr< ::mosek::fusion::Expression > _5308){
  _checked_ptr_1<int> _ptr__5305(_5305 ? _5305->raw() : nullptr, _5305 ? _5305->size(0) : 0);
  _checked_ptr_1<int> _ptr__5306(_5306 ? _5306->raw() : nullptr, _5306 ? _5306->size(0) : 0);
  _checked_ptr_1<double> _ptr__5307(_5307 ? _5307->raw() : nullptr, _5307 ? _5307->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5309 = _5308->getShape();
  _checked_ptr_1<int> _ptr__5309(_5309 ? _5309->raw() : nullptr,_5309 ? _5309->size(0) : 0);
  if (((int)((_5309)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5310 = _ptr__5309[(int)0];
  int _5311 = _ptr__5309[(int)1];
  if (((_5303 < (int)0) || (_5304 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5304 != _5310) || (_5303 != _5311)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5305)->size(0)) != (int)((_5306)->size(0))) || ((int)((_5305)->size(0)) != (int)((_5307)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5312 = (int)((_5305)->size(0));
  bool _5313 = false;
  bool _5314 = false;
  {
    int _11048 = (int)0;
    int _11049 = _5312;
    for (int _5315 = _11048; _5315 < _11049; ++_5315)
    {
      {
        if (((_ptr__5305[_5315] < (int)0) || ((_ptr__5305[_5315] >= _5303) || ((_ptr__5306[_5315] < (int)0) || (_ptr__5306[_5315] >= _5304)))))
        {
          {
            _5313 = true;
          }
        }
        {}
      }
    }
    int _11050 = (int)0;
    int _11051 = (_5312 - (int)1);
    for (int _5316 = _11050; _5316 < _11051; ++_5316)
    {
      {
        if (((_ptr__5305[_5316] > _ptr__5305[safe_add( _5316,(int)1 )]) || ((_ptr__5305[_5316] == _ptr__5305[safe_add( _5316,(int)1 )]) && (_ptr__5306[_5316] >= _ptr__5306[safe_add( _5316,(int)1 )]))))
        {
          {
            _5314 = true;
          }
        }
        {}
      }
    }
  }
  if (_5313)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5314)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagLeft(m,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulDiagLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulElement::p_ExprMulElement  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5317,    std::shared_ptr< monty::ndarray< long long,1 > > _5318,    monty::rc_ptr< ::mosek::fusion::Expression > _5319){ return new mosek::fusion::ExprMulElement(_5317,_5318,_5319); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5317,    std::shared_ptr< monty::ndarray< long long,1 > > _5318,    monty::rc_ptr< ::mosek::fusion::Expression > _5319) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5317,_5318,_5319); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5317,    std::shared_ptr< monty::ndarray< long long,1 > > _5318,    monty::rc_ptr< ::mosek::fusion::Expression > _5319){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5317(_5317 ? _5317->raw() : nullptr, _5317 ? _5317->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5318(_5318 ? _5318->raw() : nullptr, _5318 ? _5318->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_5317,_5318,_5319,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _5320 = _5319->getShape();
    _checked_ptr_1<int> _ptr__5320(_5320 ? _5320->raw() : nullptr,_5320 ? _5320->size(0) : 0);
    if (((int)((_5317)->size(0)) != (int)((_5318)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    long long _5321 = ::mosek::fusion::p_Set::size(_5320);
    bool _5322 = false;
    bool _5323 = false;
    {
      int _11052 = (int)0;
      int _11053 = (int)((_5318)->size(0));
      for (int _5324 = _11052; _5324 < _11053; ++_5324)
      {
        {
          if (((_ptr__5318[_5324] < (int)0) || (_ptr__5318[_5324] >= _5321)))
          {
            {
              _5322 = true;
            }
          }
          {}
        }
      }
      int _11054 = (int)0;
      int _11055 = ((int)((_5318)->size(0)) - (int)1);
      for (int _5325 = _11054; _5325 < _11055; ++_5325)
      {
        {
          if ((_ptr__5318[_5325] >= _ptr__5318[safe_add( _5325,(int)1 )]))
          {
            {
              _5323 = true;
            }
          }
          {}
        }
      }
    }
    if (_5322)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_5323)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5326,    std::shared_ptr< monty::ndarray< long long,1 > > _5327,    monty::rc_ptr< ::mosek::fusion::Expression > _5328,    int _5329){ return new mosek::fusion::ExprMulElement(_5326,_5327,_5328,_5329); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5326,    std::shared_ptr< monty::ndarray< long long,1 > > _5327,    monty::rc_ptr< ::mosek::fusion::Expression > _5328,    int _5329) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5326,_5327,_5328,_5329); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5326,    std::shared_ptr< monty::ndarray< long long,1 > > _5327,    monty::rc_ptr< ::mosek::fusion::Expression > _5328,    int _5329){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5326(_5326 ? _5326->raw() : nullptr, _5326 ? _5326->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5327(_5327 ? _5327->raw() : nullptr, _5327 ? _5327->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5328->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _5328;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _5326;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _5327;
  }
}void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5330,monty::rc_ptr< ::mosek::fusion::WorkStack > _5331,monty::rc_ptr< ::mosek::fusion::WorkStack > _5332) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_5330,_5331,_5332); }void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5330,monty::rc_ptr< ::mosek::fusion::WorkStack > _5331,monty::rc_ptr< ::mosek::fusion::WorkStack > _5332){
  expr->eval(_5331,_5330,_5332);
  _5331->pop_expr();
  int _5333 = mosek::fusion::p_WorkStack::_get_impl(_5331)->nd;
  int _5334 = mosek::fusion::p_WorkStack::_get_impl(_5331)->nelem;
  int _5335 = mosek::fusion::p_WorkStack::_get_impl(_5331)->nnz;
  int _5336 = mosek::fusion::p_WorkStack::_get_impl(_5331)->ncodeatom;
  bool _5337 = mosek::fusion::p_WorkStack::_get_impl(_5331)->hassp;
  int _5338 = mosek::fusion::p_WorkStack::_get_impl(_5331)->shape_base;
  int _5339 = mosek::fusion::p_WorkStack::_get_impl(_5331)->ptr_base;
  int _5340 = mosek::fusion::p_WorkStack::_get_impl(_5331)->nidxs_base;
  int _5341 = mosek::fusion::p_WorkStack::_get_impl(_5331)->sp_base;
  int _5342 = mosek::fusion::p_WorkStack::_get_impl(_5331)->cof_base;
  int _5343 = mosek::fusion::p_WorkStack::_get_impl(_5331)->code_base;
  int _5344 = mosek::fusion::p_WorkStack::_get_impl(_5331)->codeptr_base;
  int _5345 = mosek::fusion::p_WorkStack::_get_impl(_5331)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5346 = mosek::fusion::p_WorkStack::_get_impl(_5331)->i32;
  _checked_ptr_1<int> _ptr__5346(_5346 ? _5346->raw() : nullptr,_5346 ? _5346->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5347 = mosek::fusion::p_WorkStack::_get_impl(_5331)->i64;
  _checked_ptr_1<long long> _ptr__5347(_5347 ? _5347->raw() : nullptr,_5347 ? _5347->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5348 = mosek::fusion::p_WorkStack::_get_impl(_5331)->f64;
  _checked_ptr_1<double> _ptr__5348(_5348 ? _5348->raw() : nullptr,_5348 ? _5348->size(0) : 0);
  int _5349 = (int)0;
  int _5350 = (int)0;
  int _5351 = (int)0;
  if ((!_5337))
  {
    {
      _5351 = (int)((msp)->size(0));
      int _11056 = (int)0;
      int _11057 = (int)((msp)->size(0));
      for (int _5352 = _11056; _5352 < _11057; ++_5352)
      {
        {
          _5350 += (_ptr__5346[safe_add( safe_add( _5339,((*msp)(_5352)) ),(int)1 )] - _ptr__5346[safe_add( _5339,((*msp)(_5352)) )]);
        }
      }
      if ((_5336 > (int)0))
      {
        {
          int _11058 = (int)0;
          int _11059 = (int)((msp)->size(0));
          for (int _5353 = _11058; _5353 < _11059; ++_5353)
          {
            {
              _5349 += safe_add( (_ptr__5346[safe_add( _5344,_ptr__5346[safe_add( safe_add( _5339,((*msp)(_5353)) ),(int)1 )] )] - _ptr__5346[safe_add( _5344,_ptr__5346[safe_add( _5339,((*msp)(_5353)) )] )]),safe_mul( (int)2,(_ptr__5346[safe_add( safe_add( _5339,((*msp)(_5353)) ),(int)1 )] - _ptr__5346[safe_add( _5339,((*msp)(_5353)) )]) ) );
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int _5354 = (int)((msp)->size(0));
      int _5355 = (int)0;
      int _5356 = _5334;
      int _5357 = (int)0;
      while ( ((_5355 < _5354) && (_5357 < _5356)) )
      {
        {
          if ((((*msp)(_5355)) < _ptr__5347[safe_add( _5341,_5357 )]))
          {
            {
              ++ _5355;
            }
          }
          else if((((*msp)(_5355)) > _ptr__5347[safe_add( _5341,_5357 )]))
          {
            {
              ++ _5357;
            }
          }
          else
          {
            {
              _5350 += (_ptr__5346[safe_add( safe_add( _5339,_5357 ),(int)1 )] - _ptr__5346[safe_add( _5339,_5357 )]);
              if ((_5336 > (int)0))
              {
                {
                  _5349 += safe_add( (_ptr__5346[safe_add( _5344,_ptr__5346[safe_add( safe_add( _5339,_5357 ),(int)1 )] )] - _ptr__5346[safe_add( _5344,_ptr__5346[safe_add( _5339,_5357 )] )]),safe_mul( (int)2,(_ptr__5346[safe_add( safe_add( _5339,_5357 ),(int)1 )] - _ptr__5346[safe_add( _5339,_5357 )]) ) );
                }
              }
              {}
              ++ _5355;
              ++ _5357;
              ++ _5351;
            }
          }
        }
      }
    }
  }
  long long _5358 = (long long)1;
  int _11060 = (int)0;
  int _11061 = _5333;
  for (int _5359 = _11060; _5359 < _11061; ++_5359)
  {
    {
      _5358 *= _ptr__5346[safe_add( _5338,_5359 )];
    }
  }
  bool _5360 = (_5351 < _5358);
  int _5361 = _5333;
  _5330->alloc_expr(_5361,_5351,_5350,_5360,_5349);
  int _5362 = mosek::fusion::p_WorkStack::_get_impl(_5330)->ptr_base;
  int _5363 = mosek::fusion::p_WorkStack::_get_impl(_5330)->shape_base;
  int _5364 = mosek::fusion::p_WorkStack::_get_impl(_5330)->nidxs_base;
  int _11062;
  bool _11063 = _5360;
  if (_11063)
  {
    _11062 = mosek::fusion::p_WorkStack::_get_impl(_5330)->sp_base;
  }
  else
  {
    _11062 = _5330->alloci64(_5351);
  }
  int _5365 = _11062;
  int _5366 = mosek::fusion::p_WorkStack::_get_impl(_5330)->cof_base;
  int _5367 = mosek::fusion::p_WorkStack::_get_impl(_5330)->code_base;
  int _5368 = mosek::fusion::p_WorkStack::_get_impl(_5330)->codeptr_base;
  int _5369 = mosek::fusion::p_WorkStack::_get_impl(_5330)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5370 = mosek::fusion::p_WorkStack::_get_impl(_5330)->i32;
  _checked_ptr_1<int> _ptr__5370(_5370 ? _5370->raw() : nullptr,_5370 ? _5370->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5371 = mosek::fusion::p_WorkStack::_get_impl(_5330)->i64;
  _checked_ptr_1<long long> _ptr__5371(_5371 ? _5371->raw() : nullptr,_5371 ? _5371->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5372 = mosek::fusion::p_WorkStack::_get_impl(_5330)->f64;
  _checked_ptr_1<double> _ptr__5372(_5372 ? _5372->raw() : nullptr,_5372 ? _5372->size(0) : 0);
  {
    int _5373 = (int)0;
    int _5374 = (int)0;
    int _5375 = (int)0;
    _ptr__5370[_5362] = (int)0;
    if ((_5349 > (int)0))
    {
      {
        _ptr__5370[_5368] = (int)0;
      }
    }
    {}
    int _11064 = (int)0;
    int _11065 = _5361;
    for (int _5376 = _11064; _5376 < _11065; ++_5376)
    {
      {
        _ptr__5370[safe_add( _5363,_5376 )] = _ptr__5346[safe_add( _5338,_5376 )];
      }
    }
    if ((!_5337))
    {
      {
        int _11066 = (int)0;
        int _11067 = (int)((msp)->size(0));
        for (int _5377 = _11066; _5377 < _11067; ++_5377)
        {
          {
            int _5378 = _ptr__5346[safe_add( _5339,((*msp)(_5377)) )];
            int _5379 = _ptr__5346[safe_add( safe_add( _5339,((*msp)(_5377)) ),(int)1 )];
            int _11068 = _5378;
            int _11069 = _5379;
            for (int _5380 = _11068; _5380 < _11069; ++_5380)
            {
              {
                _ptr__5371[safe_add( _5364,_5375 )] = _ptr__5347[safe_add( _5340,_5380 )];
                _ptr__5372[safe_add( _5366,_5375 )] = (_ptr__5348[safe_add( _5342,_5380 )] * ((*mcof)(_5377)));
                if ((_5336 > (int)0))
                {
                  {
                    int _11070 = _ptr__5346[safe_add( _5344,_5380 )];
                    int _11071 = _ptr__5346[safe_add( safe_add( _5344,_5380 ),(int)1 )];
                    for (int _5381 = _11070; _5381 < _11071; ++_5381)
                    {
                      {
                        _ptr__5370[safe_add( _5367,_5373 )] = _ptr__5346[safe_add( _5343,_5381 )];
                        _ptr__5372[safe_add( _5369,_5373 )] = _ptr__5348[safe_add( _5345,_5381 )];
                        ++ _5373;
                      }
                    }
                    _ptr__5370[safe_add( _5367,_5373 )] = 2;
                    _ptr__5372[safe_add( _5369,_5373 )] = ((*mcof)(_5377));
                    ++ _5373;
                    _ptr__5370[safe_add( _5367,_5373 )] = 5;
                    ++ _5373;
                    _ptr__5370[safe_add( safe_add( _5368,_5375 ),(int)1 )] = _5373;
                  }
                }
                {}
                ++ _5375;
              }
            }
            _ptr__5370[safe_add( safe_add( _5362,_5377 ),(int)1 )] = _5375;
            _ptr__5371[safe_add( _5365,_5377 )] = ((*msp)(_5377));
          }
        }
      }
    }
    else
    {
      {
        int _5382 = (int)((msp)->size(0));
        int _5383 = (int)0;
        int _5384 = _5334;
        int _5385 = (int)0;
        while ( ((_5383 < _5382) && (_5385 < _5384)) )
        {
          {
            if ((((*msp)(_5383)) < _ptr__5347[safe_add( _5341,_5385 )]))
            {
              {
                ++ _5383;
              }
            }
            else if((((*msp)(_5383)) > _ptr__5347[safe_add( _5341,_5385 )]))
            {
              {
                ++ _5385;
              }
            }
            else
            {
              {
                int _5386 = _ptr__5346[safe_add( _5339,_5385 )];
                int _5387 = _ptr__5346[safe_add( safe_add( _5339,_5385 ),(int)1 )];
                int _11072 = _5386;
                int _11073 = _5387;
                for (int _5388 = _11072; _5388 < _11073; ++_5388)
                {
                  {
                    _ptr__5371[safe_add( _5364,_5375 )] = _ptr__5347[safe_add( _5340,_5388 )];
                    _ptr__5372[safe_add( _5366,_5375 )] = (_ptr__5348[safe_add( _5340,_5388 )] * ((*mcof)(_5383)));
                    if ((_5336 > (int)0))
                    {
                      {
                        int _11074 = _ptr__5346[safe_add( _5344,_5388 )];
                        int _11075 = _ptr__5346[safe_add( safe_add( _5344,_5388 ),(int)1 )];
                        for (int _5389 = _11074; _5389 < _11075; ++_5389)
                        {
                          {
                            _ptr__5370[safe_add( _5367,_5373 )] = _ptr__5346[safe_add( _5343,_5389 )];
                            _ptr__5372[safe_add( _5369,_5373 )] = _ptr__5348[safe_add( _5345,_5389 )];
                            ++ _5373;
                          }
                        }
                        _ptr__5370[safe_add( _5367,_5373 )] = 2;
                        _ptr__5372[safe_add( _5369,_5373 )] = ((*mcof)(_5383));
                        ++ _5373;
                        _ptr__5370[safe_add( _5367,_5373 )] = 5;
                        ++ _5373;
                        _ptr__5370[safe_add( safe_add( _5368,_5375 ),(int)1 )] = _5373;
                      }
                    }
                    {}
                    ++ _5375;
                  }
                }
                _ptr__5370[safe_add( safe_add( _5362,_5374 ),(int)1 )] = _5375;
                _ptr__5371[safe_add( _5365,_5374 )] = ((*msp)(_5383));
                ++ _5374;
                ++ _5383;
                ++ _5385;
              }
            }
          }
        }
      }
    }
  }
  if ((!_5360))
  {
    {
      _5330->popi64(_5351);
    }
  }
  {}
}
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulElement::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulElement(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulElement::destroy(){expr.reset();msp.reset();mcof.reset();}void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst  (double _5390,    monty::rc_ptr< ::mosek::fusion::Expression > _5391){ return new mosek::fusion::ExprMulScalarConst(_5390,_5391); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst  (double _5390,    monty::rc_ptr< ::mosek::fusion::Expression > _5391) :    ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this)){ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_5390,_5391); }void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _5390,    monty::rc_ptr< ::mosek::fusion::Expression > _5391){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_5391->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _5390;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _5391;
  }
}void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5392,monty::rc_ptr< ::mosek::fusion::WorkStack > _5393,monty::rc_ptr< ::mosek::fusion::WorkStack > _5394) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_5392,_5393,_5394); }void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5392,monty::rc_ptr< ::mosek::fusion::WorkStack > _5393,monty::rc_ptr< ::mosek::fusion::WorkStack > _5394){
  expr->eval(_5393,_5392,_5394);
  _5393->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5395 = mosek::fusion::p_WorkStack::_get_impl(_5393)->i32;
  _checked_ptr_1<int> _ptr__5395(_5395 ? _5395->raw() : nullptr,_5395 ? _5395->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5396 = mosek::fusion::p_WorkStack::_get_impl(_5393)->i64;
  _checked_ptr_1<long long> _ptr__5396(_5396 ? _5396->raw() : nullptr,_5396 ? _5396->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5397 = mosek::fusion::p_WorkStack::_get_impl(_5393)->f64;
  _checked_ptr_1<double> _ptr__5397(_5397 ? _5397->raw() : nullptr,_5397 ? _5397->size(0) : 0);
  int _5398 = mosek::fusion::p_WorkStack::_get_impl(_5393)->nd;
  int _5399 = mosek::fusion::p_WorkStack::_get_impl(_5393)->nelem;
  int _5400 = mosek::fusion::p_WorkStack::_get_impl(_5393)->nnz;
  bool _5401 = mosek::fusion::p_WorkStack::_get_impl(_5393)->hassp;
  int _5402 = mosek::fusion::p_WorkStack::_get_impl(_5393)->ncodeatom;
  int _5403 = mosek::fusion::p_WorkStack::_get_impl(_5393)->ptr_base;
  int _5404 = mosek::fusion::p_WorkStack::_get_impl(_5393)->code_base;
  int _5405 = mosek::fusion::p_WorkStack::_get_impl(_5393)->cconst_base;
  int _5406 = mosek::fusion::p_WorkStack::_get_impl(_5393)->codeptr_base;
  int _5407 = mosek::fusion::p_WorkStack::_get_impl(_5393)->shape_base;
  int _5408 = mosek::fusion::p_WorkStack::_get_impl(_5393)->sp_base;
  int _5409 = mosek::fusion::p_WorkStack::_get_impl(_5393)->nidxs_base;
  int _5410 = mosek::fusion::p_WorkStack::_get_impl(_5393)->cof_base;
  int _5411 = mosek::fusion::p_WorkStack::_get_impl(_5393)->cconst_base;
  int _11076;
  bool _11077 = (_5402 == (int)0);
  if (_11077)
  {
    _11076 = (int)0;
  }
  else
  {
    _11076 = safe_add( _5402,safe_mul( (int)2,_5400 ) );
  }
  int _5412 = _11076;
  _5392->alloc_expr(_5398,_5399,_5400,_5401,_5412);
  std::shared_ptr< monty::ndarray< long long,1 > > _5413 = mosek::fusion::p_WorkStack::_get_impl(_5392)->i64;
  _checked_ptr_1<long long> _ptr__5413(_5413 ? _5413->raw() : nullptr,_5413 ? _5413->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5414 = mosek::fusion::p_WorkStack::_get_impl(_5392)->f64;
  _checked_ptr_1<double> _ptr__5414(_5414 ? _5414->raw() : nullptr,_5414 ? _5414->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5415 = mosek::fusion::p_WorkStack::_get_impl(_5392)->i32;
  _checked_ptr_1<int> _ptr__5415(_5415 ? _5415->raw() : nullptr,_5415 ? _5415->size(0) : 0);
  int _5416 = mosek::fusion::p_WorkStack::_get_impl(_5392)->ptr_base;
  int _5417 = mosek::fusion::p_WorkStack::_get_impl(_5392)->nidxs_base;
  int _5418 = mosek::fusion::p_WorkStack::_get_impl(_5392)->cof_base;
  int _5419 = mosek::fusion::p_WorkStack::_get_impl(_5392)->code_base;
  int _5420 = mosek::fusion::p_WorkStack::_get_impl(_5392)->codeptr_base;
  int _5421 = mosek::fusion::p_WorkStack::_get_impl(_5392)->cconst_base;
  bool _5422 = mosek::fusion::p_WorkStack::_get_impl(_5392)->hassp;
  int _5423 = mosek::fusion::p_WorkStack::_get_impl(_5392)->shape_base;
  {
    int _11078 = (int)0;
    int _11079 = safe_add( _5399,(int)1 );
    for (int _5424 = _11078; _5424 < _11079; ++_5424)
    {
      {
        _ptr__5415[safe_add( _5416,_5424 )] = _ptr__5395[safe_add( _5403,_5424 )];
      }
    }
    int _11080 = (int)0;
    int _11081 = _5400;
    for (int _5425 = _11080; _5425 < _11081; ++_5425)
    {
      {
        _ptr__5413[safe_add( _5417,_5425 )] = _ptr__5396[safe_add( _5409,_5425 )];
        _ptr__5414[safe_add( _5418,_5425 )] = (_ptr__5397[safe_add( _5410,_5425 )] * c);
      }
    }
    if (_5401)
    {
      {
        int _11082 = (int)0;
        int _11083 = _5399;
        for (int _5426 = _11082; _5426 < _11083; ++_5426)
        {
          {
            _ptr__5413[safe_add( _5408,_5426 )] = _ptr__5396[safe_add( _5408,_5426 )];
          }
        }
      }
    }
    {}
    int _11084 = (int)0;
    int _11085 = _5398;
    for (int _5427 = _11084; _5427 < _11085; ++_5427)
    {
      {
        _ptr__5415[safe_add( _5423,_5427 )] = _ptr__5395[safe_add( _5407,_5427 )];
      }
    }
    if ((_5402 > (int)0))
    {
      {
        _ptr__5415[_5420] = (int)0;
        int _5428 = (int)0;
        int _11086 = (int)0;
        int _11087 = _5400;
        for (int _5429 = _11086; _5429 < _11087; ++_5429)
        {
          {
            int _11088 = _ptr__5395[safe_add( _5406,_5429 )];
            int _11089 = _ptr__5395[safe_add( safe_add( _5406,_5429 ),(int)1 )];
            for (int _5430 = _11088; _5430 < _11089; ++_5430)
            {
              {
                _ptr__5415[safe_add( _5419,_5428 )] = _ptr__5395[safe_add( _5404,_5430 )];
                _ptr__5414[safe_add( _5421,_5428 )] = _ptr__5397[safe_add( _5405,_5430 )];
                ++ _5428;
              }
            }
            _ptr__5415[safe_add( _5419,_5428 )] = 2;
            _ptr__5414[safe_add( _5421,_5428 )] = c;
            ++ _5428;
            _ptr__5415[safe_add( _5419,_5428 )] = 5;
            ++ _5428;
            _ptr__5415[safe_add( safe_add( _5420,_5429 ),(int)1 )] = _5428;
          }
        }
      }
    }
    {}
  }
}
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarConst::toString(){
  return std::string ("ExprMulScalarConst()");
}
void mosek::fusion::p_ExprMulScalarConst::destroy(){expr.reset();}void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprScalarMul::p_ExprScalarMul  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _5431,    int _5432,    std::shared_ptr< monty::ndarray< int,1 > > _5433,    std::shared_ptr< monty::ndarray< int,1 > > _5434,    std::shared_ptr< monty::ndarray< double,1 > > _5435,    monty::rc_ptr< ::mosek::fusion::Expression > _5436,    int _5437){ return new mosek::fusion::ExprScalarMul(_5431,_5432,_5433,_5434,_5435,_5436,_5437); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _5431,    int _5432,    std::shared_ptr< monty::ndarray< int,1 > > _5433,    std::shared_ptr< monty::ndarray< int,1 > > _5434,    std::shared_ptr< monty::ndarray< double,1 > > _5435,    monty::rc_ptr< ::mosek::fusion::Expression > _5436,    int _5437) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5431,_5432,_5433,_5434,_5435,_5436,_5437); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _5431,    int _5432,    std::shared_ptr< monty::ndarray< int,1 > > _5433,    std::shared_ptr< monty::ndarray< int,1 > > _5434,    std::shared_ptr< monty::ndarray< double,1 > > _5435,    monty::rc_ptr< ::mosek::fusion::Expression > _5436,    int _5437){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5433(_5433 ? _5433->raw() : nullptr, _5433 ? _5433->size(0) : 0);
    _checked_ptr_1<int> _ptr__5434(_5434 ? _5434->raw() : nullptr, _5434 ? _5434->size(0) : 0);
    _checked_ptr_1<double> _ptr__5435(_5435 ? _5435->raw() : nullptr, _5435 ? _5435->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5431),(int)(_5432)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _5431;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _5432;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _5433;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _5434;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _5435;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _5436;
  }
}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _5438,    int _5439,    std::shared_ptr< monty::ndarray< int,1 > > _5440,    std::shared_ptr< monty::ndarray< int,1 > > _5441,    std::shared_ptr< monty::ndarray< double,1 > > _5442,    monty::rc_ptr< ::mosek::fusion::Expression > _5443){ return new mosek::fusion::ExprScalarMul(_5438,_5439,_5440,_5441,_5442,_5443); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _5438,    int _5439,    std::shared_ptr< monty::ndarray< int,1 > > _5440,    std::shared_ptr< monty::ndarray< int,1 > > _5441,    std::shared_ptr< monty::ndarray< double,1 > > _5442,    monty::rc_ptr< ::mosek::fusion::Expression > _5443) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5438,_5439,_5440,_5441,_5442,_5443); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _5438,    int _5439,    std::shared_ptr< monty::ndarray< int,1 > > _5440,    std::shared_ptr< monty::ndarray< int,1 > > _5441,    std::shared_ptr< monty::ndarray< double,1 > > _5442,    monty::rc_ptr< ::mosek::fusion::Expression > _5443){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5440(_5440 ? _5440->raw() : nullptr, _5440 ? _5440->size(0) : 0);
    _checked_ptr_1<int> _ptr__5441(_5441 ? _5441->raw() : nullptr, _5441 ? _5441->size(0) : 0);
    _checked_ptr_1<double> _ptr__5442(_5442 ? _5442->raw() : nullptr, _5442 ? _5442->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_5438,_5439,_5440,_5441,_5442,_5443,::mosek::fusion::p_ExprScalarMul::validate(_5438,_5439,_5440,_5441,_5442,_5443));
  }
}void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5444,monty::rc_ptr< ::mosek::fusion::WorkStack > _5445,monty::rc_ptr< ::mosek::fusion::WorkStack > _5446) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_5444,_5445,_5446); }void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5444,monty::rc_ptr< ::mosek::fusion::WorkStack > _5445,monty::rc_ptr< ::mosek::fusion::WorkStack > _5446){
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_5445,_5444,_5446);
  _5445->pop_expr();
  int _5447 = mosek::fusion::p_WorkStack::_get_impl(_5445)->nd;
  int _5448 = mosek::fusion::p_WorkStack::_get_impl(_5445)->nelem;
  int _5449 = mosek::fusion::p_WorkStack::_get_impl(_5445)->nnz;
  bool _5450 = mosek::fusion::p_WorkStack::_get_impl(_5445)->hassp;
  int _5451 = mosek::fusion::p_WorkStack::_get_impl(_5445)->ncodeatom;
  int _5452 = mosek::fusion::p_WorkStack::_get_impl(_5445)->ptr_base;
  int _5453 = mosek::fusion::p_WorkStack::_get_impl(_5445)->sp_base;
  int _5454 = mosek::fusion::p_WorkStack::_get_impl(_5445)->nidxs_base;
  int _5455 = mosek::fusion::p_WorkStack::_get_impl(_5445)->cof_base;
  int _5456 = mosek::fusion::p_WorkStack::_get_impl(_5445)->code_base;
  int _5457 = mosek::fusion::p_WorkStack::_get_impl(_5445)->codeptr_base;
  int _5458 = mosek::fusion::p_WorkStack::_get_impl(_5445)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5459 = mosek::fusion::p_WorkStack::_get_impl(_5445)->i32;
  _checked_ptr_1<int> _ptr__5459(_5459 ? _5459->raw() : nullptr,_5459 ? _5459->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5460 = mosek::fusion::p_WorkStack::_get_impl(_5445)->i64;
  _checked_ptr_1<long long> _ptr__5460(_5460 ? _5460->raw() : nullptr,_5460 ? _5460->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5461 = mosek::fusion::p_WorkStack::_get_impl(_5445)->f64;
  _checked_ptr_1<double> _ptr__5461(_5461 ? _5461->raw() : nullptr,_5461 ? _5461->size(0) : 0);
  int _5462 = (int)((mval)->size(0));
  if ((_5447 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_5448 == (int)0))
  {
    {
      _5444->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_5444)->i32)(mosek::fusion::p_WorkStack::_get_impl(_5444)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_5444)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_5444)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      int _11090;
      bool _11091 = (_5451 > (int)0);
      if (_11091)
      {
        _11090 = safe_mul( (int)2,_5449 );
      }
      else
      {
        _11090 = (int)0;
      }
      int _5463 = safe_add( _5451,_11090 );
      _5444->alloc_expr((int)2,_5462,safe_mul( _5462,_5449 ),true,_5463);
      int _5464 = mosek::fusion::p_WorkStack::_get_impl(_5444)->ptr_base;
      int _5465 = mosek::fusion::p_WorkStack::_get_impl(_5444)->nidxs_base;
      int _5466 = mosek::fusion::p_WorkStack::_get_impl(_5444)->sp_base;
      int _5467 = mosek::fusion::p_WorkStack::_get_impl(_5444)->cof_base;
      int _5468 = mosek::fusion::p_WorkStack::_get_impl(_5444)->shape_base;
      int _5469 = mosek::fusion::p_WorkStack::_get_impl(_5444)->code_base;
      int _5470 = mosek::fusion::p_WorkStack::_get_impl(_5444)->codeptr_base;
      int _5471 = mosek::fusion::p_WorkStack::_get_impl(_5444)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _5472 = mosek::fusion::p_WorkStack::_get_impl(_5444)->i32;
      _checked_ptr_1<int> _ptr__5472(_5472 ? _5472->raw() : nullptr,_5472 ? _5472->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5473 = mosek::fusion::p_WorkStack::_get_impl(_5444)->i64;
      _checked_ptr_1<long long> _ptr__5473(_5473 ? _5473->raw() : nullptr,_5473 ? _5473->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5474 = mosek::fusion::p_WorkStack::_get_impl(_5444)->f64;
      _checked_ptr_1<double> _ptr__5474(_5474 ? _5474->raw() : nullptr,_5474 ? _5474->size(0) : 0);
      _ptr__5472[_5468] = mdim0;
      _ptr__5472[safe_add( _5468,(int)1 )] = mdim1;
      int _5475 = (int)0;
      int _5476 = (int)0;
      _ptr__5472[_5464] = (int)0;
      if ((_5451 > (int)0))
      {
        {
          _ptr__5472[_5470] = (int)0;
          int _11092 = (int)0;
          int _11093 = _5462;
          for (int _5477 = _11092; _5477 < _11093; ++_5477)
          {
            {
              int _11094 = (int)0;
              int _11095 = _5449;
              for (int _5478 = _11094; _5478 < _11095; ++_5478)
              {
                {
                  _ptr__5473[safe_add( _5465,_5476 )] = _ptr__5460[safe_add( _5454,_5478 )];
                  _ptr__5474[safe_add( _5467,_5476 )] = (_ptr__5461[safe_add( _5455,_5478 )] * ((*mval)(_5477)));
                  int _11096 = _ptr__5459[safe_add( _5457,_5478 )];
                  int _11097 = _ptr__5459[safe_add( safe_add( _5457,_5478 ),(int)1 )];
                  for (int _5479 = _11096; _5479 < _11097; ++_5479)
                  {
                    {
                      _ptr__5472[safe_add( _5469,_5475 )] = _ptr__5459[safe_add( _5456,_5479 )];
                      _ptr__5474[safe_add( _5471,_5475 )] = _ptr__5461[safe_add( _5458,_5479 )];
                      ++ _5475;
                    }
                  }
                  _ptr__5472[safe_add( _5469,_5475 )] = 2;
                  _ptr__5474[safe_add( _5471,_5475 )] = ((*mval)(_5477));
                  ++ _5475;
                  _ptr__5472[safe_add( _5469,_5475 )] = 5;
                  ++ _5475;
                  _ptr__5472[safe_add( safe_add( _5470,_5476 ),(int)1 )] = _5475;
                  ++ _5476;
                }
              }
              _ptr__5473[safe_add( _5466,_5477 )] = safe_add( safe_mul( ((*msubi)(_5477)),mdim1 ),((*msubj)(_5477)) );
              _ptr__5472[safe_add( safe_add( _5464,_5477 ),(int)1 )] = _5476;
            }
          }
        }
      }
      else
      {
        {
          int _11098 = (int)0;
          int _11099 = _5462;
          for (int _5480 = _11098; _5480 < _11099; ++_5480)
          {
            {
              int _11100 = (int)0;
              int _11101 = _5449;
              for (int _5481 = _11100; _5481 < _11101; ++_5481)
              {
                {
                  _ptr__5473[safe_add( _5465,_5476 )] = _ptr__5460[safe_add( _5454,_5481 )];
                  _ptr__5474[safe_add( _5467,_5476 )] = (_ptr__5461[safe_add( _5455,_5481 )] * ((*mval)(_5480)));
                  ++ _5476;
                }
              }
              _ptr__5473[safe_add( _5466,_5480 )] = safe_add( safe_mul( ((*msubi)(_5480)),mdim1 ),((*msubj)(_5480)) );
              _ptr__5472[safe_add( safe_add( _5464,_5480 ),(int)1 )] = _5476;
            }
          }
        }
      }
    }
  }
}
int mosek::fusion::p_ExprScalarMul::validate(int _5482,int _5483,std::shared_ptr< monty::ndarray< int,1 > > _5484,std::shared_ptr< monty::ndarray< int,1 > > _5485,std::shared_ptr< monty::ndarray< double,1 > > _5486,monty::rc_ptr< ::mosek::fusion::Expression > _5487){
  _checked_ptr_1<int> _ptr__5484(_5484 ? _5484->raw() : nullptr, _5484 ? _5484->size(0) : 0);
  _checked_ptr_1<int> _ptr__5485(_5485 ? _5485->raw() : nullptr, _5485 ? _5485->size(0) : 0);
  _checked_ptr_1<double> _ptr__5486(_5486 ? _5486->raw() : nullptr, _5486 ? _5486->size(0) : 0);
  int _5488 = _5487->getND();
  if ((_5488 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5482 < (int)0) || (_5483 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_5484)->size(0)) != (int)((_5485)->size(0))) || ((int)((_5484)->size(0)) != (int)((_5486)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5489 = (int)((_5484)->size(0));
  bool _5490 = false;
  bool _5491 = false;
  {
    int _11102 = (int)0;
    int _11103 = _5489;
    for (int _5492 = _11102; _5492 < _11103; ++_5492)
    {
      {
        if (((_ptr__5484[_5492] < (int)0) || ((_ptr__5484[_5492] >= _5482) || ((_ptr__5485[_5492] < (int)0) || (_ptr__5485[_5492] >= _5483)))))
        {
          {
            _5490 = true;
          }
        }
        {}
      }
    }
    int _11104 = (int)0;
    int _11105 = (_5489 - (int)1);
    for (int _5493 = _11104; _5493 < _11105; ++_5493)
    {
      {
        if (((_ptr__5484[_5493] > _ptr__5484[safe_add( _5493,(int)1 )]) || ((_ptr__5484[_5493] == _ptr__5484[safe_add( _5493,(int)1 )]) && (_ptr__5485[_5493] >= _ptr__5485[safe_add( _5493,(int)1 )]))))
        {
          {
            _5491 = true;
          }
        }
        {}
      }
    }
  }
  if (_5490)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5491)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprScalarMul::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprScalarMul::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulRight::p_ExprMulRight  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _5494,    int _5495,    std::shared_ptr< monty::ndarray< int,1 > > _5496,    std::shared_ptr< monty::ndarray< int,1 > > _5497,    std::shared_ptr< monty::ndarray< double,1 > > _5498,    monty::rc_ptr< ::mosek::fusion::Expression > _5499,    int _5500){ return new mosek::fusion::ExprMulRight(_5494,_5495,_5496,_5497,_5498,_5499,_5500); }mosek::fusion::ExprMulRight::ExprMulRight  (int _5494,    int _5495,    std::shared_ptr< monty::ndarray< int,1 > > _5496,    std::shared_ptr< monty::ndarray< int,1 > > _5497,    std::shared_ptr< monty::ndarray< double,1 > > _5498,    monty::rc_ptr< ::mosek::fusion::Expression > _5499,    int _5500) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5494,_5495,_5496,_5497,_5498,_5499,_5500); }void mosek::fusion::p_ExprMulRight::_initialize  (int _5494,    int _5495,    std::shared_ptr< monty::ndarray< int,1 > > _5496,    std::shared_ptr< monty::ndarray< int,1 > > _5497,    std::shared_ptr< monty::ndarray< double,1 > > _5498,    monty::rc_ptr< ::mosek::fusion::Expression > _5499,    int _5500){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5496(_5496 ? _5496->raw() : nullptr, _5496 ? _5496->size(0) : 0);
    _checked_ptr_1<int> _ptr__5497(_5497 ? _5497->raw() : nullptr, _5497 ? _5497->size(0) : 0);
    _checked_ptr_1<double> _ptr__5498(_5498 ? _5498->raw() : nullptr, _5498 ? _5498->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_5495,_5499->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _5494;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _5495;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _5496;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _5497;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _5498;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _5499;
  }
}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _5501,    int _5502,    std::shared_ptr< monty::ndarray< int,1 > > _5503,    std::shared_ptr< monty::ndarray< int,1 > > _5504,    std::shared_ptr< monty::ndarray< double,1 > > _5505,    monty::rc_ptr< ::mosek::fusion::Expression > _5506){ return new mosek::fusion::ExprMulRight(_5501,_5502,_5503,_5504,_5505,_5506); }mosek::fusion::ExprMulRight::ExprMulRight  (int _5501,    int _5502,    std::shared_ptr< monty::ndarray< int,1 > > _5503,    std::shared_ptr< monty::ndarray< int,1 > > _5504,    std::shared_ptr< monty::ndarray< double,1 > > _5505,    monty::rc_ptr< ::mosek::fusion::Expression > _5506) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5501,_5502,_5503,_5504,_5505,_5506); }void mosek::fusion::p_ExprMulRight::_initialize  (int _5501,    int _5502,    std::shared_ptr< monty::ndarray< int,1 > > _5503,    std::shared_ptr< monty::ndarray< int,1 > > _5504,    std::shared_ptr< monty::ndarray< double,1 > > _5505,    monty::rc_ptr< ::mosek::fusion::Expression > _5506){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5503(_5503 ? _5503->raw() : nullptr, _5503 ? _5503->size(0) : 0);
    _checked_ptr_1<int> _ptr__5504(_5504 ? _5504->raw() : nullptr, _5504 ? _5504->size(0) : 0);
    _checked_ptr_1<double> _ptr__5505(_5505 ? _5505->raw() : nullptr, _5505 ? _5505->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_5501,_5502,_5503,_5504,_5505,_5506,::mosek::fusion::p_ExprMulRight::validate(_5501,_5502,_5503,_5504,_5505,_5506));
  }
}void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5507,monty::rc_ptr< ::mosek::fusion::WorkStack > _5508,monty::rc_ptr< ::mosek::fusion::WorkStack > _5509) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_5507,_5508,_5509); }void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5507,monty::rc_ptr< ::mosek::fusion::WorkStack > _5508,monty::rc_ptr< ::mosek::fusion::WorkStack > _5509){
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_5508,_5507,_5509);
  _5508->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5510 = mosek::fusion::p_WorkStack::_get_impl(_5508)->i32;
  _checked_ptr_1<int> _ptr__5510(_5510 ? _5510->raw() : nullptr,_5510 ? _5510->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5511 = mosek::fusion::p_WorkStack::_get_impl(_5508)->i64;
  _checked_ptr_1<long long> _ptr__5511(_5511 ? _5511->raw() : nullptr,_5511 ? _5511->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5512 = mosek::fusion::p_WorkStack::_get_impl(_5508)->f64;
  _checked_ptr_1<double> _ptr__5512(_5512 ? _5512->raw() : nullptr,_5512 ? _5512->size(0) : 0);
  int _5513 = mosek::fusion::p_WorkStack::_get_impl(_5508)->nd;
  if ((_5513 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5514 = mosek::fusion::p_WorkStack::_get_impl(_5508)->nelem;
  int _5515 = mosek::fusion::p_WorkStack::_get_impl(_5508)->nnz;
  int _5516 = mosek::fusion::p_WorkStack::_get_impl(_5508)->ncodeatom;
  bool _5517 = mosek::fusion::p_WorkStack::_get_impl(_5508)->hassp;
  int _5518 = mosek::fusion::p_WorkStack::_get_impl(_5508)->ptr_base;
  int _5519 = mosek::fusion::p_WorkStack::_get_impl(_5508)->shape_base;
  int _5520 = mosek::fusion::p_WorkStack::_get_impl(_5508)->sp_base;
  int _5521 = mosek::fusion::p_WorkStack::_get_impl(_5508)->nidxs_base;
  int _5522 = mosek::fusion::p_WorkStack::_get_impl(_5508)->cof_base;
  int _5523 = mosek::fusion::p_WorkStack::_get_impl(_5508)->codeptr_base;
  int _5524 = mosek::fusion::p_WorkStack::_get_impl(_5508)->code_base;
  int _5525 = mosek::fusion::p_WorkStack::_get_impl(_5508)->cconst_base;
  int _5526 = _ptr__5510[_5519];
  int _5527 = _ptr__5510[safe_add( _5519,(int)1 )];
  int _5528 = (int)((mval)->size(0));
  bool _5529 = (_5528 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  if (_5529)
  {
    {
      int _5530 = _5509->alloci32(safe_add( mdim1,(int)1 ));
      int _5531 = _5509->alloci32(_5528);
      int _5532 = _5509->alloci32(safe_add( _5526,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5533 = mosek::fusion::p_WorkStack::_get_impl(_5509)->i32;
      _checked_ptr_1<int> _ptr__5533(_5533 ? _5533->raw() : nullptr,_5533 ? _5533->size(0) : 0);
      {
        int _11106 = (int)0;
        int _11107 = safe_add( mdim1,(int)1 );
        for (int _5534 = _11106; _5534 < _11107; ++_5534)
        {
          {
            _ptr__5533[safe_add( _5530,_5534 )] = (int)0;
          }
        }
        int _11108 = (int)0;
        int _11109 = _5528;
        for (int _5535 = _11108; _5535 < _11109; ++_5535)
        {
          {
            ++ _ptr__5533[safe_add( safe_add( _5530,((*msubj)(_5535)) ),(int)1 )];
          }
        }
        int _11110 = (int)0;
        int _11111 = mdim1;
        for (int _5536 = _11110; _5536 < _11111; ++_5536)
        {
          {
            _ptr__5533[safe_add( safe_add( _5530,_5536 ),(int)1 )] += _ptr__5533[safe_add( _5530,_5536 )];
          }
        }
        int _11112 = (int)0;
        int _11113 = _5528;
        for (int _5537 = _11112; _5537 < _11113; ++_5537)
        {
          {
            _ptr__5533[safe_add( _5531,_5537 )] = _ptr__5533[safe_add( _5530,((*msubj)(_5537)) )];
            ++ _ptr__5533[safe_add( _5530,((*msubj)(_5537)) )];
          }
        }
        int _11114 = (int)0;
        int _11115 = mdim1;
        for (int _5538 = _11114; _5538 < _11115; ++_5538)
        {
          {
            _ptr__5533[(safe_add( _5530,mdim1 ) - _5538)] = _ptr__5533[((safe_add( _5530,mdim1 ) - _5538) - (int)1)];
          }
        }
        _ptr__5533[_5530] = (int)0;
        int _11116 = (int)0;
        int _11117 = safe_add( _5526,(int)1 );
        for (int _5539 = _11116; _5539 < _11117; ++_5539)
        {
          {
            _ptr__5533[safe_add( _5532,_5539 )] = (int)0;
          }
        }
      }
      if (_5517)
      {
        {
          int _5540 = (int)0;
          int _5541 = (int)0;
          long long _5542 = (long long)0;
          {
            int _5543 = (int)0;
            while ( (_5543 < _5514) )
            {
              {
                long long _5544 = (_ptr__5511[safe_add( _5520,_5543 )] / _5527);
                int _5545 = _5543;
                ++ _5543;
                while ( ((_5543 > _5514) && ((_ptr__5511[safe_add( _5520,_5543 )] / _5527) == _5544)) )
                {
                  {
                    ++ _5543;
                  }
                }
                int _5546 = _5543;
                int _5547 = (int)0;
                while ( (_5547 < _5528) )
                {
                  {
                    int _5548 = ((*msubj)(_ptr__5533[safe_add( _5531,_5547 )]));
                    int _5549 = _5547;
                    ++ _5547;
                    while ( ((_5547 < _5528) && (((*msubj)(_ptr__5533[safe_add( _5531,_5547 )])) == _5548)) )
                    {
                      {
                        ++ _5547;
                      }
                    }
                    int _5550 = _5547;
                    bool _5551 = false;
                    int _5552 = _5549;
                    int _5553 = _5545;
                    while ( ((_5553 < _5546) && (_5552 < _5550)) )
                    {
                      {
                        int _5554 = _ptr__5533[safe_add( _5531,_5552 )];
                        if (((_ptr__5511[safe_add( _5520,_5553 )] % _5527) < ((*msubi)(_5554))))
                        {
                          {
                            ++ _5553;
                          }
                        }
                        else if(((_ptr__5511[safe_add( _5520,_5553 )] % _5527) > ((*msubi)(_5554))))
                        {
                          {
                            ++ _5552;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5554)) > (int)0) || ((int)0 < ((*mval)(_5554)))))
                            {
                              {
                                _5542 += (_ptr__5510[safe_add( safe_add( _5518,_5553 ),(int)1 )] - _ptr__5510[safe_add( _5518,_5553 )]);
                                if ((_5516 > (int)0))
                                {
                                  {
                                    _5540 += safe_add( (_ptr__5510[safe_add( _5523,_ptr__5510[safe_add( safe_add( _5518,_5553 ),(int)1 )] )] - _ptr__5510[safe_add( _5523,_ptr__5510[safe_add( _5518,_5553 )] )]),safe_mul( (int)2,(_ptr__5510[safe_add( safe_add( _5518,_5553 ),(int)1 )] - _ptr__5510[safe_add( _5518,_5553 )]) ) );
                                  }
                                }
                                {}
                                ++ _5553;
                                ++ _5552;
                                _5551 = true;
                              }
                            }
                            {}
                          }
                        }
                      }
                    }
                    if (_5551)
                    {
                      {
                        ++ _5541;
                      }
                    }
                    {}
                  }
                }
              }
            }
          }
          bool _5555 = (_5541 < safe_mul( _5526,mdim1 ));
          _5507->alloc_expr((int)2,_5541,(int)_5542,_5555,_5540);
          int _5556 = mosek::fusion::p_WorkStack::_get_impl(_5507)->ptr_base;
          int _5557 = mosek::fusion::p_WorkStack::_get_impl(_5507)->nidxs_base;
          int _11118;
          bool _11119 = _5555;
          if (_11119)
          {
            _11118 = mosek::fusion::p_WorkStack::_get_impl(_5507)->sp_base;
          }
          else
          {
            _11118 = _5507->alloci64(_5541);
          }
          int _5558 = _11118;
          int _5559 = mosek::fusion::p_WorkStack::_get_impl(_5507)->cof_base;
          int _5560 = mosek::fusion::p_WorkStack::_get_impl(_5507)->shape_base;
          int _5561 = mosek::fusion::p_WorkStack::_get_impl(_5507)->codeptr_base;
          int _5562 = mosek::fusion::p_WorkStack::_get_impl(_5507)->code_base;
          int _5563 = mosek::fusion::p_WorkStack::_get_impl(_5507)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _5564 = mosek::fusion::p_WorkStack::_get_impl(_5507)->i32;
          _checked_ptr_1<int> _ptr__5564(_5564 ? _5564->raw() : nullptr,_5564 ? _5564->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5565 = mosek::fusion::p_WorkStack::_get_impl(_5507)->i64;
          _checked_ptr_1<long long> _ptr__5565(_5565 ? _5565->raw() : nullptr,_5565 ? _5565->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5566 = mosek::fusion::p_WorkStack::_get_impl(_5507)->f64;
          _checked_ptr_1<double> _ptr__5566(_5566 ? _5566->raw() : nullptr,_5566 ? _5566->size(0) : 0);
          _ptr__5564[_5560] = _5526;
          _ptr__5564[safe_add( _5560,(int)1 )] = mdim1;
          _ptr__5564[_5556] = (int)0;
          if ((_5540 > (int)0))
          {
            {
              _ptr__5564[_5561] = (int)0;
            }
          }
          {}
          {
            int _5567 = (int)0;
            int _5568 = (int)0;
            int _5569 = (int)0;
            int _5570 = (int)0;
            while ( (_5567 < _5514) )
            {
              {
                long long _5571 = (_ptr__5511[safe_add( _5520,_5567 )] / _5527);
                int _5572 = _5567;
                ++ _5567;
                while ( ((_5567 > _5514) && ((_ptr__5511[safe_add( _5520,_5567 )] / _5527) == _5571)) )
                {
                  {
                    ++ _5567;
                  }
                }
                int _5573 = _5567;
                int _5574 = (int)0;
                while ( (_5574 < _5528) )
                {
                  {
                    int _5575 = ((*msubj)(_ptr__5533[safe_add( _5531,_5574 )]));
                    int _5576 = _5574;
                    ++ _5574;
                    while ( ((_5574 < _5528) && (((*msubj)(_ptr__5533[safe_add( _5531,_5574 )])) == _5575)) )
                    {
                      {
                        ++ _5574;
                      }
                    }
                    int _5577 = _5574;
                    int _5578 = _5576;
                    int _5579 = _5572;
                    bool _5580 = false;
                    while ( ((_5579 < _5573) && (_5578 < _5577)) )
                    {
                      {
                        int _5581 = _ptr__5533[safe_add( _5531,_5578 )];
                        if (((_ptr__5511[safe_add( _5520,_5579 )] % _5527) < ((*msubi)(_5581))))
                        {
                          {
                            ++ _5579;
                          }
                        }
                        else if(((_ptr__5511[safe_add( _5520,_5579 )] % _5527) > ((*msubi)(_5581))))
                        {
                          {
                            ++ _5578;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5581)) > (int)0) || ((int)0 < ((*mval)(_5581)))))
                            {
                              {
                                int _11120 = _ptr__5510[safe_add( _5518,_5579 )];
                                int _11121 = _ptr__5510[safe_add( safe_add( _5518,_5579 ),(int)1 )];
                                for (int _5582 = _11120; _5582 < _11121; ++_5582)
                                {
                                  {
                                    _ptr__5565[safe_add( _5557,_5570 )] = _ptr__5511[safe_add( _5521,_5582 )];
                                    _ptr__5566[safe_add( _5559,_5570 )] = (_ptr__5512[safe_add( _5522,_5582 )] * ((*mval)(_5581)));
                                    if ((_5516 > (int)0))
                                    {
                                      {
                                        int _11122 = _ptr__5510[safe_add( _5523,_5582 )];
                                        int _11123 = _ptr__5510[safe_add( safe_add( _5523,_5582 ),(int)1 )];
                                        for (int _5583 = _11122; _5583 < _11123; ++_5583)
                                        {
                                          {
                                            _ptr__5564[safe_add( _5562,_5568 )] = _ptr__5510[safe_add( _5524,_5583 )];
                                            _ptr__5566[safe_add( _5563,_5568 )] = _ptr__5512[safe_add( _5525,_5583 )];
                                            ++ _5568;
                                          }
                                        }
                                        _ptr__5564[safe_add( _5562,_5568 )] = 2;
                                        _ptr__5566[safe_add( _5563,_5568 )] = ((*mval)(_5578));
                                        ++ _5568;
                                        _ptr__5564[safe_add( _5562,_5568 )] = 5;
                                        ++ _5568;
                                        _ptr__5564[safe_add( safe_add( _5561,_5570 ),(int)1 )] = _5568;
                                      }
                                    }
                                    {}
                                    ++ _5570;
                                  }
                                }
                                ++ _5579;
                                ++ _5578;
                                _5580 = true;
                              }
                            }
                            {}
                          }
                        }
                      }
                    }
                    if (_5580)
                    {
                      {
                        _ptr__5564[safe_add( safe_add( _5556,_5569 ),(int)1 )] = _5570;
                        _ptr__5565[safe_add( _5558,_5569 )] = safe_add( safe_mul( _5571,mdim1 ),_5575 );
                        ++ _5569;
                      }
                    }
                    {}
                  }
                }
              }
            }
            if ((_5570 != _5542))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_5569 != _5541))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_ptr__5564[safe_add( _5556,_5541 )] != _5542))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
          }
          if ((!_5555))
          {
            {
              _5507->popi64(_5541);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _5584 = (int)0;
          int _5585 = safe_mul( _5526,mdim1 );
          int _5586 = (int)0;
          int _11124 = (int)0;
          int _11125 = _5526;
          for (int _5587 = _11124; _5587 < _11125; ++_5587)
          {
            {
              int _11126 = (int)0;
              int _11127 = mdim1;
              for (int _5588 = _11126; _5588 < _11127; ++_5588)
              {
                {
                  int _11128 = _ptr__5533[safe_add( _5530,_5588 )];
                  int _11129 = _ptr__5533[safe_add( safe_add( _5530,_5588 ),(int)1 )];
                  for (int _5589 = _11128; _5589 < _11129; ++_5589)
                  {
                    {
                      int _5590 = _ptr__5533[safe_add( _5531,_5589 )];
                      int _5591 = safe_add( safe_mul( _5587,_5527 ),((*msubi)(_5590)) );
                      _5586 += (_ptr__5510[safe_add( safe_add( _5518,_5591 ),(int)1 )] - _ptr__5510[safe_add( _5518,_5591 )]);
                      if ((_5516 > (int)0))
                      {
                        {
                          _5584 += safe_add( (_ptr__5510[safe_add( _5523,_ptr__5510[safe_add( safe_add( _5518,_5591 ),(int)1 )] )] - _ptr__5510[safe_add( _5523,_ptr__5510[safe_add( _5518,_5591 )] )]),safe_mul( (int)2,(_ptr__5510[safe_add( safe_add( _5518,_5591 ),(int)1 )] - _ptr__5510[safe_add( _5518,_5591 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          bool _5592 = (_5585 < safe_mul( _5526,mdim1 ));
          if ((!(_5586 <= (int)0x7fffffff)))
          {
            {
              throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
            }
          }
          {}
          _5507->alloc_expr((int)2,_5585,(int)_5586,_5592,_5584);
          int _5593 = mosek::fusion::p_WorkStack::_get_impl(_5507)->shape_base;
          int _5594 = mosek::fusion::p_WorkStack::_get_impl(_5507)->ptr_base;
          int _5595 = mosek::fusion::p_WorkStack::_get_impl(_5507)->nidxs_base;
          int _11130;
          bool _11131 = _5592;
          if (_11131)
          {
            _11130 = mosek::fusion::p_WorkStack::_get_impl(_5507)->sp_base;
          }
          else
          {
            _11130 = _5507->alloci64(_5585);
          }
          int _5596 = _11130;
          int _5597 = mosek::fusion::p_WorkStack::_get_impl(_5507)->cof_base;
          int _5598 = mosek::fusion::p_WorkStack::_get_impl(_5507)->code_base;
          int _5599 = mosek::fusion::p_WorkStack::_get_impl(_5507)->codeptr_base;
          int _5600 = mosek::fusion::p_WorkStack::_get_impl(_5507)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _5601 = mosek::fusion::p_WorkStack::_get_impl(_5507)->i32;
          _checked_ptr_1<int> _ptr__5601(_5601 ? _5601->raw() : nullptr,_5601 ? _5601->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5602 = mosek::fusion::p_WorkStack::_get_impl(_5507)->i64;
          _checked_ptr_1<long long> _ptr__5602(_5602 ? _5602->raw() : nullptr,_5602 ? _5602->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5603 = mosek::fusion::p_WorkStack::_get_impl(_5507)->f64;
          _checked_ptr_1<double> _ptr__5603(_5603 ? _5603->raw() : nullptr,_5603 ? _5603->size(0) : 0);
          _ptr__5601[_5593] = _5526;
          _ptr__5601[safe_add( _5593,(int)1 )] = mdim1;
          int _5604 = (int)0;
          int _5605 = (int)0;
          int _5606 = (int)0;
          _ptr__5601[_5594] = (int)0;
          if ((_5584 > (int)0))
          {
            {
              _ptr__5601[_5599] = (int)0;
            }
          }
          {}
          int _11132 = (int)0;
          int _11133 = _5526;
          for (int _5607 = _11132; _5607 < _11133; ++_5607)
          {
            {
              int _11134 = (int)0;
              int _11135 = mdim1;
              for (int _5608 = _11134; _5608 < _11135; ++_5608)
              {
                {
                  int _5609 = safe_mul( _5607,_5527 );
                  int _11136 = _ptr__5533[safe_add( _5530,_5608 )];
                  int _11137 = _ptr__5533[safe_add( safe_add( _5530,_5608 ),(int)1 )];
                  for (int _5610 = _11136; _5610 < _11137; ++_5610)
                  {
                    {
                      int _5611 = _ptr__5533[safe_add( _5531,_5610 )];
                      int _5612 = safe_add( _5609,((*msubi)(_5611)) );
                      if ((_5584 == (int)0))
                      {
                        {
                          int _11138 = _ptr__5510[safe_add( _5518,_5612 )];
                          int _11139 = _ptr__5510[safe_add( safe_add( _5518,_5612 ),(int)1 )];
                          for (int _5613 = _11138; _5613 < _11139; ++_5613)
                          {
                            {
                              _ptr__5602[safe_add( _5595,_5606 )] = _ptr__5511[safe_add( _5521,_5613 )];
                              _ptr__5603[safe_add( _5597,_5606 )] = (_ptr__5512[safe_add( _5522,_5613 )] * ((*mval)(_5611)));
                              ++ _5606;
                            }
                          }
                        }
                      }
                      else
                      {
                        {
                          int _11140 = _ptr__5510[safe_add( _5518,_5612 )];
                          int _11141 = _ptr__5510[safe_add( safe_add( _5518,_5612 ),(int)1 )];
                          for (int _5614 = _11140; _5614 < _11141; ++_5614)
                          {
                            {
                              _ptr__5602[safe_add( _5595,_5606 )] = _ptr__5511[safe_add( _5521,_5614 )];
                              _ptr__5603[safe_add( _5597,_5606 )] = (_ptr__5512[safe_add( _5522,_5614 )] * ((*mval)(_5611)));
                              int _11142 = _ptr__5510[safe_add( _5523,_5614 )];
                              int _11143 = _ptr__5510[safe_add( safe_add( _5523,_5614 ),(int)1 )];
                              for (int _5615 = _11142; _5615 < _11143; ++_5615)
                              {
                                {
                                  _ptr__5601[safe_add( _5598,_5604 )] = _ptr__5510[safe_add( _5524,_5615 )];
                                  _ptr__5603[safe_add( _5600,_5604 )] = _ptr__5512[safe_add( _5525,_5615 )];
                                  ++ _5604;
                                }
                              }
                              _ptr__5601[safe_add( _5598,_5604 )] = 2;
                              _ptr__5603[safe_add( _5600,_5604 )] = ((*mval)(_5611));
                              ++ _5604;
                              _ptr__5601[safe_add( _5598,_5604 )] = 5;
                              ++ _5604;
                              _ptr__5601[safe_add( safe_add( _5599,_5606 ),(int)1 )] = _5604;
                              ++ _5606;
                            }
                          }
                        }
                      }
                    }
                  }
                  _ptr__5601[safe_add( safe_add( _5594,_5605 ),(int)1 )] = _5606;
                  _ptr__5602[safe_add( _5596,_5605 )] = safe_add( safe_mul( _5607,mdim1 ),_5608 );
                  ++ _5605;
                }
              }
            }
          }
          if ((!_5592))
          {
            {
              _5507->popi64(_5585);
            }
          }
          {}
        }
      }
      _5509->clear();
    }
  }
  else
  {
    {
      int _5616 = _5509->alloci32(safe_add( _5526,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5617 = mosek::fusion::p_WorkStack::_get_impl(_5509)->i32;
      _checked_ptr_1<int> _ptr__5617(_5617 ? _5617->raw() : nullptr,_5617 ? _5617->size(0) : 0);
      int _11144 = (int)0;
      int _11145 = safe_add( _5526,(int)1 );
      for (int _5618 = _11144; _5618 < _11145; ++_5618)
      {
        {
          _ptr__5617[safe_add( _5616,_5618 )] = (int)0;
        }
      }
      long long _5619 = safe_mul( (long long)_5515,mdim1 );
      int _5620 = safe_mul( _5526,mdim1 );
      int _11146;
      bool _11147 = (_5516 == (int)0);
      if (_11147)
      {
        _11146 = (int)0;
      }
      else
      {
        _11146 = safe_mul( (int)_5619,(int)2 );
      }
      int _5621 = safe_add( safe_mul( _5516,mdim1 ),_11146 );
      bool _5622 = false;
      int _5623 = (int)2;
      if ((!(_5619 <= (int)0x7fffffff)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
        }
      }
      {}
      _5507->alloc_expr(_5623,_5620,(int)_5619,_5622,_5621);
      std::shared_ptr< monty::ndarray< int,1 > > _5624 = mosek::fusion::p_WorkStack::_get_impl(_5507)->i32;
      _checked_ptr_1<int> _ptr__5624(_5624 ? _5624->raw() : nullptr,_5624 ? _5624->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5625 = mosek::fusion::p_WorkStack::_get_impl(_5507)->i64;
      _checked_ptr_1<long long> _ptr__5625(_5625 ? _5625->raw() : nullptr,_5625 ? _5625->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5626 = mosek::fusion::p_WorkStack::_get_impl(_5507)->f64;
      _checked_ptr_1<double> _ptr__5626(_5626 ? _5626->raw() : nullptr,_5626 ? _5626->size(0) : 0);
      int _5627 = mosek::fusion::p_WorkStack::_get_impl(_5507)->shape_base;
      int _5628 = mosek::fusion::p_WorkStack::_get_impl(_5507)->ptr_base;
      int _5629 = mosek::fusion::p_WorkStack::_get_impl(_5507)->nidxs_base;
      int _5630 = mosek::fusion::p_WorkStack::_get_impl(_5507)->sp_base;
      int _5631 = mosek::fusion::p_WorkStack::_get_impl(_5507)->cof_base;
      int _5632 = mosek::fusion::p_WorkStack::_get_impl(_5507)->code_base;
      int _5633 = mosek::fusion::p_WorkStack::_get_impl(_5507)->codeptr_base;
      int _5634 = mosek::fusion::p_WorkStack::_get_impl(_5507)->cconst_base;
      _ptr__5624[_5627] = _5526;
      _ptr__5624[safe_add( _5627,(int)1 )] = mdim1;
      int _5635 = (int)0;
      int _5636 = (int)0;
      int _5637 = (int)0;
      _ptr__5624[_5628] = (int)0;
      if ((_5621 > (int)0))
      {
        {
          _ptr__5624[_5633] = (int)0;
        }
      }
      {}
      if (_5517)
      {
        {
          {
            int _11148 = (int)0;
            int _11149 = _5514;
            for (int _5638 = _11148; _5638 < _11149; ++_5638)
            {
              {
                ++ _ptr__5617[safe_add( safe_add( _5616,(_ptr__5511[safe_add( _5520,_5638 )] / _5527) ),(int)1 )];
              }
            }
            int _11150 = (int)0;
            int _11151 = _5526;
            for (int _5639 = _11150; _5639 < _11151; ++_5639)
            {
              {
                _ptr__5617[safe_add( safe_add( _5616,_5639 ),(int)1 )] += _ptr__5617[safe_add( _5616,_5639 )];
              }
            }
            int _11152 = (int)0;
            int _11153 = _5526;
            for (int _5640 = _11152; _5640 < _11153; ++_5640)
            {
              {
                int _11154 = (int)0;
                int _11155 = mdim1;
                for (int _5641 = _11154; _5641 < _11155; ++_5641)
                {
                  {
                    int _11156 = _ptr__5617[safe_add( _5616,_5640 )];
                    int _11157 = _ptr__5617[safe_add( safe_add( _5616,_5640 ),(int)1 )];
                    for (int _5642 = _11156; _5642 < _11157; ++_5642)
                    {
                      {
                        long long _5643 = safe_add( _5641,safe_mul( (_ptr__5511[safe_add( _5520,_5642 )] % _5527),mdim1 ) );
                        int _11158 = _ptr__5510[safe_add( _5518,_5642 )];
                        int _11159 = _ptr__5510[safe_add( safe_add( _5518,_5642 ),(int)1 )];
                        for (int _5644 = _11158; _5644 < _11159; ++_5644)
                        {
                          {
                            _ptr__5625[safe_add( _5629,_5636 )] = _ptr__5511[safe_add( _5521,_5644 )];
                            _ptr__5626[safe_add( _5631,_5636 )] = (_ptr__5512[safe_add( _5522,_5644 )] * ((*mval)(_5643)));
                            if ((_5516 > (int)0))
                            {
                              {
                                int _11160 = _ptr__5510[safe_add( _5523,_5644 )];
                                int _11161 = _ptr__5510[safe_add( safe_add( _5523,_5644 ),(int)1 )];
                                for (int _5645 = _11160; _5645 < _11161; ++_5645)
                                {
                                  {
                                    _ptr__5624[safe_add( _5632,_5635 )] = _ptr__5510[safe_add( _5524,_5645 )];
                                    _ptr__5626[safe_add( _5634,_5635 )] = _ptr__5512[safe_add( _5525,_5645 )];
                                    ++ _5635;
                                  }
                                }
                                _ptr__5624[safe_add( _5632,_5635 )] = 2;
                                _ptr__5626[safe_add( _5634,_5635 )] = ((*mval)(_5643));
                                ++ _5635;
                                _ptr__5624[safe_add( _5632,_5635 )] = 5;
                                ++ _5635;
                                _ptr__5624[safe_add( safe_add( _5633,_5636 ),(int)1 )] = _5635;
                              }
                            }
                            {}
                            ++ _5636;
                          }
                        }
                      }
                    }
                    _ptr__5624[safe_add( safe_add( _5628,_5637 ),(int)1 )] = _5636;
                    ++ _5637;
                  }
                }
              }
            }
          }
          if ((_5636 != _5619))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
          if ((_5637 != _5620))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_5635 != _5621))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num code atoms"));
            }
          }
          {}
        }
      }
      else
      {
        {
          int _11162 = (int)0;
          int _11163 = _5526;
          for (int _5646 = _11162; _5646 < _11163; ++_5646)
          {
            {
              int _11164 = (int)0;
              int _11165 = mdim1;
              for (int _5647 = _11164; _5647 < _11165; ++_5647)
              {
                {
                  int _11166 = (int)0;
                  int _11167 = _5527;
                  for (int _5648 = _11166; _5648 < _11167; ++_5648)
                  {
                    {
                      int _5649 = safe_add( safe_mul( _5646,_5527 ),_5648 );
                      int _5650 = safe_add( _5647,safe_mul( _5648,mdim1 ) );
                      int _11168 = _ptr__5510[safe_add( _5518,_5649 )];
                      int _11169 = _ptr__5510[safe_add( safe_add( _5518,_5649 ),(int)1 )];
                      for (int _5651 = _11168; _5651 < _11169; ++_5651)
                      {
                        {
                          _ptr__5625[safe_add( _5629,_5636 )] = _ptr__5511[safe_add( _5521,_5651 )];
                          _ptr__5626[safe_add( _5631,_5636 )] = (_ptr__5512[safe_add( _5522,_5651 )] * ((*mval)(_5650)));
                          if ((_5516 > (int)0))
                          {
                            {
                              int _11170 = _ptr__5510[safe_add( _5523,_5651 )];
                              int _11171 = _ptr__5510[safe_add( safe_add( _5523,_5651 ),(int)1 )];
                              for (int _5652 = _11170; _5652 < _11171; ++_5652)
                              {
                                {
                                  _ptr__5624[safe_add( _5632,_5635 )] = _ptr__5510[safe_add( _5524,_5652 )];
                                  _ptr__5626[safe_add( _5634,_5635 )] = _ptr__5512[safe_add( _5525,_5652 )];
                                  ++ _5635;
                                }
                              }
                              _ptr__5624[safe_add( _5632,_5635 )] = 2;
                              _ptr__5626[safe_add( _5634,_5635 )] = ((*mval)(_5650));
                              ++ _5635;
                              _ptr__5624[safe_add( _5632,_5635 )] = 5;
                              ++ _5635;
                              _ptr__5624[safe_add( safe_add( _5633,_5636 ),(int)1 )] = _5635;
                            }
                          }
                          {}
                          ++ _5636;
                        }
                      }
                    }
                  }
                  _ptr__5624[safe_add( safe_add( _5628,_5637 ),(int)1 )] = _5636;
                  ++ _5637;
                }
              }
            }
          }
        }
      }
      _5509->clear();
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulRight::computeshape(int _5653,std::shared_ptr< monty::ndarray< int,1 > > _5654){
  _checked_ptr_1<int> _ptr__5654(_5654 ? _5654->raw() : nullptr, _5654 ? _5654->size(0) : 0);
  if (((int)((_5654)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_5653)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5654[(int)0]),(int)(_5653)});
    }
  }
}
int mosek::fusion::p_ExprMulRight::validate(int _5655,int _5656,std::shared_ptr< monty::ndarray< int,1 > > _5657,std::shared_ptr< monty::ndarray< int,1 > > _5658,std::shared_ptr< monty::ndarray< double,1 > > _5659,monty::rc_ptr< ::mosek::fusion::Expression > _5660){
  _checked_ptr_1<int> _ptr__5657(_5657 ? _5657->raw() : nullptr, _5657 ? _5657->size(0) : 0);
  _checked_ptr_1<int> _ptr__5658(_5658 ? _5658->raw() : nullptr, _5658 ? _5658->size(0) : 0);
  _checked_ptr_1<double> _ptr__5659(_5659 ? _5659->raw() : nullptr, _5659 ? _5659->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5661 = _5660->getShape();
  _checked_ptr_1<int> _ptr__5661(_5661 ? _5661->raw() : nullptr,_5661 ? _5661->size(0) : 0);
  if (((int)((_5661)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5662 = _ptr__5661[(int)0];
  int _5663 = _ptr__5661[(int)1];
  if (((_5655 < (int)0) || ((_5656 < (int)0) || ((_5662 < (int)0) || (_5663 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5655 != _5663))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5657)->size(0)) != (int)((_5658)->size(0))) || ((int)((_5657)->size(0)) != (int)((_5659)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5664 = (int)((_5657)->size(0));
  {
    bool _5665 = false;
    int _11172 = (int)0;
    int _11173 = _5664;
    for (int _5666 = _11172; _5666 < _11173; ++_5666)
    {
      {
        _5665 = (_5665 || ((_ptr__5657[_5666] < (int)0) || ((_ptr__5657[_5666] >= _5655) || ((_ptr__5658[_5666] < (int)0) || (_ptr__5658[_5666] >= _5656)))));
      }
    }
    if (_5665)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _5667 = false;
    int _11174 = (int)0;
    int _11175 = (_5664 - (int)1);
    for (int _5668 = _11174; _5668 < _11175; ++_5668)
    {
      {
        _5667 = (_5667 || ((_ptr__5657[_5668] > _ptr__5657[safe_add( _5668,(int)1 )]) || ((_ptr__5657[_5668] == _ptr__5657[safe_add( _5668,(int)1 )]) && (_ptr__5658[_5668] >= _ptr__5658[safe_add( _5668,(int)1 )]))));
      }
    }
    if (_5667)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulLeft::p_ExprMulLeft  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _5669,    int _5670,    std::shared_ptr< monty::ndarray< int,1 > > _5671,    std::shared_ptr< monty::ndarray< int,1 > > _5672,    std::shared_ptr< monty::ndarray< double,1 > > _5673,    monty::rc_ptr< ::mosek::fusion::Expression > _5674,    int _5675){ return new mosek::fusion::ExprMulLeft(_5669,_5670,_5671,_5672,_5673,_5674,_5675); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _5669,    int _5670,    std::shared_ptr< monty::ndarray< int,1 > > _5671,    std::shared_ptr< monty::ndarray< int,1 > > _5672,    std::shared_ptr< monty::ndarray< double,1 > > _5673,    monty::rc_ptr< ::mosek::fusion::Expression > _5674,    int _5675) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5669,_5670,_5671,_5672,_5673,_5674,_5675); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _5669,    int _5670,    std::shared_ptr< monty::ndarray< int,1 > > _5671,    std::shared_ptr< monty::ndarray< int,1 > > _5672,    std::shared_ptr< monty::ndarray< double,1 > > _5673,    monty::rc_ptr< ::mosek::fusion::Expression > _5674,    int _5675){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5671(_5671 ? _5671->raw() : nullptr, _5671 ? _5671->size(0) : 0);
    _checked_ptr_1<int> _ptr__5672(_5672 ? _5672->raw() : nullptr, _5672 ? _5672->size(0) : 0);
    _checked_ptr_1<double> _ptr__5673(_5673 ? _5673->raw() : nullptr, _5673 ? _5673->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_5669,_5670,_5674->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _5669;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _5670;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _5671;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _5672;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _5673;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _5674;
  }
}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _5676,    int _5677,    std::shared_ptr< monty::ndarray< int,1 > > _5678,    std::shared_ptr< monty::ndarray< int,1 > > _5679,    std::shared_ptr< monty::ndarray< double,1 > > _5680,    monty::rc_ptr< ::mosek::fusion::Expression > _5681){ return new mosek::fusion::ExprMulLeft(_5676,_5677,_5678,_5679,_5680,_5681); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _5676,    int _5677,    std::shared_ptr< monty::ndarray< int,1 > > _5678,    std::shared_ptr< monty::ndarray< int,1 > > _5679,    std::shared_ptr< monty::ndarray< double,1 > > _5680,    monty::rc_ptr< ::mosek::fusion::Expression > _5681) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5676,_5677,_5678,_5679,_5680,_5681); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _5676,    int _5677,    std::shared_ptr< monty::ndarray< int,1 > > _5678,    std::shared_ptr< monty::ndarray< int,1 > > _5679,    std::shared_ptr< monty::ndarray< double,1 > > _5680,    monty::rc_ptr< ::mosek::fusion::Expression > _5681){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5678(_5678 ? _5678->raw() : nullptr, _5678 ? _5678->size(0) : 0);
    _checked_ptr_1<int> _ptr__5679(_5679 ? _5679->raw() : nullptr, _5679 ? _5679->size(0) : 0);
    _checked_ptr_1<double> _ptr__5680(_5680 ? _5680->raw() : nullptr, _5680 ? _5680->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_5676,_5677,_5678,_5679,_5680,_5681,::mosek::fusion::p_ExprMulLeft::validate(_5676,_5677,_5678,_5679,_5680,_5681));
  }
}void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5682,monty::rc_ptr< ::mosek::fusion::WorkStack > _5683,monty::rc_ptr< ::mosek::fusion::WorkStack > _5684) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_5682,_5683,_5684); }void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5682,monty::rc_ptr< ::mosek::fusion::WorkStack > _5683,monty::rc_ptr< ::mosek::fusion::WorkStack > _5684){
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_5683,_5682,_5684);
  _5683->pop_expr();
  int _5685 = mosek::fusion::p_WorkStack::_get_impl(_5683)->nd;
  int _5686 = mosek::fusion::p_WorkStack::_get_impl(_5683)->nnz;
  int _5687 = mosek::fusion::p_WorkStack::_get_impl(_5683)->nelem;
  int _5688 = mosek::fusion::p_WorkStack::_get_impl(_5683)->ncodeatom;
  bool _5689 = mosek::fusion::p_WorkStack::_get_impl(_5683)->hassp;
  int _5690 = mosek::fusion::p_WorkStack::_get_impl(_5683)->shape_base;
  int _5691 = mosek::fusion::p_WorkStack::_get_impl(_5683)->ptr_base;
  int _5692 = mosek::fusion::p_WorkStack::_get_impl(_5683)->sp_base;
  int _5693 = mosek::fusion::p_WorkStack::_get_impl(_5683)->nidxs_base;
  int _5694 = mosek::fusion::p_WorkStack::_get_impl(_5683)->cof_base;
  int _5695 = mosek::fusion::p_WorkStack::_get_impl(_5683)->codeptr_base;
  int _5696 = mosek::fusion::p_WorkStack::_get_impl(_5683)->code_base;
  int _5697 = mosek::fusion::p_WorkStack::_get_impl(_5683)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5698 = mosek::fusion::p_WorkStack::_get_impl(_5683)->i32;
  _checked_ptr_1<int> _ptr__5698(_5698 ? _5698->raw() : nullptr,_5698 ? _5698->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5699 = mosek::fusion::p_WorkStack::_get_impl(_5683)->i64;
  _checked_ptr_1<long long> _ptr__5699(_5699 ? _5699->raw() : nullptr,_5699 ? _5699->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5700 = mosek::fusion::p_WorkStack::_get_impl(_5683)->f64;
  _checked_ptr_1<double> _ptr__5700(_5700 ? _5700->raw() : nullptr,_5700 ? _5700->size(0) : 0);
  if ((_5685 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5701 = (int)9999;
  int _5702 = (int)9999;
  int _5703 = (int)9999;
  int _5704 = _ptr__5698[_5690];
  int _5705 = _ptr__5698[safe_add( _5690,(int)1 )];
  int _5706 = (int)((msubi)->size(0));
  bool _5707 = (_5706 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  bool _5708 = false;
  int _5709 = (int)0;
  int _5710 = (int)0;
  long long _5711 = (long long)0;
  if (_5689)
  {
    {
      _5701 = _5684->alloci32(_5687);
      _5702 = _5684->alloci32(_5687);
      _5703 = _5684->alloci32(safe_add( _5705,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5712 = mosek::fusion::p_WorkStack::_get_impl(_5684)->i32;
      _checked_ptr_1<int> _ptr__5712(_5712 ? _5712->raw() : nullptr,_5712 ? _5712->size(0) : 0);
      {
        int _11176 = (int)0;
        int _11177 = safe_add( _5705,(int)1 );
        for (int _5713 = _11176; _5713 < _11177; ++_5713)
        {
          {
            _ptr__5712[safe_add( _5703,_5713 )] = (int)0;
          }
        }
        int _11178 = (int)0;
        int _11179 = _5687;
        for (int _5714 = _11178; _5714 < _11179; ++_5714)
        {
          {
            ++ _ptr__5712[safe_add( safe_add( _5703,(_ptr__5699[safe_add( _5692,_5714 )] % _5705) ),(int)1 )];
          }
        }
        int _11180 = (int)0;
        int _11181 = _5705;
        for (int _5715 = _11180; _5715 < _11181; ++_5715)
        {
          {
            _ptr__5712[safe_add( safe_add( _5703,_5715 ),(int)1 )] += _ptr__5712[safe_add( _5703,_5715 )];
          }
        }
        int _11182 = (int)0;
        int _11183 = _5687;
        for (int _5716 = _11182; _5716 < _11183; ++_5716)
        {
          {
            long long _5717 = (_ptr__5699[safe_add( _5692,_5716 )] % _5705);
            _ptr__5712[safe_add( _5701,_ptr__5712[safe_add( _5703,_5717 )] )] = _5716;
            ++ _ptr__5712[safe_add( _5703,_5717 )];
          }
        }
        int _11184 = (int)0;
        int _11185 = _5705;
        for (int _5718 = _11184; _5718 < _11185; ++_5718)
        {
          {
            _ptr__5712[(safe_add( _5703,_5705 ) - _5718)] = _ptr__5712[((safe_add( _5703,_5705 ) - _5718) - (int)1)];
          }
        }
        _ptr__5712[_5703] = (int)0;
      }
      if (_5707)
      {
        {
          int _5719 = (int)0;
          while ( (_5719 < _5706) )
          {
            {
              int _5720 = ((*msubi)(_5719));
              int _5721 = safe_add( _5719,(int)1 );
              while ( ((_5721 < _5706) && (((*msubi)(_5721)) == ((*msubi)(_5719)))) )
              {
                {
                  ++ _5721;
                }
              }
              int _11186 = (int)0;
              int _11187 = _5705;
              for (int _5722 = _11186; _5722 < _11187; ++_5722)
              {
                {
                  bool _5723 = false;
                  int _5724 = _5721;
                  int _5725 = _5719;
                  int _5726 = _ptr__5712[safe_add( safe_add( _5703,_5722 ),(int)1 )];
                  int _5727 = _ptr__5712[safe_add( _5703,_5722 )];
                  while ( ((_5725 < _5724) && (_5727 < _5726)) )
                  {
                    {
                      int _5728 = _ptr__5712[safe_add( _5701,_5727 )];
                      if ((((*msubj)(_5725)) < (_ptr__5699[safe_add( _5692,_5728 )] / _5705)))
                      {
                        {
                          ++ _5725;
                        }
                      }
                      else if((((*msubj)(_5725)) > (_ptr__5699[safe_add( _5692,_5728 )] / _5705)))
                      {
                        {
                          ++ _5727;
                        }
                      }
                      else
                      {
                        {
                          _5723 = true;
                          _5711 += (_ptr__5698[safe_add( safe_add( _5691,_5728 ),(int)1 )] - _ptr__5698[safe_add( _5691,_5728 )]);
                          if ((_5688 > (int)0))
                          {
                            {
                              _5709 += safe_add( (_ptr__5698[safe_add( _5695,_ptr__5698[safe_add( safe_add( _5691,_5728 ),(int)1 )] )] - _ptr__5698[safe_add( _5695,_ptr__5698[safe_add( _5691,_5728 )] )]),safe_mul( (int)2,(_ptr__5698[safe_add( safe_add( _5691,_5728 ),(int)1 )] - _ptr__5698[safe_add( _5691,_5728 )]) ) );
                            }
                          }
                          {}
                          ++ _5727;
                          ++ _5725;
                        }
                      }
                    }
                  }
                  if (_5723)
                  {
                    {
                      ++ _5710;
                    }
                  }
                  {}
                }
              }
              _5719 = _5721;
            }
          }
        }
      }
      else
      {
        {
          _5710 = safe_mul( mdim0,_5705 );
          _5711 = safe_mul( (long long)_5686,mdim0 );
          if ((_5688 > (int)0))
          {
            {
              _5709 = (int)safe_add( safe_mul( _5688,mdim0 ),safe_mul( (int)2,_5711 ) );
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      if (_5707)
      {
        {
          int _5729 = (int)0;
          while ( (_5729 < _5706) )
          {
            {
              int _5730 = safe_add( _5729,(int)1 );
              while ( ((_5730 < _5706) && (((*msubi)(_5729)) == ((*msubi)(_5730)))) )
              {
                {
                  ++ _5730;
                }
              }
              int _5731 = ((*msubi)(_5729));
              int _11188 = (int)0;
              int _11189 = _5705;
              for (int _5732 = _11188; _5732 < _11189; ++_5732)
              {
                {
                  bool _5733 = false;
                  int _11190 = _5729;
                  int _11191 = _5730;
                  for (int _5734 = _11190; _5734 < _11191; ++_5734)
                  {
                    {
                      int _5735 = safe_add( safe_mul( ((*msubj)(_5734)),_5705 ),_5732 );
                      _5711 += (_ptr__5698[safe_add( safe_add( _5691,_5735 ),(int)1 )] - _ptr__5698[safe_add( _5691,_5735 )]);
                      if ((_5688 > (int)0))
                      {
                        {
                          _5709 += safe_add( (_ptr__5698[safe_add( _5695,_ptr__5698[safe_add( safe_add( _5691,_5735 ),(int)1 )] )] - _ptr__5698[safe_add( _5695,_ptr__5698[safe_add( _5691,_5735 )] )]),safe_mul( (int)2,(_ptr__5698[safe_add( safe_add( _5691,_5735 ),(int)1 )] - _ptr__5698[safe_add( _5691,_5735 )]) ) );
                        }
                      }
                      {}
                      _5733 = true;
                    }
                  }
                  if (_5733)
                  {
                    {
                      ++ _5710;
                    }
                  }
                  {}
                }
              }
              _5729 = _5730;
            }
          }
        }
      }
      else
      {
        {
          _5711 = safe_mul( (long long)_5686,mdim0 );
          if ((_5688 > (int)0))
          {
            {
              _5709 = (int)safe_add( safe_mul( _5688,mdim0 ),safe_mul( (int)2,_5711 ) );
            }
          }
          {}
          _5710 = safe_mul( mdim0,_5705 );
        }
      }
    }
  }
  if ((!(_5711 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
    }
  }
  {}
  _5708 = (_5710 < safe_mul( mdim0,_5705 ));
  int _5736 = (int)2;
  _5682->alloc_expr(_5736,_5710,(int)_5711,_5708,_5709);
  int _5737 = mosek::fusion::p_WorkStack::_get_impl(_5682)->ptr_base;
  int _5738 = mosek::fusion::p_WorkStack::_get_impl(_5682)->nidxs_base;
  int _11192;
  bool _11193 = _5708;
  if (_11193)
  {
    _11192 = mosek::fusion::p_WorkStack::_get_impl(_5682)->sp_base;
  }
  else
  {
    _11192 = _5682->alloci64(_5710);
  }
  int _5739 = _11192;
  int _5740 = mosek::fusion::p_WorkStack::_get_impl(_5682)->cof_base;
  int _5741 = mosek::fusion::p_WorkStack::_get_impl(_5682)->shape_base;
  int _5742 = mosek::fusion::p_WorkStack::_get_impl(_5682)->code_base;
  int _5743 = mosek::fusion::p_WorkStack::_get_impl(_5682)->codeptr_base;
  int _5744 = mosek::fusion::p_WorkStack::_get_impl(_5682)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _5745 = mosek::fusion::p_WorkStack::_get_impl(_5682)->i64;
  _checked_ptr_1<long long> _ptr__5745(_5745 ? _5745->raw() : nullptr,_5745 ? _5745->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5746 = mosek::fusion::p_WorkStack::_get_impl(_5682)->f64;
  _checked_ptr_1<double> _ptr__5746(_5746 ? _5746->raw() : nullptr,_5746 ? _5746->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5747 = mosek::fusion::p_WorkStack::_get_impl(_5682)->i32;
  _checked_ptr_1<int> _ptr__5747(_5747 ? _5747->raw() : nullptr,_5747 ? _5747->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5748 = mosek::fusion::p_WorkStack::_get_impl(_5684)->i32;
  _checked_ptr_1<int> _ptr__5748(_5748 ? _5748->raw() : nullptr,_5748 ? _5748->size(0) : 0);
  _ptr__5747[_5741] = mdim0;
  _ptr__5747[safe_add( _5741,(int)1 )] = _5705;
  _ptr__5747[_5737] = (int)0;
  if ((_5709 > (int)0))
  {
    {
      _ptr__5747[_5743] = (int)0;
    }
  }
  {}
  if (_5689)
  {
    {
      if (_5707)
      {
        {
          int _5749 = (int)0;
          int _5750 = (int)0;
          int _5751 = (int)0;
          int _5752 = (int)0;
          while ( (_5752 < _5706) )
          {
            {
              int _5753 = ((*msubi)(_5752));
              int _5754 = safe_add( _5752,(int)1 );
              while ( ((_5754 < _5706) && (((*msubi)(_5754)) == ((*msubi)(_5752)))) )
              {
                {
                  ++ _5754;
                }
              }
              int _11194 = (int)0;
              int _11195 = _5705;
              for (int _5755 = _11194; _5755 < _11195; ++_5755)
              {
                {
                  bool _5756 = false;
                  int _5757 = _5754;
                  int _5758 = _5752;
                  int _5759 = _ptr__5748[safe_add( safe_add( _5703,_5755 ),(int)1 )];
                  int _5760 = _ptr__5748[safe_add( _5703,_5755 )];
                  while ( ((_5758 < _5757) && (_5760 < _5759)) )
                  {
                    {
                      int _5761 = _ptr__5748[safe_add( _5701,_5760 )];
                      if ((((*msubj)(_5758)) < (_ptr__5699[safe_add( _5692,_5761 )] / _5705)))
                      {
                        {
                          ++ _5758;
                        }
                      }
                      else if((((*msubj)(_5758)) > (_ptr__5699[safe_add( _5692,_5761 )] / _5705)))
                      {
                        {
                          ++ _5760;
                        }
                      }
                      else
                      {
                        {
                          _5756 = true;
                          int _11196 = _ptr__5698[safe_add( _5691,_5761 )];
                          int _11197 = _ptr__5698[safe_add( safe_add( _5691,_5761 ),(int)1 )];
                          for (int _5762 = _11196; _5762 < _11197; ++_5762)
                          {
                            {
                              _ptr__5745[safe_add( _5738,_5751 )] = _ptr__5699[safe_add( _5693,_5762 )];
                              _ptr__5746[safe_add( _5740,_5751 )] = (_ptr__5700[safe_add( _5694,_5762 )] * ((*mval)(_5758)));
                              if ((_5709 > (int)0))
                              {
                                {
                                  int _11198 = _ptr__5698[safe_add( _5695,_5762 )];
                                  int _11199 = _ptr__5698[safe_add( safe_add( _5695,_5762 ),(int)1 )];
                                  for (int _5763 = _11198; _5763 < _11199; ++_5763)
                                  {
                                    {
                                      _ptr__5747[safe_add( _5742,_5749 )] = _ptr__5698[safe_add( _5696,_5763 )];
                                      _ptr__5746[safe_add( _5744,_5749 )] = _ptr__5746[safe_add( _5697,_5763 )];
                                      ++ _5749;
                                    }
                                  }
                                  _ptr__5747[safe_add( _5742,_5749 )] = 2;
                                  _ptr__5746[safe_add( _5744,_5749 )] = ((*mval)(_5758));
                                  ++ _5749;
                                  _ptr__5747[safe_add( _5742,_5749 )] = 5;
                                  _ptr__5747[safe_add( safe_add( _5743,_5751 ),(int)1 )] = _5749;
                                }
                              }
                              {}
                              ++ _5751;
                            }
                          }
                          ++ _5758;
                          ++ _5760;
                        }
                      }
                    }
                  }
                  if (_5756)
                  {
                    {
                      _ptr__5747[safe_add( safe_add( _5737,_5750 ),(int)1 )] = _5751;
                      _ptr__5745[safe_add( _5739,_5750 )] = safe_add( safe_mul( _5753,_5705 ),_5755 );
                      ++ _5750;
                    }
                  }
                  {}
                }
              }
              _5752 = _5754;
            }
          }
        }
      }
      else
      {
        {
          int _5764 = (int)0;
          int _5765 = (int)0;
          int _5766 = (int)0;
          int _11200 = (int)0;
          int _11201 = mdim0;
          for (int _5767 = _11200; _5767 < _11201; ++_5767)
          {
            {
              int _11202 = (int)0;
              int _11203 = _5705;
              for (int _5768 = _11202; _5768 < _11203; ++_5768)
              {
                {
                  int _11204 = _ptr__5748[safe_add( _5703,_5768 )];
                  int _11205 = _ptr__5748[safe_add( safe_add( _5703,_5768 ),(int)1 )];
                  for (int _5769 = _11204; _5769 < _11205; ++_5769)
                  {
                    {
                      int _5770 = _ptr__5748[safe_add( _5701,_5769 )];
                      long long _5771 = safe_add( safe_mul( _5767,mdim1 ),(_ptr__5699[safe_add( _5692,_5770 )] / _5705) );
                      int _11206 = _ptr__5698[safe_add( _5691,_5770 )];
                      int _11207 = _ptr__5698[safe_add( safe_add( _5691,_5770 ),(int)1 )];
                      for (int _5772 = _11206; _5772 < _11207; ++_5772)
                      {
                        {
                          _ptr__5745[safe_add( _5738,_5766 )] = _ptr__5699[safe_add( _5693,_5772 )];
                          _ptr__5746[safe_add( _5740,_5766 )] = (_ptr__5700[safe_add( _5694,_5772 )] * ((*mval)(_5771)));
                          if ((_5709 > (int)0))
                          {
                            {
                              int _11208 = _ptr__5698[safe_add( _5695,_5772 )];
                              int _11209 = _ptr__5698[safe_add( safe_add( _5695,_5772 ),(int)1 )];
                              for (int _5773 = _11208; _5773 < _11209; ++_5773)
                              {
                                {
                                  _ptr__5747[safe_add( _5742,_5764 )] = _ptr__5698[safe_add( _5696,_5773 )];
                                  _ptr__5746[safe_add( _5744,_5764 )] = _ptr__5700[safe_add( _5697,_5773 )];
                                  ++ _5764;
                                }
                              }
                              _ptr__5747[safe_add( _5742,_5764 )] = 2;
                              _ptr__5746[safe_add( _5744,_5764 )] = ((*mval)(_5771));
                              ++ _5764;
                              _ptr__5747[safe_add( _5742,_5764 )] = 5;
                              ++ _5764;
                              _ptr__5747[safe_add( safe_add( _5743,_5766 ),(int)1 )] = _5764;
                            }
                          }
                          {}
                          ++ _5766;
                        }
                      }
                    }
                  }
                  _ptr__5747[safe_add( safe_add( _5737,_5765 ),(int)1 )] = _5766;
                  ++ _5765;
                }
              }
            }
          }
          if ((_5765 != _5710))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
            }
          }
          {}
          if ((_5766 != _5711))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
            }
          }
          {}
          if ((_5764 != _5709))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _5774 = (int)0;
      int _5775 = (int)0;
      int _5776 = (int)0;
      int _5777 = (int)0;
      while ( (_5775 < _5706) )
      {
        {
          int _5778 = safe_add( _5775,(int)1 );
          while ( ((_5778 < _5706) && (((*msubi)(_5775)) == ((*msubi)(_5778)))) )
          {
            {
              ++ _5778;
            }
          }
          int _5779 = ((*msubi)(_5775));
          int _11210 = (int)0;
          int _11211 = _5705;
          for (int _5780 = _11210; _5780 < _11211; ++_5780)
          {
            {
              bool _5781 = false;
              int _11212 = _5775;
              int _11213 = _5778;
              for (int _5782 = _11212; _5782 < _11213; ++_5782)
              {
                {
                  int _5783 = safe_add( safe_mul( ((*msubj)(_5782)),_5705 ),_5780 );
                  int _11214 = _ptr__5698[safe_add( _5691,_5783 )];
                  int _11215 = _ptr__5698[safe_add( safe_add( _5691,_5783 ),(int)1 )];
                  for (int _5784 = _11214; _5784 < _11215; ++_5784)
                  {
                    {
                      _ptr__5745[safe_add( _5738,_5777 )] = _ptr__5699[safe_add( _5693,_5784 )];
                      _ptr__5746[safe_add( _5740,_5777 )] = (_ptr__5700[safe_add( _5694,_5784 )] * ((*mval)(_5782)));
                      if ((_5709 > (int)0))
                      {
                        {
                          int _11216 = _ptr__5698[safe_add( _5695,_5784 )];
                          int _11217 = _ptr__5698[safe_add( safe_add( _5695,_5784 ),(int)1 )];
                          for (int _5785 = _11216; _5785 < _11217; ++_5785)
                          {
                            {
                              _ptr__5747[safe_add( _5742,_5774 )] = _ptr__5698[safe_add( _5696,_5785 )];
                              _ptr__5746[safe_add( _5744,_5774 )] = _ptr__5700[safe_add( _5697,_5785 )];
                              ++ _5774;
                            }
                          }
                          _ptr__5747[safe_add( _5742,_5774 )] = 2;
                          _ptr__5746[safe_add( _5744,_5774 )] = ((*mval)(_5782));
                          ++ _5774;
                          _ptr__5747[safe_add( _5742,_5774 )] = 5;
                          ++ _5774;
                          _ptr__5747[safe_add( safe_add( _5743,_5777 ),(int)1 )] = _5774;
                        }
                      }
                      {}
                      ++ _5777;
                    }
                  }
                  _5781 = true;
                }
              }
              if (_5781)
              {
                {
                  _ptr__5745[safe_add( _5739,_5776 )] = safe_add( safe_mul( _5779,_5705 ),_5780 );
                  _ptr__5747[safe_add( safe_add( _5737,_5776 ),(int)1 )] = _5777;
                  ++ _5776;
                }
              }
              {}
            }
          }
          _5775 = _5778;
        }
      }
      if ((_5776 != _5710))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
        }
      }
      {}
      if ((_5777 != _5711))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
        }
      }
      {}
      if ((_5774 != _5709))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
        }
      }
      {}
    }
  }
  if ((!_5708))
  {
    {
      _5682->popi64(_5710);
    }
  }
  {}
  _5684->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int _5786,int _5787,std::shared_ptr< monty::ndarray< int,1 > > _5788){
  _checked_ptr_1<int> _ptr__5788(_5788 ? _5788->raw() : nullptr, _5788 ? _5788->size(0) : 0);
  if (((int)((_5788)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_5787 != _ptr__5788[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5786),(int)(_ptr__5788[(int)1])});
}
int mosek::fusion::p_ExprMulLeft::validate(int _5789,int _5790,std::shared_ptr< monty::ndarray< int,1 > > _5791,std::shared_ptr< monty::ndarray< int,1 > > _5792,std::shared_ptr< monty::ndarray< double,1 > > _5793,monty::rc_ptr< ::mosek::fusion::Expression > _5794){
  _checked_ptr_1<int> _ptr__5791(_5791 ? _5791->raw() : nullptr, _5791 ? _5791->size(0) : 0);
  _checked_ptr_1<int> _ptr__5792(_5792 ? _5792->raw() : nullptr, _5792 ? _5792->size(0) : 0);
  _checked_ptr_1<double> _ptr__5793(_5793 ? _5793->raw() : nullptr, _5793 ? _5793->size(0) : 0);
  if ((_5794->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5795 = _5794->getDim((int)0);
  int _5796 = _5794->getDim((int)0);
  if (((_5789 < (int)0) || (_5790 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5790 != _5795))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5791)->size(0)) != (int)((_5792)->size(0))) || ((int)((_5791)->size(0)) != (int)((_5793)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5797 = (int)((_5791)->size(0));
  bool _5798 = false;
  bool _5799 = false;
  {
    int _11218 = (int)0;
    int _11219 = _5797;
    for (int _5800 = _11218; _5800 < _11219; ++_5800)
    {
      {
        _5798 = (_5798 || ((_ptr__5791[_5800] < (int)0) || ((_ptr__5791[_5800] >= _5789) || ((_ptr__5792[_5800] < (int)0) || (_ptr__5792[_5800] >= _5790)))));
      }
    }
    if ((!_5798))
    {
      {
        int _11220 = (int)0;
        int _11221 = (_5797 - (int)1);
        for (int _5801 = _11220; _5801 < _11221; ++_5801)
        {
          {
            _5799 = (_5799 || ((_ptr__5791[_5801] > _ptr__5791[safe_add( _5801,(int)1 )]) || ((_ptr__5791[_5801] == _ptr__5791[safe_add( _5801,(int)1 )]) && (_ptr__5792[_5801] >= _ptr__5792[safe_add( _5801,(int)1 )]))));
          }
        }
      }
    }
    {}
  }
  if (_5798)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5799)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVar::p_ExprMulVar  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _5802,    int _5803,    int _5804,    std::shared_ptr< monty::ndarray< int,1 > > _5805,    std::shared_ptr< monty::ndarray< int,1 > > _5806,    std::shared_ptr< monty::ndarray< double,1 > > _5807,    monty::rc_ptr< ::mosek::fusion::Variable > _5808){ return new mosek::fusion::ExprMulVar(_5802,_5803,_5804,_5805,_5806,_5807,_5808); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _5802,    int _5803,    int _5804,    std::shared_ptr< monty::ndarray< int,1 > > _5805,    std::shared_ptr< monty::ndarray< int,1 > > _5806,    std::shared_ptr< monty::ndarray< double,1 > > _5807,    monty::rc_ptr< ::mosek::fusion::Variable > _5808) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_5802,_5803,_5804,_5805,_5806,_5807,_5808); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _5802,    int _5803,    int _5804,    std::shared_ptr< monty::ndarray< int,1 > > _5805,    std::shared_ptr< monty::ndarray< int,1 > > _5806,    std::shared_ptr< monty::ndarray< double,1 > > _5807,    monty::rc_ptr< ::mosek::fusion::Variable > _5808){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5805(_5805 ? _5805->raw() : nullptr, _5805 ? _5805->size(0) : 0);
    _checked_ptr_1<int> _ptr__5806(_5806 ? _5806->raw() : nullptr, _5806 ? _5806->size(0) : 0);
    _checked_ptr_1<double> _ptr__5807(_5807 ? _5807->raw() : nullptr, _5807 ? _5807->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_5802,_5803,_5804,_5805,_5806,_5807,_5808,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _5809 = _5808->getShape();
    _checked_ptr_1<int> _ptr__5809(_5809 ? _5809->raw() : nullptr,_5809 ? _5809->size(0) : 0);
    int _5810 = (int)((_5809)->size(0));
    if ((_5810 != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_5802 && (_ptr__5809[(int)0] != _5804)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_5802) && (_ptr__5809[(int)1] != _5803)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_5805)->size(0)) != (int)((_5806)->size(0))) || ((int)((_5805)->size(0)) != (int)((_5807)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_5803,_5804,_5805,_5806,_5807);
  }
}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _5811,    int _5812,    int _5813,    std::shared_ptr< monty::ndarray< int,1 > > _5814,    std::shared_ptr< monty::ndarray< int,1 > > _5815,    std::shared_ptr< monty::ndarray< double,1 > > _5816,    monty::rc_ptr< ::mosek::fusion::Variable > _5817,    int _5818){ return new mosek::fusion::ExprMulVar(_5811,_5812,_5813,_5814,_5815,_5816,_5817,_5818); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _5811,    int _5812,    int _5813,    std::shared_ptr< monty::ndarray< int,1 > > _5814,    std::shared_ptr< monty::ndarray< int,1 > > _5815,    std::shared_ptr< monty::ndarray< double,1 > > _5816,    monty::rc_ptr< ::mosek::fusion::Variable > _5817,    int _5818) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_5811,_5812,_5813,_5814,_5815,_5816,_5817,_5818); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _5811,    int _5812,    int _5813,    std::shared_ptr< monty::ndarray< int,1 > > _5814,    std::shared_ptr< monty::ndarray< int,1 > > _5815,    std::shared_ptr< monty::ndarray< double,1 > > _5816,    monty::rc_ptr< ::mosek::fusion::Variable > _5817,    int _5818){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5814(_5814 ? _5814->raw() : nullptr, _5814 ? _5814->size(0) : 0);
    _checked_ptr_1<int> _ptr__5815(_5815 ? _5815->raw() : nullptr, _5815 ? _5815->size(0) : 0);
    _checked_ptr_1<double> _ptr__5816(_5816 ? _5816->raw() : nullptr, _5816 ? _5816->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_5812,_5813,_5817->getShape(),_5811));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _5811;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _5817;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _5812;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _5813;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_5814);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_5815);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_5816);
  }
}void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5819,monty::rc_ptr< ::mosek::fusion::WorkStack > _5820,monty::rc_ptr< ::mosek::fusion::WorkStack > _5821) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_5819,_5820,_5821); }void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5819,monty::rc_ptr< ::mosek::fusion::WorkStack > _5820,monty::rc_ptr< ::mosek::fusion::WorkStack > _5821){
  if (left)
  {
    {
      _pubthis->eval_left(_5819,_5820,_5821);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_5819,_5820,_5821);
    }
  }
}
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _5822,monty::rc_ptr< ::mosek::fusion::WorkStack > _5823,monty::rc_ptr< ::mosek::fusion::WorkStack > _5824) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_5822,_5823,_5824); }void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _5822,monty::rc_ptr< ::mosek::fusion::WorkStack > _5823,monty::rc_ptr< ::mosek::fusion::WorkStack > _5824){
  int _5825 = mosek::fusion::p_WorkStack::_get_impl(_5823)->pi32;
  int _5826 = mosek::fusion::p_WorkStack::_get_impl(_5823)->pi64;
  int _5827 = x->numInst();
  int _5828 = _5823->alloci64(_5827);
  int _5829 = _5823->alloci64(_5827);
  int _5830 = _5823->alloci32(_5827);
  int _5831 = _5823->alloci32(_5827);
  std::shared_ptr< monty::ndarray< int,1 > > _5832 = x->getShape();
  _checked_ptr_1<int> _ptr__5832(_5832 ? _5832->raw() : nullptr,_5832 ? _5832->size(0) : 0);
  int _5833 = (int)((_5832)->size(0));
  long long _5834 = safe_mul( _ptr__5832[(int)0],_ptr__5832[(int)1] );
  int _5835 = _ptr__5832[(int)1];
  int _5836 = _ptr__5832[(int)0];
  int _5837 = _5823->alloci32(safe_add( _5836,(int)1 ));
  int _5838 = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _5839 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__5839(_5839 ? _5839->raw() : nullptr,_5839 ? _5839->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5840 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__5840(_5840 ? _5840->raw() : nullptr,_5840 ? _5840->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5841 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__5841(_5841 ? _5841->raw() : nullptr,_5841 ? _5841->size(0) : 0);
  int _5842 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _5843 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _5844 = ((_5838 / _5842) == _5843);
  int _5845 = _5823->alloci32(_5838);
  int _5846 = _5823->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5847 = mosek::fusion::p_WorkStack::_get_impl(_5823)->i32;
  _checked_ptr_1<int> _ptr__5847(_5847 ? _5847->raw() : nullptr,_5847 ? _5847->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5848 = mosek::fusion::p_WorkStack::_get_impl(_5823)->i64;
  _checked_ptr_1<long long> _ptr__5848(_5848 ? _5848->raw() : nullptr,_5848 ? _5848->size(0) : 0);
  int _5849 = (int)0;
  int _5850 = (int)0;
  x->inst(_5829,_5848,_5828,_5848);
  if (_5844)
  {
    {
      int _5851 = (int)0;
      if ((_5827 > (int)0))
      {
        {
          _5851 = (int)1;
          if ((_5836 > (int)1))
          {
            {
              if ((_5835 == (int)1))
              {
                {
                  int _11222 = (int)1;
                  int _11223 = _5827;
                  for (int _5852 = _11222; _5852 < _11223; ++_5852)
                  {
                    {
                      if ((_ptr__5848[safe_add( _5829,_5852 )] > _ptr__5848[(safe_add( _5829,_5852 ) - (int)1)]))
                      {
                        {
                          ++ _5851;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int _11224 = (int)1;
                  int _11225 = _5827;
                  for (int _5853 = _11224; _5853 < _11225; ++_5853)
                  {
                    {
                      if (((_ptr__5848[safe_add( _5829,_5853 )] / _5835) > (_ptr__5848[(safe_add( _5829,_5853 ) - (int)1)] / _5835)))
                      {
                        {
                          ++ _5851;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _5850 = safe_mul( _5851,_5843 );
      _5849 = safe_mul( _5827,_5843 );
      bool _5854 = (_5851 < _5836);
      _5822->alloc_expr((int)2,_5850,_5849,_5854);
      int _5855 = mosek::fusion::p_WorkStack::_get_impl(_5822)->ptr_base;
      int _5856 = mosek::fusion::p_WorkStack::_get_impl(_5822)->shape_base;
      int _5857 = mosek::fusion::p_WorkStack::_get_impl(_5822)->nidxs_base;
      int _11226;
      bool _11227 = _5854;
      if (_11227)
      {
        _11226 = mosek::fusion::p_WorkStack::_get_impl(_5822)->sp_base;
      }
      else
      {
        _11226 = _5822->alloci64(_5850);
      }
      int _5858 = _11226;
      int _5859 = mosek::fusion::p_WorkStack::_get_impl(_5822)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _5860 = mosek::fusion::p_WorkStack::_get_impl(_5822)->i32;
      _checked_ptr_1<int> _ptr__5860(_5860 ? _5860->raw() : nullptr,_5860 ? _5860->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5861 = mosek::fusion::p_WorkStack::_get_impl(_5822)->i64;
      _checked_ptr_1<long long> _ptr__5861(_5861 ? _5861->raw() : nullptr,_5861 ? _5861->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5862 = mosek::fusion::p_WorkStack::_get_impl(_5822)->f64;
      _checked_ptr_1<double> _ptr__5862(_5862 ? _5862->raw() : nullptr,_5862 ? _5862->size(0) : 0);
      _ptr__5860[_5856] = _5836;
      _ptr__5860[safe_add( _5856,(int)1 )] = _5843;
      {
        int _5863 = (int)0;
        int _5864 = (int)0;
        int _5865 = (int)0;
        _ptr__5860[_5855] = (int)0;
        while ( (_5863 < _5827) )
        {
          {
            int _5866 = _5863;
            ++ _5863;
            while ( ((_5863 < _5827) && ((_ptr__5848[safe_add( _5829,_5863 )] / _5835) == (_ptr__5848[safe_add( _5829,_5866 )] / _5835))) )
            {
              {
                ++ _5863;
              }
            }
            long long _5867 = (_ptr__5848[safe_add( _5829,_5866 )] / _5835);
            int _11228 = (int)0;
            int _11229 = _5843;
            for (int _5868 = _11228; _5868 < _11229; ++_5868)
            {
              {
                int _11230 = _5866;
                int _11231 = _5863;
                for (int _5869 = _11230; _5869 < _11231; ++_5869)
                {
                  {
                    long long _5870 = (_ptr__5848[safe_add( _5829,_5869 )] % _5835);
                    _ptr__5861[safe_add( _5857,_5865 )] = _ptr__5848[safe_add( _5828,_5869 )];
                    _ptr__5862[safe_add( _5859,_5865 )] = _ptr__5841[safe_add( safe_mul( _5870,_5843 ),_5868 )];
                    ++ _5865;
                  }
                }
                _ptr__5860[safe_add( safe_add( _5855,_5864 ),(int)1 )] = _5865;
                _ptr__5861[safe_add( _5858,_5864 )] = safe_add( safe_mul( _5867,_5843 ),_5868 );
                ++ _5864;
              }
            }
          }
        }
      }
      if ((!_5854))
      {
        {
          _5822->popi64(_5850);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_5843 == (int)1))
        {
          {
            int _11232 = (int)0;
            int _11233 = _5838;
            for (int _5871 = _11232; _5871 < _11233; ++_5871)
            {
              {
                _ptr__5847[safe_add( _5845,_5871 )] = _5871;
              }
            }
            _ptr__5847[_5846] = (int)0;
            _ptr__5847[safe_add( _5846,(int)1 )] = _5838;
          }
        }
        else
        {
          {
            _ptr__5847[_5846] = (int)0;
            int _11234 = (int)0;
            int _11235 = safe_add( _5843,(int)1 );
            for (int _5872 = _11234; _5872 < _11235; ++_5872)
            {
              {
                _ptr__5847[safe_add( _5846,_5872 )] = (int)0;
              }
            }
            int _11236 = (int)0;
            int _11237 = _5838;
            for (int _5873 = _11236; _5873 < _11237; ++_5873)
            {
              {
                ++ _ptr__5847[safe_add( safe_add( _5846,_ptr__5840[_5873] ),(int)1 )];
              }
            }
            int _11238 = (int)0;
            int _11239 = mdimj;
            for (int _5874 = _11238; _5874 < _11239; ++_5874)
            {
              {
                _ptr__5847[safe_add( safe_add( _5846,_5874 ),(int)1 )] += _ptr__5847[safe_add( _5846,_5874 )];
              }
            }
            int _11240 = (int)0;
            int _11241 = _5838;
            for (int _5875 = _11240; _5875 < _11241; ++_5875)
            {
              {
                _ptr__5847[safe_add( _5845,_ptr__5847[safe_add( _5846,_ptr__5840[_5875] )] )] = _5875;
                ++ _ptr__5847[safe_add( _5846,_ptr__5840[_5875] )];
              }
            }
            int _11242 = (int)0;
            int _11243 = _5843;
            for (int _5876 = _11242; _5876 < _11243; ++_5876)
            {
              {
                _ptr__5847[(safe_add( _5846,_5843 ) - _5876)] = _ptr__5847[((safe_add( _5846,_5843 ) - _5876) - (int)1)];
              }
            }
            _ptr__5847[_5846] = (int)0;
          }
        }
      }
      if (((_5827 / _5836) == _5835))
      {
        {
          int _5877 = (int)0;
          {
            int _5878 = (int)0;
            while ( (_5878 < _5838) )
            {
              {
                ++ _5878;
                while ( ((_5878 < _5838) && (_ptr__5840[_ptr__5847[(safe_add( _5845,_5878 ) - (int)1)]] == _ptr__5840[_ptr__5847[safe_add( _5845,_5878 )]])) )
                {
                  {
                    ++ _5878;
                  }
                }
                ++ _5877;
              }
            }
          }
          _5850 = safe_mul( _5877,_5836 );
          _5849 = safe_mul( _5838,_5836 );
          bool _5879 = (_5877 < _5843);
          _5822->alloc_expr((int)2,_5850,_5849,_5879);
          int _5880 = mosek::fusion::p_WorkStack::_get_impl(_5822)->ptr_base;
          int _5881 = mosek::fusion::p_WorkStack::_get_impl(_5822)->shape_base;
          int _5882 = mosek::fusion::p_WorkStack::_get_impl(_5822)->nidxs_base;
          int _11244;
          bool _11245 = _5879;
          if (_11245)
          {
            _11244 = mosek::fusion::p_WorkStack::_get_impl(_5822)->sp_base;
          }
          else
          {
            _11244 = _5822->alloci64(_5850);
          }
          int _5883 = _11244;
          int _5884 = mosek::fusion::p_WorkStack::_get_impl(_5822)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5822)->i32)(_5881)) = _5836;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5822)->i32)(safe_add( _5881,(int)1 ))) = _5843;
          std::shared_ptr< monty::ndarray< int,1 > > _5885 = mosek::fusion::p_WorkStack::_get_impl(_5822)->i32;
          _checked_ptr_1<int> _ptr__5885(_5885 ? _5885->raw() : nullptr,_5885 ? _5885->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5886 = mosek::fusion::p_WorkStack::_get_impl(_5822)->i64;
          _checked_ptr_1<long long> _ptr__5886(_5886 ? _5886->raw() : nullptr,_5886 ? _5886->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5887 = mosek::fusion::p_WorkStack::_get_impl(_5822)->f64;
          _checked_ptr_1<double> _ptr__5887(_5887 ? _5887->raw() : nullptr,_5887 ? _5887->size(0) : 0);
          _ptr__5885[_5880] = (int)0;
          int _5888 = (int)0;
          int _5889 = (int)0;
          int _11246 = (int)0;
          int _11247 = _5836;
          for (int _5890 = _11246; _5890 < _11247; ++_5890)
          {
            {
              int _5891 = (int)0;
              while ( (_5891 < _5838) )
              {
                {
                  int _5892 = _5891;
                  ++ _5891;
                  while ( ((_5891 < _5838) && (_ptr__5840[_ptr__5847[safe_add( _5845,_5892 )]] == _ptr__5840[_ptr__5847[safe_add( _5845,_5891 )]])) )
                  {
                    {
                      ++ _5891;
                    }
                  }
                  int _5893 = _ptr__5840[_ptr__5847[safe_add( _5845,_5892 )]];
                  int _11248 = _5892;
                  int _11249 = _5891;
                  for (int _5894 = _11248; _5894 < _11249; ++_5894)
                  {
                    {
                      int _5895 = _ptr__5839[_ptr__5847[safe_add( _5845,_5894 )]];
                      _ptr__5886[safe_add( _5882,_5889 )] = _ptr__5848[safe_add( safe_add( _5828,safe_mul( _5890,_5835 ) ),_5895 )];
                      _ptr__5887[safe_add( _5884,_5889 )] = _ptr__5841[_ptr__5847[safe_add( _5845,_5894 )]];
                      ++ _5889;
                    }
                  }
                  _ptr__5886[safe_add( _5883,_5888 )] = safe_add( safe_mul( _5890,_5843 ),_5893 );
                  _ptr__5885[safe_add( safe_add( _5880,_5888 ),(int)1 )] = _5889;
                  ++ _5888;
                }
              }
            }
          }
          if ((!_5879))
          {
            {
              _5822->popi64(_5850);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _11250 = (int)0;
          int _11251 = safe_add( _5836,(int)1 );
          for (int _5896 = _11250; _5896 < _11251; ++_5896)
          {
            {
              _ptr__5847[safe_add( _5837,_5896 )] = (int)0;
            }
          }
          if ((_5833 == (int)1))
          {
            {
              int _11252 = (int)0;
              int _11253 = _5827;
              for (int _5897 = _11252; _5897 < _11253; ++_5897)
              {
                {
                  _ptr__5847[safe_add( _5830,_5897 )] = (int)0;
                }
              }
              int _11254 = (int)0;
              int _11255 = _5827;
              for (int _5898 = _11254; _5898 < _11255; ++_5898)
              {
                {
                  _ptr__5847[safe_add( _5831,_5898 )] = (int)_ptr__5848[safe_add( _5829,_5898 )];
                }
              }
              _ptr__5847[_5837] = (int)0;
              _ptr__5847[safe_add( _5837,(int)1 )] = _5827;
            }
          }
          else
          {
            {
              int _11256 = (int)0;
              int _11257 = _5827;
              for (int _5899 = _11256; _5899 < _11257; ++_5899)
              {
                {
                  _ptr__5847[safe_add( _5830,_5899 )] = (int)(_ptr__5848[safe_add( _5829,_5899 )] / _ptr__5832[(int)1]);
                }
              }
              int _11258 = (int)0;
              int _11259 = _5827;
              for (int _5900 = _11258; _5900 < _11259; ++_5900)
              {
                {
                  _ptr__5847[safe_add( _5831,_5900 )] = (int)(_ptr__5848[safe_add( _5829,_5900 )] % _ptr__5832[(int)1]);
                }
              }
              _ptr__5847[_5837] = (int)0;
              int _11260 = (int)0;
              int _11261 = _5827;
              for (int _5901 = _11260; _5901 < _11261; ++_5901)
              {
                {
                  ++ _ptr__5847[safe_add( safe_add( _5837,_ptr__5847[safe_add( _5830,_5901 )] ),(int)1 )];
                }
              }
              int _11262 = (int)0;
              int _11263 = _5836;
              for (int _5902 = _11262; _5902 < _11263; ++_5902)
              {
                {
                  _ptr__5847[safe_add( safe_add( _5837,_5902 ),(int)1 )] += _ptr__5847[safe_add( _5837,_5902 )];
                }
              }
            }
          }
          int _11264 = (int)0;
          int _11265 = _5836;
          for (int _5903 = _11264; _5903 < _11265; ++_5903)
          {
            {
              int _11266 = (int)0;
              int _11267 = mdimj;
              for (int _5904 = _11266; _5904 < _11267; ++_5904)
              {
                {
                  int _5905 = (int)0;
                  int _5906 = _ptr__5847[safe_add( safe_add( _5837,_5903 ),(int)1 )];
                  int _5907 = _ptr__5847[safe_add( safe_add( _5846,_5904 ),(int)1 )];
                  int _5908 = _ptr__5847[safe_add( _5837,_5903 )];
                  int _5909 = _ptr__5847[safe_add( _5846,_5904 )];
                  while ( ((_5909 < _5907) && (_5908 < _5906)) )
                  {
                    {
                      if ((_ptr__5839[_ptr__5847[safe_add( _5845,_5909 )]] < _ptr__5847[safe_add( _5831,_5908 )]))
                      {
                        {
                          ++ _5909;
                        }
                      }
                      else if((_ptr__5839[_ptr__5847[safe_add( _5845,_5909 )]] > _ptr__5847[safe_add( _5831,_5908 )]))
                      {
                        {
                          ++ _5908;
                        }
                      }
                      else
                      {
                        {
                          ++ _5905;
                          ++ _5909;
                          ++ _5908;
                        }
                      }
                    }
                  }
                  if ((_5905 > (int)0))
                  {
                    {
                      _5849 += _5905;
                      ++ _5850;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _5910 = (_5850 < safe_mul( _5835,mdimi ));
          _5822->alloc_expr((int)2,_5850,_5849,_5910);
          int _5911 = mosek::fusion::p_WorkStack::_get_impl(_5822)->ptr_base;
          int _5912 = mosek::fusion::p_WorkStack::_get_impl(_5822)->shape_base;
          int _5913 = mosek::fusion::p_WorkStack::_get_impl(_5822)->nidxs_base;
          int _5914 = mosek::fusion::p_WorkStack::_get_impl(_5822)->sp_base;
          int _5915 = mosek::fusion::p_WorkStack::_get_impl(_5822)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5822)->i32)(_5912)) = _5836;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5822)->i32)(safe_add( _5912,(int)1 ))) = mdimj;
          std::shared_ptr< monty::ndarray< int,1 > > _5916 = mosek::fusion::p_WorkStack::_get_impl(_5822)->i32;
          _checked_ptr_1<int> _ptr__5916(_5916 ? _5916->raw() : nullptr,_5916 ? _5916->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5917 = mosek::fusion::p_WorkStack::_get_impl(_5822)->i64;
          _checked_ptr_1<long long> _ptr__5917(_5917 ? _5917->raw() : nullptr,_5917 ? _5917->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5918 = mosek::fusion::p_WorkStack::_get_impl(_5822)->f64;
          _checked_ptr_1<double> _ptr__5918(_5918 ? _5918->raw() : nullptr,_5918 ? _5918->size(0) : 0);
          {
            int _5919 = (int)0;
            int _5920 = (int)0;
            int _5921 = (int)0;
            _ptr__5916[_5911] = (int)0;
            int _11268 = (int)0;
            int _11269 = _5836;
            for (int _5922 = _11268; _5922 < _11269; ++_5922)
            {
              {
                int _11270 = (int)0;
                int _11271 = mdimj;
                for (int _5923 = _11270; _5923 < _11271; ++_5923)
                {
                  {
                    int _5924 = (int)0;
                    int _5925 = _ptr__5847[safe_add( safe_add( _5837,_5922 ),(int)1 )];
                    int _5926 = _ptr__5847[safe_add( safe_add( _5846,_5923 ),(int)1 )];
                    int _5927 = _ptr__5847[safe_add( _5837,_5922 )];
                    int _5928 = _ptr__5847[safe_add( _5846,_5923 )];
                    while ( ((_5928 < _5926) && (_5927 < _5925)) )
                    {
                      {
                        if ((_ptr__5839[_ptr__5847[safe_add( _5845,_5928 )]] < _ptr__5847[safe_add( _5831,_5927 )]))
                        {
                          {
                            ++ _5928;
                          }
                        }
                        else if((_ptr__5839[_ptr__5847[safe_add( _5845,_5928 )]] > _ptr__5847[safe_add( _5831,_5927 )]))
                        {
                          {
                            ++ _5927;
                          }
                        }
                        else
                        {
                          {
                            _ptr__5917[safe_add( _5913,_5921 )] = _ptr__5848[safe_add( _5828,_5927 )];
                            _ptr__5918[safe_add( _5915,_5921 )] = _ptr__5841[_ptr__5847[safe_add( _5845,_5928 )]];
                            ++ _5924;
                            ++ _5921;
                            ++ _5928;
                            ++ _5927;
                          }
                        }
                      }
                    }
                    if ((_5924 > (int)0))
                    {
                      {
                        _ptr__5916[safe_add( safe_add( _5911,_5920 ),(int)1 )] = _5921;
                        _ptr__5917[safe_add( _5914,_5920 )] = _5919;
                        ++ _5920;
                      }
                    }
                    {}
                    ++ _5919;
                  }
                }
              }
            }
          }
          if ((!_5910))
          {
            {
              _5822->popi64(_5850);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_5823)->pi32 = _5825;
  mosek::fusion::p_WorkStack::_get_impl(_5823)->pi64 = _5826;
}
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _5929,monty::rc_ptr< ::mosek::fusion::WorkStack > _5930,monty::rc_ptr< ::mosek::fusion::WorkStack > _5931) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_5929,_5930,_5931); }void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _5929,monty::rc_ptr< ::mosek::fusion::WorkStack > _5930,monty::rc_ptr< ::mosek::fusion::WorkStack > _5931){
  int _5932 = x->numInst();
  std::shared_ptr< monty::ndarray< int,1 > > _5933 = x->getShape();
  _checked_ptr_1<int> _ptr__5933(_5933 ? _5933->raw() : nullptr,_5933 ? _5933->size(0) : 0);
  int _5934 = (int)((_5933)->size(0));
  int _5935 = _5931->alloci64(_5932);
  int _5936 = _5931->alloci64(_5932);
  int _5937 = _5931->alloci32(_5932);
  int _5938 = _5931->alloci32(_5932);
  int _5939 = _5931->alloci32(_5932);
  int _5940 = _5931->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5941 = x->getShape();
  _checked_ptr_1<int> _ptr__5941(_5941 ? _5941->raw() : nullptr,_5941 ? _5941->size(0) : 0);
  int _5942 = (int)((_5941)->size(0));
  int _11272;
  bool _11273 = (_5942 == (int)1);
  if (_11273)
  {
    _11272 = (int)1;
  }
  else
  {
    _11272 = _ptr__5941[(int)1];
  }
  int _5943 = _11272;
  int _5944 = _ptr__5941[(int)0];
  int _5945 = _5931->alloci32(safe_add( _5943,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5946 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__5946(_5946 ? _5946->raw() : nullptr,_5946 ? _5946->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5947 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__5947(_5947 ? _5947->raw() : nullptr,_5947 ? _5947->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5948 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__5948(_5948 ? _5948->raw() : nullptr,_5948 ? _5948->size(0) : 0);
  int _5949 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _5950 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int _5951 = (int)0;
  int _5952 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _5953 = mosek::fusion::p_WorkStack::_get_impl(_5931)->i32;
  _checked_ptr_1<int> _ptr__5953(_5953 ? _5953->raw() : nullptr,_5953 ? _5953->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5954 = mosek::fusion::p_WorkStack::_get_impl(_5931)->i64;
  _checked_ptr_1<long long> _ptr__5954(_5954 ? _5954->raw() : nullptr,_5954 ? _5954->size(0) : 0);
  int _5955 = (int)((_5948)->size(0));
  x->inst(_5936,_5954,_5935,_5954);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int _11274 = (int)0;
        int _11275 = safe_add( _5949,(int)1 );
        for (int _5956 = _11274; _5956 < _11275; ++_5956)
        {
          {
            _ptr__5953[safe_add( _5940,_5956 )] = (int)0;
          }
        }
        int _11276 = (int)0;
        int _11277 = (int)((_5946)->size(0));
        for (int _5957 = _11276; _5957 < _11277; ++_5957)
        {
          {
            ++ _ptr__5953[safe_add( safe_add( _5940,_ptr__5946[_5957] ),(int)1 )];
          }
        }
        int _11278 = (int)0;
        int _11279 = _5949;
        for (int _5958 = _11278; _5958 < _11279; ++_5958)
        {
          {
            _ptr__5953[safe_add( safe_add( _5940,_5958 ),(int)1 )] += _ptr__5953[safe_add( _5940,_5958 )];
          }
        }
        if ((_5942 == (int)1))
        {
          {
            int _11280 = (int)0;
            int _11281 = _5932;
            for (int _5959 = _11280; _5959 < _11281; ++_5959)
            {
              {
                _ptr__5953[safe_add( _5937,_5959 )] = (int)_ptr__5954[safe_add( _5936,_5959 )];
              }
            }
            int _11282 = (int)0;
            int _11283 = _5932;
            for (int _5960 = _11282; _5960 < _11283; ++_5960)
            {
              {
                _ptr__5953[safe_add( _5938,_5960 )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int _11284 = (int)0;
            int _11285 = _5932;
            for (int _5961 = _11284; _5961 < _11285; ++_5961)
            {
              {
                _ptr__5953[safe_add( _5937,_5961 )] = (int)(_ptr__5954[safe_add( _5936,_5961 )] / _5943);
              }
            }
            int _11286 = (int)0;
            int _11287 = _5932;
            for (int _5962 = _11286; _5962 < _11287; ++_5962)
            {
              {
                _ptr__5953[safe_add( _5938,_5962 )] = (int)(_ptr__5954[safe_add( _5936,_5962 )] % _5943);
              }
            }
          }
        }
        if ((_5942 > (int)1))
        {
          {
            int _11288 = (int)0;
            int _11289 = safe_add( _5943,(int)1 );
            for (int _5963 = _11288; _5963 < _11289; ++_5963)
            {
              {
                _ptr__5953[safe_add( _5945,_5963 )] = (int)0;
              }
            }
            int _11290 = (int)0;
            int _11291 = _5932;
            for (int _5964 = _11290; _5964 < _11291; ++_5964)
            {
              {
                ++ _ptr__5953[safe_add( safe_add( _5945,_ptr__5953[safe_add( _5938,_5964 )] ),(int)1 )];
              }
            }
            int _11292 = (int)0;
            int _11293 = _5943;
            for (int _5965 = _11292; _5965 < _11293; ++_5965)
            {
              {
                _ptr__5953[safe_add( safe_add( _5945,_5965 ),(int)1 )] += _ptr__5953[safe_add( _5945,_5965 )];
              }
            }
            int _11294 = (int)0;
            int _11295 = _5932;
            for (int _5966 = _11294; _5966 < _11295; ++_5966)
            {
              {
                _ptr__5953[safe_add( _5939,_ptr__5953[safe_add( _5945,_ptr__5953[safe_add( _5938,_5966 )] )] )] = _5966;
                ++ _ptr__5953[safe_add( _5945,_ptr__5953[safe_add( _5938,_5966 )] )];
              }
            }
            int _11296 = (int)0;
            int _11297 = _5943;
            for (int _5967 = _11296; _5967 < _11297; ++_5967)
            {
              {
                _ptr__5953[(safe_add( _5945,_5943 ) - _5967)] = _ptr__5953[((safe_add( _5945,_5943 ) - _5967) - (int)1)];
              }
            }
            _ptr__5953[_5945] = (int)0;
          }
        }
        else
        {
          {
            _ptr__5953[_5945] = (int)0;
            _ptr__5953[safe_add( _5945,(int)1 )] = _5932;
            int _11298 = (int)0;
            int _11299 = _5932;
            for (int _5968 = _11298; _5968 < _11299; ++_5968)
            {
              {
                _ptr__5953[safe_add( _5939,_5968 )] = _5968;
              }
            }
          }
        }
        int _11300 = (int)0;
        int _11301 = _5949;
        for (int _5969 = _11300; _5969 < _11301; ++_5969)
        {
          {
            int _11302 = (int)0;
            int _11303 = _5943;
            for (int _5970 = _11302; _5970 < _11303; ++_5970)
            {
              {
                int _5971 = (int)0;
                int _5972 = _ptr__5953[safe_add( safe_add( _5945,_5970 ),(int)1 )];
                int _5973 = _ptr__5953[safe_add( safe_add( _5940,_5969 ),(int)1 )];
                int _5974 = _ptr__5953[safe_add( _5945,_5970 )];
                int _5975 = _ptr__5953[safe_add( _5940,_5969 )];
                while ( ((_5975 < _5973) && (_5974 < _5972)) )
                {
                  {
                    if ((_ptr__5947[_5975] < _ptr__5953[safe_add( _5937,_ptr__5953[safe_add( _5939,_5974 )] )]))
                    {
                      {
                        ++ _5975;
                      }
                    }
                    else if((_ptr__5947[_5975] > _ptr__5953[safe_add( _5937,_ptr__5953[safe_add( _5939,_5974 )] )]))
                    {
                      {
                        ++ _5974;
                      }
                    }
                    else
                    {
                      {
                        ++ _5971;
                        ++ _5975;
                        ++ _5974;
                      }
                    }
                  }
                }
                if ((_5971 > (int)0))
                {
                  {
                    _5951 += _5971;
                    ++ _5952;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _5951 = safe_mul( _5955,_5943 );
      int _5976 = (int)0;
      while ( (_5976 < _5955) )
      {
        {
          int _5977 = safe_add( _5976,(int)1 );
          while ( ((_5977 < _5955) && (_ptr__5946[_5976] == _ptr__5946[_5977])) )
          {
            {
              ++ _5977;
            }
          }
          ++ _5952;
          _5976 = _5977;
        }
      }
      _5952 *= _5943;
    }
  }
  bool _11304;
  bool _11305 = (_5952 < safe_mul( _5943,_5949 ));
  if (_11305)
  {
    _11304 = true;
  }
  else
  {
    _11304 = false;
  }
  bool _5978 = _11304;
  int _5979 = _5942;
  _5929->alloc_expr(_5979,_5952,_5951,_5978);
  int _5980 = mosek::fusion::p_WorkStack::_get_impl(_5929)->ptr_base;
  int _5981 = mosek::fusion::p_WorkStack::_get_impl(_5929)->shape_base;
  int _5982 = mosek::fusion::p_WorkStack::_get_impl(_5929)->nidxs_base;
  int _11306;
  bool _11307 = _5978;
  if (_11307)
  {
    _11306 = mosek::fusion::p_WorkStack::_get_impl(_5929)->sp_base;
  }
  else
  {
    _11306 = _5929->alloci64(_5952);
  }
  int _5983 = _11306;
  int _5984 = mosek::fusion::p_WorkStack::_get_impl(_5929)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5985 = mosek::fusion::p_WorkStack::_get_impl(_5929)->i32;
  _checked_ptr_1<int> _ptr__5985(_5985 ? _5985->raw() : nullptr,_5985 ? _5985->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5986 = mosek::fusion::p_WorkStack::_get_impl(_5929)->i64;
  _checked_ptr_1<long long> _ptr__5986(_5986 ? _5986->raw() : nullptr,_5986 ? _5986->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5987 = mosek::fusion::p_WorkStack::_get_impl(_5929)->f64;
  _checked_ptr_1<double> _ptr__5987(_5987 ? _5987->raw() : nullptr,_5987 ? _5987->size(0) : 0);
  _ptr__5985[_5981] = _5949;
  if ((_5942 > (int)1))
  {
    {
      _ptr__5985[safe_add( _5981,(int)1 )] = _5943;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int _5988 = (int)0;
      int _5989 = (int)0;
      int _5990 = (int)0;
      _ptr__5985[_5980] = (int)0;
      int _11308 = (int)0;
      int _11309 = _5949;
      for (int _5991 = _11308; _5991 < _11309; ++_5991)
      {
        {
          int _11310 = (int)0;
          int _11311 = _5943;
          for (int _5992 = _11310; _5992 < _11311; ++_5992)
          {
            {
              int _5993 = (int)0;
              int _5994 = _ptr__5953[safe_add( safe_add( _5945,_5992 ),(int)1 )];
              int _5995 = _ptr__5953[safe_add( safe_add( _5940,_5991 ),(int)1 )];
              int _5996 = _ptr__5953[safe_add( _5945,_5992 )];
              int _5997 = _ptr__5953[safe_add( _5940,_5991 )];
              while ( ((_5997 < _5995) && (_5996 < _5994)) )
              {
                {
                  if ((_ptr__5947[_5997] < _ptr__5953[safe_add( _5937,_ptr__5953[safe_add( _5939,_5996 )] )]))
                  {
                    {
                      ++ _5997;
                    }
                  }
                  else if((_ptr__5947[_5997] > _ptr__5953[safe_add( _5937,_ptr__5953[safe_add( _5939,_5996 )] )]))
                  {
                    {
                      ++ _5996;
                    }
                  }
                  else
                  {
                    {
                      _ptr__5986[safe_add( _5982,_5990 )] = _ptr__5954[safe_add( _5935,_ptr__5953[safe_add( _5939,_5996 )] )];
                      _ptr__5987[safe_add( _5984,_5990 )] = _ptr__5948[_5997];
                      ++ _5993;
                      ++ _5990;
                      ++ _5997;
                      ++ _5996;
                    }
                  }
                }
              }
              if ((_5993 > (int)0))
              {
                {
                  _ptr__5985[safe_add( safe_add( _5980,_5989 ),(int)1 )] = _5990;
                  _ptr__5986[safe_add( _5983,_5989 )] = _5988;
                  ++ _5989;
                }
              }
              {}
              ++ _5988;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _5998 = (int)0;
      int _5999 = (int)0;
      _ptr__5985[_5980] = (int)0;
      int _6000 = (int)0;
      while ( (_6000 < _5955) )
      {
        {
          int _6001 = safe_add( _6000,(int)1 );
          while ( ((_6001 < _5955) && (_ptr__5946[_6001] == _ptr__5946[_6000])) )
          {
            {
              ++ _6001;
            }
          }
          int _11312 = (int)0;
          int _11313 = _5943;
          for (int _6002 = _11312; _6002 < _11313; ++_6002)
          {
            {
              int _11314 = _6000;
              int _11315 = _6001;
              for (int _6003 = _11314; _6003 < _11315; ++_6003)
              {
                {
                  _ptr__5986[safe_add( _5982,_5998 )] = _ptr__5954[safe_add( safe_add( _5935,safe_mul( _ptr__5947[_6003],_5943 ) ),_6002 )];
                  _ptr__5987[safe_add( _5984,_5998 )] = _ptr__5948[_6003];
                  ++ _5998;
                }
              }
              _ptr__5985[safe_add( safe_add( _5980,_5999 ),(int)1 )] = _5998;
              _ptr__5986[safe_add( _5983,_5999 )] = safe_add( safe_mul( _ptr__5946[_6000],_5943 ),_6002 );
              ++ _5999;
            }
          }
          _6000 = _6001;
        }
      }
    }
  }
  if ((!_5978))
  {
    {
      _5929->popi64(_5952);
    }
  }
  {}
  _5931->clear();
}
void mosek::fusion::p_ExprMulVar::validate(int _6004,int _6005,std::shared_ptr< monty::ndarray< int,1 > > _6006,std::shared_ptr< monty::ndarray< int,1 > > _6007,std::shared_ptr< monty::ndarray< double,1 > > _6008){
  _checked_ptr_1<int> _ptr__6006(_6006 ? _6006->raw() : nullptr, _6006 ? _6006->size(0) : 0);
  _checked_ptr_1<int> _ptr__6007(_6007 ? _6007->raw() : nullptr, _6007 ? _6007->size(0) : 0);
  _checked_ptr_1<double> _ptr__6008(_6008 ? _6008->raw() : nullptr, _6008 ? _6008->size(0) : 0);
  bool _6009 = true;
  {
    int _11316 = (int)0;
    int _11317 = (int)((_6006)->size(0));
    for (int _6010 = _11316; _6010 < _11317; ++_6010)
    {
      {
        if (((_ptr__6006[_6010] < (int)0) || ((_ptr__6006[_6010] >= _6004) || ((_ptr__6007[_6010] < (int)0) || (_ptr__6007[_6010] >= _6005)))))
        {
          {
            _6009 = false;
          }
        }
        {}
      }
    }
    int _11318 = (int)1;
    int _11319 = (int)((_6006)->size(0));
    for (int _6011 = _11318; _6011 < _11319; ++_6011)
    {
      {
        if (((_ptr__6006[(_6011 - (int)1)] > _ptr__6006[_6011]) || ((_ptr__6006[(_6011 - (int)1)] == _ptr__6006[_6011]) && (_ptr__6007[(_6011 - (int)1)] >= _ptr__6007[_6011]))))
        {
          {
            _6009 = false;
          }
        }
        {}
      }
    }
  }
  if ((!_6009))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulVar::resshape(int _6012,int _6013,std::shared_ptr< monty::ndarray< int,1 > > _6014,bool _6015){
  _checked_ptr_1<int> _ptr__6014(_6014 ? _6014->raw() : nullptr, _6014 ? _6014->size(0) : 0);
  if (_6015)
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6012),(int)(_ptr__6014[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__6014[(int)0]),(int)(_6013)});
    }
  }
}
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVar::toString(){
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
void mosek::fusion::p_ExprMulVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _6016,    int _6017,    std::shared_ptr< monty::ndarray< int,1 > > _6018,    std::shared_ptr< monty::ndarray< int,1 > > _6019,    std::shared_ptr< monty::ndarray< double,1 > > _6020,    monty::rc_ptr< ::mosek::fusion::Variable > _6021){ return new mosek::fusion::ExprMulScalarVar(_6016,_6017,_6018,_6019,_6020,_6021); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _6016,    int _6017,    std::shared_ptr< monty::ndarray< int,1 > > _6018,    std::shared_ptr< monty::ndarray< int,1 > > _6019,    std::shared_ptr< monty::ndarray< double,1 > > _6020,    monty::rc_ptr< ::mosek::fusion::Variable > _6021) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6016,_6017,_6018,_6019,_6020,_6021); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _6016,    int _6017,    std::shared_ptr< monty::ndarray< int,1 > > _6018,    std::shared_ptr< monty::ndarray< int,1 > > _6019,    std::shared_ptr< monty::ndarray< double,1 > > _6020,    monty::rc_ptr< ::mosek::fusion::Variable > _6021){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6018(_6018 ? _6018->raw() : nullptr, _6018 ? _6018->size(0) : 0);
    _checked_ptr_1<int> _ptr__6019(_6019 ? _6019->raw() : nullptr, _6019 ? _6019->size(0) : 0);
    _checked_ptr_1<double> _ptr__6020(_6020 ? _6020->raw() : nullptr, _6020 ? _6020->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_6016,_6017,::mosek::fusion::Utils::Tools::arraycopy(_6018),::mosek::fusion::Utils::Tools::arraycopy(_6019),::mosek::fusion::Utils::Tools::arraycopy(_6020),_6021,(int)1);
    if ((_6021->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_6016 < (int)0) || ((_6017 < (int)0) || (((int)((_6018)->size(0)) != (int)((_6019)->size(0))) || ((int)((_6018)->size(0)) != (int)((_6020)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6022 = false;
    int _11320 = (int)0;
    int _11321 = (int)((_6018)->size(0));
    for (int _6023 = _11320; _6023 < _11321; ++_6023)
    {
      {
        if (((_ptr__6018[_6023] < (int)0) || ((_ptr__6018[_6023] >= _6016) || ((_ptr__6019[_6023] < (int)0) || (_ptr__6019[_6023] >= _6017)))))
        {
          {
            _6022 = true;
          }
        }
        {}
      }
    }
    if (_6022)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6024 = false;
    int _11322 = (int)1;
    int _11323 = (int)((_6018)->size(0));
    for (int _6025 = _11322; _6025 < _11323; ++_6025)
    {
      {
        if (((_ptr__6018[_6025] < _ptr__6018[(_6025 - (int)1)]) || ((_ptr__6018[_6025] == _ptr__6018[(_6025 - (int)1)]) && (_ptr__6019[_6025] <= _ptr__6019[(_6025 - (int)1)]))))
        {
          {
            _6024 = true;
          }
        }
        {}
      }
    }
    if (_6024)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _6026,    int _6027,    std::shared_ptr< monty::ndarray< int,1 > > _6028,    std::shared_ptr< monty::ndarray< int,1 > > _6029,    std::shared_ptr< monty::ndarray< double,1 > > _6030,    monty::rc_ptr< ::mosek::fusion::Variable > _6031,    int _6032){ return new mosek::fusion::ExprMulScalarVar(_6026,_6027,_6028,_6029,_6030,_6031,_6032); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _6026,    int _6027,    std::shared_ptr< monty::ndarray< int,1 > > _6028,    std::shared_ptr< monty::ndarray< int,1 > > _6029,    std::shared_ptr< monty::ndarray< double,1 > > _6030,    monty::rc_ptr< ::mosek::fusion::Variable > _6031,    int _6032) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6026,_6027,_6028,_6029,_6030,_6031,_6032); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _6026,    int _6027,    std::shared_ptr< monty::ndarray< int,1 > > _6028,    std::shared_ptr< monty::ndarray< int,1 > > _6029,    std::shared_ptr< monty::ndarray< double,1 > > _6030,    monty::rc_ptr< ::mosek::fusion::Variable > _6031,    int _6032){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6028(_6028 ? _6028->raw() : nullptr, _6028 ? _6028->size(0) : 0);
    _checked_ptr_1<int> _ptr__6029(_6029 ? _6029->raw() : nullptr, _6029 ? _6029->size(0) : 0);
    _checked_ptr_1<double> _ptr__6030(_6030 ? _6030->raw() : nullptr, _6030 ? _6030->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6026),(int)(_6027)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _6026;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _6027;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _6028;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _6029;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _6030;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _6031;
  }
}void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6033,monty::rc_ptr< ::mosek::fusion::WorkStack > _6034,monty::rc_ptr< ::mosek::fusion::WorkStack > _6035) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_6033,_6034,_6035); }void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6033,monty::rc_ptr< ::mosek::fusion::WorkStack > _6034,monty::rc_ptr< ::mosek::fusion::WorkStack > _6035){
  if ((x->numInst() == (int)0))
  {
    {
      _6033->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_6033)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6033)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6033)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6033)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _6036 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1)));
      _checked_ptr_1<long long> _ptr__6036(_6036 ? _6036->raw() : nullptr,_6036 ? _6036->size(0) : 0);
      x->inst((int)0,_6036);
      long long _6037 = _ptr__6036[(int)0];
      int _6038 = (int)((msubi)->size(0));
      int _6039 = _6038;
      bool _6040 = (_6038 < safe_mul( mdimi,mdimj ));
      _6033->alloc_expr((int)2,_6038,_6039,_6040);
      int _6041 = mosek::fusion::p_WorkStack::_get_impl(_6033)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6033)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6033)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6033)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6033)->shape_base,(int)1 ))) = mdimj;
      int _6042 = mosek::fusion::p_WorkStack::_get_impl(_6033)->nidxs_base;
      int _6043 = mosek::fusion::p_WorkStack::_get_impl(_6033)->sp_base;
      int _6044 = mosek::fusion::p_WorkStack::_get_impl(_6033)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6045 = mosek::fusion::p_WorkStack::_get_impl(_6033)->i32;
      _checked_ptr_1<int> _ptr__6045(_6045 ? _6045->raw() : nullptr,_6045 ? _6045->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6046 = mosek::fusion::p_WorkStack::_get_impl(_6033)->i64;
      _checked_ptr_1<long long> _ptr__6046(_6046 ? _6046->raw() : nullptr,_6046 ? _6046->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6047 = mosek::fusion::p_WorkStack::_get_impl(_6033)->f64;
      _checked_ptr_1<double> _ptr__6047(_6047 ? _6047->raw() : nullptr,_6047 ? _6047->size(0) : 0);
      {
        int _11324 = (int)0;
        int _11325 = _6039;
        for (int _6048 = _11324; _6048 < _11325; ++_6048)
        {
          {
            _ptr__6047[safe_add( _6044,_6048 )] = ((*mcof)(_6048));
          }
        }
        int _11326 = (int)0;
        int _11327 = _6039;
        for (int _6049 = _11326; _6049 < _11327; ++_6049)
        {
          {
            _ptr__6046[safe_add( _6042,_6049 )] = _6037;
          }
        }
        if (_6040)
        {
          {
            int _11328 = (int)0;
            int _11329 = _6038;
            for (int _6050 = _11328; _6050 < _11329; ++_6050)
            {
              {
                _ptr__6046[safe_add( _6043,_6050 )] = safe_add( safe_mul( ((*msubi)(_6050)),mdimj ),((*msubj)(_6050)) );
              }
            }
          }
        }
        {}
        int _11330 = (int)0;
        int _11331 = safe_add( _6038,(int)1 );
        for (int _6051 = _11330; _6051 < _11331; ++_6051)
        {
          {
            _ptr__6045[safe_add( _6041,_6051 )] = _6051;
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulScalarVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _6052,    double _6053){ return new mosek::fusion::ExprMulVarScalarConst(_6052,_6053); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _6052,    double _6053) :    ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this)){ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_6052,_6053); }void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6052,    double _6053){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6052->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _6052;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _6053;
  }
}void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6054,monty::rc_ptr< ::mosek::fusion::WorkStack > _6055,monty::rc_ptr< ::mosek::fusion::WorkStack > _6056) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_6054,_6055,_6056); }void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6054,monty::rc_ptr< ::mosek::fusion::WorkStack > _6055,monty::rc_ptr< ::mosek::fusion::WorkStack > _6056){
  int _6057 = x->numInst();
  int _6058 = _6057;
  std::shared_ptr< monty::ndarray< int,1 > > _6059 = x->getShape();
  _checked_ptr_1<int> _ptr__6059(_6059 ? _6059->raw() : nullptr,_6059 ? _6059->size(0) : 0);
  int _6060 = (int)((_6059)->size(0));
  bool _6061 = (::mosek::fusion::p_Set::size(_6059) > _6058);
  _6054->alloc_expr(_6060,_6058,_6057,_6061);
  int _6062 = mosek::fusion::p_WorkStack::_get_impl(_6054)->ptr_base;
  int _6063 = mosek::fusion::p_WorkStack::_get_impl(_6054)->nidxs_base;
  int _6064 = mosek::fusion::p_WorkStack::_get_impl(_6054)->sp_base;
  int _6065 = mosek::fusion::p_WorkStack::_get_impl(_6054)->cof_base;
  int _6066 = mosek::fusion::p_WorkStack::_get_impl(_6054)->shape_base;
  if (_6061)
  {
    {
      x->inst(_6064,mosek::fusion::p_WorkStack::_get_impl(_6054)->i64,_6063,mosek::fusion::p_WorkStack::_get_impl(_6054)->i64);
    }
  }
  else
  {
    {
      x->inst(_6063,mosek::fusion::p_WorkStack::_get_impl(_6054)->i64);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6067 = mosek::fusion::p_WorkStack::_get_impl(_6054)->i32;
  _checked_ptr_1<int> _ptr__6067(_6067 ? _6067->raw() : nullptr,_6067 ? _6067->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6068 = mosek::fusion::p_WorkStack::_get_impl(_6054)->i64;
  _checked_ptr_1<long long> _ptr__6068(_6068 ? _6068->raw() : nullptr,_6068 ? _6068->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6069 = mosek::fusion::p_WorkStack::_get_impl(_6054)->f64;
  _checked_ptr_1<double> _ptr__6069(_6069 ? _6069->raw() : nullptr,_6069 ? _6069->size(0) : 0);
  {
    int _11332 = (int)0;
    int _11333 = _6060;
    for (int _6070 = _11332; _6070 < _11333; ++_6070)
    {
      {
        _ptr__6067[safe_add( _6066,_6070 )] = _ptr__6059[_6070];
      }
    }
    int _11334 = (int)0;
    int _11335 = safe_add( _6058,(int)1 );
    for (int _6071 = _11334; _6071 < _11335; ++_6071)
    {
      {
        _ptr__6067[safe_add( _6062,_6071 )] = _6071;
      }
    }
    int _11336 = (int)0;
    int _11337 = _6057;
    for (int _6072 = _11336; _6072 < _11337; ++_6072)
    {
      {
        _ptr__6069[safe_add( _6065,_6072 )] = 1.0;
      }
    }
  }
}
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVarScalarConst::toString(){
  return std::string ("ExprMulVarScalarConst()");
}
void mosek::fusion::p_ExprMulVarScalarConst::destroy(){x.reset();}void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprAdd::p_ExprAdd  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _6073,    monty::rc_ptr< ::mosek::fusion::Expression > _6074,    double _6075,    double _6076){ return new mosek::fusion::ExprAdd(_6073,_6074,_6075,_6076); }mosek::fusion::ExprAdd::ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _6073,    monty::rc_ptr< ::mosek::fusion::Expression > _6074,    double _6075,    double _6076) :    ExprAdd(new mosek::fusion::p_ExprAdd(this)){ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_6073,_6074,_6075,_6076); }void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6073,    monty::rc_ptr< ::mosek::fusion::Expression > _6074,    double _6075,    double _6076){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6073->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _6073;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _6074;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _6075;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _6076;
    if ((_6073->getND() != _6074->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int _11338 = (int)0;
    int _11339 = _6073->getND();
    for (int _6077 = _11338; _6077 < _11339; ++_6077)
    {
      {
        if ((_6073->getDim(_6077) != _6074->getDim(_6077)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6078,monty::rc_ptr< ::mosek::fusion::WorkStack > _6079,monty::rc_ptr< ::mosek::fusion::WorkStack > _6080) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_6078,_6079,_6080); }void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6078,monty::rc_ptr< ::mosek::fusion::WorkStack > _6079,monty::rc_ptr< ::mosek::fusion::WorkStack > _6080){
  e1->eval(_6079,_6078,_6080);
  e2->eval(_6079,_6078,_6080);
  _6079->pop_expr();
  int _6081 = mosek::fusion::p_WorkStack::_get_impl(_6079)->nd;
  int _6082 = mosek::fusion::p_WorkStack::_get_impl(_6079)->shape_base;
  int _6083 = mosek::fusion::p_WorkStack::_get_impl(_6079)->nelem;
  int _6084 = mosek::fusion::p_WorkStack::_get_impl(_6079)->nnz;
  int _6085 = mosek::fusion::p_WorkStack::_get_impl(_6079)->ncodeatom;
  bool _6086 = mosek::fusion::p_WorkStack::_get_impl(_6079)->hassp;
  int _6087 = mosek::fusion::p_WorkStack::_get_impl(_6079)->ptr_base;
  int _6088 = mosek::fusion::p_WorkStack::_get_impl(_6079)->sp_base;
  int _6089 = mosek::fusion::p_WorkStack::_get_impl(_6079)->nidxs_base;
  int _6090 = mosek::fusion::p_WorkStack::_get_impl(_6079)->cof_base;
  int _6091 = mosek::fusion::p_WorkStack::_get_impl(_6079)->code_base;
  int _6092 = mosek::fusion::p_WorkStack::_get_impl(_6079)->codeptr_base;
  int _6093 = mosek::fusion::p_WorkStack::_get_impl(_6079)->cconst_base;
  _6079->pop_expr();
  int _6094 = mosek::fusion::p_WorkStack::_get_impl(_6079)->nd;
  int _6095 = mosek::fusion::p_WorkStack::_get_impl(_6079)->shape_base;
  int _6096 = mosek::fusion::p_WorkStack::_get_impl(_6079)->nelem;
  int _6097 = mosek::fusion::p_WorkStack::_get_impl(_6079)->nnz;
  int _6098 = mosek::fusion::p_WorkStack::_get_impl(_6079)->ncodeatom;
  bool _6099 = mosek::fusion::p_WorkStack::_get_impl(_6079)->hassp;
  int _6100 = mosek::fusion::p_WorkStack::_get_impl(_6079)->ptr_base;
  int _6101 = mosek::fusion::p_WorkStack::_get_impl(_6079)->sp_base;
  int _6102 = mosek::fusion::p_WorkStack::_get_impl(_6079)->nidxs_base;
  int _6103 = mosek::fusion::p_WorkStack::_get_impl(_6079)->cof_base;
  int _6104 = mosek::fusion::p_WorkStack::_get_impl(_6079)->code_base;
  int _6105 = mosek::fusion::p_WorkStack::_get_impl(_6079)->codeptr_base;
  int _6106 = mosek::fusion::p_WorkStack::_get_impl(_6079)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6107 = mosek::fusion::p_WorkStack::_get_impl(_6079)->i32;
  _checked_ptr_1<int> _ptr__6107(_6107 ? _6107->raw() : nullptr,_6107 ? _6107->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6108 = mosek::fusion::p_WorkStack::_get_impl(_6079)->i64;
  _checked_ptr_1<long long> _ptr__6108(_6108 ? _6108->raw() : nullptr,_6108 ? _6108->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6109 = mosek::fusion::p_WorkStack::_get_impl(_6079)->f64;
  _checked_ptr_1<double> _ptr__6109(_6109 ? _6109->raw() : nullptr,_6109 ? _6109->size(0) : 0);
  bool _6110 = ((_6098 > (int)0) || (_6085 > (int)0));
  if ((_6094 != _6081))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int _11340 = (int)0;
  int _11341 = _6094;
  for (int _6111 = _11340; _6111 < _11341; ++_6111)
  {
    {
      if ((_ptr__6107[safe_add( _6095,_6111 )] != _ptr__6107[safe_add( _6082,_6111 )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_6099) && (!_6086)))
  {
    {
      int _6112 = _6096;
      int _6113 = safe_add( _6097,_6084 );
      int _6114 = (int)0;
      if (_6110)
      {
        {
          int _11342;
          bool _11343 = (_6098 > (int)0);
          if (_11343)
          {
            _11342 = safe_add( _6098,safe_mul( _6097,(int)2 ) );
          }
          else
          {
            _11342 = _6097;
          }
          _6114 += _11342;
          int _11344;
          bool _11345 = (_6085 > (int)0);
          if (_11345)
          {
            _11344 = safe_add( _6085,safe_mul( _6084,(int)2 ) );
          }
          else
          {
            _11344 = _6084;
          }
          _6114 += _11344;
        }
      }
      {}
      int _6115 = _6094;
      _6078->alloc_expr(_6115,_6112,_6113,false,_6114);
      int _6116 = mosek::fusion::p_WorkStack::_get_impl(_6078)->shape_base;
      int _6117 = mosek::fusion::p_WorkStack::_get_impl(_6078)->ptr_base;
      int _6118 = mosek::fusion::p_WorkStack::_get_impl(_6078)->sp_base;
      int _6119 = mosek::fusion::p_WorkStack::_get_impl(_6078)->nidxs_base;
      int _6120 = mosek::fusion::p_WorkStack::_get_impl(_6078)->cof_base;
      int _6121 = mosek::fusion::p_WorkStack::_get_impl(_6078)->code_base;
      int _6122 = mosek::fusion::p_WorkStack::_get_impl(_6078)->codeptr_base;
      int _6123 = mosek::fusion::p_WorkStack::_get_impl(_6078)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6124 = mosek::fusion::p_WorkStack::_get_impl(_6078)->i32;
      _checked_ptr_1<int> _ptr__6124(_6124 ? _6124->raw() : nullptr,_6124 ? _6124->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6125 = mosek::fusion::p_WorkStack::_get_impl(_6078)->i64;
      _checked_ptr_1<long long> _ptr__6125(_6125 ? _6125->raw() : nullptr,_6125 ? _6125->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6126 = mosek::fusion::p_WorkStack::_get_impl(_6078)->f64;
      _checked_ptr_1<double> _ptr__6126(_6126 ? _6126->raw() : nullptr,_6126 ? _6126->size(0) : 0);
      int _11346 = (int)0;
      int _11347 = _6115;
      for (int _6127 = _11346; _6127 < _11347; ++_6127)
      {
        {
          _ptr__6124[safe_add( _6116,_6127 )] = _ptr__6107[safe_add( _6095,_6127 )];
        }
      }
      int _6128 = (int)0;
      int _6129 = (int)0;
      if ((_6114 > (int)0))
      {
        {
          _ptr__6124[_6122] = (int)0;
        }
      }
      {}
      _ptr__6124[_6117] = (int)0;
      int _11348 = (int)0;
      int _11349 = _6112;
      for (int _6130 = _11348; _6130 < _11349; ++_6130)
      {
        {
          int _11350 = _ptr__6107[safe_add( _6100,_6130 )];
          int _11351 = _ptr__6107[safe_add( safe_add( _6100,_6130 ),(int)1 )];
          for (int _6131 = _11350; _6131 < _11351; ++_6131)
          {
            {
              _ptr__6125[safe_add( _6119,_6129 )] = _ptr__6108[safe_add( _6102,_6131 )];
              _ptr__6126[safe_add( _6120,_6129 )] = (_ptr__6109[safe_add( _6103,_6131 )] * m1);
              if ((_6098 > (int)0))
              {
                {
                  int _11352 = _ptr__6107[safe_add( _6105,_6131 )];
                  int _11353 = _ptr__6107[safe_add( safe_add( _6105,_6131 ),(int)1 )];
                  for (int _6132 = _11352; _6132 < _11353; ++_6132)
                  {
                    {
                      _ptr__6124[safe_add( _6121,_6128 )] = _ptr__6107[safe_add( _6104,_6132 )];
                      _ptr__6126[safe_add( _6123,_6128 )] = _ptr__6109[safe_add( _6106,_6132 )];
                      ++ _6128;
                    }
                  }
                  _ptr__6124[safe_add( _6121,_6128 )] = 2;
                  _ptr__6126[safe_add( _6123,_6128 )] = m1;
                  ++ _6128;
                  _ptr__6124[safe_add( _6121,_6128 )] = 5;
                  ++ _6128;
                  _ptr__6124[safe_add( safe_add( _6122,_6129 ),(int)1 )] = _6128;
                }
              }
              else
              {
                {
                  if ((_6114 > (int)0))
                  {
                    {
                      _ptr__6124[safe_add( _6121,_6128 )] = 2;
                      _ptr__6126[safe_add( _6123,_6128 )] = 0.0;
                      ++ _6128;
                      _ptr__6124[safe_add( safe_add( _6122,_6129 ),(int)1 )] = _6128;
                    }
                  }
                  {}
                }
              }
              ++ _6129;
            }
          }
          int _11354 = _ptr__6107[safe_add( _6087,_6130 )];
          int _11355 = _ptr__6107[safe_add( safe_add( _6087,_6130 ),(int)1 )];
          for (int _6133 = _11354; _6133 < _11355; ++_6133)
          {
            {
              _ptr__6125[safe_add( _6119,_6129 )] = _ptr__6108[safe_add( _6089,_6133 )];
              _ptr__6126[safe_add( _6120,_6129 )] = (_ptr__6109[safe_add( _6090,_6133 )] * m2);
              if ((_6085 > (int)0))
              {
                {
                  int _11356 = _ptr__6107[safe_add( _6092,_6133 )];
                  int _11357 = _ptr__6107[safe_add( safe_add( _6092,_6133 ),(int)1 )];
                  for (int _6134 = _11356; _6134 < _11357; ++_6134)
                  {
                    {
                      _ptr__6124[safe_add( _6121,_6128 )] = _ptr__6107[safe_add( _6091,_6134 )];
                      _ptr__6126[safe_add( _6123,_6128 )] = _ptr__6109[safe_add( _6093,_6134 )];
                      ++ _6128;
                    }
                  }
                  _ptr__6124[safe_add( _6121,_6128 )] = 2;
                  _ptr__6126[safe_add( _6123,_6128 )] = m2;
                  ++ _6128;
                  _ptr__6124[safe_add( _6121,_6128 )] = 5;
                  ++ _6128;
                  _ptr__6124[safe_add( safe_add( _6122,_6129 ),(int)1 )] = _6128;
                }
              }
              else
              {
                {
                  if ((_6114 > (int)0))
                  {
                    {
                      _ptr__6124[safe_add( _6121,_6128 )] = 2;
                      _ptr__6126[safe_add( _6123,_6128 )] = 0.0;
                      ++ _6128;
                      _ptr__6124[safe_add( safe_add( _6122,_6129 ),(int)1 )] = _6128;
                    }
                  }
                  {}
                }
              }
              ++ _6129;
            }
          }
          _ptr__6124[safe_add( safe_add( _6117,_6130 ),(int)1 )] = _6129;
        }
      }
    }
  }
  else if(((!_6099) || (!_6086)))
  {
    {
      if ((!_6086))
      {
        {
          int _6135 = _6083;
          int _6136 = _6084;
          int _6137 = _6087;
          int _6138 = _6088;
          int _6139 = _6089;
          int _6140 = _6085;
          int _6141 = _6092;
          int _6142 = _6091;
          int _6143 = _6093;
          int _6144 = _6090;
          _6083 = _6096;
          _6084 = _6097;
          _6087 = _6100;
          _6088 = _6101;
          _6089 = _6102;
          _6085 = _6098;
          _6092 = _6105;
          _6091 = _6104;
          _6093 = _6106;
          _6090 = _6103;
          _6096 = _6135;
          _6097 = _6136;
          _6100 = _6137;
          _6101 = _6138;
          _6102 = _6139;
          _6098 = _6140;
          _6105 = _6092;
          _6104 = _6091;
          _6106 = _6093;
          _6103 = _6144;
        }
      }
      {}
      double _11358;
      bool _11359 = (!_6099);
      if (_11359)
      {
        _11358 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _11358 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _6145 = _11358;
      double _11360;
      bool _11361 = (!_6099);
      if (_11361)
      {
        _11360 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _11360 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _6146 = _11360;
      int _6147 = _6096;
      int _6148 = safe_add( _6097,_6084 );
      int _6149 = _6094;
      int _6150 = safe_add( _6098,_6085 );
      if (_6110)
      {
        {
          int _11362;
          bool _11363 = (_6098 > (int)0);
          if (_11363)
          {
            _11362 = safe_mul( (int)2,_6097 );
          }
          else
          {
            _11362 = _6097;
          }
          _6150 += _11362;
          int _11364;
          bool _11365 = (_6085 > (int)0);
          if (_11365)
          {
            _11364 = safe_mul( (int)2,_6084 );
          }
          else
          {
            _11364 = _6084;
          }
          _6150 += _11364;
        }
      }
      {}
      _6078->alloc_expr(_6149,_6147,_6148,false,_6150);
      int _6151 = mosek::fusion::p_WorkStack::_get_impl(_6078)->shape_base;
      int _6152 = mosek::fusion::p_WorkStack::_get_impl(_6078)->ptr_base;
      int _6153 = mosek::fusion::p_WorkStack::_get_impl(_6078)->sp_base;
      int _6154 = mosek::fusion::p_WorkStack::_get_impl(_6078)->nidxs_base;
      int _6155 = mosek::fusion::p_WorkStack::_get_impl(_6078)->cof_base;
      int _6156 = mosek::fusion::p_WorkStack::_get_impl(_6078)->code_base;
      int _6157 = mosek::fusion::p_WorkStack::_get_impl(_6078)->codeptr_base;
      int _6158 = mosek::fusion::p_WorkStack::_get_impl(_6078)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6159 = mosek::fusion::p_WorkStack::_get_impl(_6078)->i32;
      _checked_ptr_1<int> _ptr__6159(_6159 ? _6159->raw() : nullptr,_6159 ? _6159->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6160 = mosek::fusion::p_WorkStack::_get_impl(_6078)->i64;
      _checked_ptr_1<long long> _ptr__6160(_6160 ? _6160->raw() : nullptr,_6160 ? _6160->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6161 = mosek::fusion::p_WorkStack::_get_impl(_6078)->f64;
      _checked_ptr_1<double> _ptr__6161(_6161 ? _6161->raw() : nullptr,_6161 ? _6161->size(0) : 0);
      {
        int _6162 = (int)0;
        int _6163 = (int)0;
        int _6164 = (int)0;
        int _11366 = (int)0;
        int _11367 = _6149;
        for (int _6165 = _11366; _6165 < _11367; ++_6165)
        {
          {
            _ptr__6159[safe_add( _6151,_6165 )] = _ptr__6107[safe_add( _6095,_6165 )];
          }
        }
        _ptr__6159[_6152] = (int)0;
        if ((_6150 > (int)0))
        {
          {
            _ptr__6159[_6157] = (int)0;
          }
        }
        {}
        int _6166 = (int)0;
        int _6167 = (int)0;
        while ( ((_6167 < _6096) || (_6166 < _6083)) )
        {
          {
            if (((_6167 < _6096) && ((_6166 >= _6083) || (_6167 < _ptr__6108[safe_add( _6088,_6166 )]))))
            {
              {
                int _11368 = _ptr__6107[safe_add( _6100,_6167 )];
                int _11369 = _ptr__6107[safe_add( safe_add( _6100,_6167 ),(int)1 )];
                for (int _6168 = _11368; _6168 < _11369; ++_6168)
                {
                  {
                    _ptr__6160[safe_add( _6154,_6164 )] = _ptr__6108[safe_add( _6102,_6168 )];
                    _ptr__6161[safe_add( _6155,_6164 )] = (_ptr__6109[safe_add( _6103,_6168 )] * _6145);
                    if ((_6098 > (int)0))
                    {
                      {
                        int _11370 = _ptr__6107[safe_add( _6105,_6168 )];
                        int _11371 = _ptr__6107[safe_add( safe_add( _6105,_6168 ),(int)1 )];
                        for (int _6169 = _11370; _6169 < _11371; ++_6169)
                        {
                          {
                            _ptr__6159[safe_add( _6156,_6162 )] = _ptr__6107[safe_add( _6104,_6169 )];
                            _ptr__6161[safe_add( _6158,_6162 )] = _ptr__6109[safe_add( _6106,_6169 )];
                            ++ _6162;
                          }
                        }
                        _ptr__6159[safe_add( _6156,_6162 )] = 2;
                        _ptr__6161[safe_add( _6158,_6162 )] = _6145;
                        ++ _6162;
                        _ptr__6159[safe_add( _6156,_6162 )] = 5;
                        ++ _6162;
                        _ptr__6159[safe_add( safe_add( _6157,_6164 ),(int)1 )] = _6162;
                      }
                    }
                    else
                    {
                      {
                        if ((_6150 > (int)0))
                        {
                          {
                            _ptr__6159[safe_add( _6156,_6162 )] = 2;
                            _ptr__6161[safe_add( _6158,_6162 )] = 0.0;
                            ++ _6162;
                            _ptr__6159[safe_add( safe_add( _6157,_6164 ),(int)1 )] = _6162;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6164;
                  }
                }
                _ptr__6159[safe_add( safe_add( _6152,_6163 ),(int)1 )] = _6164;
                ++ _6167;
              }
            }
            else if(((_6166 < _6083) && ((_6167 >= _6096) || (_6167 > _ptr__6108[safe_add( _6088,_6166 )]))))
            {
              {
                int _11372 = _ptr__6107[safe_add( _6087,_6166 )];
                int _11373 = _ptr__6107[safe_add( safe_add( _6087,_6166 ),(int)1 )];
                for (int _6170 = _11372; _6170 < _11373; ++_6170)
                {
                  {
                    _ptr__6160[safe_add( _6154,_6164 )] = _ptr__6108[safe_add( _6089,_6170 )];
                    _ptr__6161[safe_add( _6155,_6164 )] = (_ptr__6109[safe_add( _6090,_6170 )] * _6146);
                    if ((_6085 > (int)0))
                    {
                      {
                        int _11374 = _ptr__6107[safe_add( _6092,_6170 )];
                        int _11375 = _ptr__6107[safe_add( safe_add( _6092,_6170 ),(int)1 )];
                        for (int _6171 = _11374; _6171 < _11375; ++_6171)
                        {
                          {
                            _ptr__6159[safe_add( _6156,_6162 )] = _ptr__6107[safe_add( _6091,_6171 )];
                            _ptr__6161[safe_add( _6158,_6162 )] = _ptr__6109[safe_add( _6093,_6171 )];
                            ++ _6162;
                          }
                        }
                        _ptr__6159[safe_add( _6156,_6162 )] = 2;
                        _ptr__6161[safe_add( _6158,_6162 )] = _6146;
                        ++ _6162;
                        _ptr__6159[safe_add( _6156,_6162 )] = 5;
                        ++ _6162;
                        _ptr__6159[safe_add( safe_add( _6157,_6164 ),(int)1 )] = _6162;
                      }
                    }
                    else
                    {
                      {
                        if ((_6150 > (int)0))
                        {
                          {
                            _ptr__6159[safe_add( _6156,_6162 )] = 2;
                            _ptr__6161[safe_add( _6158,_6162 )] = 0.0;
                            ++ _6162;
                            _ptr__6159[safe_add( safe_add( _6157,_6164 ),(int)1 )] = _6162;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6164;
                  }
                }
                _ptr__6159[safe_add( safe_add( _6152,_6163 ),(int)1 )] = _6164;
                ++ _6166;
              }
            }
            else
            {
              {
                int _11376 = _ptr__6107[safe_add( _6100,_6167 )];
                int _11377 = _ptr__6107[safe_add( safe_add( _6100,_6167 ),(int)1 )];
                for (int _6172 = _11376; _6172 < _11377; ++_6172)
                {
                  {
                    _ptr__6160[safe_add( _6154,_6164 )] = _ptr__6108[safe_add( _6102,_6172 )];
                    _ptr__6161[safe_add( _6155,_6164 )] = (_ptr__6109[safe_add( _6103,_6172 )] * _6145);
                    if ((_6098 > (int)0))
                    {
                      {
                        int _11378 = _ptr__6107[safe_add( _6105,_6172 )];
                        int _11379 = _ptr__6107[safe_add( safe_add( _6105,_6172 ),(int)1 )];
                        for (int _6173 = _11378; _6173 < _11379; ++_6173)
                        {
                          {
                            _ptr__6159[safe_add( _6156,_6162 )] = _ptr__6107[safe_add( _6104,_6173 )];
                            _ptr__6161[safe_add( _6158,_6162 )] = _ptr__6109[safe_add( _6106,_6173 )];
                            ++ _6162;
                          }
                        }
                        _ptr__6159[safe_add( _6156,_6162 )] = 2;
                        _ptr__6161[safe_add( _6158,_6162 )] = _6145;
                        ++ _6162;
                        _ptr__6159[safe_add( _6156,_6162 )] = 5;
                        ++ _6162;
                        _ptr__6159[safe_add( safe_add( _6157,_6164 ),(int)1 )] = _6162;
                      }
                    }
                    else
                    {
                      {
                        if ((_6150 > (int)0))
                        {
                          {
                            _ptr__6159[safe_add( _6156,_6162 )] = 2;
                            _ptr__6161[safe_add( _6158,_6162 )] = 0.0;
                            ++ _6162;
                            _ptr__6159[safe_add( safe_add( _6157,_6164 ),(int)1 )] = _6162;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6164;
                  }
                }
                int _11380 = _ptr__6107[safe_add( _6087,_6166 )];
                int _11381 = _ptr__6107[safe_add( safe_add( _6087,_6166 ),(int)1 )];
                for (int _6174 = _11380; _6174 < _11381; ++_6174)
                {
                  {
                    _ptr__6160[safe_add( _6154,_6164 )] = _ptr__6108[safe_add( _6089,_6174 )];
                    _ptr__6161[safe_add( _6155,_6164 )] = (_ptr__6109[safe_add( _6090,_6174 )] * _6146);
                    if ((_6085 > (int)0))
                    {
                      {
                        int _11382 = _ptr__6107[safe_add( _6092,_6174 )];
                        int _11383 = _ptr__6107[safe_add( safe_add( _6092,_6174 ),(int)1 )];
                        for (int _6175 = _11382; _6175 < _11383; ++_6175)
                        {
                          {
                            _ptr__6159[safe_add( _6156,_6162 )] = _ptr__6107[safe_add( _6091,_6175 )];
                            _ptr__6161[safe_add( _6158,_6162 )] = _ptr__6109[safe_add( _6093,_6175 )];
                            ++ _6162;
                          }
                        }
                        _ptr__6159[safe_add( _6156,_6162 )] = 2;
                        _ptr__6161[safe_add( _6158,_6162 )] = _6146;
                        ++ _6162;
                        _ptr__6159[safe_add( _6156,_6162 )] = 5;
                        ++ _6162;
                        _ptr__6159[safe_add( safe_add( _6157,_6164 ),(int)1 )] = _6162;
                      }
                    }
                    else
                    {
                      {
                        if ((_6150 > (int)0))
                        {
                          {
                            _ptr__6159[safe_add( _6156,_6162 )] = 2;
                            _ptr__6161[safe_add( _6158,_6162 )] = 0.0;
                            ++ _6162;
                            _ptr__6159[safe_add( safe_add( _6157,_6164 ),(int)1 )] = _6162;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6164;
                  }
                }
                _ptr__6159[safe_add( safe_add( _6152,_6163 ),(int)1 )] = _6164;
                ++ _6167;
                ++ _6166;
              }
            }
            ++ _6163;
          }
        }
        if ((_6164 != _6148))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
          }
        }
        {}
        if ((_6162 != _6150))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      int _6176 = safe_add( _6097,_6084 );
      int _6177 = (int)0;
      int _6178 = _6094;
      int _6179 = safe_add( _6098,_6085 );
      if (_6110)
      {
        {
          int _11384;
          bool _11385 = (_6098 > (int)0);
          if (_11385)
          {
            _11384 = safe_mul( (int)2,_6097 );
          }
          else
          {
            _11384 = _6097;
          }
          _6179 += _11384;
          int _11386;
          bool _11387 = (_6085 > (int)0);
          if (_11387)
          {
            _11386 = safe_mul( (int)2,_6084 );
          }
          else
          {
            _11386 = _6084;
          }
          _6179 += _11386;
        }
      }
      {}
      long long _6180 = (long long)1;
      int _11388 = (int)0;
      int _11389 = _6178;
      for (int _6181 = _11388; _6181 < _11389; ++_6181)
      {
        {
          _6180 *= _ptr__6107[safe_add( _6095,_6181 )];
        }
      }
      {
        int _6182 = (int)0;
        int _6183 = (int)0;
        while ( ((_6183 < _6096) && (_6182 < _6083)) )
        {
          {
            if ((_ptr__6108[safe_add( _6101,_6183 )] < _ptr__6108[safe_add( _6088,_6182 )]))
            {
              {
                ++ _6177;
                ++ _6183;
              }
            }
            else if((_ptr__6108[safe_add( _6101,_6183 )] > _ptr__6108[safe_add( _6088,_6182 )]))
            {
              {
                ++ _6177;
                ++ _6182;
              }
            }
            else
            {
              {
                ++ _6177;
                ++ _6183;
                ++ _6182;
              }
            }
          }
        }
        _6177 += (safe_add( (_6096 - _6183),_6083 ) - _6182);
      }
      bool _6184 = (_6177 < _6180);
      _6078->alloc_expr(_6178,_6177,_6176,_6184,_6179);
      int _6185 = mosek::fusion::p_WorkStack::_get_impl(_6078)->shape_base;
      int _6186 = mosek::fusion::p_WorkStack::_get_impl(_6078)->ptr_base;
      int _11390;
      bool _11391 = _6184;
      if (_11391)
      {
        _11390 = mosek::fusion::p_WorkStack::_get_impl(_6078)->sp_base;
      }
      else
      {
        _11390 = _6078->alloci64(_6177);
      }
      int _6187 = _11390;
      int _6188 = mosek::fusion::p_WorkStack::_get_impl(_6078)->nidxs_base;
      int _6189 = mosek::fusion::p_WorkStack::_get_impl(_6078)->cof_base;
      int _6190 = mosek::fusion::p_WorkStack::_get_impl(_6078)->code_base;
      int _6191 = mosek::fusion::p_WorkStack::_get_impl(_6078)->codeptr_base;
      int _6192 = mosek::fusion::p_WorkStack::_get_impl(_6078)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6193 = mosek::fusion::p_WorkStack::_get_impl(_6078)->i32;
      _checked_ptr_1<int> _ptr__6193(_6193 ? _6193->raw() : nullptr,_6193 ? _6193->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6194 = mosek::fusion::p_WorkStack::_get_impl(_6078)->i64;
      _checked_ptr_1<long long> _ptr__6194(_6194 ? _6194->raw() : nullptr,_6194 ? _6194->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6195 = mosek::fusion::p_WorkStack::_get_impl(_6078)->f64;
      _checked_ptr_1<double> _ptr__6195(_6195 ? _6195->raw() : nullptr,_6195 ? _6195->size(0) : 0);
      int _11392 = (int)0;
      int _11393 = _6178;
      for (int _6196 = _11392; _6196 < _11393; ++_6196)
      {
        {
          _ptr__6193[safe_add( _6185,_6196 )] = _ptr__6107[safe_add( _6095,_6196 )];
        }
      }
      {
        _ptr__6193[_6186] = (int)0;
        if ((_6179 > (int)0))
        {
          {
            _ptr__6193[_6191] = (int)0;
          }
        }
        {}
        int _6197 = (int)0;
        int _6198 = (int)0;
        int _6199 = (int)0;
        int _6200 = (int)0;
        int _6201 = (int)0;
        while ( ((_6201 < _6096) && (_6200 < _6083)) )
        {
          {
            if ((_ptr__6108[safe_add( _6101,_6201 )] < _ptr__6108[safe_add( _6088,_6200 )]))
            {
              {
                int _11394 = _ptr__6107[safe_add( _6100,_6201 )];
                int _11395 = _ptr__6107[safe_add( safe_add( _6100,_6201 ),(int)1 )];
                for (int _6202 = _11394; _6202 < _11395; ++_6202)
                {
                  {
                    _ptr__6194[safe_add( _6188,_6199 )] = _ptr__6108[safe_add( _6102,_6202 )];
                    _ptr__6195[safe_add( _6189,_6199 )] = (m1 * _ptr__6109[safe_add( _6103,_6202 )]);
                    if ((_6098 > (int)0))
                    {
                      {
                        int _11396 = _ptr__6107[safe_add( _6105,_6202 )];
                        int _11397 = _ptr__6107[safe_add( safe_add( _6105,_6202 ),(int)1 )];
                        for (int _6203 = _11396; _6203 < _11397; ++_6203)
                        {
                          {
                            _ptr__6193[safe_add( _6190,_6197 )] = _ptr__6107[safe_add( _6104,_6203 )];
                            _ptr__6195[safe_add( _6192,_6197 )] = _ptr__6109[safe_add( _6106,_6203 )];
                            ++ _6197;
                          }
                        }
                        _ptr__6193[safe_add( _6190,_6197 )] = 2;
                        _ptr__6195[safe_add( _6192,_6197 )] = m1;
                        ++ _6197;
                        _ptr__6193[safe_add( _6190,_6197 )] = 5;
                        ++ _6197;
                        _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                      }
                    }
                    else
                    {
                      {
                        if ((_6179 > (int)0))
                        {
                          {
                            _ptr__6193[safe_add( _6190,_6197 )] = 2;
                            _ptr__6195[safe_add( _6192,_6197 )] = (int)0;
                            ++ _6197;
                            _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6199;
                  }
                }
                _ptr__6194[safe_add( _6187,_6198 )] = _ptr__6108[safe_add( _6101,_6201 )];
                _ptr__6193[safe_add( safe_add( _6186,_6198 ),(int)1 )] = _6199;
                ++ _6198;
                ++ _6201;
              }
            }
            else if((_ptr__6108[safe_add( _6088,_6200 )] < _ptr__6108[safe_add( _6101,_6201 )]))
            {
              {
                int _11398 = _ptr__6107[safe_add( _6087,_6200 )];
                int _11399 = _ptr__6107[safe_add( safe_add( _6087,_6200 ),(int)1 )];
                for (int _6204 = _11398; _6204 < _11399; ++_6204)
                {
                  {
                    _ptr__6194[safe_add( _6188,_6199 )] = _ptr__6108[safe_add( _6089,_6204 )];
                    _ptr__6195[safe_add( _6189,_6199 )] = (m2 * _ptr__6109[safe_add( _6090,_6204 )]);
                    if ((_6085 > (int)0))
                    {
                      {
                        int _11400 = _ptr__6107[safe_add( _6092,_6204 )];
                        int _11401 = _ptr__6107[safe_add( safe_add( _6092,_6204 ),(int)1 )];
                        for (int _6205 = _11400; _6205 < _11401; ++_6205)
                        {
                          {
                            _ptr__6193[safe_add( _6190,_6197 )] = _ptr__6107[safe_add( _6091,_6205 )];
                            _ptr__6195[safe_add( _6192,_6197 )] = _ptr__6109[safe_add( _6093,_6205 )];
                            ++ _6197;
                          }
                        }
                        _ptr__6193[safe_add( _6190,_6197 )] = 2;
                        _ptr__6195[safe_add( _6192,_6197 )] = m2;
                        ++ _6197;
                        _ptr__6193[safe_add( _6190,_6197 )] = 5;
                        ++ _6197;
                        _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                      }
                    }
                    else
                    {
                      {
                        if ((_6179 > (int)0))
                        {
                          {
                            _ptr__6193[safe_add( _6190,_6197 )] = 2;
                            _ptr__6195[safe_add( _6192,_6197 )] = (int)0;
                            ++ _6197;
                            _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6199;
                  }
                }
                _ptr__6194[safe_add( _6187,_6198 )] = _ptr__6108[safe_add( _6088,_6200 )];
                _ptr__6193[safe_add( safe_add( _6186,_6198 ),(int)1 )] = _6199;
                ++ _6198;
                ++ _6200;
              }
            }
            else
            {
              {
                int _11402 = _ptr__6107[safe_add( _6100,_6201 )];
                int _11403 = _ptr__6107[safe_add( safe_add( _6100,_6201 ),(int)1 )];
                for (int _6206 = _11402; _6206 < _11403; ++_6206)
                {
                  {
                    _ptr__6194[safe_add( _6188,_6199 )] = _ptr__6108[safe_add( _6102,_6206 )];
                    _ptr__6195[safe_add( _6189,_6199 )] = (m1 * _ptr__6109[safe_add( _6103,_6206 )]);
                    if ((_6098 > (int)0))
                    {
                      {
                        int _11404 = _ptr__6107[safe_add( _6105,_6206 )];
                        int _11405 = _ptr__6107[safe_add( safe_add( _6105,_6206 ),(int)1 )];
                        for (int _6207 = _11404; _6207 < _11405; ++_6207)
                        {
                          {
                            _ptr__6193[safe_add( _6190,_6197 )] = _ptr__6107[safe_add( _6104,_6207 )];
                            _ptr__6195[safe_add( _6192,_6197 )] = _ptr__6109[safe_add( _6106,_6207 )];
                            ++ _6197;
                          }
                        }
                        _ptr__6193[safe_add( _6190,_6197 )] = 2;
                        _ptr__6195[safe_add( _6192,_6197 )] = m1;
                        ++ _6197;
                        _ptr__6193[safe_add( _6190,_6197 )] = 5;
                        ++ _6197;
                        _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                      }
                    }
                    else
                    {
                      {
                        if ((_6179 > (int)0))
                        {
                          {
                            _ptr__6193[safe_add( _6190,_6197 )] = 2;
                            _ptr__6195[safe_add( _6192,_6197 )] = (int)0;
                            ++ _6197;
                            _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6199;
                  }
                }
                int _11406 = _ptr__6107[safe_add( _6087,_6200 )];
                int _11407 = _ptr__6107[safe_add( safe_add( _6087,_6200 ),(int)1 )];
                for (int _6208 = _11406; _6208 < _11407; ++_6208)
                {
                  {
                    _ptr__6194[safe_add( _6188,_6199 )] = _ptr__6108[safe_add( _6089,_6208 )];
                    _ptr__6195[safe_add( _6189,_6199 )] = (m2 * _ptr__6109[safe_add( _6090,_6208 )]);
                    if ((_6085 > (int)0))
                    {
                      {
                        int _11408 = _ptr__6107[safe_add( _6092,_6208 )];
                        int _11409 = _ptr__6107[safe_add( safe_add( _6092,_6208 ),(int)1 )];
                        for (int _6209 = _11408; _6209 < _11409; ++_6209)
                        {
                          {
                            _ptr__6193[safe_add( _6190,_6197 )] = _ptr__6107[safe_add( _6091,_6209 )];
                            _ptr__6195[safe_add( _6192,_6197 )] = _ptr__6109[safe_add( _6093,_6209 )];
                            ++ _6197;
                          }
                        }
                        _ptr__6193[safe_add( _6190,_6197 )] = 2;
                        _ptr__6195[safe_add( _6192,_6197 )] = m2;
                        ++ _6197;
                        _ptr__6193[safe_add( _6190,_6197 )] = 5;
                        ++ _6197;
                        _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                      }
                    }
                    else
                    {
                      {
                        if ((_6179 > (int)0))
                        {
                          {
                            _ptr__6193[safe_add( _6190,_6197 )] = 2;
                            _ptr__6195[safe_add( _6192,_6197 )] = (int)0;
                            ++ _6197;
                            _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6199;
                  }
                }
                _ptr__6194[safe_add( _6187,_6198 )] = _ptr__6108[safe_add( _6101,_6201 )];
                _ptr__6193[safe_add( safe_add( _6186,_6198 ),(int)1 )] = _6199;
                ++ _6198;
                ++ _6201;
                ++ _6200;
              }
            }
          }
        }
        while ( (_6201 < _6096) )
        {
          {
            int _11410 = _ptr__6107[safe_add( _6100,_6201 )];
            int _11411 = _ptr__6107[safe_add( safe_add( _6100,_6201 ),(int)1 )];
            for (int _6210 = _11410; _6210 < _11411; ++_6210)
            {
              {
                _ptr__6194[safe_add( _6188,_6199 )] = _ptr__6108[safe_add( _6102,_6210 )];
                _ptr__6195[safe_add( _6189,_6199 )] = (m1 * _ptr__6109[safe_add( _6103,_6210 )]);
                if ((_6098 > (int)0))
                {
                  {
                    int _11412 = _ptr__6107[safe_add( _6105,_6210 )];
                    int _11413 = _ptr__6107[safe_add( safe_add( _6105,_6210 ),(int)1 )];
                    for (int _6211 = _11412; _6211 < _11413; ++_6211)
                    {
                      {
                        _ptr__6193[safe_add( _6190,_6197 )] = _ptr__6107[safe_add( _6104,_6211 )];
                        _ptr__6195[safe_add( _6192,_6197 )] = _ptr__6109[safe_add( _6106,_6211 )];
                        ++ _6197;
                      }
                    }
                    _ptr__6193[safe_add( _6190,_6197 )] = 2;
                    _ptr__6195[safe_add( _6192,_6197 )] = m1;
                    ++ _6197;
                    _ptr__6193[safe_add( _6190,_6197 )] = 5;
                    ++ _6197;
                    _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                  }
                }
                else
                {
                  {
                    if ((_6179 > (int)0))
                    {
                      {
                        _ptr__6193[safe_add( _6190,_6197 )] = 2;
                        _ptr__6195[safe_add( _6192,_6197 )] = (int)0;
                        ++ _6197;
                        _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                      }
                    }
                    {}
                  }
                }
                ++ _6199;
              }
            }
            _ptr__6194[safe_add( _6187,_6198 )] = _ptr__6108[safe_add( _6101,_6201 )];
            _ptr__6193[safe_add( safe_add( _6186,_6198 ),(int)1 )] = _6199;
            ++ _6198;
            ++ _6201;
          }
        }
        while ( (_6200 < _6083) )
        {
          {
            int _11414 = _ptr__6107[safe_add( _6087,_6200 )];
            int _11415 = _ptr__6107[safe_add( safe_add( _6087,_6200 ),(int)1 )];
            for (int _6212 = _11414; _6212 < _11415; ++_6212)
            {
              {
                _ptr__6194[safe_add( _6188,_6199 )] = _ptr__6108[safe_add( _6089,_6212 )];
                _ptr__6195[safe_add( _6189,_6199 )] = (m2 * _ptr__6109[safe_add( _6090,_6212 )]);
                if ((_6085 > (int)0))
                {
                  {
                    int _11416 = _ptr__6107[safe_add( _6092,_6212 )];
                    int _11417 = _ptr__6107[safe_add( safe_add( _6092,_6212 ),(int)1 )];
                    for (int _6213 = _11416; _6213 < _11417; ++_6213)
                    {
                      {
                        _ptr__6193[safe_add( _6190,_6197 )] = _ptr__6107[safe_add( _6091,_6213 )];
                        _ptr__6195[safe_add( _6192,_6197 )] = _ptr__6109[safe_add( _6093,_6213 )];
                        ++ _6197;
                      }
                    }
                    _ptr__6193[safe_add( _6190,_6197 )] = 2;
                    _ptr__6195[safe_add( _6192,_6197 )] = m2;
                    ++ _6197;
                    _ptr__6193[safe_add( _6190,_6197 )] = 5;
                    ++ _6197;
                    _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                  }
                }
                else
                {
                  {
                    if ((_6179 > (int)0))
                    {
                      {
                        _ptr__6193[safe_add( _6190,_6197 )] = 2;
                        _ptr__6195[safe_add( _6192,_6197 )] = (int)0;
                        ++ _6197;
                        _ptr__6193[safe_add( safe_add( _6191,_6199 ),(int)1 )] = _6197;
                      }
                    }
                    {}
                  }
                }
                ++ _6199;
              }
            }
            _ptr__6194[safe_add( _6187,_6198 )] = _ptr__6108[safe_add( _6088,_6200 )];
            _ptr__6193[safe_add( safe_add( _6186,_6198 ),(int)1 )] = _6199;
            ++ _6198;
            ++ _6200;
          }
        }
      }
      if ((!_6184))
      {
        {
          _6078->popi64(_6177);
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprAdd::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("; "))->__mosek_2fusion_2Utils_2StringBuffer__a(m1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(m2)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprAdd::destroy(){e2.reset();e1.reset();}void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprWSum::p_ExprWSum  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6214,    std::shared_ptr< monty::ndarray< double,1 > > _6215){ return new mosek::fusion::ExprWSum(_6214,_6215); }mosek::fusion::ExprWSum::ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6214,    std::shared_ptr< monty::ndarray< double,1 > > _6215) :    ExprWSum(new mosek::fusion::p_ExprWSum(this)){ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_6214,_6215); }void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6214,    std::shared_ptr< monty::ndarray< double,1 > > _6215){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__6215(_6215 ? _6215->raw() : nullptr, _6215 ? _6215->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_6214)((int)0))->getShape());
    if (((int)((_6215)->size(0)) != (int)((_6214)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_6215);
    std::shared_ptr< monty::ndarray< int,1 > > _6216 = ((*_6214)((int)0))->getShape();
    _checked_ptr_1<int> _ptr__6216(_6216 ? _6216->raw() : nullptr,_6216 ? _6216->size(0) : 0);
    int _6217 = (int)((_6216)->size(0));
    int _11418 = (int)1;
    int _11419 = (int)((_6214)->size(0));
    for (int _6218 = _11418; _6218 < _11419; ++_6218)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _6219 = ((*_6214)(_6218))->getShape();
        _checked_ptr_1<int> _ptr__6219(_6219 ? _6219->raw() : nullptr,_6219 ? _6219->size(0) : 0);
        if ((_6217 != (int)((_6219)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int _11420 = (int)0;
            int _11421 = _6217;
            for (int _6220 = _11420; _6220 < _11421; ++_6220)
            {
              {
                if ((_ptr__6216[_6220] != _ptr__6219[_6220]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _11422;
    for (int _6221 = (int)0, _11423 = (int)((_6214)->size(0)); _6221 < _11423 ; ++_6221)
    {
      _11422.push_back(((*_6214)(_6221)));
    }
    auto _11424 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11422.size()),_11422.begin(),_11422.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _11424;
  }
}void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6222,monty::rc_ptr< ::mosek::fusion::WorkStack > _6223,monty::rc_ptr< ::mosek::fusion::WorkStack > _6224) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_6222,_6223,_6224); }void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6222,monty::rc_ptr< ::mosek::fusion::WorkStack > _6223,monty::rc_ptr< ::mosek::fusion::WorkStack > _6224){
  int _6225 = (int)((es)->size(0));
  int _11425 = (int)0;
  int _11426 = _6225;
  for (int _6226 = _11425; _6226 < _11426; ++_6226)
  {
    {
      ((*es)(_6226))->eval(_6223,_6222,_6224);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6227 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6227(_6227 ? _6227->raw() : nullptr,_6227 ? _6227->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6228 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6228(_6228 ? _6228->raw() : nullptr,_6228 ? _6228->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6229 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6229(_6229 ? _6229->raw() : nullptr,_6229 ? _6229->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6230 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6230(_6230 ? _6230->raw() : nullptr,_6230 ? _6230->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6231 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6231(_6231 ? _6231->raw() : nullptr,_6231 ? _6231->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6232 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6232(_6232 ? _6232->raw() : nullptr,_6232 ? _6232->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6233 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6233(_6233 ? _6233->raw() : nullptr,_6233 ? _6233->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6234 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6234(_6234 ? _6234->raw() : nullptr,_6234 ? _6234->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6235 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6235(_6235 ? _6235->raw() : nullptr,_6235 ? _6235->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6236 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6236(_6236 ? _6236->raw() : nullptr,_6236 ? _6236->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6237 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6237(_6237 ? _6237->raw() : nullptr,_6237 ? _6237->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6238 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
  _checked_ptr_1<int> _ptr__6238(_6238 ? _6238->raw() : nullptr,_6238 ? _6238->size(0) : 0);
  std::shared_ptr< monty::ndarray< bool,1 > > _6239 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6225)));
  int _11427 = (int)0;
  int _11428 = _6225;
  for (int _6240 = _11427; _6240 < _11428; ++_6240)
  {
    {
      _6223->pop_expr();
      _ptr__6227[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->nd;
      _ptr__6228[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->nelem;
      _ptr__6229[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->nnz;
      _ptr__6230[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->ncodeatom;
      _ptr__6231[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->ptr_base;
      _ptr__6233[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->sp_base;
      _ptr__6232[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->nidxs_base;
      _ptr__6234[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->cof_base;
      _ptr__6235[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->shape_base;
      _ptr__6236[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->code_base;
      _ptr__6237[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->codeptr_base;
      _ptr__6238[((_6225 - (int)1) - _6240)] = mosek::fusion::p_WorkStack::_get_impl(_6223)->cconst_base;
      ((*_6239)(((_6225 - (int)1) - _6240))) = mosek::fusion::p_WorkStack::_get_impl(_6223)->hassp;
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6241 = mosek::fusion::p_WorkStack::_get_impl(_6223)->i32;
  _checked_ptr_1<int> _ptr__6241(_6241 ? _6241->raw() : nullptr,_6241 ? _6241->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6242 = mosek::fusion::p_WorkStack::_get_impl(_6223)->i64;
  _checked_ptr_1<long long> _ptr__6242(_6242 ? _6242->raw() : nullptr,_6242 ? _6242->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6243 = mosek::fusion::p_WorkStack::_get_impl(_6223)->f64;
  _checked_ptr_1<double> _ptr__6243(_6243 ? _6243->raw() : nullptr,_6243 ? _6243->size(0) : 0);
  {
    bool _6244 = true;
    int _11429 = (int)1;
    int _11430 = _6225;
    for (int _6245 = _11429; _6245 < _11430; ++_6245)
    {
      {
        _6244 = (_6244 && (_ptr__6227[(int)0] == _ptr__6227[_6245]));
        int _11431 = (int)0;
        int _11432 = _ptr__6227[(int)0];
        for (int _6246 = _11431; _6246 < _11432; ++_6246)
        {
          {
            _6244 = (_6244 && (_ptr__6241[safe_add( _ptr__6235[(int)0],_6246 )] == _ptr__6241[safe_add( _ptr__6235[_6245],_6246 )]));
          }
        }
      }
    }
    if ((!_6244))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
  }
  std::vector<int> _11433;
  for (int _6248 = (int)0, _11434 = _ptr__6227[(int)0]; _6248 < _11434 ; ++_6248)
  {
    _11433.push_back(_ptr__6241[safe_add( _ptr__6235[(int)0],_6248 )]);
  }
  auto _11435 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11433.size()),_11433.begin(),_11433.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6247 = _11435;
  _checked_ptr_1<int> _ptr__6247(_6247 ? _6247->raw() : nullptr,_6247 ? _6247->size(0) : 0);
  bool _6249 = false;
  int _11436 = (int)0;
  int _11437 = _6225;
  for (int _6250 = _11436; _6250 < _11437; ++_6250)
  {
    {
      if ((!((*_6239)(_6250))))
      {
        {
          _6249 = true;
        }
      }
      {}
    }
  }
  bool _6251 = false;
  int _11438 = (int)0;
  int _11439 = _6225;
  for (int _6252 = _11438; _6252 < _11439; ++_6252)
  {
    {
      if ((_ptr__6230[_6252] > (int)0))
      {
        {
          _6251 = true;
        }
      }
      {}
    }
  }
  int _6253 = (int)0;
  int _6254 = (int)0;
  int _6255 = (int)0;
  if (_6249)
  {
    {
      _6254 = (int)::mosek::fusion::p_Set::size(_6247);
      int _11440 = (int)0;
      int _11441 = _6225;
      for (int _6256 = _11440; _6256 < _11441; ++_6256)
      {
        {
          _6255 += _ptr__6229[_6256];
          if (_6251)
          {
            {
              int _11442;
              bool _11443 = (_ptr__6230[_6256] > (int)0);
              if (_11443)
              {
                _11442 = safe_add( _ptr__6230[_6256],safe_mul( (int)2,_ptr__6229[_6256] ) );
              }
              else
              {
                _11442 = _ptr__6229[_6256];
              }
              _6253 += _11442;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      bool _6257 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _6258 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
      _checked_ptr_1<int> _ptr__6258(_6258 ? _6258->raw() : nullptr,_6258 ? _6258->size(0) : 0);
      int _11444 = (int)0;
      int _11445 = _6225;
      for (int _6259 = _11444; _6259 < _11445; ++_6259)
      {
        {
          _6255 += _ptr__6229[_6259];
          if (_6251)
          {
            {
              int _11446;
              bool _11447 = (_ptr__6230[_6259] > (int)0);
              if (_11447)
              {
                _11446 = safe_add( _ptr__6230[_6259],safe_mul( (int)2,_ptr__6229[_6259] ) );
              }
              else
              {
                _11446 = _ptr__6229[_6259];
              }
              _6253 += _11446;
            }
          }
          {}
        }
      }
      while ( (!_6257) )
      {
        {
          long long _6260 = (-(int)1);
          int _11448 = (int)0;
          int _11449 = _6225;
          for (int _6261 = _11448; _6261 < _11449; ++_6261)
          {
            {
              if (((_ptr__6258[_6261] < _ptr__6228[_6261]) && ((_6260 < (int)0) || (_ptr__6242[safe_add( _ptr__6233[_6261],_ptr__6258[_6261] )] < _6260))))
              {
                {
                  _6260 = _ptr__6242[safe_add( _ptr__6233[_6261],_ptr__6258[_6261] )];
                }
              }
              {}
            }
          }
          if ((_6260 < (int)0))
          {
            {
              _6257 = true;
            }
          }
          else
          {
            {
              int _11450 = (int)0;
              int _11451 = _6225;
              for (int _6262 = _11450; _6262 < _11451; ++_6262)
              {
                {
                  if (((_ptr__6258[_6262] < _ptr__6228[_6262]) && (_6260 == _ptr__6242[safe_add( _ptr__6233[_6262],_ptr__6258[_6262] )])))
                  {
                    {
                      ++ _ptr__6258[_6262];
                    }
                  }
                  {}
                }
              }
              ++ _6254;
            }
          }
        }
      }
    }
  }
  _6222->alloc_expr(_ptr__6227[(int)0],_6254,_6255,(!_6249),_6253);
  int _6263 = mosek::fusion::p_WorkStack::_get_impl(_6222)->ptr_base;
  int _6264 = mosek::fusion::p_WorkStack::_get_impl(_6222)->nidxs_base;
  int _6265 = mosek::fusion::p_WorkStack::_get_impl(_6222)->sp_base;
  int _6266 = mosek::fusion::p_WorkStack::_get_impl(_6222)->shape_base;
  int _6267 = mosek::fusion::p_WorkStack::_get_impl(_6222)->cof_base;
  int _6268 = mosek::fusion::p_WorkStack::_get_impl(_6222)->code_base;
  int _6269 = mosek::fusion::p_WorkStack::_get_impl(_6222)->codeptr_base;
  int _6270 = mosek::fusion::p_WorkStack::_get_impl(_6222)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6271 = mosek::fusion::p_WorkStack::_get_impl(_6222)->i32;
  _checked_ptr_1<int> _ptr__6271(_6271 ? _6271->raw() : nullptr,_6271 ? _6271->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6272 = mosek::fusion::p_WorkStack::_get_impl(_6222)->i64;
  _checked_ptr_1<long long> _ptr__6272(_6272 ? _6272->raw() : nullptr,_6272 ? _6272->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6273 = mosek::fusion::p_WorkStack::_get_impl(_6222)->f64;
  _checked_ptr_1<double> _ptr__6273(_6273 ? _6273->raw() : nullptr,_6273 ? _6273->size(0) : 0);
  int _11452 = (int)0;
  int _11453 = _ptr__6227[(int)0];
  for (int _6274 = _11452; _6274 < _11453; ++_6274)
  {
    {
      _ptr__6271[safe_add( _6266,_6274 )] = _ptr__6241[safe_add( _ptr__6235[(int)0],_6274 )];
    }
  }
  if ((_6253 > (int)0))
  {
    {
      _ptr__6271[_6269] = (int)0;
    }
  }
  {}
  int _11454 = (int)0;
  int _11455 = safe_add( _6254,(int)1 );
  for (int _6275 = _11454; _6275 < _11455; ++_6275)
  {
    {
      _ptr__6271[safe_add( _6263,_6275 )] = (int)0;
    }
  }
  if (_6249)
  {
    {
      int _6276 = (-(int)9999);
      if ((_6253 > (int)0))
      {
        {
          _6276 = _6224->alloci32(safe_add( _6254,(int)1 ));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _6277 = mosek::fusion::p_WorkStack::_get_impl(_6224)->i32;
      _checked_ptr_1<int> _ptr__6277(_6277 ? _6277->raw() : nullptr,_6277 ? _6277->size(0) : 0);
      if ((_6253 > (int)0))
      {
        {
          int _11456 = (int)0;
          int _11457 = safe_add( _6254,(int)1 );
          for (int _6278 = _11456; _6278 < _11457; ++_6278)
          {
            {
              _ptr__6277[safe_add( _6276,_6278 )] = (int)0;
            }
          }
        }
      }
      {}
      int _11458 = (int)0;
      int _11459 = _6225;
      for (int _6279 = _11458; _6279 < _11459; ++_6279)
      {
        {
          if (((*_6239)(_6279)))
          {
            {
              int _11460 = (int)0;
              int _11461 = _ptr__6228[_6279];
              for (int _6280 = _11460; _6280 < _11461; ++_6280)
              {
                {
                  _ptr__6271[safe_add( safe_add( _6263,_ptr__6242[safe_add( _ptr__6233[_6279],_6280 )] ),(int)1 )] += (_ptr__6241[safe_add( safe_add( _ptr__6231[_6279],_6280 ),(int)1 )] - _ptr__6241[safe_add( _ptr__6231[_6279],_6280 )]);
                }
              }
              if ((_ptr__6230[_6279] > (int)0))
              {
                {
                  int _11462 = (int)0;
                  int _11463 = _ptr__6228[_6279];
                  for (int _6281 = _11462; _6281 < _11463; ++_6281)
                  {
                    {
                      _ptr__6277[safe_add( safe_add( _6276,_ptr__6242[safe_add( _ptr__6233[_6279],_6281 )] ),(int)1 )] += safe_add( (_ptr__6241[safe_add( _ptr__6237[_6279],_ptr__6241[safe_add( safe_add( _ptr__6231[_6279],_6281 ),(int)1 )] )] - _ptr__6241[safe_add( _ptr__6237[_6279],_ptr__6241[safe_add( _ptr__6231[_6279],_6281 )] )]),safe_mul( (int)2,(_ptr__6241[safe_add( safe_add( _ptr__6231[_6279],_6281 ),(int)1 )] - _ptr__6241[safe_add( _ptr__6231[_6279],_6281 )]) ) );
                    }
                  }
                }
              }
              else if(_6251)
              {
                {
                  int _11464 = (int)0;
                  int _11465 = _ptr__6228[_6279];
                  for (int _6282 = _11464; _6282 < _11465; ++_6282)
                  {
                    {
                      _ptr__6277[safe_add( safe_add( _6276,_ptr__6242[safe_add( _ptr__6233[_6279],_6282 )] ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
          else
          {
            {
              int _11466 = (int)0;
              int _11467 = _ptr__6228[_6279];
              for (int _6283 = _11466; _6283 < _11467; ++_6283)
              {
                {
                  _ptr__6271[safe_add( safe_add( _6263,_6283 ),(int)1 )] += (_ptr__6241[safe_add( safe_add( _ptr__6231[_6279],_6283 ),(int)1 )] - _ptr__6241[safe_add( _ptr__6231[_6279],_6283 )]);
                }
              }
              if ((_ptr__6230[_6279] > (int)0))
              {
                {
                  int _11468 = (int)0;
                  int _11469 = _ptr__6228[_6279];
                  for (int _6284 = _11468; _6284 < _11469; ++_6284)
                  {
                    {
                      _ptr__6277[safe_add( safe_add( _6276,_6284 ),(int)1 )] += safe_add( (_ptr__6241[safe_add( _ptr__6237[_6279],_ptr__6241[safe_add( safe_add( _ptr__6231[_6279],_6284 ),(int)1 )] )] - _ptr__6241[safe_add( _ptr__6237[_6279],_ptr__6241[safe_add( _ptr__6231[_6279],_6284 )] )]),safe_mul( (int)2,(_ptr__6241[safe_add( safe_add( _ptr__6231[_6279],_6284 ),(int)1 )] - _ptr__6241[safe_add( _ptr__6231[_6279],_6284 )]) ) );
                    }
                  }
                }
              }
              else if(_6251)
              {
                {
                  int _11470 = (int)0;
                  int _11471 = _ptr__6228[_6279];
                  for (int _6285 = _11470; _6285 < _11471; ++_6285)
                  {
                    {
                      _ptr__6277[safe_add( safe_add( _6276,_6285 ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
        }
      }
      int _11472 = (int)0;
      int _11473 = _6254;
      for (int _6286 = _11472; _6286 < _11473; ++_6286)
      {
        {
          _ptr__6271[safe_add( safe_add( _6263,_6286 ),(int)1 )] += _ptr__6271[safe_add( _6263,_6286 )];
        }
      }
      if ((_6253 > (int)0))
      {
        {
          int _11474 = (int)0;
          int _11475 = _6254;
          for (int _6287 = _11474; _6287 < _11475; ++_6287)
          {
            {
              _ptr__6277[safe_add( safe_add( _6276,_6287 ),(int)1 )] += _ptr__6277[safe_add( _6276,_6287 )];
            }
          }
        }
      }
      {}
      int _11476 = (int)0;
      int _11477 = _6225;
      for (int _6288 = _11476; _6288 < _11477; ++_6288)
      {
        {
          if (((*_6239)(_6288)))
          {
            {
              int _11478 = (int)0;
              int _11479 = _ptr__6228[_6288];
              for (int _6289 = _11478; _6289 < _11479; ++_6289)
              {
                {
                  int _6290 = _ptr__6241[safe_add( _ptr__6231[_6288],_6289 )];
                  int _6291 = _ptr__6241[safe_add( safe_add( _ptr__6231[_6288],_6289 ),(int)1 )];
                  long long _6292 = _ptr__6242[safe_add( _ptr__6233[_6288],_6289 )];
                  int _6293 = _ptr__6271[safe_add( _6263,_6292 )];
                  int _11480;
                  bool _11481 = _6251;
                  if (_11481)
                  {
                    _11480 = _ptr__6277[safe_add( _6276,_6292 )];
                  }
                  else
                  {
                    _11480 = (-(int)10000);
                  }
                  int _6294 = _11480;
                  int _11482 = _6290;
                  int _11483 = _6291;
                  for (int _6295 = _11482; _6295 < _11483; ++_6295)
                  {
                    {
                      _ptr__6272[safe_add( _6264,_6293 )] = _ptr__6242[safe_add( _ptr__6232[_6288],_6295 )];
                      _ptr__6273[safe_add( _6267,_6293 )] = (((*w)(_6288)) * _ptr__6243[safe_add( _ptr__6234[_6288],_6295 )]);
                      if (_6251)
                      {
                        {
                          if ((_ptr__6230[_6288] > (int)0))
                          {
                            {
                              int _11484 = _ptr__6241[safe_add( _ptr__6237[_6288],_6295 )];
                              int _11485 = _ptr__6241[safe_add( safe_add( _ptr__6237[_6288],_6295 ),(int)1 )];
                              for (int _6296 = _11484; _6296 < _11485; ++_6296)
                              {
                                {
                                  _ptr__6271[safe_add( _6268,_6294 )] = _ptr__6241[safe_add( _ptr__6236[_6288],_6296 )];
                                  _ptr__6273[safe_add( _6270,_6294 )] = _ptr__6243[safe_add( _ptr__6238[_6288],_6296 )];
                                  ++ _6294;
                                }
                              }
                              _ptr__6271[safe_add( _6268,_6294 )] = 2;
                              _ptr__6273[safe_add( _6270,_6294 )] = ((*w)(_6288));
                              ++ _6294;
                              _ptr__6271[safe_add( _6268,_6294 )] = 5;
                              ++ _6294;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6271[safe_add( _6268,_6294 )] = 2;
                              _ptr__6273[safe_add( _6270,_6294 )] = 0.0;
                              ++ _6294;
                            }
                          }
                          _ptr__6271[safe_add( safe_add( _6269,_6293 ),(int)1 )] = _6294;
                        }
                      }
                      {}
                      ++ _6293;
                    }
                  }
                  if (_6251)
                  {
                    {
                      _ptr__6277[safe_add( _6276,_6292 )] = _6294;
                    }
                  }
                  {}
                  _ptr__6271[safe_add( _6263,_6292 )] += (_6291 - _6290);
                }
              }
            }
          }
          else
          {
            {
              int _11486 = (int)0;
              int _11487 = _ptr__6228[_6288];
              for (int _6297 = _11486; _6297 < _11487; ++_6297)
              {
                {
                  int _6298 = _ptr__6241[safe_add( _ptr__6231[_6288],_6297 )];
                  int _6299 = _ptr__6241[safe_add( safe_add( _ptr__6231[_6288],_6297 ),(int)1 )];
                  int _6300 = _6297;
                  int _6301 = _ptr__6271[safe_add( _6263,_6300 )];
                  int _11488;
                  bool _11489 = _6251;
                  if (_11489)
                  {
                    _11488 = _ptr__6277[safe_add( _6276,_6300 )];
                  }
                  else
                  {
                    _11488 = (-(int)10000);
                  }
                  int _6302 = _11488;
                  int _11490 = _6298;
                  int _11491 = _6299;
                  for (int _6303 = _11490; _6303 < _11491; ++_6303)
                  {
                    {
                      _ptr__6272[safe_add( _6264,_6301 )] = _ptr__6242[safe_add( _ptr__6232[_6288],_6303 )];
                      _ptr__6273[safe_add( _6267,_6301 )] = (((*w)(_6288)) * _ptr__6243[safe_add( _ptr__6234[_6288],_6303 )]);
                      if (_6251)
                      {
                        {
                          if ((_ptr__6230[_6288] > (int)0))
                          {
                            {
                              int _11492 = _ptr__6241[safe_add( _ptr__6237[_6288],_6303 )];
                              int _11493 = _ptr__6241[safe_add( safe_add( _ptr__6237[_6288],_6303 ),(int)1 )];
                              for (int _6304 = _11492; _6304 < _11493; ++_6304)
                              {
                                {
                                  _ptr__6271[safe_add( _6268,_6302 )] = _ptr__6241[safe_add( _ptr__6236[_6288],_6304 )];
                                  _ptr__6273[safe_add( _6270,_6302 )] = _ptr__6243[safe_add( _ptr__6238[_6288],_6304 )];
                                  ++ _6302;
                                }
                              }
                              _ptr__6271[safe_add( _6268,_6302 )] = 2;
                              _ptr__6273[safe_add( _6270,_6302 )] = ((*w)(_6288));
                              ++ _6302;
                              _ptr__6271[safe_add( _6268,_6302 )] = 5;
                              ++ _6302;
                              _ptr__6271[safe_add( safe_add( _6269,_6301 ),(int)1 )] = _6302;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6271[safe_add( _6268,_6302 )] = 2;
                              _ptr__6273[safe_add( _6270,_6302 )] = 0.0;
                              ++ _6302;
                            }
                          }
                          _ptr__6271[safe_add( safe_add( _6269,_6301 ),(int)1 )] = _6302;
                        }
                      }
                      {}
                      ++ _6301;
                    }
                  }
                  if (_6251)
                  {
                    {
                      _ptr__6277[safe_add( _6276,_6300 )] = _6302;
                    }
                  }
                  {}
                  _ptr__6271[safe_add( _6263,_6300 )] += (_6299 - _6298);
                }
              }
            }
          }
        }
      }
      int _11494 = (int)0;
      int _11495 = _6254;
      for (int _6305 = _11494; _6305 < _11495; ++_6305)
      {
        {
          _ptr__6271[(safe_add( _6263,_6254 ) - _6305)] = _ptr__6271[((safe_add( _6263,_6254 ) - _6305) - (int)1)];
        }
      }
      _ptr__6271[_6263] = (int)0;
    }
  }
  else
  {
    {
      bool _6306 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _6307 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6225)));
      _checked_ptr_1<int> _ptr__6307(_6307 ? _6307->raw() : nullptr,_6307 ? _6307->size(0) : 0);
      int _6308 = (int)0;
      int _6309 = (int)0;
      int _6310 = (int)0;
      while ( (!_6306) )
      {
        {
          long long _6311 = (-(int)1);
          int _11496 = (int)0;
          int _11497 = _6225;
          for (int _6312 = _11496; _6312 < _11497; ++_6312)
          {
            {
              if (((_ptr__6307[_6312] < _ptr__6228[_6312]) && ((_6311 < (int)0) || (_ptr__6242[safe_add( _ptr__6233[_6312],_ptr__6307[_6312] )] < _6311))))
              {
                {
                  _6311 = _ptr__6242[safe_add( _ptr__6233[_6312],_ptr__6307[_6312] )];
                }
              }
              {}
            }
          }
          if ((_6311 < (int)0))
          {
            {
              _6306 = true;
            }
          }
          else
          {
            {
              int _11498 = (int)0;
              int _11499 = _6225;
              for (int _6313 = _11498; _6313 < _11499; ++_6313)
              {
                {
                  if (((_ptr__6307[_6313] < _ptr__6228[_6313]) && (_6311 == _ptr__6242[safe_add( _ptr__6233[_6313],_ptr__6307[_6313] )])))
                  {
                    {
                      int _11500 = _ptr__6241[safe_add( _ptr__6231[_6313],_ptr__6307[_6313] )];
                      int _11501 = _ptr__6241[safe_add( safe_add( _ptr__6231[_6313],_ptr__6307[_6313] ),(int)1 )];
                      for (int _6314 = _11500; _6314 < _11501; ++_6314)
                      {
                        {
                          _ptr__6272[safe_add( _6264,_6310 )] = _ptr__6242[safe_add( _ptr__6232[_6313],_6314 )];
                          _ptr__6273[safe_add( _6267,_6310 )] = (((*w)(_6313)) * _ptr__6243[safe_add( _ptr__6234[_6313],_6314 )]);
                          if (_6251)
                          {
                            {
                              if ((_ptr__6230[_6313] > (int)0))
                              {
                                {
                                  int _11502 = _ptr__6241[safe_add( _ptr__6237[_6313],_6314 )];
                                  int _11503 = _ptr__6241[safe_add( safe_add( _ptr__6237[_6313],_6314 ),(int)1 )];
                                  for (int _6315 = _11502; _6315 < _11503; ++_6315)
                                  {
                                    {
                                      _ptr__6271[safe_add( _6268,_6308 )] = _ptr__6241[safe_add( _ptr__6236[_6313],_6315 )];
                                      _ptr__6273[safe_add( _6270,_6308 )] = _ptr__6243[safe_add( _ptr__6238[_6313],_6315 )];
                                      ++ _6308;
                                    }
                                  }
                                  _ptr__6271[safe_add( _6268,_6308 )] = 2;
                                  _ptr__6273[safe_add( _6270,_6308 )] = ((*w)(_6313));
                                  ++ _6308;
                                  _ptr__6271[safe_add( _6268,_6308 )] = 5;
                                  ++ _6308;
                                }
                              }
                              else
                              {
                                {
                                  _ptr__6271[safe_add( _6268,_6308 )] = 2;
                                  _ptr__6273[safe_add( _6270,_6308 )] = 0.0;
                                  ++ _6308;
                                }
                              }
                              _ptr__6271[safe_add( safe_add( _6269,_6310 ),(int)1 )] = _6308;
                            }
                          }
                          {}
                          ++ _6310;
                        }
                      }
                      ++ _ptr__6307[_6313];
                    }
                  }
                  {}
                }
              }
              _ptr__6271[safe_add( safe_add( _6263,_6309 ),(int)1 )] = _6310;
              _ptr__6272[safe_add( _6265,_6309 )] = _6311;
            }
          }
          ++ _6309;
        }
      }
    }
  }
  _6224->clear();
}
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprWSum::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6316 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprWSum(["));
  _6316->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)((int)0))->toString());
  int _11504 = (int)1;
  int _11505 = (int)((es)->size(0));
  for (int _6317 = _11504; _6317 < _11505; ++_6317)
  {
    {
      _6316->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)(_6317))->toString());
    }
  }
  _6316->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _6316->toString();
}
void mosek::fusion::p_ExprWSum::destroy(){w.reset();es.reset();}void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSumReduce::p_ExprSumReduce  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce  (int _6318,    monty::rc_ptr< ::mosek::fusion::Expression > _6319){ return new mosek::fusion::ExprSumReduce(_6318,_6319); }mosek::fusion::ExprSumReduce::ExprSumReduce  (int _6318,    monty::rc_ptr< ::mosek::fusion::Expression > _6319) :    ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this)){ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_6318,_6319); }void mosek::fusion::p_ExprSumReduce::_initialize  (int _6318,    monty::rc_ptr< ::mosek::fusion::Expression > _6319){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_6318,_6319->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _6319;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _6318;
    std::shared_ptr< monty::ndarray< int,1 > > _6320 = _6319->getShape();
    _checked_ptr_1<int> _ptr__6320(_6320 ? _6320->raw() : nullptr,_6320 ? _6320->size(0) : 0);
    if (((int)((_6320)->size(0)) <= _6318))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6321,monty::rc_ptr< ::mosek::fusion::WorkStack > _6322,monty::rc_ptr< ::mosek::fusion::WorkStack > _6323) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_6321,_6322,_6323); }void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6321,monty::rc_ptr< ::mosek::fusion::WorkStack > _6322,monty::rc_ptr< ::mosek::fusion::WorkStack > _6323){
  expr->eval(_6322,_6321,_6323);
  _6322->pop_expr();
  int _6324 = mosek::fusion::p_WorkStack::_get_impl(_6322)->nd;
  int _6325 = mosek::fusion::p_WorkStack::_get_impl(_6322)->shape_base;
  int _6326 = mosek::fusion::p_WorkStack::_get_impl(_6322)->nelem;
  int _6327 = mosek::fusion::p_WorkStack::_get_impl(_6322)->nnz;
  int _6328 = mosek::fusion::p_WorkStack::_get_impl(_6322)->ncodeatom;
  bool _6329 = mosek::fusion::p_WorkStack::_get_impl(_6322)->hassp;
  int _6330 = mosek::fusion::p_WorkStack::_get_impl(_6322)->ptr_base;
  int _6331 = mosek::fusion::p_WorkStack::_get_impl(_6322)->sp_base;
  int _6332 = mosek::fusion::p_WorkStack::_get_impl(_6322)->nidxs_base;
  int _6333 = mosek::fusion::p_WorkStack::_get_impl(_6322)->cof_base;
  int _6334 = mosek::fusion::p_WorkStack::_get_impl(_6322)->code_base;
  int _6335 = mosek::fusion::p_WorkStack::_get_impl(_6322)->codeptr_base;
  int _6336 = mosek::fusion::p_WorkStack::_get_impl(_6322)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6337 = mosek::fusion::p_WorkStack::_get_impl(_6322)->i32;
  _checked_ptr_1<int> _ptr__6337(_6337 ? _6337->raw() : nullptr,_6337 ? _6337->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6338 = mosek::fusion::p_WorkStack::_get_impl(_6322)->i64;
  _checked_ptr_1<long long> _ptr__6338(_6338 ? _6338->raw() : nullptr,_6338 ? _6338->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6339 = mosek::fusion::p_WorkStack::_get_impl(_6322)->f64;
  _checked_ptr_1<double> _ptr__6339(_6339 ? _6339->raw() : nullptr,_6339 ? _6339->size(0) : 0);
  int _6340 = (int)99999;
  int _6341 = (int)99999;
  int _6342 = (int)99999;
  if (_6329)
  {
    {
      int _6343 = (int)0;
      int _11506 = (int)0;
      int _11507 = _6324;
      for (int _6344 = _11506; _6344 < _11507; ++_6344)
      {
        {
          if ((_6343 < _ptr__6337[safe_add( _6325,_6344 )]))
          {
            {
              _6343 = _ptr__6337[safe_add( _6325,_6344 )];
            }
          }
          {}
        }
      }
      _6340 = _6323->alloci32(safe_add( _6343,(int)1 ));
      _6341 = _6323->alloci32(_6326);
      _6342 = _6323->alloci32(_6326);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _6345 = mosek::fusion::p_WorkStack::_get_impl(_6323)->i32;
  _checked_ptr_1<int> _ptr__6345(_6345 ? _6345->raw() : nullptr,_6345 ? _6345->size(0) : 0);
  if (_6329)
  {
    {
      int _6346 = _6341;
      int _6347 = _6342;
      int _11508 = (int)0;
      int _11509 = _6326;
      for (int _6348 = _11508; _6348 < _11509; ++_6348)
      {
        {
          _ptr__6345[safe_add( _6346,_6348 )] = _6348;
        }
      }
      if ((dim < (_6324 - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _6349 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6324)));
          _checked_ptr_1<long long> _ptr__6349(_6349 ? _6349->raw() : nullptr,_6349 ? _6349->size(0) : 0);
          _ptr__6349[(_6324 - (int)1)] = (int)1;
          int _11510 = (int)1;
          int _11511 = _6324;
          for (int _6350 = _11510; _6350 < _11511; ++_6350)
          {
            {
              _ptr__6349[((_6324 - _6350) - (int)1)] = safe_mul( _ptr__6349[(_6324 - _6350)],_ptr__6337[(safe_add( _6325,_6324 ) - _6350)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _6351 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_6324 - (int)1))));
          _checked_ptr_1<int> _ptr__6351(_6351 ? _6351->raw() : nullptr,_6351 ? _6351->size(0) : 0);
          int _11512 = (int)0;
          int _11513 = dim;
          for (int _6352 = _11512; _6352 < _11513; ++_6352)
          {
            {
              _ptr__6351[((_6324 - _6352) - (int)2)] = _6352;
            }
          }
          int _11514 = safe_add( dim,(int)1 );
          int _11515 = _6324;
          for (int _6353 = _11514; _6353 < _11515; ++_6353)
          {
            {
              _ptr__6351[((_6324 - _6353) - (int)1)] = _6353;
            }
          }
          int _11516 = (int)0;
          int _11517 = (_6324 - (int)1);
          for (int _6354 = _11516; _6354 < _11517; ++_6354)
          {
            {
              int _6355 = _ptr__6351[_6354];
              int _6356 = _ptr__6337[safe_add( _6325,_6355 )];
              int _11518 = (int)0;
              int _11519 = safe_add( _6356,(int)1 );
              for (int _6357 = _11518; _6357 < _11519; ++_6357)
              {
                {
                  _ptr__6345[safe_add( _6340,_6357 )] = (int)0;
                }
              }
              int _11520 = (int)0;
              int _11521 = _6326;
              for (int _6358 = _11520; _6358 < _11521; ++_6358)
              {
                {
                  ++ _ptr__6345[safe_add( safe_add( _6340,(int)1 ),((_ptr__6338[safe_add( _6331,_6358 )] / _ptr__6349[_6355]) % _6356) )];
                }
              }
              int _11522 = (int)0;
              int _11523 = _6356;
              for (int _6359 = _11522; _6359 < _11523; ++_6359)
              {
                {
                  _ptr__6345[safe_add( safe_add( _6340,_6359 ),(int)1 )] += _ptr__6345[safe_add( _6340,_6359 )];
                }
              }
              int _11524 = (int)0;
              int _11525 = _6326;
              for (int _6360 = _11524; _6360 < _11525; ++_6360)
              {
                {
                  int _6361 = _ptr__6345[safe_add( _6346,_6360 )];
                  long long _6362 = ((_ptr__6338[safe_add( _6331,_6361 )] / _ptr__6349[_6355]) % _6356);
                  _ptr__6345[safe_add( _6347,_ptr__6345[safe_add( _6340,_6362 )] )] = _6361;
                  ++ _ptr__6345[safe_add( _6340,_6362 )];
                }
              }
              int _6363 = _6347;
              _6347 = _6346;
              _6346 = _6363;
            }
          }
        }
      }
      {}
      int _6364 = (int)1;
      int _11526 = (int)0;
      int _11527 = dim;
      for (int _6365 = _11526; _6365 < _11527; ++_6365)
      {
        {
          _6364 *= _ptr__6337[safe_add( _6325,_6365 )];
        }
      }
      int _6366 = _ptr__6337[safe_add( _6325,dim )];
      int _6367 = (int)1;
      int _11528 = safe_add( dim,(int)1 );
      int _11529 = _6324;
      for (int _6368 = _11528; _6368 < _11529; ++_6368)
      {
        {
          _6367 *= _ptr__6337[safe_add( _6325,_6368 )];
        }
      }
      int _6369 = safe_mul( _6367,_6366 );
      int _6370 = _6367;
      int _6371 = (int)1;
      int _6372 = (int)0;
      long long _6373 = (-(int)1);
      long long _6374 = (-(int)1);
      int _11530 = (int)0;
      int _11531 = _6326;
      for (int _6375 = _11530; _6375 < _11531; ++_6375)
      {
        {
          int _6376 = _ptr__6345[safe_add( _6346,_6375 )];
          long long _6377 = ((_ptr__6338[safe_add( _6331,_6376 )] / _6369) % _6364);
          long long _6378 = (_ptr__6338[safe_add( _6331,_6376 )] % _6367);
          if (((_6374 != _6377) || (_6373 != _6378)))
          {
            {
              _6374 = _6377;
              _6373 = _6378;
              ++ _6372;
            }
          }
          {}
        }
      }
      int _6379 = (_6324 - (int)1);
      bool _6380 = (_6372 < safe_mul( _6364,_6367 ));
      int _6381 = _6327;
      int _6382 = _6328;
      _6321->alloc_expr(_6379,_6372,_6381,_6380,_6382);
      int _6383 = mosek::fusion::p_WorkStack::_get_impl(_6321)->ptr_base;
      int _6384 = mosek::fusion::p_WorkStack::_get_impl(_6321)->nidxs_base;
      int _11532;
      bool _11533 = _6380;
      if (_11533)
      {
        _11532 = mosek::fusion::p_WorkStack::_get_impl(_6321)->sp_base;
      }
      else
      {
        _11532 = _6321->alloci64(_6372);
      }
      int _6385 = _11532;
      int _6386 = mosek::fusion::p_WorkStack::_get_impl(_6321)->cof_base;
      int _6387 = mosek::fusion::p_WorkStack::_get_impl(_6321)->shape_base;
      int _6388 = mosek::fusion::p_WorkStack::_get_impl(_6321)->code_base;
      int _6389 = mosek::fusion::p_WorkStack::_get_impl(_6321)->codeptr_base;
      int _6390 = mosek::fusion::p_WorkStack::_get_impl(_6321)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6391 = mosek::fusion::p_WorkStack::_get_impl(_6321)->i32;
      _checked_ptr_1<int> _ptr__6391(_6391 ? _6391->raw() : nullptr,_6391 ? _6391->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6392 = mosek::fusion::p_WorkStack::_get_impl(_6321)->i64;
      _checked_ptr_1<long long> _ptr__6392(_6392 ? _6392->raw() : nullptr,_6392 ? _6392->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6393 = mosek::fusion::p_WorkStack::_get_impl(_6321)->f64;
      _checked_ptr_1<double> _ptr__6393(_6393 ? _6393->raw() : nullptr,_6393 ? _6393->size(0) : 0);
      int _11534 = (int)0;
      int _11535 = dim;
      for (int _6394 = _11534; _6394 < _11535; ++_6394)
      {
        {
          _ptr__6391[safe_add( _6387,_6394 )] = _ptr__6337[safe_add( _6325,_6394 )];
        }
      }
      int _11536 = safe_add( dim,(int)1 );
      int _11537 = _6324;
      for (int _6395 = _11536; _6395 < _11537; ++_6395)
      {
        {
          _ptr__6391[(safe_add( _6387,_6395 ) - (int)1)] = _ptr__6337[safe_add( _6325,_6395 )];
        }
      }
      _ptr__6391[_6383] = (int)0;
      if ((_6382 > (int)0))
      {
        {
          _ptr__6391[_6389] = (int)0;
        }
      }
      {}
      int _6396 = (int)0;
      int _6397 = (int)0;
      int _6398 = (int)0;
      int _6399 = (int)0;
      while ( (_6399 < _6326) )
      {
        {
          int _6400 = _6399;
          long long _6401 = ((_ptr__6338[safe_add( _6331,_ptr__6345[safe_add( _6346,_6400 )] )] / _6369) % _6364);
          long long _6402 = (_ptr__6338[safe_add( _6331,_ptr__6345[safe_add( _6346,_6400 )] )] % _6367);
          ++ _6399;
          while ( ((_6399 < _6326) && ((_6401 == ((_ptr__6338[safe_add( _6331,_ptr__6345[safe_add( _6346,_6399 )] )] / _6369) % _6364)) && (_6402 == (_ptr__6338[safe_add( _6331,_ptr__6345[safe_add( _6346,_6399 )] )] % _6367)))) )
          {
            {
              ++ _6399;
            }
          }
          int _11538 = _6400;
          int _11539 = _6399;
          for (int _6403 = _11538; _6403 < _11539; ++_6403)
          {
            {
              int _6404 = _ptr__6345[safe_add( _6346,_6403 )];
              int _11540 = _ptr__6337[safe_add( _6330,_6404 )];
              int _11541 = _ptr__6337[safe_add( safe_add( _6330,_6404 ),(int)1 )];
              for (int _6405 = _11540; _6405 < _11541; ++_6405)
              {
                {
                  _ptr__6392[safe_add( _6384,_6398 )] = _ptr__6338[safe_add( _6332,_6405 )];
                  _ptr__6393[safe_add( _6386,_6398 )] = _ptr__6339[safe_add( _6333,_6405 )];
                  if ((_6382 > (int)0))
                  {
                    {
                      int _11542 = _ptr__6337[safe_add( _6335,_6405 )];
                      int _11543 = _ptr__6337[safe_add( safe_add( _6335,_6405 ),(int)1 )];
                      for (int _6406 = _11542; _6406 < _11543; ++_6406)
                      {
                        {
                          _ptr__6391[safe_add( _6388,_6396 )] = _ptr__6337[safe_add( _6334,_6406 )];
                          _ptr__6393[safe_add( _6390,_6396 )] = _ptr__6339[safe_add( _6336,_6406 )];
                          ++ _6396;
                        }
                      }
                      _ptr__6391[safe_add( safe_add( _6389,_6398 ),(int)1 )] = _6396;
                    }
                  }
                  {}
                  ++ _6398;
                }
              }
            }
          }
          _ptr__6392[safe_add( _6385,_6397 )] = safe_add( safe_mul( _6401,_6367 ),_6402 );
          _ptr__6391[safe_add( safe_add( _6383,_6397 ),(int)1 )] = _6398;
          ++ _6397;
        }
      }
      if ((!_6380))
      {
        {
          _6321->popi64(_6372);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _6407 = (int)1;
      int _11544 = (int)0;
      int _11545 = dim;
      for (int _6408 = _11544; _6408 < _11545; ++_6408)
      {
        {
          _6407 *= _ptr__6337[safe_add( _6325,_6408 )];
        }
      }
      int _6409 = _ptr__6337[safe_add( _6325,dim )];
      int _6410 = (int)1;
      int _11546 = safe_add( dim,(int)1 );
      int _11547 = _6324;
      for (int _6411 = _11546; _6411 < _11547; ++_6411)
      {
        {
          _6410 *= _ptr__6337[safe_add( _6325,_6411 )];
        }
      }
      int _6412 = safe_mul( _6410,_6409 );
      int _6413 = _6410;
      int _6414 = (int)1;
      int _6415 = safe_mul( _6407,_6410 );
      int _6416 = _6327;
      int _6417 = _6328;
      _6321->alloc_expr((_6324 - (int)1),_6415,_6416,false,_6417);
      int _6418 = mosek::fusion::p_WorkStack::_get_impl(_6321)->ptr_base;
      int _6419 = mosek::fusion::p_WorkStack::_get_impl(_6321)->nidxs_base;
      int _6420 = mosek::fusion::p_WorkStack::_get_impl(_6321)->cof_base;
      int _6421 = mosek::fusion::p_WorkStack::_get_impl(_6321)->shape_base;
      int _6422 = mosek::fusion::p_WorkStack::_get_impl(_6321)->code_base;
      int _6423 = mosek::fusion::p_WorkStack::_get_impl(_6321)->codeptr_base;
      int _6424 = mosek::fusion::p_WorkStack::_get_impl(_6321)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6425 = mosek::fusion::p_WorkStack::_get_impl(_6321)->i32;
      _checked_ptr_1<int> _ptr__6425(_6425 ? _6425->raw() : nullptr,_6425 ? _6425->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6426 = mosek::fusion::p_WorkStack::_get_impl(_6321)->i64;
      _checked_ptr_1<long long> _ptr__6426(_6426 ? _6426->raw() : nullptr,_6426 ? _6426->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6427 = mosek::fusion::p_WorkStack::_get_impl(_6321)->f64;
      _checked_ptr_1<double> _ptr__6427(_6427 ? _6427->raw() : nullptr,_6427 ? _6427->size(0) : 0);
      int _11548 = (int)0;
      int _11549 = dim;
      for (int _6428 = _11548; _6428 < _11549; ++_6428)
      {
        {
          _ptr__6425[safe_add( _6421,_6428 )] = _ptr__6337[safe_add( _6325,_6428 )];
        }
      }
      int _11550 = safe_add( dim,(int)1 );
      int _11551 = _6324;
      for (int _6429 = _11550; _6429 < _11551; ++_6429)
      {
        {
          _ptr__6425[(safe_add( _6421,_6429 ) - (int)1)] = _ptr__6337[safe_add( _6325,_6429 )];
        }
      }
      int _6430 = (int)0;
      int _6431 = (int)0;
      _ptr__6425[_6418] = (int)0;
      if ((_6417 > (int)0))
      {
        {
          _ptr__6425[_6423] = (int)0;
        }
      }
      {}
      int _6432 = (int)0;
      int _11552 = (int)0;
      int _11553 = _6407;
      for (int _6433 = _11552; _6433 < _11553; ++_6433)
      {
        {
          int _11554 = (int)0;
          int _11555 = _6410;
          for (int _6434 = _11554; _6434 < _11555; ++_6434)
          {
            {
              int _11556 = (int)0;
              int _11557 = _6409;
              for (int _6435 = _11556; _6435 < _11557; ++_6435)
              {
                {
                  int _6436 = safe_add( safe_add( safe_mul( _6433,_6412 ),safe_mul( _6435,_6413 ) ),_6434 );
                  int _11558 = _ptr__6337[safe_add( _6330,_6436 )];
                  int _11559 = _ptr__6337[safe_add( safe_add( _6330,_6436 ),(int)1 )];
                  for (int _6437 = _11558; _6437 < _11559; ++_6437)
                  {
                    {
                      _ptr__6426[safe_add( _6419,_6431 )] = _ptr__6338[safe_add( _6332,_6437 )];
                      _ptr__6427[safe_add( _6420,_6431 )] = _ptr__6339[safe_add( _6333,_6437 )];
                      if ((_6417 > (int)0))
                      {
                        {
                          int _11560 = _ptr__6337[safe_add( _6335,_6437 )];
                          int _11561 = _ptr__6337[safe_add( safe_add( _6335,_6437 ),(int)1 )];
                          for (int _6438 = _11560; _6438 < _11561; ++_6438)
                          {
                            {
                              _ptr__6425[safe_add( _6422,_6432 )] = _ptr__6337[safe_add( _6334,_6438 )];
                              _ptr__6427[safe_add( _6424,_6432 )] = _ptr__6339[safe_add( _6336,_6438 )];
                              ++ _6432;
                            }
                          }
                          _ptr__6425[safe_add( safe_add( _6423,_6431 ),(int)1 )] = _6432;
                        }
                      }
                      {}
                      ++ _6431;
                    }
                  }
                }
              }
              _ptr__6425[safe_add( safe_add( _6418,_6430 ),(int)1 )] = _6431;
              ++ _6430;
            }
          }
        }
      }
    }
  }
  _6323->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int _6439,std::shared_ptr< monty::ndarray< int,1 > > _6440){
  _checked_ptr_1<int> _ptr__6440(_6440 ? _6440->raw() : nullptr, _6440 ? _6440->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6441 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((_6440)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__6441(_6441 ? _6441->raw() : nullptr,_6441 ? _6441->size(0) : 0);
  int _11562 = (int)0;
  int _11563 = _6439;
  for (int _6442 = _11562; _6442 < _11563; ++_6442)
  {
    {
      _ptr__6441[_6442] = _ptr__6440[_6442];
    }
  }
  int _11564 = safe_add( _6439,(int)1 );
  int _11565 = (int)((_6440)->size(0));
  for (int _6443 = _11564; _6443 < _11565; ++_6443)
  {
    {
      _ptr__6441[(_6443 - (int)1)] = _ptr__6440[_6443];
    }
  }
  return _6441;
}
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSumReduce::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSumReduce("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprSumReduce::destroy(){expr.reset();}void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDenseTril::p_ExprDenseTril  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _6444,    int _6445,    monty::rc_ptr< ::mosek::fusion::Expression > _6446,    int _6447){ return new mosek::fusion::ExprDenseTril(_6444,_6445,_6446,_6447); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _6444,    int _6445,    monty::rc_ptr< ::mosek::fusion::Expression > _6446,    int _6447) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6444,_6445,_6446,_6447); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _6444,    int _6445,    monty::rc_ptr< ::mosek::fusion::Expression > _6446,    int _6447){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6446->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _6446;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _6444;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _6445;
  }
}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _6448,    int _6449,    monty::rc_ptr< ::mosek::fusion::Expression > _6450){ return new mosek::fusion::ExprDenseTril(_6448,_6449,_6450); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _6448,    int _6449,    monty::rc_ptr< ::mosek::fusion::Expression > _6450) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6448,_6449,_6450); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _6448,    int _6449,    monty::rc_ptr< ::mosek::fusion::Expression > _6450){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprDenseTril::_initialize(_6448,_6449,_6450,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _6451 = _6450->getShape();
    _checked_ptr_1<int> _ptr__6451(_6451 ? _6451->raw() : nullptr,_6451 ? _6451->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_6451)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_6451)->size(0))) || (_ptr__6451[dim0] != _ptr__6451[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6452,monty::rc_ptr< ::mosek::fusion::WorkStack > _6453,monty::rc_ptr< ::mosek::fusion::WorkStack > _6454) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_6452,_6453,_6454); }void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6452,monty::rc_ptr< ::mosek::fusion::WorkStack > _6453,monty::rc_ptr< ::mosek::fusion::WorkStack > _6454){
  expr->eval(_6453,_6452,_6454);
  _6453->pop_expr();
  int _6455 = mosek::fusion::p_WorkStack::_get_impl(_6453)->nd;
  int _6456 = mosek::fusion::p_WorkStack::_get_impl(_6453)->nnz;
  int _6457 = mosek::fusion::p_WorkStack::_get_impl(_6453)->nelem;
  int _6458 = mosek::fusion::p_WorkStack::_get_impl(_6453)->ncodeatom;
  bool _6459 = mosek::fusion::p_WorkStack::_get_impl(_6453)->hassp;
  int _6460 = mosek::fusion::p_WorkStack::_get_impl(_6453)->shape_base;
  int _6461 = mosek::fusion::p_WorkStack::_get_impl(_6453)->ptr_base;
  int _6462 = mosek::fusion::p_WorkStack::_get_impl(_6453)->code_base;
  int _6463 = mosek::fusion::p_WorkStack::_get_impl(_6453)->codeptr_base;
  int _6464 = mosek::fusion::p_WorkStack::_get_impl(_6453)->cconst_base;
  int _6465 = mosek::fusion::p_WorkStack::_get_impl(_6453)->nidxs_base;
  int _6466 = mosek::fusion::p_WorkStack::_get_impl(_6453)->sp_base;
  int _6467 = mosek::fusion::p_WorkStack::_get_impl(_6453)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6468 = mosek::fusion::p_WorkStack::_get_impl(_6453)->i32;
  _checked_ptr_1<int> _ptr__6468(_6468 ? _6468->raw() : nullptr,_6468 ? _6468->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6469 = mosek::fusion::p_WorkStack::_get_impl(_6453)->i64;
  _checked_ptr_1<long long> _ptr__6469(_6469 ? _6469->raw() : nullptr,_6469 ? _6469->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6470 = mosek::fusion::p_WorkStack::_get_impl(_6453)->f64;
  _checked_ptr_1<double> _ptr__6470(_6470 ? _6470->raw() : nullptr,_6470 ? _6470->size(0) : 0);
  int _11566;
  bool _11567 = (dim0 < dim1);
  if (_11567)
  {
    _11566 = dim0;
  }
  else
  {
    _11566 = dim1;
  }
  int _6471 = _11566;
  int _11568;
  bool _11569 = (dim0 > dim1);
  if (_11569)
  {
    _11568 = dim0;
  }
  else
  {
    _11568 = dim1;
  }
  int _6472 = _11568;
  bool _6473 = (dim0 < dim1);
  if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= _6455) || ((dim1 < (int)0) || (dim1 >= _6455))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6468[safe_add( _6460,dim0 )] != _ptr__6468[safe_add( _6460,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  std::vector<int> _11570;
  for (int _6475 = (int)0, _11571 = (int)5; _6475 < _11571 ; ++_6475)
  {
    _11570.push_back((int)1);
  }
  auto _11572 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11570.size()),_11570.begin(),_11570.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6474 = _11572;
  _checked_ptr_1<int> _ptr__6474(_6474 ? _6474->raw() : nullptr,_6474 ? _6474->size(0) : 0);
  int _11573 = (int)0;
  int _11574 = _6471;
  for (int _6476 = _11573; _6476 < _11574; ++_6476)
  {
    {
      _ptr__6474[(int)0] *= _ptr__6468[safe_add( _6460,_6476 )];
    }
  }
  _ptr__6474[(int)1] = _ptr__6468[safe_add( _6460,dim0 )];
  int _11575 = safe_add( _6471,(int)1 );
  int _11576 = _6472;
  for (int _6477 = _11575; _6477 < _11576; ++_6477)
  {
    {
      _ptr__6474[(int)2] *= _ptr__6468[safe_add( _6460,_6477 )];
    }
  }
  _ptr__6474[(int)3] = _ptr__6468[safe_add( _6460,dim1 )];
  int _11577 = safe_add( _6472,(int)1 );
  int _11578 = _6455;
  for (int _6478 = _11577; _6478 < _11578; ++_6478)
  {
    {
      _ptr__6474[(int)4] *= _ptr__6468[safe_add( _6460,_6478 )];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6479 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__6479(_6479 ? _6479->raw() : nullptr,_6479 ? _6479->size(0) : 0);
  _ptr__6479[(int)4] = (int)1;
  int _11579 = (int)1;
  int _11580 = (int)5;
  for (int _6480 = _11579; _6480 < _11580; ++_6480)
  {
    {
      _ptr__6479[(((int)5 - _6480) - (int)1)] = safe_mul( _ptr__6479[((int)5 - _6480)],_ptr__6474[((int)5 - _6480)] );
    }
  }
  int _6481 = (int)0;
  int _6482 = safe_mul( safe_mul( safe_mul( _ptr__6474[(int)0],_ptr__6474[(int)2] ),_ptr__6474[(int)4] ),(safe_mul( _ptr__6474[(int)1],safe_add( _ptr__6474[(int)1],(int)1 ) ) / (int)2) );
  int _6483 = (int)0;
  {
    if (_6459)
    {
      {
        int _6484 = _ptr__6474[(int)1];
        if (_6473)
        {
          {
            int _11581 = (int)0;
            int _11582 = _6457;
            for (int _6485 = _11581; _6485 < _11582; ++_6485)
            {
              {
                long long _6486 = ((_ptr__6469[safe_add( _6466,_6485 )] / _ptr__6479[(int)1]) % _6484);
                long long _6487 = ((_ptr__6469[safe_add( _6466,_6485 )] / _ptr__6479[(int)3]) % _6484);
                if ((_6486 >= _6487))
                {
                  {
                    _6481 += (_ptr__6468[safe_add( safe_add( _6461,_6485 ),(int)1 )] - _ptr__6468[safe_add( _6461,_6485 )]);
                    if ((_6458 > (int)0))
                    {
                      {
                        _6483 += (_ptr__6468[safe_add( _6463,_ptr__6468[safe_add( safe_add( _6461,_6485 ),(int)1 )] )] - _ptr__6468[safe_add( _6463,_ptr__6468[safe_add( _6461,_6485 )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int _11583 = (int)0;
            int _11584 = _6457;
            for (int _6488 = _11583; _6488 < _11584; ++_6488)
            {
              {
                long long _6489 = ((_ptr__6469[safe_add( _6466,_6488 )] / _ptr__6479[(int)1]) % _ptr__6474[(int)1]);
                long long _6490 = ((_ptr__6469[safe_add( _6466,_6488 )] / _ptr__6479[(int)3]) % _ptr__6474[(int)3]);
                if ((_6489 <= _6490))
                {
                  {
                    _6481 += (_ptr__6468[safe_add( safe_add( _6461,_6488 ),(int)1 )] - _ptr__6468[safe_add( _6461,_6488 )]);
                    if ((_6458 > (int)0))
                    {
                      {
                        _6483 += (_ptr__6468[safe_add( _6463,_ptr__6468[safe_add( safe_add( _6461,_6488 ),(int)1 )] )] - _ptr__6468[safe_add( _6463,_ptr__6468[safe_add( _6461,_6488 )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        if (_6473)
        {
          {
            int _11585 = (int)0;
            int _11586 = _ptr__6474[(int)0];
            for (int _6491 = _11585; _6491 < _11586; ++_6491)
            {
              {
                int _11587 = (int)0;
                int _11588 = _ptr__6474[(int)1];
                for (int _6492 = _11587; _6492 < _11588; ++_6492)
                {
                  {
                    int _11589 = (int)0;
                    int _11590 = _ptr__6474[(int)2];
                    for (int _6493 = _11589; _6493 < _11590; ++_6493)
                    {
                      {
                        int _11591 = (int)0;
                        int _11592 = safe_add( _6492,(int)1 );
                        for (int _6494 = _11591; _6494 < _11592; ++_6494)
                        {
                          {
                            int _11593 = (int)0;
                            int _11594 = _ptr__6474[(int)4];
                            for (int _6495 = _11593; _6495 < _11594; ++_6495)
                            {
                              {
                                int _6496 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6491,_ptr__6479[(int)0] ),safe_mul( _6492,_ptr__6479[(int)1] ) ),safe_mul( _6493,_ptr__6479[(int)2] ) ),safe_mul( _6494,_ptr__6479[(int)3] ) ),safe_mul( _6495,_ptr__6479[(int)4] ) );
                                _6481 += (_ptr__6468[safe_add( safe_add( _6461,_6496 ),(int)1 )] - _ptr__6468[safe_add( _6461,_6496 )]);
                                if ((_6458 > (int)0))
                                {
                                  {
                                    _6483 += (_ptr__6468[safe_add( _6463,_ptr__6468[safe_add( safe_add( _6461,_6496 ),(int)1 )] )] - _ptr__6468[safe_add( _6463,_ptr__6468[safe_add( _6461,_6496 )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int _11595 = (int)0;
            int _11596 = _ptr__6474[(int)0];
            for (int _6497 = _11595; _6497 < _11596; ++_6497)
            {
              {
                int _11597 = (int)0;
                int _11598 = _ptr__6474[(int)1];
                for (int _6498 = _11597; _6498 < _11598; ++_6498)
                {
                  {
                    int _11599 = (int)0;
                    int _11600 = _ptr__6474[(int)2];
                    for (int _6499 = _11599; _6499 < _11600; ++_6499)
                    {
                      {
                        int _11601 = _6498;
                        int _11602 = _ptr__6474[(int)3];
                        for (int _6500 = _11601; _6500 < _11602; ++_6500)
                        {
                          {
                            int _11603 = (int)0;
                            int _11604 = _ptr__6474[(int)4];
                            for (int _6501 = _11603; _6501 < _11604; ++_6501)
                            {
                              {
                                int _6502 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6497,_ptr__6479[(int)0] ),safe_mul( _6498,_ptr__6479[(int)1] ) ),safe_mul( _6499,_ptr__6479[(int)2] ) ),safe_mul( _6500,_ptr__6479[(int)3] ) ),safe_mul( _6501,_ptr__6479[(int)4] ) );
                                _6481 += (_ptr__6468[safe_add( safe_add( _6461,_6502 ),(int)1 )] - _ptr__6468[safe_add( _6461,_6502 )]);
                                if ((_6458 > (int)0))
                                {
                                  {
                                    _6483 += (_ptr__6468[safe_add( _6463,_ptr__6468[safe_add( safe_add( _6461,_6502 ),(int)1 )] )] - _ptr__6468[safe_add( _6463,_ptr__6468[safe_add( _6461,_6502 )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _6503 = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__6474[(int)0],_ptr__6474[(int)2] ),_ptr__6474[(int)4] ),_ptr__6474[(int)1] ),safe_add( _ptr__6474[(int)1],(int)1 ) ) / (int)2);
  _6452->alloc_expr(_6455,_6482,_6481,true,_6483);
  int _6504 = mosek::fusion::p_WorkStack::_get_impl(_6452)->ptr_base;
  int _6505 = mosek::fusion::p_WorkStack::_get_impl(_6452)->shape_base;
  int _6506 = mosek::fusion::p_WorkStack::_get_impl(_6452)->nidxs_base;
  int _6507 = mosek::fusion::p_WorkStack::_get_impl(_6452)->sp_base;
  int _6508 = mosek::fusion::p_WorkStack::_get_impl(_6452)->cof_base;
  int _6509 = mosek::fusion::p_WorkStack::_get_impl(_6452)->code_base;
  int _6510 = mosek::fusion::p_WorkStack::_get_impl(_6452)->codeptr_base;
  int _6511 = mosek::fusion::p_WorkStack::_get_impl(_6452)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6512 = mosek::fusion::p_WorkStack::_get_impl(_6452)->i32;
  _checked_ptr_1<int> _ptr__6512(_6512 ? _6512->raw() : nullptr,_6512 ? _6512->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6513 = mosek::fusion::p_WorkStack::_get_impl(_6452)->i64;
  _checked_ptr_1<long long> _ptr__6513(_6513 ? _6513->raw() : nullptr,_6513 ? _6513->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6514 = mosek::fusion::p_WorkStack::_get_impl(_6452)->f64;
  _checked_ptr_1<double> _ptr__6514(_6514 ? _6514->raw() : nullptr,_6514 ? _6514->size(0) : 0);
  _ptr__6512[_6504] = (int)0;
  if ((_6483 > (int)0))
  {
    {
      _ptr__6512[_6510] = (int)0;
    }
  }
  {}
  int _11605 = (int)0;
  int _11606 = _6455;
  for (int _6515 = _11605; _6515 < _11606; ++_6515)
  {
    {
      _ptr__6512[safe_add( _6505,_6515 )] = _ptr__6468[safe_add( _6460,_6515 )];
    }
  }
  if (_6473)
  {
    {
      int _6516 = (int)0;
      int _11607 = (int)0;
      int _11608 = _ptr__6474[(int)0];
      for (int _6517 = _11607; _6517 < _11608; ++_6517)
      {
        {
          int _11609 = (int)0;
          int _11610 = _ptr__6474[(int)1];
          for (int _6518 = _11609; _6518 < _11610; ++_6518)
          {
            {
              int _11611 = (int)0;
              int _11612 = _ptr__6474[(int)2];
              for (int _6519 = _11611; _6519 < _11612; ++_6519)
              {
                {
                  int _11613 = (int)0;
                  int _11614 = safe_add( _6518,(int)1 );
                  for (int _6520 = _11613; _6520 < _11614; ++_6520)
                  {
                    {
                      int _11615 = (int)0;
                      int _11616 = _ptr__6474[(int)4];
                      for (int _6521 = _11615; _6521 < _11616; ++_6521)
                      {
                        {
                          _ptr__6513[safe_add( _6507,_6516 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6517,_ptr__6479[(int)0] ),safe_mul( _6518,_ptr__6479[(int)1] ) ),safe_mul( _6519,_ptr__6479[(int)2] ) ),safe_mul( _6520,_ptr__6479[(int)3] ) ),safe_mul( _6521,_ptr__6479[(int)4] ) );
                          ++ _6516;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6516 != _6482))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _6522 = (int)0;
      int _11617 = (int)0;
      int _11618 = _ptr__6474[(int)0];
      for (int _6523 = _11617; _6523 < _11618; ++_6523)
      {
        {
          int _11619 = (int)0;
          int _11620 = _ptr__6474[(int)1];
          for (int _6524 = _11619; _6524 < _11620; ++_6524)
          {
            {
              int _11621 = (int)0;
              int _11622 = _ptr__6474[(int)2];
              for (int _6525 = _11621; _6525 < _11622; ++_6525)
              {
                {
                  int _11623 = _6524;
                  int _11624 = _ptr__6474[(int)3];
                  for (int _6526 = _11623; _6526 < _11624; ++_6526)
                  {
                    {
                      int _11625 = (int)0;
                      int _11626 = _ptr__6474[(int)4];
                      for (int _6527 = _11625; _6527 < _11626; ++_6527)
                      {
                        {
                          _ptr__6513[safe_add( _6507,_6522 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6523,_ptr__6479[(int)0] ),safe_mul( _6524,_ptr__6479[(int)1] ) ),safe_mul( _6525,_ptr__6479[(int)2] ) ),safe_mul( _6526,_ptr__6479[(int)3] ) ),safe_mul( _6527,_ptr__6479[(int)4] ) );
                          ++ _6522;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6522 != _6482))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  {
    int _6528 = (int)0;
    int _6529 = (int)0;
    if (_6459)
    {
      {
        int _6530 = (int)0;
        int _6531 = (int)0;
        while ( ((_6531 < _6457) && (_6530 < _6503)) )
        {
          {
            if ((_ptr__6469[safe_add( _6466,_6531 )] < _ptr__6513[safe_add( _6507,_6530 )]))
            {
              {
                ++ _6531;
              }
            }
            else if((_ptr__6469[safe_add( _6466,_6531 )] > _ptr__6513[safe_add( _6507,_6530 )]))
            {
              {
                _ptr__6512[safe_add( safe_add( _6504,_6530 ),(int)1 )] = _6528;
                ++ _6530;
              }
            }
            else
            {
              {
                int _11627 = _ptr__6468[safe_add( _6461,_6531 )];
                int _11628 = _ptr__6468[safe_add( safe_add( _6461,_6531 ),(int)1 )];
                for (int _6532 = _11627; _6532 < _11628; ++_6532)
                {
                  {
                    _ptr__6513[safe_add( _6506,_6528 )] = _ptr__6469[safe_add( _6465,_6532 )];
                    _ptr__6514[safe_add( _6508,_6528 )] = _ptr__6470[safe_add( _6467,_6532 )];
                    if ((_6483 > (int)0))
                    {
                      {
                        int _11629 = _ptr__6468[safe_add( _6463,_6532 )];
                        int _11630 = _ptr__6468[safe_add( safe_add( _6463,_6532 ),(int)1 )];
                        for (int _6533 = _11629; _6533 < _11630; ++_6533)
                        {
                          {
                            _ptr__6512[safe_add( _6509,_6529 )] = _ptr__6468[safe_add( _6462,_6533 )];
                            _ptr__6514[safe_add( _6511,_6529 )] = _ptr__6470[safe_add( _6464,_6533 )];
                            ++ _6529;
                          }
                        }
                        _ptr__6512[safe_add( safe_add( _6510,_6528 ),(int)1 )] = _6529;
                      }
                    }
                    {}
                    ++ _6528;
                  }
                }
                _ptr__6512[safe_add( safe_add( _6504,_6530 ),(int)1 )] = _6528;
                ++ _6531;
                ++ _6530;
              }
            }
          }
        }
        while ( (_6530 < _6503) )
        {
          {
            _ptr__6512[safe_add( safe_add( _6504,_6530 ),(int)1 )] = _6528;
            ++ _6530;
          }
        }
      }
    }
    else
    {
      {
        int _11631 = (int)0;
        int _11632 = _6503;
        for (int _6534 = _11631; _6534 < _11632; ++_6534)
        {
          {
            long long _6535 = _ptr__6513[safe_add( _6507,_6534 )];
            int _11633 = _ptr__6468[safe_add( _6461,_6535 )];
            int _11634 = _ptr__6468[safe_add( safe_add( _6461,_6535 ),(int)1 )];
            for (int _6536 = _11633; _6536 < _11634; ++_6536)
            {
              {
                _ptr__6513[safe_add( _6506,_6528 )] = _ptr__6469[safe_add( _6465,_6536 )];
                _ptr__6514[safe_add( _6508,_6528 )] = _ptr__6470[safe_add( _6467,_6536 )];
                if ((_6483 > (int)0))
                {
                  {
                    int _11635 = _ptr__6468[safe_add( _6463,_6536 )];
                    int _11636 = _ptr__6468[safe_add( safe_add( _6463,_6536 ),(int)1 )];
                    for (int _6537 = _11635; _6537 < _11636; ++_6537)
                    {
                      {
                        _ptr__6512[safe_add( _6509,_6529 )] = _ptr__6468[safe_add( _6462,_6537 )];
                        _ptr__6514[safe_add( _6511,_6529 )] = _ptr__6470[safe_add( _6464,_6537 )];
                        ++ _6529;
                      }
                    }
                    _ptr__6512[safe_add( safe_add( _6510,_6528 ),(int)1 )] = _6529;
                  }
                }
                {}
                ++ _6528;
              }
            }
            _ptr__6512[safe_add( safe_add( _6504,_6534 ),(int)1 )] = _6528;
          }
        }
      }
    }
    if ((_6528 != _6481))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
      }
    }
    {}
  }
}
std::string mosek::fusion::ExprDenseTril :: toString() { return mosek::fusion::p_ExprDenseTril::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDenseTril::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDenseTril(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDenseTril::destroy(){expr.reset();}void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDense::p_ExprDense  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _6538){ return new mosek::fusion::ExprDense(_6538); }mosek::fusion::ExprDense::ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _6538) :    ExprDense(new mosek::fusion::p_ExprDense(this)){ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_6538); }void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6538){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6538->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _6538;
  }
}void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6539,monty::rc_ptr< ::mosek::fusion::WorkStack > _6540,monty::rc_ptr< ::mosek::fusion::WorkStack > _6541) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_6539,_6540,_6541); }void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6539,monty::rc_ptr< ::mosek::fusion::WorkStack > _6540,monty::rc_ptr< ::mosek::fusion::WorkStack > _6541){
  expr->eval(_6540,_6539,_6541);
  _6540->pop_expr();
  int _6542 = mosek::fusion::p_WorkStack::_get_impl(_6540)->nd;
  int _6543 = mosek::fusion::p_WorkStack::_get_impl(_6540)->nnz;
  int _6544 = mosek::fusion::p_WorkStack::_get_impl(_6540)->nelem;
  int _6545 = mosek::fusion::p_WorkStack::_get_impl(_6540)->ncodeatom;
  bool _6546 = mosek::fusion::p_WorkStack::_get_impl(_6540)->hassp;
  int _6547 = mosek::fusion::p_WorkStack::_get_impl(_6540)->shape_base;
  int _6548 = mosek::fusion::p_WorkStack::_get_impl(_6540)->ptr_base;
  int _6549 = mosek::fusion::p_WorkStack::_get_impl(_6540)->nidxs_base;
  int _6550 = mosek::fusion::p_WorkStack::_get_impl(_6540)->cof_base;
  int _6551 = mosek::fusion::p_WorkStack::_get_impl(_6540)->sp_base;
  int _6552 = mosek::fusion::p_WorkStack::_get_impl(_6540)->codeptr_base;
  int _6553 = mosek::fusion::p_WorkStack::_get_impl(_6540)->code_base;
  int _6554 = mosek::fusion::p_WorkStack::_get_impl(_6540)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6555 = mosek::fusion::p_WorkStack::_get_impl(_6540)->i32;
  _checked_ptr_1<int> _ptr__6555(_6555 ? _6555->raw() : nullptr,_6555 ? _6555->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6556 = mosek::fusion::p_WorkStack::_get_impl(_6540)->i64;
  _checked_ptr_1<long long> _ptr__6556(_6556 ? _6556->raw() : nullptr,_6556 ? _6556->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6557 = mosek::fusion::p_WorkStack::_get_impl(_6540)->f64;
  _checked_ptr_1<double> _ptr__6557(_6557 ? _6557->raw() : nullptr,_6557 ? _6557->size(0) : 0);
  int _6558 = (int)1;
  if (_6546)
  {
    {
      bool _6559 = true;
      int _11637 = (int)0;
      int _11638 = _6542;
      for (int _6560 = _11637; _6560 < _11638; ++_6560)
      {
        {
          int _6561 = safe_mul( _6558,_ptr__6555[safe_add( _6547,_6560 )] );
          _6559 = (_6559 && ((_ptr__6555[safe_add( _6547,_6560 )] == (int)0) || ((_6561 / _ptr__6555[safe_add( _6547,_6560 )]) == _6558)));
          _6558 = _6561;
        }
      }
      if ((!_6559))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("The domain is too large"));
        }
      }
      {}
    }
  }
  else
  {
    {
      _6558 = _6544;
    }
  }
  _6539->alloc_expr(_6542,_6558,_6543,false,_6545);
  int _6562 = mosek::fusion::p_WorkStack::_get_impl(_6539)->shape_base;
  int _6563 = mosek::fusion::p_WorkStack::_get_impl(_6539)->ptr_base;
  int _6564 = mosek::fusion::p_WorkStack::_get_impl(_6539)->nidxs_base;
  int _6565 = mosek::fusion::p_WorkStack::_get_impl(_6539)->cof_base;
  int _6566 = mosek::fusion::p_WorkStack::_get_impl(_6539)->codeptr_base;
  int _6567 = mosek::fusion::p_WorkStack::_get_impl(_6539)->code_base;
  int _6568 = mosek::fusion::p_WorkStack::_get_impl(_6539)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6569 = mosek::fusion::p_WorkStack::_get_impl(_6539)->i32;
  _checked_ptr_1<int> _ptr__6569(_6569 ? _6569->raw() : nullptr,_6569 ? _6569->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6570 = mosek::fusion::p_WorkStack::_get_impl(_6539)->i64;
  _checked_ptr_1<long long> _ptr__6570(_6570 ? _6570->raw() : nullptr,_6570 ? _6570->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6571 = mosek::fusion::p_WorkStack::_get_impl(_6539)->f64;
  _checked_ptr_1<double> _ptr__6571(_6571 ? _6571->raw() : nullptr,_6571 ? _6571->size(0) : 0);
  {
    int _11639 = (int)0;
    int _11640 = _6542;
    for (int _6572 = _11639; _6572 < _11640; ++_6572)
    {
      {
        _ptr__6569[safe_add( _6562,_6572 )] = _ptr__6555[safe_add( _6547,_6572 )];
      }
    }
    int _11641 = (int)0;
    int _11642 = _6543;
    for (int _6573 = _11641; _6573 < _11642; ++_6573)
    {
      {
        _ptr__6570[safe_add( _6564,_6573 )] = _ptr__6556[safe_add( _6549,_6573 )];
      }
    }
    int _11643 = (int)0;
    int _11644 = _6543;
    for (int _6574 = _11643; _6574 < _11644; ++_6574)
    {
      {
        _ptr__6571[safe_add( _6565,_6574 )] = _ptr__6557[safe_add( _6550,_6574 )];
      }
    }
    if ((_6545 > (int)0))
    {
      {
        int _11645 = (int)0;
        int _11646 = safe_add( _6543,(int)1 );
        for (int _6575 = _11645; _6575 < _11646; ++_6575)
        {
          {
            _ptr__6569[safe_add( _6566,_6575 )] = _ptr__6555[safe_add( _6552,_6575 )];
          }
        }
        int _11647 = (int)0;
        int _11648 = _6545;
        for (int _6576 = _11647; _6576 < _11648; ++_6576)
        {
          {
            _ptr__6569[safe_add( _6567,_6576 )] = _ptr__6555[safe_add( _6553,_6576 )];
          }
        }
        int _11649 = (int)0;
        int _11650 = _6545;
        for (int _6577 = _11649; _6577 < _11650; ++_6577)
        {
          {
            _ptr__6571[safe_add( _6568,_6577 )] = _ptr__6557[safe_add( _6554,_6577 )];
          }
        }
      }
    }
    {}
    if ((!_6546))
    {
      {
        int _11651 = (int)0;
        int _11652 = safe_add( _6558,(int)1 );
        for (int _6578 = _11651; _6578 < _11652; ++_6578)
        {
          {
            _ptr__6569[safe_add( _6563,_6578 )] = _ptr__6555[safe_add( _6548,_6578 )];
          }
        }
      }
    }
    else
    {
      {
        int _11653 = (int)0;
        int _11654 = safe_add( _6558,(int)1 );
        for (int _6579 = _11653; _6579 < _11654; ++_6579)
        {
          {
            _ptr__6569[safe_add( _6563,_6579 )] = (int)0;
          }
        }
        int _11655 = (int)0;
        int _11656 = _6544;
        for (int _6580 = _11655; _6580 < _11656; ++_6580)
        {
          {
            _ptr__6569[safe_add( safe_add( _6563,_ptr__6556[safe_add( _6551,_6580 )] ),(int)1 )] = (_ptr__6555[safe_add( safe_add( _6548,_6580 ),(int)1 )] - _ptr__6555[safe_add( _6548,_6580 )]);
          }
        }
        int _11657 = (int)0;
        int _11658 = _6558;
        for (int _6581 = _11657; _6581 < _11658; ++_6581)
        {
          {
            _ptr__6569[safe_add( safe_add( _6563,_6581 ),(int)1 )] += _ptr__6569[safe_add( _6563,_6581 )];
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDense::destroy(){expr.reset();}void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _6582,    int _6583,    monty::rc_ptr< ::mosek::fusion::Expression > _6584,    int _6585){ return new mosek::fusion::ExprSymmetrize(_6582,_6583,_6584,_6585); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _6582,    int _6583,    monty::rc_ptr< ::mosek::fusion::Expression > _6584,    int _6585) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6582,_6583,_6584,_6585); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _6582,    int _6583,    monty::rc_ptr< ::mosek::fusion::Expression > _6584,    int _6585){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6584->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _6584;
    if ((_6582 < _6583))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6582;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6583;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6583;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6582;
      }
    }
  }
}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _6586,    int _6587,    monty::rc_ptr< ::mosek::fusion::Expression > _6588){ return new mosek::fusion::ExprSymmetrize(_6586,_6587,_6588); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _6586,    int _6587,    monty::rc_ptr< ::mosek::fusion::Expression > _6588) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6586,_6587,_6588); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _6586,    int _6587,    monty::rc_ptr< ::mosek::fusion::Expression > _6588){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprSymmetrize::_initialize(_6586,_6587,_6588,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _6589 = _6588->getShape();
    _checked_ptr_1<int> _ptr__6589(_6589 ? _6589->raw() : nullptr,_6589 ? _6589->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_6589)->size(0))) || (_ptr__6589[dim0] != _ptr__6589[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6590,monty::rc_ptr< ::mosek::fusion::WorkStack > _6591,monty::rc_ptr< ::mosek::fusion::WorkStack > _6592) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_6590,_6591,_6592); }void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6590,monty::rc_ptr< ::mosek::fusion::WorkStack > _6591,monty::rc_ptr< ::mosek::fusion::WorkStack > _6592){
  expr->eval(_6591,_6590,_6592);
  _6591->pop_expr();
  int _6593 = (int)0;
  int _6594 = mosek::fusion::p_WorkStack::_get_impl(_6591)->nd;
  int _6595 = mosek::fusion::p_WorkStack::_get_impl(_6591)->nnz;
  int _6596 = mosek::fusion::p_WorkStack::_get_impl(_6591)->nelem;
  int _6597 = mosek::fusion::p_WorkStack::_get_impl(_6591)->ncodeatom;
  bool _6598 = mosek::fusion::p_WorkStack::_get_impl(_6591)->hassp;
  int _6599 = mosek::fusion::p_WorkStack::_get_impl(_6591)->shape_base;
  int _6600 = mosek::fusion::p_WorkStack::_get_impl(_6591)->ptr_base;
  int _6601 = mosek::fusion::p_WorkStack::_get_impl(_6591)->code_base;
  int _6602 = mosek::fusion::p_WorkStack::_get_impl(_6591)->codeptr_base;
  int _6603 = mosek::fusion::p_WorkStack::_get_impl(_6591)->cconst_base;
  int _6604 = mosek::fusion::p_WorkStack::_get_impl(_6591)->nidxs_base;
  int _6605 = mosek::fusion::p_WorkStack::_get_impl(_6591)->sp_base;
  int _6606 = mosek::fusion::p_WorkStack::_get_impl(_6591)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6607 = mosek::fusion::p_WorkStack::_get_impl(_6591)->i32;
  _checked_ptr_1<int> _ptr__6607(_6607 ? _6607->raw() : nullptr,_6607 ? _6607->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6608 = mosek::fusion::p_WorkStack::_get_impl(_6591)->i64;
  _checked_ptr_1<long long> _ptr__6608(_6608 ? _6608->raw() : nullptr,_6608 ? _6608->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6609 = mosek::fusion::p_WorkStack::_get_impl(_6591)->f64;
  _checked_ptr_1<double> _ptr__6609(_6609 ? _6609->raw() : nullptr,_6609 ? _6609->size(0) : 0);
  int _11659 = (int)0;
  int _11660 = _6594;
  for (int _6610 = _11659; _6610 < _11660; ++_6610)
  {
    {
      int _6611 = _ptr__6607[safe_add( _6599,_6610 )];
      if ((_6611 > _6593))
      {
        {
          _6611 = _6593;
        }
      }
      {}
    }
  }
  int _6612 = _6592->alloci32(_6596);
  int _6613 = _6592->alloci32(_6596);
  int _6614 = _6592->alloci32(safe_add( _6593,(int)1 ));
  int _6615 = _6592->alloci64(_6596);
  std::shared_ptr< monty::ndarray< int,1 > > _6616 = mosek::fusion::p_WorkStack::_get_impl(_6592)->i32;
  _checked_ptr_1<int> _ptr__6616(_6616 ? _6616->raw() : nullptr,_6616 ? _6616->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6617 = mosek::fusion::p_WorkStack::_get_impl(_6592)->i64;
  _checked_ptr_1<long long> _ptr__6617(_6617 ? _6617->raw() : nullptr,_6617 ? _6617->size(0) : 0);
  int _6618 = (int)0;
  int _6619 = (int)0;
  int _6620 = (int)0;
  std::vector<int> _11661;
  for (int _6622 = (int)0, _11662 = (int)5; _6622 < _11662 ; ++_6622)
  {
    _11661.push_back((int)1);
  }
  auto _11663 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11661.size()),_11661.begin(),_11661.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6621 = _11663;
  _checked_ptr_1<int> _ptr__6621(_6621 ? _6621->raw() : nullptr,_6621 ? _6621->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6623 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)5)));
  _checked_ptr_1<long long> _ptr__6623(_6623 ? _6623->raw() : nullptr,_6623 ? _6623->size(0) : 0);
  int _11664 = (int)0;
  int _11665 = dim0;
  for (int _6624 = _11664; _6624 < _11665; ++_6624)
  {
    {
      _ptr__6621[(int)0] *= _ptr__6607[safe_add( _6599,_6624 )];
    }
  }
  _ptr__6621[(int)1] = _ptr__6607[safe_add( _6599,dim0 )];
  int _11666 = safe_add( dim0,(int)1 );
  int _11667 = dim1;
  for (int _6625 = _11666; _6625 < _11667; ++_6625)
  {
    {
      _ptr__6621[(int)2] *= _ptr__6607[safe_add( _6599,_6625 )];
    }
  }
  _ptr__6621[(int)3] = _ptr__6607[safe_add( _6599,dim1 )];
  int _11668 = safe_add( dim1,(int)1 );
  int _11669 = _6594;
  for (int _6626 = _11668; _6626 < _11669; ++_6626)
  {
    {
      _ptr__6621[(int)4] *= _ptr__6607[safe_add( _6599,_6626 )];
    }
  }
  _ptr__6623[(int)4] = (int)1;
  int _11670 = (int)1;
  int _11671 = (int)5;
  for (int _6627 = _11670; _6627 < _11671; ++_6627)
  {
    {
      _ptr__6623[(((int)5 - _6627) - (int)1)] = safe_mul( _ptr__6623[((int)5 - _6627)],_ptr__6621[((int)5 - _6627)] );
    }
  }
  if (_6598)
  {
    {
      int _6628 = _6612;
      int _11672 = (int)0;
      int _11673 = _6596;
      for (int _6629 = _11672; _6629 < _11673; ++_6629)
      {
        {
          _ptr__6616[safe_add( _6628,_6629 )] = _6629;
        }
      }
      int _6630 = _6613;
      std::shared_ptr< monty::ndarray< int,1 > > _6631 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)2),(int)((int)3),(int)((int)0)});
      _checked_ptr_1<int> _ptr__6631(_6631 ? _6631->raw() : nullptr,_6631 ? _6631->size(0) : 0);
      int _11674 = (int)0;
      int _11675 = (int)4;
      for (int _6632 = _11674; _6632 < _11675; ++_6632)
      {
        {
          long long _6633 = _ptr__6623[_ptr__6631[_6632]];
          int _6634 = _ptr__6621[_ptr__6631[_6632]];
          if ((_6634 > (int)1))
          {
            {
              int _11676 = (int)0;
              int _11677 = safe_add( _6634,(int)1 );
              for (int _6635 = _11676; _6635 < _11677; ++_6635)
              {
                {
                  _ptr__6616[safe_add( _6614,_6635 )] = (int)0;
                }
              }
              int _11678 = (int)0;
              int _11679 = _6596;
              for (int _6636 = _11678; _6636 < _11679; ++_6636)
              {
                {
                  ++ _ptr__6616[safe_add( safe_add( _6614,((_ptr__6608[safe_add( _6605,_ptr__6616[safe_add( _6628,_6636 )] )] / _6633) % _6634) ),(int)1 )];
                }
              }
              int _11680 = (int)0;
              int _11681 = _ptr__6621[(int)3];
              for (int _6637 = _11680; _6637 < _11681; ++_6637)
              {
                {
                  _ptr__6616[safe_add( safe_add( _6614,_6637 ),(int)1 )] += _ptr__6616[safe_add( _6614,_6637 )];
                }
              }
              int _11682 = (int)0;
              int _11683 = _6596;
              for (int _6638 = _11682; _6638 < _11683; ++_6638)
              {
                {
                  int _6639 = _ptr__6616[safe_add( _6628,_6638 )];
                  long long _6640 = ((_ptr__6608[safe_add( _6605,_6639 )] / _6633) % _6634);
                  _ptr__6616[safe_add( _6630,_ptr__6616[safe_add( _6614,_6640 )] )] = _6639;
                  ++ _ptr__6616[safe_add( _6614,_6640 )];
                }
              }
              int _6641 = _6628;
              _6628 = _6630;
              _6630 = _6641;
            }
          }
          {}
        }
      }
      int _11684 = (int)0;
      int _11685 = _6596;
      for (int _6642 = _11684; _6642 < _11685; ++_6642)
      {
        {
          _ptr__6617[safe_add( _6615,_6642 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__6608[safe_add( _6605,_6642 )] / _ptr__6623[(int)0]) % _ptr__6621[(int)0]),_ptr__6623[(int)0] ),safe_mul( ((_ptr__6608[safe_add( _6605,_6642 )] / _ptr__6623[(int)1]) % _ptr__6621[(int)1]),_ptr__6623[(int)3] ) ),safe_mul( ((_ptr__6608[safe_add( _6605,_6642 )] / _ptr__6623[(int)2]) % _ptr__6621[(int)2]),_ptr__6623[(int)2] ) ),safe_mul( ((_ptr__6608[safe_add( _6605,_6642 )] / _ptr__6623[(int)3]) % _ptr__6621[(int)3]),_ptr__6623[(int)1] ) ),safe_mul( ((_ptr__6608[safe_add( _6605,_6642 )] / _ptr__6623[(int)4]) % _ptr__6621[(int)4]),_ptr__6623[(int)4] ) );
        }
      }
      {
        int _6643 = (int)0;
        int _6644 = (int)0;
        while ( ((_6644 < _6596) || (_6643 < _6596)) )
        {
          {
            int _6645 = _ptr__6616[safe_add( _6628,_6643 )];
            if (((_6644 < _6596) && ((_6643 == _6596) || (_ptr__6608[safe_add( _6605,_6644 )] < _ptr__6617[safe_add( _6615,_6645 )]))))
            {
              {
                _6619 += (_ptr__6607[safe_add( safe_add( _6600,_6644 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6644 )]);
                if ((_6597 > (int)0))
                {
                  {
                    _6620 += safe_add( (_ptr__6607[safe_add( _6602,_ptr__6607[safe_add( safe_add( _6600,_6644 ),(int)1 )] )] - _ptr__6607[safe_add( _6602,_ptr__6607[safe_add( _6600,_6644 )] )]),safe_mul( (int)2,(_ptr__6607[safe_add( safe_add( _6600,_6644 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6644 )]) ) );
                  }
                }
                {}
                ++ _6618;
                ++ _6644;
              }
            }
            else if(((_6643 < _6596) && ((_6644 == _6596) || (_ptr__6608[safe_add( _6605,_6644 )] > _ptr__6617[safe_add( _6615,_6645 )]))))
            {
              {
                _6619 += (_ptr__6607[safe_add( safe_add( _6600,_6645 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6645 )]);
                if ((_6597 > (int)0))
                {
                  {
                    _6620 += safe_add( (_ptr__6607[safe_add( _6602,_ptr__6607[safe_add( safe_add( _6600,_6645 ),(int)1 )] )] - _ptr__6607[safe_add( _6602,_ptr__6607[safe_add( _6600,_6645 )] )]),safe_mul( (int)2,(_ptr__6607[safe_add( safe_add( _6600,_6645 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6645 )]) ) );
                  }
                }
                {}
                ++ _6618;
                ++ _6643;
              }
            }
            else if((_ptr__6608[safe_add( _6605,_6644 )] != _ptr__6617[safe_add( _6615,_6645 )]))
            {
              {
                _6619 += (_ptr__6607[safe_add( safe_add( _6600,_6644 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6644 )]);
                _6619 += (_ptr__6607[safe_add( safe_add( _6600,_6645 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6645 )]);
                if ((_6597 > (int)0))
                {
                  {
                    _6620 += safe_add( (_ptr__6607[safe_add( _6602,_ptr__6607[safe_add( safe_add( _6600,_6644 ),(int)1 )] )] - _ptr__6607[safe_add( _6602,_ptr__6607[safe_add( _6600,_6644 )] )]),safe_mul( (int)2,(_ptr__6607[safe_add( safe_add( _6600,_6644 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6644 )]) ) );
                    _6620 += safe_add( (_ptr__6607[safe_add( _6602,_ptr__6607[safe_add( safe_add( _6600,_6645 ),(int)1 )] )] - _ptr__6607[safe_add( _6602,_ptr__6607[safe_add( _6600,_6645 )] )]),safe_mul( (int)2,(_ptr__6607[safe_add( safe_add( _6600,_6645 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6645 )]) ) );
                  }
                }
                {}
                ++ _6618;
                ++ _6643;
                ++ _6644;
              }
            }
            else
            {
              {
                _6619 += (_ptr__6607[safe_add( safe_add( _6600,_6644 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6644 )]);
                if ((_6597 > (int)0))
                {
                  {
                    _6620 += (_ptr__6607[safe_add( _6602,_ptr__6607[safe_add( safe_add( _6600,_6644 ),(int)1 )] )] - _ptr__6607[safe_add( _6602,_ptr__6607[safe_add( _6600,_6644 )] )]);
                  }
                }
                {}
                ++ _6618;
                ++ _6643;
                ++ _6644;
              }
            }
          }
        }
      }
      _6590->alloc_expr(_6594,_6618,_6619,true,_6620);
      int _6646 = _6594;
      int _6647 = mosek::fusion::p_WorkStack::_get_impl(_6590)->ptr_base;
      int _6648 = mosek::fusion::p_WorkStack::_get_impl(_6590)->nidxs_base;
      int _6649 = mosek::fusion::p_WorkStack::_get_impl(_6590)->shape_base;
      int _6650 = mosek::fusion::p_WorkStack::_get_impl(_6590)->sp_base;
      int _6651 = mosek::fusion::p_WorkStack::_get_impl(_6590)->cof_base;
      int _6652 = mosek::fusion::p_WorkStack::_get_impl(_6590)->code_base;
      int _6653 = mosek::fusion::p_WorkStack::_get_impl(_6590)->codeptr_base;
      int _6654 = mosek::fusion::p_WorkStack::_get_impl(_6590)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6655 = mosek::fusion::p_WorkStack::_get_impl(_6590)->i32;
      _checked_ptr_1<int> _ptr__6655(_6655 ? _6655->raw() : nullptr,_6655 ? _6655->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6656 = mosek::fusion::p_WorkStack::_get_impl(_6590)->i64;
      _checked_ptr_1<long long> _ptr__6656(_6656 ? _6656->raw() : nullptr,_6656 ? _6656->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6657 = mosek::fusion::p_WorkStack::_get_impl(_6590)->f64;
      _checked_ptr_1<double> _ptr__6657(_6657 ? _6657->raw() : nullptr,_6657 ? _6657->size(0) : 0);
      int _11686 = (int)0;
      int _11687 = _6594;
      for (int _6658 = _11686; _6658 < _11687; ++_6658)
      {
        {
          _ptr__6655[safe_add( _6649,_6658 )] = _ptr__6607[safe_add( _6599,_6658 )];
        }
      }
      _ptr__6655[_6647] = (int)0;
      if ((_6620 > (int)0))
      {
        {
          _ptr__6655[_6653] = (int)0;
        }
      }
      {}
      {
        int _6659 = (int)0;
        int _6660 = (int)0;
        int _6661 = (int)0;
        int _6662 = (int)0;
        int _6663 = (int)0;
        _ptr__6655[_6647] = (int)0;
        while ( ((_6663 < _6596) || (_6662 < _6596)) )
        {
          {
            int _6664 = _ptr__6616[safe_add( _6628,_6662 )];
            if (((_6663 < _6596) && ((_6662 == _6596) || (_ptr__6608[safe_add( _6605,_6663 )] < _ptr__6617[safe_add( _6615,_6664 )]))))
            {
              {
                if ((_6620 == (int)0))
                {
                  {
                    int _11688 = _ptr__6607[safe_add( _6600,_6663 )];
                    int _11689 = _ptr__6607[safe_add( safe_add( _6600,_6663 ),(int)1 )];
                    for (int _6665 = _11688; _6665 < _11689; ++_6665)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6665 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = (_ptr__6609[safe_add( _6606,_6665 )] * 0.5);
                        ++ _6659;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11690 = _ptr__6607[safe_add( _6600,_6663 )];
                    int _11691 = _ptr__6607[safe_add( safe_add( _6600,_6663 ),(int)1 )];
                    for (int _6666 = _11690; _6666 < _11691; ++_6666)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6666 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = (_ptr__6609[safe_add( _6606,_6666 )] * 0.5);
                        int _11692 = _ptr__6607[safe_add( _6602,_6666 )];
                        int _11693 = _ptr__6607[safe_add( safe_add( _6602,_6666 ),(int)1 )];
                        for (int _6667 = _11692; _6667 < _11693; ++_6667)
                        {
                          {
                            _ptr__6655[safe_add( _6652,_6660 )] = _ptr__6607[safe_add( _6601,_6667 )];
                            _ptr__6657[safe_add( _6654,_6660 )] = _ptr__6609[safe_add( _6603,_6667 )];
                            ++ _6660;
                          }
                        }
                        _ptr__6655[safe_add( _6652,_6660 )] = 2;
                        _ptr__6657[safe_add( _6654,_6660 )] = 0.5;
                        ++ _6660;
                        _ptr__6655[safe_add( _6652,_6660 )] = 5;
                        ++ _6660;
                        _ptr__6655[safe_add( safe_add( _6653,_6659 ),(int)1 )] = _6660;
                        ++ _6659;
                      }
                    }
                  }
                }
                _ptr__6656[safe_add( _6650,_6661 )] = _ptr__6608[safe_add( _6605,_6663 )];
                _ptr__6655[safe_add( safe_add( _6647,_6661 ),(int)1 )] = _6659;
                ++ _6661;
                ++ _6663;
              }
            }
            else if(((_6662 < _6596) && ((_6663 == _6596) || (_ptr__6608[safe_add( _6605,_6663 )] > _ptr__6617[safe_add( _6615,_6664 )]))))
            {
              {
                if ((_6620 == (int)0))
                {
                  {
                    int _11694 = _ptr__6607[safe_add( _6600,_6664 )];
                    int _11695 = _ptr__6607[safe_add( safe_add( _6600,_6664 ),(int)1 )];
                    for (int _6668 = _11694; _6668 < _11695; ++_6668)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6668 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = (_ptr__6609[safe_add( _6606,_6668 )] * 0.5);
                        ++ _6659;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11696 = _ptr__6607[safe_add( _6600,_6664 )];
                    int _11697 = _ptr__6607[safe_add( safe_add( _6600,_6664 ),(int)1 )];
                    for (int _6669 = _11696; _6669 < _11697; ++_6669)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6669 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = (_ptr__6609[safe_add( _6606,_6669 )] * 0.5);
                        int _11698 = _ptr__6607[safe_add( _6602,_6669 )];
                        int _11699 = _ptr__6607[safe_add( safe_add( _6602,_6669 ),(int)1 )];
                        for (int _6670 = _11698; _6670 < _11699; ++_6670)
                        {
                          {
                            _ptr__6655[safe_add( _6652,_6660 )] = _ptr__6607[safe_add( _6601,_6670 )];
                            _ptr__6657[safe_add( _6654,_6660 )] = _ptr__6609[safe_add( _6603,_6670 )];
                            ++ _6660;
                          }
                        }
                        _ptr__6655[safe_add( _6652,_6660 )] = 2;
                        _ptr__6657[safe_add( _6654,_6660 )] = 0.5;
                        ++ _6660;
                        _ptr__6655[safe_add( _6652,_6660 )] = 5;
                        ++ _6660;
                        _ptr__6655[safe_add( safe_add( _6653,_6659 ),(int)1 )] = _6660;
                        ++ _6659;
                      }
                    }
                  }
                }
                _ptr__6656[safe_add( _6650,_6661 )] = _ptr__6608[safe_add( _6615,_6664 )];
                _ptr__6655[safe_add( safe_add( _6647,_6661 ),(int)1 )] = _6659;
                ++ _6661;
                ++ _6662;
              }
            }
            else if((_ptr__6608[safe_add( _6605,_6663 )] != _ptr__6617[safe_add( _6615,_6664 )]))
            {
              {
                if ((_6620 == (int)0))
                {
                  {
                    int _11700 = _ptr__6607[safe_add( _6600,_6663 )];
                    int _11701 = _ptr__6607[safe_add( safe_add( _6600,_6663 ),(int)1 )];
                    for (int _6671 = _11700; _6671 < _11701; ++_6671)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6671 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = (_ptr__6609[safe_add( _6606,_6671 )] * 0.5);
                        ++ _6659;
                      }
                    }
                    int _11702 = _ptr__6607[safe_add( _6600,_6664 )];
                    int _11703 = _ptr__6607[safe_add( safe_add( _6600,_6664 ),(int)1 )];
                    for (int _6672 = _11702; _6672 < _11703; ++_6672)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6672 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = (_ptr__6609[safe_add( _6606,_6672 )] * 0.5);
                        ++ _6659;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11704 = _ptr__6607[safe_add( _6600,_6663 )];
                    int _11705 = _ptr__6607[safe_add( safe_add( _6600,_6663 ),(int)1 )];
                    for (int _6673 = _11704; _6673 < _11705; ++_6673)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6673 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = (_ptr__6609[safe_add( _6606,_6673 )] * 0.5);
                        int _11706 = _ptr__6607[safe_add( _6602,_6673 )];
                        int _11707 = _ptr__6607[safe_add( safe_add( _6602,_6673 ),(int)1 )];
                        for (int _6674 = _11706; _6674 < _11707; ++_6674)
                        {
                          {
                            _ptr__6655[safe_add( _6652,_6660 )] = _ptr__6607[safe_add( _6601,_6674 )];
                            _ptr__6657[safe_add( _6654,_6660 )] = _ptr__6609[safe_add( _6603,_6674 )];
                            ++ _6660;
                          }
                        }
                        _ptr__6655[safe_add( _6652,_6660 )] = 2;
                        _ptr__6657[safe_add( _6654,_6660 )] = 0.5;
                        ++ _6660;
                        _ptr__6655[safe_add( _6652,_6660 )] = 5;
                        ++ _6660;
                        _ptr__6655[safe_add( safe_add( _6653,_6659 ),(int)1 )] = _6660;
                        ++ _6659;
                      }
                    }
                    int _11708 = _ptr__6607[safe_add( _6600,_6664 )];
                    int _11709 = _ptr__6607[safe_add( safe_add( _6600,_6664 ),(int)1 )];
                    for (int _6675 = _11708; _6675 < _11709; ++_6675)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6675 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = (_ptr__6609[safe_add( _6606,_6675 )] * 0.5);
                        int _11710 = _ptr__6607[safe_add( _6602,_6675 )];
                        int _11711 = _ptr__6607[safe_add( safe_add( _6602,_6675 ),(int)1 )];
                        for (int _6676 = _11710; _6676 < _11711; ++_6676)
                        {
                          {
                            _ptr__6655[safe_add( _6652,_6660 )] = _ptr__6607[safe_add( _6601,_6676 )];
                            _ptr__6657[safe_add( _6654,_6660 )] = _ptr__6609[safe_add( _6603,_6676 )];
                            ++ _6660;
                          }
                        }
                        _ptr__6655[safe_add( _6652,_6660 )] = 2;
                        _ptr__6657[safe_add( _6654,_6660 )] = 0.5;
                        ++ _6660;
                        _ptr__6655[safe_add( _6652,_6660 )] = 5;
                        ++ _6660;
                        _ptr__6655[safe_add( safe_add( _6653,_6659 ),(int)1 )] = _6660;
                        ++ _6659;
                      }
                    }
                  }
                }
                _ptr__6656[safe_add( _6650,_6661 )] = _ptr__6608[safe_add( _6605,_6663 )];
                _ptr__6655[safe_add( safe_add( _6647,_6661 ),(int)1 )] = _6659;
                ++ _6661;
                ++ _6662;
                ++ _6663;
              }
            }
            else
            {
              {
                if ((_6620 == (int)0))
                {
                  {
                    int _11712 = _ptr__6607[safe_add( _6600,_6663 )];
                    int _11713 = _ptr__6607[safe_add( safe_add( _6600,_6663 ),(int)1 )];
                    for (int _6677 = _11712; _6677 < _11713; ++_6677)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6677 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = _ptr__6609[safe_add( _6606,_6677 )];
                        ++ _6659;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11714 = _ptr__6607[safe_add( _6600,_6663 )];
                    int _11715 = _ptr__6607[safe_add( safe_add( _6600,_6663 ),(int)1 )];
                    for (int _6678 = _11714; _6678 < _11715; ++_6678)
                    {
                      {
                        _ptr__6656[safe_add( _6648,_6659 )] = _ptr__6608[safe_add( _6604,_6678 )];
                        _ptr__6657[safe_add( _6651,_6659 )] = _ptr__6609[safe_add( _6606,_6678 )];
                        int _11716 = _ptr__6607[safe_add( _6602,_6678 )];
                        int _11717 = _ptr__6607[safe_add( safe_add( _6602,_6678 ),(int)1 )];
                        for (int _6679 = _11716; _6679 < _11717; ++_6679)
                        {
                          {
                            _ptr__6655[safe_add( _6652,_6660 )] = _ptr__6607[safe_add( _6601,_6679 )];
                            _ptr__6657[safe_add( _6654,_6660 )] = _ptr__6609[safe_add( _6603,_6679 )];
                            ++ _6660;
                          }
                        }
                        _ptr__6655[safe_add( safe_add( _6653,_6659 ),(int)1 )] = _6660;
                        ++ _6659;
                      }
                    }
                  }
                }
                _ptr__6656[safe_add( _6650,_6661 )] = _ptr__6608[safe_add( _6605,_6663 )];
                _ptr__6655[safe_add( safe_add( _6647,_6661 ),(int)1 )] = _6659;
                ++ _6661;
                ++ _6662;
                ++ _6663;
              }
            }
          }
        }
        if ((_6659 != _6619))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nzi"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      _6618 = _6596;
      _6619 = safe_mul( _6595,(int)2 );
      int _11718;
      bool _11719 = (_6597 > (int)0);
      if (_11719)
      {
        _11718 = safe_add( safe_mul( (int)2,_6597 ),safe_mul( safe_mul( (int)2,(int)2 ),_6595 ) );
      }
      else
      {
        _11718 = (int)0;
      }
      _6620 = _11718;
      int _11720 = (int)0;
      int _11721 = _ptr__6621[(int)0];
      for (int _6680 = _11720; _6680 < _11721; ++_6680)
      {
        {
          int _11722 = (int)0;
          int _11723 = _ptr__6621[(int)2];
          for (int _6681 = _11722; _6681 < _11723; ++_6681)
          {
            {
              int _11724 = (int)0;
              int _11725 = _ptr__6621[(int)4];
              for (int _6682 = _11724; _6682 < _11725; ++_6682)
              {
                {
                  int _11726 = (int)0;
                  int _11727 = _ptr__6621[(int)1];
                  for (int _6683 = _11726; _6683 < _11727; ++_6683)
                  {
                    {
                      long long _6684 = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__6623[(int)0],_6680 ),safe_mul( _ptr__6623[(int)1],_6683 ) ),safe_mul( _ptr__6623[(int)2],_6681 ) ),safe_mul( _ptr__6623[(int)3],_6683 ) ),safe_mul( _ptr__6623[(int)4],_6682 ) );
                      _6619 -= (_ptr__6607[safe_add( safe_add( _6600,_6684 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6684 )]);
                      if ((_6597 > (int)0))
                      {
                        {
                          _6620 -= safe_add( (_ptr__6607[safe_add( _6602,_ptr__6607[safe_add( safe_add( _6600,_6684 ),(int)1 )] )] - _ptr__6607[safe_add( _6602,_ptr__6607[safe_add( _6600,_6684 )] )]),safe_mul( safe_mul( (int)2,(int)2 ),(_ptr__6607[safe_add( safe_add( _6600,_6684 ),(int)1 )] - _ptr__6607[safe_add( _6600,_6684 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
      _6590->alloc_expr(_6594,_6618,_6619,false,_6620);
      int _6685 = mosek::fusion::p_WorkStack::_get_impl(_6590)->ptr_base;
      int _6686 = mosek::fusion::p_WorkStack::_get_impl(_6590)->shape_base;
      int _6687 = mosek::fusion::p_WorkStack::_get_impl(_6590)->code_base;
      int _6688 = mosek::fusion::p_WorkStack::_get_impl(_6590)->codeptr_base;
      int _6689 = mosek::fusion::p_WorkStack::_get_impl(_6590)->nidxs_base;
      int _6690 = mosek::fusion::p_WorkStack::_get_impl(_6590)->sp_base;
      int _6691 = mosek::fusion::p_WorkStack::_get_impl(_6590)->cof_base;
      int _6692 = mosek::fusion::p_WorkStack::_get_impl(_6590)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6693 = mosek::fusion::p_WorkStack::_get_impl(_6590)->i32;
      _checked_ptr_1<int> _ptr__6693(_6693 ? _6693->raw() : nullptr,_6693 ? _6693->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6694 = mosek::fusion::p_WorkStack::_get_impl(_6590)->i64;
      _checked_ptr_1<long long> _ptr__6694(_6694 ? _6694->raw() : nullptr,_6694 ? _6694->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6695 = mosek::fusion::p_WorkStack::_get_impl(_6590)->f64;
      _checked_ptr_1<double> _ptr__6695(_6695 ? _6695->raw() : nullptr,_6695 ? _6695->size(0) : 0);
      int _6696 = (int)0;
      int _6697 = (int)0;
      int _6698 = (int)0;
      int _11728 = (int)0;
      int _11729 = _6594;
      for (int _6699 = _11728; _6699 < _11729; ++_6699)
      {
        {
          _ptr__6693[safe_add( _6686,_6699 )] = _ptr__6607[safe_add( _6599,_6699 )];
        }
      }
      _ptr__6693[_6685] = (int)0;
      if ((_6620 > (int)0))
      {
        {
          _ptr__6693[_6688] = (int)0;
        }
      }
      {}
      int _6700 = (int)0;
      int _11730 = (int)0;
      int _11731 = _ptr__6621[(int)0];
      for (int _6701 = _11730; _6701 < _11731; ++_6701)
      {
        {
          int _11732 = (int)0;
          int _11733 = _ptr__6621[(int)1];
          for (int _6702 = _11732; _6702 < _11733; ++_6702)
          {
            {
              int _11734 = (int)0;
              int _11735 = _ptr__6621[(int)2];
              for (int _6703 = _11734; _6703 < _11735; ++_6703)
              {
                {
                  int _11736 = (int)0;
                  int _11737 = _ptr__6621[(int)3];
                  for (int _6704 = _11736; _6704 < _11737; ++_6704)
                  {
                    {
                      int _11738 = (int)0;
                      int _11739 = _ptr__6621[(int)4];
                      for (int _6705 = _11738; _6705 < _11739; ++_6705)
                      {
                        {
                          if ((_6702 == _6704))
                          {
                            {
                              if ((_6620 == (int)0))
                              {
                                {
                                  int _11740 = _ptr__6607[safe_add( _6600,_6700 )];
                                  int _11741 = _ptr__6607[safe_add( safe_add( _6600,_6700 ),(int)1 )];
                                  for (int _6706 = _11740; _6706 < _11741; ++_6706)
                                  {
                                    {
                                      _ptr__6694[safe_add( _6689,_6696 )] = _ptr__6608[safe_add( _6604,_6706 )];
                                      _ptr__6695[safe_add( _6691,_6696 )] = _ptr__6609[safe_add( _6606,_6706 )];
                                      ++ _6696;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int _11742 = _ptr__6607[safe_add( _6600,_6700 )];
                                  int _11743 = _ptr__6607[safe_add( safe_add( _6600,_6700 ),(int)1 )];
                                  for (int _6707 = _11742; _6707 < _11743; ++_6707)
                                  {
                                    {
                                      _ptr__6694[safe_add( _6689,_6696 )] = _ptr__6608[safe_add( _6604,_6707 )];
                                      _ptr__6695[safe_add( _6691,_6696 )] = _ptr__6609[safe_add( _6606,_6707 )];
                                      int _11744 = _ptr__6607[safe_add( _6602,_6707 )];
                                      int _11745 = _ptr__6607[safe_add( safe_add( _6602,_6707 ),(int)1 )];
                                      for (int _6708 = _11744; _6708 < _11745; ++_6708)
                                      {
                                        {
                                          _ptr__6693[safe_add( _6687,_6698 )] = _ptr__6607[safe_add( _6601,_6708 )];
                                          _ptr__6695[safe_add( _6692,_6698 )] = _ptr__6609[safe_add( _6603,_6708 )];
                                          ++ _6698;
                                        }
                                      }
                                      _ptr__6693[safe_add( safe_add( _6688,_6696 ),(int)1 )] = _6698;
                                      ++ _6696;
                                    }
                                  }
                                }
                              }
                              _ptr__6693[safe_add( safe_add( _6685,_6697 ),(int)1 )] = _6696;
                              ++ _6700;
                            }
                          }
                          else
                          {
                            {
                              long long _6709 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6701,_ptr__6623[(int)0] ),safe_mul( _6704,_ptr__6623[(int)1] ) ),safe_mul( _6703,_ptr__6623[(int)2] ) ),safe_mul( _6702,_ptr__6623[(int)3] ) ),_6705 );
                              if ((_6620 == (int)0))
                              {
                                {
                                  int _11746 = _ptr__6607[safe_add( _6600,_6700 )];
                                  int _11747 = _ptr__6607[safe_add( safe_add( _6600,_6700 ),(int)1 )];
                                  for (int _6710 = _11746; _6710 < _11747; ++_6710)
                                  {
                                    {
                                      _ptr__6694[safe_add( _6689,_6696 )] = _ptr__6608[safe_add( _6604,_6710 )];
                                      _ptr__6695[safe_add( _6691,_6696 )] = (_ptr__6609[safe_add( _6606,_6710 )] * 0.5);
                                      ++ _6696;
                                    }
                                  }
                                  int _11748 = _ptr__6607[safe_add( _6600,_6709 )];
                                  int _11749 = _ptr__6607[safe_add( safe_add( _6600,_6709 ),(int)1 )];
                                  for (int _6711 = _11748; _6711 < _11749; ++_6711)
                                  {
                                    {
                                      _ptr__6694[safe_add( _6689,_6696 )] = _ptr__6608[safe_add( _6604,_6711 )];
                                      _ptr__6695[safe_add( _6691,_6696 )] = (_ptr__6609[safe_add( _6606,_6711 )] * 0.5);
                                      ++ _6696;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int _11750 = _ptr__6607[safe_add( _6600,_6700 )];
                                  int _11751 = _ptr__6607[safe_add( safe_add( _6600,_6700 ),(int)1 )];
                                  for (int _6712 = _11750; _6712 < _11751; ++_6712)
                                  {
                                    {
                                      _ptr__6694[safe_add( _6689,_6696 )] = _ptr__6608[safe_add( _6604,_6712 )];
                                      _ptr__6695[safe_add( _6691,_6696 )] = (_ptr__6609[safe_add( _6606,_6712 )] * 0.5);
                                      int _11752 = _ptr__6607[safe_add( _6602,_6712 )];
                                      int _11753 = _ptr__6607[safe_add( safe_add( _6602,_6712 ),(int)1 )];
                                      for (int _6713 = _11752; _6713 < _11753; ++_6713)
                                      {
                                        {
                                          _ptr__6693[safe_add( _6687,_6698 )] = _ptr__6607[safe_add( _6601,_6713 )];
                                          _ptr__6695[safe_add( _6692,_6698 )] = _ptr__6609[safe_add( _6603,_6713 )];
                                          ++ _6698;
                                        }
                                      }
                                      _ptr__6693[safe_add( _6687,_6698 )] = 2;
                                      _ptr__6695[safe_add( _6692,_6698 )] = 0.5;
                                      ++ _6698;
                                      _ptr__6693[safe_add( _6687,_6698 )] = 5;
                                      ++ _6698;
                                      _ptr__6693[safe_add( safe_add( _6688,_6696 ),(int)1 )] = _6698;
                                      ++ _6696;
                                    }
                                  }
                                  int _11754 = _ptr__6607[safe_add( _6600,_6709 )];
                                  int _11755 = _ptr__6607[safe_add( safe_add( _6600,_6709 ),(int)1 )];
                                  for (int _6714 = _11754; _6714 < _11755; ++_6714)
                                  {
                                    {
                                      _ptr__6694[safe_add( _6689,_6696 )] = _ptr__6608[safe_add( _6604,_6714 )];
                                      _ptr__6695[safe_add( _6691,_6696 )] = (_ptr__6609[safe_add( _6606,_6714 )] * 0.5);
                                      int _11756 = _ptr__6607[safe_add( _6602,_6714 )];
                                      int _11757 = _ptr__6607[safe_add( safe_add( _6602,_6714 ),(int)1 )];
                                      for (int _6715 = _11756; _6715 < _11757; ++_6715)
                                      {
                                        {
                                          _ptr__6693[safe_add( _6687,_6698 )] = _ptr__6607[safe_add( _6601,_6715 )];
                                          _ptr__6695[safe_add( _6692,_6698 )] = _ptr__6609[safe_add( _6603,_6715 )];
                                          ++ _6698;
                                        }
                                      }
                                      _ptr__6693[safe_add( _6687,_6698 )] = 2;
                                      _ptr__6695[safe_add( _6692,_6698 )] = 0.5;
                                      ++ _6698;
                                      _ptr__6693[safe_add( _6687,_6698 )] = 5;
                                      ++ _6698;
                                      _ptr__6693[safe_add( safe_add( _6688,_6696 ),(int)1 )] = _6698;
                                      ++ _6696;
                                    }
                                  }
                                }
                              }
                              _ptr__6693[safe_add( safe_add( _6685,_6697 ),(int)1 )] = _6696;
                              ++ _6700;
                            }
                          }
                          ++ _6697;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6696 != _6619))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
        }
      }
      {}
      if ((_6697 != _6618))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  _6592->clear();
  _6590->peek_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_6590)->nnz != ((*mosek::fusion::p_WorkStack::_get_impl(_6590)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6590)->ptr_base,mosek::fusion::p_WorkStack::_get_impl(_6590)->nelem )))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
  if ((((*mosek::fusion::p_WorkStack::_get_impl(_6590)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6590)->ptr_base)) != (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
}
std::string mosek::fusion::ExprSymmetrize :: toString() { return mosek::fusion::p_ExprSymmetrize::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSymmetrize::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSymmetrize(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprSymmetrize::destroy(){expr.reset();}void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCondense::p_ExprCondense  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _6716){ return new mosek::fusion::ExprCondense(_6716); }mosek::fusion::ExprCondense::ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _6716) :    ExprCondense(new mosek::fusion::p_ExprCondense(this)){ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_6716); }void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6716){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6716->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _6716;
  }
}void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6717,monty::rc_ptr< ::mosek::fusion::WorkStack > _6718,monty::rc_ptr< ::mosek::fusion::WorkStack > _6719) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_6717,_6718,_6719); }void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6717,monty::rc_ptr< ::mosek::fusion::WorkStack > _6718,monty::rc_ptr< ::mosek::fusion::WorkStack > _6719){
  expr->eval(_6717,_6718,_6719);
  _6717->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_6717)->hassp)
  {
    {
      int _6720 = _6717->popi32();
      _6717->popi32(_6720);
      int _6721 = _6717->popi32();
      int _6722 = _6717->popi32();
      _6717->popi32();
      _6717->popi64(_6721);
      _6717->pushi32((int)0);
      _6717->pushi32(_6722);
      _6717->pushi32(_6721);
      _6717->pushi32(_6721);
      _6717->pushi32((int)1);
      _6717->peek_expr();
    }
  }
  {}
}
std::string mosek::fusion::ExprCondense :: toString() { return mosek::fusion::p_ExprCondense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCondense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCondense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCondense::destroy(){expr.reset();}void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprFromVar::p_ExprFromVar  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _6723){ return new mosek::fusion::ExprFromVar(_6723); }mosek::fusion::ExprFromVar::ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _6723) :    ExprFromVar(new mosek::fusion::p_ExprFromVar(this)){ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_6723); }void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6723){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6723->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _6723;
  }
}void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6724,monty::rc_ptr< ::mosek::fusion::WorkStack > _6725,monty::rc_ptr< ::mosek::fusion::WorkStack > _6726) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_6724,_6725,_6726); }void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6724,monty::rc_ptr< ::mosek::fusion::WorkStack > _6725,monty::rc_ptr< ::mosek::fusion::WorkStack > _6726){
  std::shared_ptr< monty::ndarray< int,1 > > _6727 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__6727(_6727 ? _6727->raw() : nullptr,_6727 ? _6727->size(0) : 0);
  long long _6728 = ::mosek::fusion::p_Set::size(_6727);
  int _6729 = x->numInst();
  int _6730 = _6729;
  bool _6731 = (_6728 > _6729);
  _6724->alloc_expr((int)((_6727)->size(0)),_6729,_6730,_6731);
  int _6732 = mosek::fusion::p_WorkStack::_get_impl(_6724)->ptr_base;
  int _6733 = mosek::fusion::p_WorkStack::_get_impl(_6724)->nidxs_base;
  int _6734 = mosek::fusion::p_WorkStack::_get_impl(_6724)->sp_base;
  int _6735 = mosek::fusion::p_WorkStack::_get_impl(_6724)->cof_base;
  int _6736 = mosek::fusion::p_WorkStack::_get_impl(_6724)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6737 = mosek::fusion::p_WorkStack::_get_impl(_6724)->i32;
  _checked_ptr_1<int> _ptr__6737(_6737 ? _6737->raw() : nullptr,_6737 ? _6737->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6738 = mosek::fusion::p_WorkStack::_get_impl(_6724)->i64;
  _checked_ptr_1<long long> _ptr__6738(_6738 ? _6738->raw() : nullptr,_6738 ? _6738->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6739 = mosek::fusion::p_WorkStack::_get_impl(_6724)->f64;
  _checked_ptr_1<double> _ptr__6739(_6739 ? _6739->raw() : nullptr,_6739 ? _6739->size(0) : 0);
  int _11758 = (int)0;
  int _11759 = (int)((_6727)->size(0));
  for (int _6740 = _11758; _6740 < _11759; ++_6740)
  {
    {
      _ptr__6737[safe_add( _6736,_6740 )] = _ptr__6727[_6740];
    }
  }
  {
    int _11760 = (int)0;
    int _11761 = safe_add( _6729,(int)1 );
    for (int _6741 = _11760; _6741 < _11761; ++_6741)
    {
      {
        _ptr__6737[safe_add( _6732,_6741 )] = _6741;
      }
    }
    int _11762 = (int)0;
    int _11763 = _6730;
    for (int _6742 = _11762; _6742 < _11763; ++_6742)
    {
      {
        _ptr__6739[safe_add( _6735,_6742 )] = 1.0;
      }
    }
  }
  if (_6731)
  {
    {
      x->inst(_6734,_6738,_6733,_6738);
    }
  }
  else
  {
    {
      x->inst(_6733,_6738);
    }
  }
}
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprFromVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprFromVar::destroy(){x.reset();}void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprReshape::p_ExprReshape  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _6743,    monty::rc_ptr< ::mosek::fusion::Expression > _6744){ return new mosek::fusion::ExprReshape(_6743,_6744); }mosek::fusion::ExprReshape::ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _6743,    monty::rc_ptr< ::mosek::fusion::Expression > _6744) :    ExprReshape(new mosek::fusion::p_ExprReshape(this)){ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_6743,_6744); }void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6743,    monty::rc_ptr< ::mosek::fusion::Expression > _6744){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6743(_6743 ? _6743->raw() : nullptr, _6743 ? _6743->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_6743));
    long long _6745 = _6744->getSize();
    if ((::mosek::fusion::p_Set::size(_6743) != _6744->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _6744;
  }
}void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6746,monty::rc_ptr< ::mosek::fusion::WorkStack > _6747,monty::rc_ptr< ::mosek::fusion::WorkStack > _6748) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_6746,_6747,_6748); }void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6746,monty::rc_ptr< ::mosek::fusion::WorkStack > _6747,monty::rc_ptr< ::mosek::fusion::WorkStack > _6748){
  std::shared_ptr< monty::ndarray< int,1 > > _6749 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__6749(_6749 ? _6749->raw() : nullptr,_6749 ? _6749->size(0) : 0);
  e->eval(_6746,_6747,_6748);
  _6746->peek_expr();
  int _6750 = _6746->popi32();
  long long _6751 = (int)1;
  int _11764 = (int)0;
  int _11765 = _6750;
  for (int _6752 = _11764; _6752 < _11765; ++_6752)
  {
    {
      _6751 *= _6746->popi32();
    }
  }
  if ((_6751 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int _11766 = (int)0;
  int _11767 = (int)((_6749)->size(0));
  for (int _6753 = _11766; _6753 < _11767; ++_6753)
  {
    {
      _6746->pushi32(_ptr__6749[_6753]);
    }
  }
  _6746->pushi32((int)((_6749)->size(0)));
}
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprReshape::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6754 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _6754->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int _11768 = (int)1;
      int _11769 = _pubthis->getND();
      for (int _6755 = _11768; _6755 < _11769; ++_6755)
      {
        {
          _6754->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_6755));
        }
      }
    }
  }
  {}
  _6754->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _6754->toString();
}
void mosek::fusion::p_ExprReshape::destroy(){e.reset();}void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseExpression::p_BaseExpression  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6756){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6756(_6756 ? _6756->raw() : nullptr, _6756 ? _6756->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _6756;
  }
}std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseExpression::toString(){
  return std::string ("Expression()");
}
void mosek::fusion::p_BaseExpression::printStack(monty::rc_ptr< ::mosek::fusion::WorkStack > _6757){
  std::shared_ptr< monty::ndarray< int,1 > > _6758 = mosek::fusion::p_WorkStack::_get_impl(_6757)->i32;
  _checked_ptr_1<int> _ptr__6758(_6758 ? _6758->raw() : nullptr,_6758 ? _6758->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6759 = mosek::fusion::p_WorkStack::_get_impl(_6757)->i64;
  _checked_ptr_1<long long> _ptr__6759(_6759 ? _6759->raw() : nullptr,_6759 ? _6759->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6760 = mosek::fusion::p_WorkStack::_get_impl(_6757)->f64;
  _checked_ptr_1<double> _ptr__6760(_6760 ? _6760->raw() : nullptr,_6760 ? _6760->size(0) : 0);
  int _6761 = mosek::fusion::p_WorkStack::_get_impl(_6757)->ptr_base;
  int _6762 = mosek::fusion::p_WorkStack::_get_impl(_6757)->nidxs_base;
  int _6763 = mosek::fusion::p_WorkStack::_get_impl(_6757)->cof_base;
  int _6764 = mosek::fusion::p_WorkStack::_get_impl(_6757)->shape_base;
  int _6765 = mosek::fusion::p_WorkStack::_get_impl(_6757)->codeptr_base;
  int _6766 = mosek::fusion::p_WorkStack::_get_impl(_6757)->code_base;
  int _6767 = mosek::fusion::p_WorkStack::_get_impl(_6757)->cconst_base;
  int _6768 = mosek::fusion::p_WorkStack::_get_impl(_6757)->sp_base;
  int _6769 = mosek::fusion::p_WorkStack::_get_impl(_6757)->nelem;
  int _6770 = mosek::fusion::p_WorkStack::_get_impl(_6757)->nnz;
  int _6771 = mosek::fusion::p_WorkStack::_get_impl(_6757)->ncodeatom;
  int _6772 = mosek::fusion::p_WorkStack::_get_impl(_6757)->nd;
  bool _6773 = mosek::fusion::p_WorkStack::_get_impl(_6757)->hassp;
  std::vector<int> _11770;
  for (int _6774 = (int)0, _11771 = _6772; _6774 < _11771 ; ++_6774)
  {
    _11770.push_back(_ptr__6758[safe_add( _6764,_6774 )]);
  }
  auto _11772 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11770.size()),_11770.begin(),_11770.end()));
  std::vector<int> _11773;
  for (int _6775 = (int)0, _11774 = safe_add( _6769,(int)1 ); _6775 < _11774 ; ++_6775)
  {
    _11773.push_back(_ptr__6758[safe_add( _6761,_6775 )]);
  }
  auto _11775 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11773.size()),_11773.begin(),_11773.end()));
  ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("### "))->__mosek_2fusion_2Debug__p(_pubthis->toString())->__mosek_2fusion_2Debug__p(std::string (" ###"))->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nelem     = "))->__mosek_2fusion_2Debug__p(_6769)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nnz       = "))->__mosek_2fusion_2Debug__p(_6770)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  hassp     = "))->__mosek_2fusion_2Debug__p(_6773)->__mosek_2fusion_2Debug__p(std::string (" / "))->__mosek_2fusion_2Debug__p(_ptr__6758[((mosek::fusion::p_WorkStack::_get_impl(_6757)->pi32 - _6772) - (int)4)])->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  shape     = "))->__mosek_2fusion_2Debug__p(_11772)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  ptr       = "))->__mosek_2fusion_2Debug__p(_11775)->__mosek_2fusion_2Debug__lf();
  if (mosek::fusion::p_WorkStack::_get_impl(_6757)->hassp)
  {
    {
      std::vector<long long> _11776;
      for (int _6776 = (int)0, _11777 = _6769; _6776 < _11777 ; ++_6776)
      {
        _11776.push_back(_ptr__6759[safe_add( _6768,_6776 )]);
      }
      auto _11778 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11776.size()),_11776.begin(),_11776.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  sp       = "))->__mosek_2fusion_2Debug__p(_11778)->__mosek_2fusion_2Debug__lf();
    }
  }
  {}
  int _11779 = (int)0;
  int _11780 = _6769;
  for (int _6777 = _11779; _6777 < _11780; ++_6777)
  {
    {
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  row["))->__mosek_2fusion_2Debug__p(_6777)->__mosek_2fusion_2Debug__p(std::string ("]"))->__mosek_2fusion_2Debug__lf();
      std::vector<long long> _11781;
      for (int _6778 = _ptr__6758[safe_add( _6761,_6777 )], _11782 = _ptr__6758[safe_add( safe_add( _6761,_6777 ),(int)1 )]; _6778 < _11782 ; ++_6778)
      {
        _11781.push_back(_ptr__6759[safe_add( _6762,_6778 )]);
      }
      auto _11783 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11781.size()),_11781.begin(),_11781.end()));
      std::vector<double> _11784;
      for (int _6779 = _ptr__6758[safe_add( _6761,_6777 )], _11785 = _ptr__6758[safe_add( safe_add( _6761,_6777 ),(int)1 )]; _6779 < _11785 ; ++_6779)
      {
        _11784.push_back(_ptr__6760[safe_add( _6763,_6779 )]);
      }
      auto _11786 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11784.size()),_11784.begin(),_11784.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("    nidx : "))->__mosek_2fusion_2Debug__p(_11783)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("    cof  : "))->__mosek_2fusion_2Debug__p(_11786)->__mosek_2fusion_2Debug__lf();
      if ((_6771 > (int)0))
      {
        {
          int _11787 = _ptr__6758[safe_add( _6761,_6777 )];
          int _11788 = _ptr__6758[safe_add( safe_add( _6761,_6777 ),(int)1 )];
          for (int _6780 = _11787; _6780 < _11788; ++_6780)
          {
            {
              std::vector<int> _11789;
              for (int _6781 = _ptr__6758[safe_add( _6765,_6780 )], _11790 = _ptr__6758[safe_add( safe_add( _6765,_6780 ),(int)1 )]; _6781 < _11790 ; ++_6781)
              {
                _11789.push_back(_ptr__6758[safe_add( _6766,_6781 )]);
              }
              auto _11791 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11789.size()),_11789.begin(),_11789.end()));
              std::vector<double> _11792;
              for (int _6782 = _ptr__6758[safe_add( _6765,_6780 )], _11793 = _ptr__6758[safe_add( safe_add( _6765,_6780 ),(int)1 )]; _6782 < _11793 ; ++_6782)
              {
                _11792.push_back(_ptr__6760[safe_add( _6767,_6782 )]);
              }
              auto _11794 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11792.size()),_11792.begin(),_11792.end()));
              ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("      code["))->__mosek_2fusion_2Debug__p(_ptr__6759[safe_add( _6762,_6780 )])->__mosek_2fusion_2Debug__p(std::string ("] "))->__mosek_2fusion_2Debug__p(_11791)->__mosek_2fusion_2Debug__p(_11794)->__mosek_2fusion_2Debug__lf();
            }
          }
        }
      }
      {}
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6786) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_6786); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,2 > > _6786) { return __mosek_2fusion_2BaseExpression__pick(_6786); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6786) { return __mosek_2fusion_2BaseExpression__pick(_6786); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6786){
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6786)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6787) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_6787); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,1 > > _6787) { return __mosek_2fusion_2BaseExpression__pick(_6787); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6787) { return __mosek_2fusion_2BaseExpression__pick(_6787); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6787){
  _checked_ptr_1<int> _ptr__6787(_6787 ? _6787->raw() : nullptr, _6787 ? _6787->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _6788 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_6787)->size(0)),(int)1)));
  int _11795 = (int)0;
  int _11796 = (int)((_6787)->size(0));
  for (int _6789 = _11795; _6789 < _11796; ++_6789)
  {
    {
      ((*_6788)(_6789,(int)0)) = _ptr__6787[_6789];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6788)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _6790) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_6790); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int,1 > > _6790) { return __mosek_2fusion_2BaseExpression__index(_6790); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _6790) { return __mosek_2fusion_2BaseExpression__index(_6790); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _6790){
  _checked_ptr_1<int> _ptr__6790(_6790 ? _6790->raw() : nullptr, _6790 ? _6790->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _6791 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_6790)->size(0)))));
  int _11797 = (int)0;
  int _11798 = (int)((_6790)->size(0));
  for (int _6792 = _11797; _6792 < _11798; ++_6792)
  {
    {
      ((*_6791)((int)0,_6792)) = _ptr__6790[_6792];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6791)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int _6793) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_6793); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int _6793) { return __mosek_2fusion_2BaseExpression__index(_6793); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int _6793) { return __mosek_2fusion_2BaseExpression__index(_6793); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int _6793){
  std::shared_ptr< monty::ndarray< int,2 > > _6794 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)1)));
  ((*_6794)((int)0,(int)0)) = _6793;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6794)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6795,std::shared_ptr< monty::ndarray< int,1 > > _6796) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_6795,_6796); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int,1 > > _6795,std::shared_ptr< monty::ndarray< int,1 > > _6796) { return __mosek_2fusion_2BaseExpression__slice(_6795,_6796); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6795,std::shared_ptr< monty::ndarray< int,1 > > _6796) { return __mosek_2fusion_2BaseExpression__slice(_6795,_6796); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6795,std::shared_ptr< monty::ndarray< int,1 > > _6796){
  _checked_ptr_1<int> _ptr__6795(_6795 ? _6795->raw() : nullptr, _6795 ? _6795->size(0) : 0);
  _checked_ptr_1<int> _ptr__6796(_6796 ? _6796->raw() : nullptr, _6796 ? _6796->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6795,_6796)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int _6797,int _6798) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_6797,_6798); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int _6797,int _6798) { return __mosek_2fusion_2BaseExpression__slice(_6797,_6798); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int _6797,int _6798) { return __mosek_2fusion_2BaseExpression__slice(_6797,_6798); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int _6797,int _6798){
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6797)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6798)}))).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseExpression::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }int mosek::fusion::p_BaseExpression::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseExpression :: getDim(int _6799) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_6799); }int mosek::fusion::p_BaseExpression::getDim(int _6799){
  return ((*shape)(_6799));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseExpression::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::p_BaseExpression::destroy(){shape.reset();}void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }mosek::fusion::p_WorkStack::p_WorkStack  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis){}int mosek::fusion::WorkStack::get_code_base() { return _impl->code_base; }
void mosek::fusion::WorkStack::set_code_base(int _val) { _impl->code_base = _val; }
int mosek::fusion::WorkStack::get_cconst_base() { return _impl->cconst_base; }
void mosek::fusion::WorkStack::set_cconst_base(int _val) { _impl->cconst_base = _val; }
int mosek::fusion::WorkStack::get_codeptr_base() { return _impl->codeptr_base; }
void mosek::fusion::WorkStack::set_codeptr_base(int _val) { _impl->codeptr_base = _val; }
int mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int _val) { _impl->cof_base = _val; }
int mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int _val) { _impl->nidxs_base = _val; }
int mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int _val) { _impl->sp_base = _val; }
int mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int _val) { _impl->shape_base = _val; }
int mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int mosek::fusion::WorkStack::get_ncodeatom() { return _impl->ncodeatom; }
void mosek::fusion::WorkStack::set_ncodeatom(int _val) { _impl->ncodeatom = _val; }
int mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int _val) { _impl->nelem = _val; }
int mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int _val) { _impl->nnz = _val; }
int mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int _val) { _impl->nd = _val; }
int mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int _val) { _impl->pf64 = _val; }
int mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int _val) { _impl->pi64 = _val; }
int mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->i32 = _val; }
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack  (){ return new mosek::fusion::WorkStack(); }mosek::fusion::WorkStack::WorkStack  () :    WorkStack(new mosek::fusion::p_WorkStack(this)){ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }void mosek::fusion::p_WorkStack::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    i32 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ncodeatom = (int)0;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    cof_base = (int)0;
    cconst_base = (int)0;
    code_base = (int)0;
    codeptr_base = (int)0;
  }
}std::string mosek::fusion::WorkStack :: formatCurrent() { return mosek::fusion::p_WorkStack::_get_impl(this)->formatCurrent(); }std::string mosek::fusion::p_WorkStack::formatCurrent(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6800 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  std::vector<int> _11799;
  for (int _6801 = (int)0, _11800 = nd; _6801 < _11800 ; ++_6801)
  {
    _11799.push_back(((*i32)(safe_add( shape_base,_6801 ))));
  }
  auto _11801 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11799.size()),_11799.begin(),_11799.end()));
  std::vector<int> _11802;
  for (int _6802 = (int)0, _11803 = safe_add( nelem,(int)1 ); _6802 < _11803 ; ++_6802)
  {
    _11802.push_back(((*i32)(safe_add( ptr_base,_6802 ))));
  }
  auto _11804 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11802.size()),_11802.begin(),_11802.end()));
  _6800->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nelem     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nelem)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nnz       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nnz)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  hassp     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" / "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  shape     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11801)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  ptr       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11804)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
  if ((ncodeatom > (int)0))
  {
    {
      std::vector<int> _11805;
      for (int _6803 = (int)0, _11806 = safe_add( nnz,(int)1 ); _6803 < _11806 ; ++_6803)
      {
        _11805.push_back(((*i32)(safe_add( codeptr_base,_6803 ))));
      }
      auto _11807 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11805.size()),_11805.begin(),_11805.end()));
      _6800->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  codeptr   = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11807)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  if (hassp)
  {
    {
      std::vector<long long> _11808;
      for (int _6804 = (int)0, _11809 = nelem; _6804 < _11809 ; ++_6804)
      {
        _11808.push_back(((*i64)(safe_add( sp_base,_6804 ))));
      }
      auto _11810 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11808.size()),_11808.begin(),_11808.end()));
      _6800->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  sp        = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11810)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  int _11811 = (int)0;
  int _11812 = nelem;
  for (int _6805 = _11811; _6805 < _11812; ++_6805)
  {
    {
      std::vector<long long> _11813;
      for (int _6806 = ((*i32)(safe_add( ptr_base,_6805 ))), _11814 = ((*i32)(safe_add( safe_add( ptr_base,_6805 ),(int)1 ))); _6806 < _11814 ; ++_6806)
      {
        _11813.push_back(((*i64)(safe_add( nidxs_base,_6806 ))));
      }
      auto _11815 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11813.size()),_11813.begin(),_11813.end()));
      std::vector<double> _11816;
      for (int _6807 = ((*i32)(safe_add( ptr_base,_6805 ))), _11817 = ((*i32)(safe_add( safe_add( ptr_base,_6805 ),(int)1 ))); _6807 < _11817 ; ++_6807)
      {
        _11816.push_back(((*f64)(safe_add( cof_base,_6807 ))));
      }
      auto _11818 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11816.size()),_11816.begin(),_11816.end()));
      _6800->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  row["))->__mosek_2fusion_2Utils_2StringBuffer__a(_6805)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    nidx : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11815)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    cof  : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11818)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
      if ((ncodeatom > (int)0))
      {
        {
          int _11819 = ((*i32)(safe_add( ptr_base,_6805 )));
          int _11820 = ((*i32)(safe_add( safe_add( ptr_base,_6805 ),(int)1 )));
          for (int _6808 = _11819; _6808 < _11820; ++_6808)
          {
            {
              std::vector<int> _11821;
              for (int _6809 = ((*i32)(safe_add( codeptr_base,_6808 ))), _11822 = ((*i32)(safe_add( safe_add( codeptr_base,_6808 ),(int)1 ))); _6809 < _11822 ; ++_6809)
              {
                _11821.push_back(((*i32)(safe_add( code_base,_6809 ))));
              }
              auto _11823 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11821.size()),_11821.begin(),_11821.end()));
              std::vector<double> _11824;
              for (int _6810 = ((*i32)(safe_add( codeptr_base,_6808 ))), _11825 = ((*i32)(safe_add( safe_add( codeptr_base,_6808 ),(int)1 ))); _6810 < _11825 ; ++_6810)
              {
                _11824.push_back(((*f64)(safe_add( cconst_base,_6810 ))));
              }
              auto _11826 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11824.size()),_11824.begin(),_11824.end()));
              _6800->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("      code["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*i64)(safe_add( nidxs_base,_6808 ))))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11823)->__mosek_2fusion_2Utils_2StringBuffer__a(_11826)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
            }
          }
        }
      }
      {}
    }
  }
  return _6800->toString();
}
bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }bool mosek::fusion::p_WorkStack::peek_hassp(){
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
int mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }int mosek::fusion::p_WorkStack::peek_nnz(){
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }int mosek::fusion::p_WorkStack::peek_nelem(){
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_dim(int _6811) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_6811); }int mosek::fusion::p_WorkStack::peek_dim(int _6811){
  return _pubthis->peeki32(safe_add( _6811,(int)1 ));
}
int mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }int mosek::fusion::p_WorkStack::peek_nd(){
  return _pubthis->peeki32();
}
void mosek::fusion::WorkStack :: alloc_expr(int _6812,int _6813,int _6814,bool _6815) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_6812,_6813,_6814,_6815); }void mosek::fusion::p_WorkStack::alloc_expr(int _6812,int _6813,int _6814,bool _6815){
  _pubthis->alloc_expr(_6812,_6813,_6814,_6815,(int)0);
}
void mosek::fusion::WorkStack :: alloc_expr(int _6816,int _6817,int _6818,bool _6819,int _6820) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_6816,_6817,_6818,_6819,_6820); }void mosek::fusion::p_WorkStack::alloc_expr(int _6816,int _6817,int _6818,bool _6819,int _6820){
  cof_base = _pubthis->allocf64(_6818);
  cconst_base = _pubthis->allocf64(_6820);
  nidxs_base = _pubthis->alloci64(_6818);
  int _11827;
  bool _11828 = _6819;
  if (_11828)
  {
    _11827 = _pubthis->alloci64(_6817);
  }
  else
  {
    _11827 = (-(int)9999);
  }
  sp_base = _11827;
  code_base = _pubthis->alloci32(_6820);
  int _11829;
  bool _11830 = (_6820 > (int)0);
  if (_11830)
  {
    _11829 = _pubthis->alloci32(safe_add( _6818,(int)1 ));
  }
  else
  {
    _11829 = (-(int)9999);
  }
  codeptr_base = _11829;
  ptr_base = _pubthis->alloci32(safe_add( _6817,(int)1 ));
  _pubthis->pushi32(_6820);
  int _11831;
  bool _11832 = _6819;
  if (_11832)
  {
    _11831 = (int)1;
  }
  else
  {
    _11831 = (int)0;
  }
  _pubthis->pushi32(_11831);
  _pubthis->pushi32(_6818);
  _pubthis->pushi32(_6817);
  shape_base = _pubthis->alloci32(_6816);
  _pubthis->pushi32(_6816);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->ncodeatom = _6820;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _6816;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _6817;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _6818;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _6819;
}
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }void mosek::fusion::p_WorkStack::pop_expr(){
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ncodeatom = _pubthis->popi32();
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int _11833;
  bool _11834 = (ncodeatom > (int)0);
  if (_11834)
  {
    _11833 = _pubthis->popi32(safe_add( nnz,(int)1 ));
  }
  else
  {
    _11833 = (-(int)9999);
  }
  codeptr_base = _11833;
  code_base = _pubthis->popi32(ncodeatom);
  int _11835;
  bool _11836 = hassp;
  if (_11836)
  {
    _11835 = _pubthis->popi64(nelem);
  }
  else
  {
    _11835 = (-(int)9999);
  }
  sp_base = _11835;
  nidxs_base = _pubthis->popi64(nnz);
  cconst_base = _pubthis->popf64(ncodeatom);
  cof_base = _pubthis->popf64(nnz);
}
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _6821) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_6821); }void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _6821){
  int _6822 = pi32;
  int _6823 = pi64;
  int _6824 = pf64;
  _pubthis->pop_expr();
  int _6825 = _6821->alloci32((_6822 - pi32));
  int _6826 = _6821->alloci64((_6823 - pi64));
  int _6827 = _6821->allocf64((_6824 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_6821)->i32,_6825,(_6822 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_6821)->i64,_6826,(_6823 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_6821)->f64,_6827,(_6824 - pf64));
}
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }void mosek::fusion::p_WorkStack::peek_expr(){
  int _6828 = pi32;
  int _6829 = pi64;
  int _6830 = pf64;
  _pubthis->pop_expr();
  pi32 = _6828;
  pi64 = _6829;
  pf64 = _6830;
}
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }void mosek::fusion::p_WorkStack::ensure_sparsity(){
  int _6831 = ((*i32)((pi32 - (int)1)));
  bool _6832 = (((*i32)(((pi32 - _6831) - (int)3))) != (int)0);
  int _6833 = ((*i32)(((pi32 - _6831) - (int)1)));
  if ((!_6832))
  {
    {
      ((*i32)(((pi32 - _6831) - (int)3))) = (int)1;
      int _6834 = _pubthis->alloci64(_6833);
      int _11837 = (int)0;
      int _11838 = _6833;
      for (int _6835 = _11837; _6835 < _11838; ++_6835)
      {
        {
          ((*i64)(_6834)) = _6835;
        }
      }
    }
  }
  {}
}
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }void mosek::fusion::p_WorkStack::clear(){
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
int mosek::fusion::WorkStack :: allocf64(int _6836) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_6836); }int mosek::fusion::p_WorkStack::allocf64(int _6836){
  _pubthis->ensuref64(_6836);
  int _6837 = pf64;
  pf64 += _6836;
  return _6837;
}
int mosek::fusion::WorkStack :: alloci64(int _6838) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_6838); }int mosek::fusion::p_WorkStack::alloci64(int _6838){
  _pubthis->ensurei64(_6838);
  int _6839 = pi64;
  pi64 += _6838;
  return _6839;
}
int mosek::fusion::WorkStack :: alloci32(int _6840) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_6840); }int mosek::fusion::p_WorkStack::alloci32(int _6840){
  if ((_6840 > (int)0))
  {
    {
      _pubthis->ensurei32(_6840);
      int _6841 = pi32;
      pi32 += _6840;
      return _6841;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
void mosek::fusion::WorkStack :: pushf64(double _6842) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_6842); }void mosek::fusion::p_WorkStack::pushf64(double _6842){
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _6842;
  ++ pf64;
}
void mosek::fusion::WorkStack :: pushi64(long long _6843) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_6843); }void mosek::fusion::p_WorkStack::pushi64(long long _6843){
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _6843;
  ++ pi64;
}
void mosek::fusion::WorkStack :: pushi32(int _6844) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_6844); }void mosek::fusion::p_WorkStack::pushi32(int _6844){
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _6844;
  ++ pi32;
}
void mosek::fusion::WorkStack :: ensuref64(int _6845) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_6845); }void mosek::fusion::p_WorkStack::ensuref64(int _6845){
  if ((safe_add( pf64,_6845 ) > (int)((f64)->size(0))))
  {
    {
      int _11839;
      bool _11840 = (_6845 < (int)((f64)->size(0)));
      if (_11840)
      {
        _11839 = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _11839 = safe_add( (int)((f64)->size(0)),_6845 );
      }
      int _6846 = _11839;
      std::shared_ptr< monty::ndarray< double,1 > > _6847 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6846)));
      _checked_ptr_1<double> _ptr__6847(_6847 ? _6847->raw() : nullptr,_6847 ? _6847->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_6847,(int)0,pf64);
      f64 = _6847;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei64(int _6848) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_6848); }void mosek::fusion::p_WorkStack::ensurei64(int _6848){
  if ((safe_add( pi64,_6848 ) > (int)((i64)->size(0))))
  {
    {
      int _11841;
      bool _11842 = (_6848 < (int)((i64)->size(0)));
      if (_11842)
      {
        _11841 = (int)((i64)->size(0));
      }
      else
      {
        _11841 = _6848;
      }
      int _6849 = safe_add( (int)((i64)->size(0)),_11841 );
      std::shared_ptr< monty::ndarray< long long,1 > > _6850 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6849)));
      _checked_ptr_1<long long> _ptr__6850(_6850 ? _6850->raw() : nullptr,_6850 ? _6850->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_6850,(int)0,pi64);
      i64 = _6850;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei32(int _6851) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_6851); }void mosek::fusion::p_WorkStack::ensurei32(int _6851){
  if ((safe_add( pi32,_6851 ) > (int)((i32)->size(0))))
  {
    {
      int _11843;
      bool _11844 = (_6851 < (int)((i32)->size(0)));
      if (_11844)
      {
        _11843 = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _11843 = safe_add( (int)((i32)->size(0)),_6851 );
      }
      int _6852 = _11843;
      std::shared_ptr< monty::ndarray< int,1 > > _6853 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6852)));
      _checked_ptr_1<int> _ptr__6853(_6853 ? _6853->raw() : nullptr,_6853 ? _6853->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_6853,(int)0,pi32);
      i32 = _6853;
    }
  }
  {}
}
int mosek::fusion::WorkStack :: popf64(int _6854) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_6854); }int mosek::fusion::p_WorkStack::popf64(int _6854){
  pf64 -= _6854;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pf64;
}
int mosek::fusion::WorkStack :: popi64(int _6855) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_6855); }int mosek::fusion::p_WorkStack::popi64(int _6855){
  pi64 -= _6855;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi64;
}
int mosek::fusion::WorkStack :: popi32(int _6856) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_6856); }int mosek::fusion::p_WorkStack::popi32(int _6856){
  pi32 -= _6856;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi32;
}
void mosek::fusion::WorkStack :: popf64(int _6857,std::shared_ptr< monty::ndarray< double,1 > > _6858,int _6859) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_6857,_6858,_6859); }void mosek::fusion::p_WorkStack::popf64(int _6857,std::shared_ptr< monty::ndarray< double,1 > > _6858,int _6859){
  _checked_ptr_1<double> _ptr__6858(_6858 ? _6858->raw() : nullptr, _6858 ? _6858->size(0) : 0);
  pf64 -= _6857;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_6858,_6859,_6857);
}
void mosek::fusion::WorkStack :: popi64(int _6860,std::shared_ptr< monty::ndarray< long long,1 > > _6861,int _6862) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_6860,_6861,_6862); }void mosek::fusion::p_WorkStack::popi64(int _6860,std::shared_ptr< monty::ndarray< long long,1 > > _6861,int _6862){
  _checked_ptr_1<long long> _ptr__6861(_6861 ? _6861->raw() : nullptr, _6861 ? _6861->size(0) : 0);
  pi64 -= _6860;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_6861,_6862,_6860);
}
void mosek::fusion::WorkStack :: popi32(int _6863,std::shared_ptr< monty::ndarray< int,1 > > _6864,int _6865) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_6863,_6864,_6865); }void mosek::fusion::p_WorkStack::popi32(int _6863,std::shared_ptr< monty::ndarray< int,1 > > _6864,int _6865){
  _checked_ptr_1<int> _ptr__6864(_6864 ? _6864->raw() : nullptr, _6864 ? _6864->size(0) : 0);
  pi32 -= _6863;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_6864,_6865,_6863);
}
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }double mosek::fusion::p_WorkStack::popf64(){
  -- pf64;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*f64)(pf64));
}
long long mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }long long mosek::fusion::p_WorkStack::popi64(){
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  -- pi64;
  return ((*i64)(pi64));
}
int mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }int mosek::fusion::p_WorkStack::popi32(){
  -- pi32;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*i32)(pi32));
}
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }double mosek::fusion::p_WorkStack::peekf64(){
  return ((*f64)((pf64 - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }long long mosek::fusion::p_WorkStack::peeki64(){
  return ((*i64)((pi64 - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }int mosek::fusion::p_WorkStack::peeki32(){
  return ((*i32)((pi32 - (int)1)));
}
double mosek::fusion::WorkStack :: peekf64(int _6866) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_6866); }double mosek::fusion::p_WorkStack::peekf64(int _6866){
  return ((*f64)(((pf64 - _6866) - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64(int _6867) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_6867); }long long mosek::fusion::p_WorkStack::peeki64(int _6867){
  return ((*i64)(((pi64 - _6867) - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32(int _6868) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_6868); }int mosek::fusion::p_WorkStack::peeki32(int _6868){
  return ((*i32)(((pi32 - _6868) - (int)1)));
}
void mosek::fusion::p_WorkStack::destroy(){f64.reset();i64.reset();i32.reset();}void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _6869,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6870,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6871,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6872){ return new mosek::fusion::SymmetricExpr(_6869,_6870,_6871,_6872); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _6869,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6870,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6871,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6872) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_6869,_6870,_6871,_6872); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _6869,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6870,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6871,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6872){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->n = _6869;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->Ms = _6870;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->xs = _6871;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->b = _6872;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6873,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6874){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_6873)->n != _6874->getdim()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11845;
  bool _11846 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6873)->b.get());
  if (_11846)
  {
    _11845 = mosek::fusion::p_SymmetricExpr::_get_impl(_6873)->b->__mosek_2fusion_2SymmetricMatrix__add(_6874);
  }
  else
  {
    _11845 = _6874;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6873)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_6873)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_6873)->xs,_11845);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6875,double _6876){
  std::vector<monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >> _11847;
  for (int _6877 = (int)0, _11848 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6875)->Ms)->size(0)); _6877 < _11848 ; ++_6877)
  {
    _11847.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_6875)->Ms)(_6877))->__mosek_2fusion_2SymmetricMatrix__mul(_6876));
  }
  auto _11849 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_11847.size()),_11847.begin(),_11847.end()));
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11850;
  bool _11851 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6875)->b.get());
  if (_11851)
  {
    _11850 = mosek::fusion::p_SymmetricExpr::_get_impl(_6875)->b->__mosek_2fusion_2SymmetricMatrix__mul(_6876);
  }
  else
  {
    _11850 = nullptr;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6875)->n,_11849,mosek::fusion::p_SymmetricExpr::_get_impl(_6875)->xs,_11850);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6878,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6879){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6880 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->Ms)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->Ms)->size(0)) ))));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6881 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->xs)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->xs)->size(0)) ))));
  int _6882 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->Ms)->size(0));
  int _11852 = (int)0;
  int _11853 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->Ms)->size(0));
  for (int _6883 = _11852; _6883 < _11853; ++_6883)
  {
    {
      ((*_6880)(_6883)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->Ms)(_6883));
    }
  }
  int _11854 = (int)0;
  int _11855 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->Ms)->size(0));
  for (int _6884 = _11854; _6884 < _11855; ++_6884)
  {
    {
      ((*_6880)(safe_add( _6884,_6882 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->Ms)(_6884));
    }
  }
  int _6885 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->xs)->size(0));
  int _11856 = (int)0;
  int _11857 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->xs)->size(0));
  for (int _6886 = _11856; _6886 < _11857; ++_6886)
  {
    {
      ((*_6881)(_6886)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->xs)(_6886));
    }
  }
  int _11858 = (int)0;
  int _11859 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->xs)->size(0));
  for (int _6887 = _11858; _6887 < _11859; ++_6887)
  {
    {
      ((*_6881)(safe_add( _6887,_6885 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->xs)(_6887));
    }
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11860;
  bool _11861 = ((NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->b.get()) && (NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->b.get()));
  if (_11861)
  {
    _11860 = nullptr;
  }
  else
  {
    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11862;
    bool _11863 = ((NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->b.get()) && (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->b.get()));
    if (_11863)
    {
      _11862 = mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->b->__mosek_2fusion_2SymmetricMatrix__add(mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->b);
    }
    else
    {
      monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11864;
      bool _11865 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->b.get());
      if (_11865)
      {
        _11864 = mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->b;
      }
      else
      {
        _11864 = mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->b;
      }
      _11862 = _11864;
    }
    _11860 = _11862;
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6888 = _11860;
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6878)->n,_6880,_6881,_6888);
}
std::string mosek::fusion::SymmetricExpr :: toString() { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6889 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _6889->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SymmetricExpr( ("))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _6889->toString();
}
void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6890,    std::shared_ptr< monty::ndarray< long long,1 > > _6891,    std::shared_ptr< monty::ndarray< double,1 > > _6892,    std::shared_ptr< monty::ndarray< double,1 > > _6893,    std::shared_ptr< monty::ndarray< int,1 > > _6894,    std::shared_ptr< monty::ndarray< long long,1 > > _6895){ return new mosek::fusion::Expr(_6890,_6891,_6892,_6893,_6894,_6895); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6890,    std::shared_ptr< monty::ndarray< long long,1 > > _6891,    std::shared_ptr< monty::ndarray< double,1 > > _6892,    std::shared_ptr< monty::ndarray< double,1 > > _6893,    std::shared_ptr< monty::ndarray< int,1 > > _6894,    std::shared_ptr< monty::ndarray< long long,1 > > _6895) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6890,_6891,_6892,_6893,_6894,_6895); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _6890,    std::shared_ptr< monty::ndarray< long long,1 > > _6891,    std::shared_ptr< monty::ndarray< double,1 > > _6892,    std::shared_ptr< monty::ndarray< double,1 > > _6893,    std::shared_ptr< monty::ndarray< int,1 > > _6894,    std::shared_ptr< monty::ndarray< long long,1 > > _6895){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__6890(_6890 ? _6890->raw() : nullptr, _6890 ? _6890->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6891(_6891 ? _6891->raw() : nullptr, _6891 ? _6891->size(0) : 0);
    _checked_ptr_1<double> _ptr__6892(_6892 ? _6892->raw() : nullptr, _6892 ? _6892->size(0) : 0);
    _checked_ptr_1<double> _ptr__6893(_6893 ? _6893->raw() : nullptr, _6893 ? _6893->size(0) : 0);
    _checked_ptr_1<int> _ptr__6894(_6894 ? _6894->raw() : nullptr, _6894 ? _6894->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6895(_6895 ? _6895->raw() : nullptr, _6895 ? _6895->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _11866;
    bool _11867 = (NULL != _6894.get());
    if (_11867)
    {
      _11866 = ::mosek::fusion::Utils::Tools::arraycopy(_6894);
    }
    else
    {
      _11866 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((int)((_6890)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< long long,1 > > _11868;
    bool _11869 = (NULL != _6895.get());
    if (_11869)
    {
      _11868 = ::mosek::fusion::Utils::Tools::arraycopy(_6895);
    }
    else
    {
      _11868 = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_6890),::mosek::fusion::Utils::Tools::arraycopy(_6891),::mosek::fusion::Utils::Tools::arraycopy(_6892),::mosek::fusion::Utils::Tools::arraycopy(_6893),_11866,_11868,(int)1);
    int _6896 = ((int)((_6890)->size(0)) - (int)1);
    if ((_6896 < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    long long _6897 = _ptr__6890[_6896];
    if (((_6897 < (int)0) || ((_6897 != (int)((_6892)->size(0))) || (_6897 != (int)((_6891)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _6898 = true;
    bool _6899 = true;
    bool _6900 = true;
    std::shared_ptr< monty::ndarray< int,1 > > _6901 = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int> _ptr__6901(_6901 ? _6901->raw() : nullptr,_6901 ? _6901->size(0) : 0);
    long long _6902 = ::mosek::fusion::p_Set::size(_6901);
    {
      int _11870 = (int)0;
      int _11871 = (int)((_6901)->size(0));
      for (int _6903 = _11870; _6903 < _11871; ++_6903)
      {
        {
          _6899 = (_6899 && (_ptr__6901[_6903] >= (int)0));
        }
      }
      int _11872 = (int)0;
      int _11873 = _6896;
      for (int _6904 = _11872; _6904 < _11873; ++_6904)
      {
        {
          _6898 = (_6898 && (_ptr__6890[_6904] <= _ptr__6890[safe_add( _6904,(int)1 )]));
        }
      }
      if (((NULL != _6895.get()) && ((int)((_6895)->size(0)) > (int)0)))
      {
        {
          _6900 = ((_ptr__6895[(int)0] >= (int)0) && (_ptr__6895[(_6896 - (int)1)] < _6902));
          int _11874 = (int)0;
          int _11875 = (_6896 - (int)1);
          for (int _6905 = _11874; _6905 < _11875; ++_6905)
          {
            {
              _6900 = (_6900 && (_ptr__6895[_6905] < _ptr__6895[safe_add( _6905,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_6899))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_6898))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_6900))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6906,    std::shared_ptr< monty::ndarray< long long,1 > > _6907,    std::shared_ptr< monty::ndarray< double,1 > > _6908,    std::shared_ptr< monty::ndarray< double,1 > > _6909,    std::shared_ptr< monty::ndarray< int,1 > > _6910,    std::shared_ptr< monty::ndarray< long long,1 > > _6911,    int _6912){ return new mosek::fusion::Expr(_6906,_6907,_6908,_6909,_6910,_6911,_6912); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6906,    std::shared_ptr< monty::ndarray< long long,1 > > _6907,    std::shared_ptr< monty::ndarray< double,1 > > _6908,    std::shared_ptr< monty::ndarray< double,1 > > _6909,    std::shared_ptr< monty::ndarray< int,1 > > _6910,    std::shared_ptr< monty::ndarray< long long,1 > > _6911,    int _6912) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6906,_6907,_6908,_6909,_6910,_6911,_6912); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _6906,    std::shared_ptr< monty::ndarray< long long,1 > > _6907,    std::shared_ptr< monty::ndarray< double,1 > > _6908,    std::shared_ptr< monty::ndarray< double,1 > > _6909,    std::shared_ptr< monty::ndarray< int,1 > > _6910,    std::shared_ptr< monty::ndarray< long long,1 > > _6911,    int _6912){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__6906(_6906 ? _6906->raw() : nullptr, _6906 ? _6906->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6907(_6907 ? _6907->raw() : nullptr, _6907 ? _6907->size(0) : 0);
    _checked_ptr_1<double> _ptr__6908(_6908 ? _6908->raw() : nullptr, _6908 ? _6908->size(0) : 0);
    _checked_ptr_1<double> _ptr__6909(_6909 ? _6909->raw() : nullptr, _6909 ? _6909->size(0) : 0);
    _checked_ptr_1<int> _ptr__6910(_6910 ? _6910->raw() : nullptr, _6910 ? _6910->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6911(_6911 ? _6911->raw() : nullptr, _6911 ? _6911->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_6910);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _6910;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _6906;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _6907;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _6908;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _6909;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _6911;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _6913){ return new mosek::fusion::Expr(_6913); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _6913) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6913); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6913){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6913->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _11876 = _6913;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_11876.get()))
    {
      ::mosek::fusion::Expr::t _6914 (dynamic_cast<::mosek::fusion::Expr*>(_11876.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_6914)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_6914)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_6914)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_6914)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_6914)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_6914)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _6915 = _11876;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6916 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6917 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6918 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _6915->eval(_6918,_6917,_6916);
        int _6919 = _6918->popi32();
        int _6920 = _6918->popi32(_6919);
        int _6921 = _6918->popi32();
        int _6922 = _6918->popi32();
        bool _6923 = (_6918->popi32() != (int)0);
        int _6924 = _6918->popi32(safe_add( _6921,(int)1 ));
        int _11877;
        bool _11878 = _6923;
        if (_11878)
        {
          _11877 = _6918->popi64(_6921);
        }
        else
        {
          _11877 = (int)0;
        }
        int _6925 = _11877;
        int _6926 = _6918->popi64(_6922);
        int _6927 = _6918->popf64(_6921);
        int _6928 = _6918->popf64(_6922);
        std::shared_ptr< monty::ndarray< int,1 > > _6929 = mosek::fusion::p_WorkStack::_get_impl(_6918)->i32;
        _checked_ptr_1<int> _ptr__6929(_6929 ? _6929->raw() : nullptr,_6929 ? _6929->size(0) : 0);
        std::shared_ptr< monty::ndarray< long long,1 > > _6930 = mosek::fusion::p_WorkStack::_get_impl(_6918)->i64;
        _checked_ptr_1<long long> _ptr__6930(_6930 ? _6930->raw() : nullptr,_6930 ? _6930->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _6931 = mosek::fusion::p_WorkStack::_get_impl(_6918)->f64;
        _checked_ptr_1<double> _ptr__6931(_6931 ? _6931->raw() : nullptr,_6931 ? _6931->size(0) : 0);
        std::vector<int> _11879;
        for (int _6932 = (int)0, _11880 = _6919; _6932 < _11880 ; ++_6932)
        {
          _11879.push_back(_ptr__6929[safe_add( _6920,_6932 )]);
        }
        auto _11881 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11879.size()),_11879.begin(),_11879.end()));
        shape = _11881;
        std::vector<long long> _11882;
        for (int _6933 = (int)0, _11883 = safe_add( _6921,(int)1 ); _6933 < _11883 ; ++_6933)
        {
          _11882.push_back(_ptr__6929[safe_add( _6924,_6933 )]);
        }
        auto _11884 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11882.size()),_11882.begin(),_11882.end()));
        ptrb = _11884;
        std::vector<long long> _11885;
        for (int _6934 = (int)0, _11886 = _6922; _6934 < _11886 ; ++_6934)
        {
          _11885.push_back(_ptr__6930[safe_add( _6926,_6934 )]);
        }
        auto _11887 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11885.size()),_11885.begin(),_11885.end()));
        subj = _11887;
        std::vector<double> _11888;
        for (int _6935 = (int)0, _11889 = _6922; _6935 < _11889 ; ++_6935)
        {
          _11888.push_back(_ptr__6931[safe_add( _6928,_6935 )]);
        }
        auto _11890 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11888.size()),_11888.begin(),_11888.end()));
        cof_v = _11890;
        std::vector<double> _11891;
        for (int _6936 = (int)0, _11892 = _6922; _6936 < _11892 ; ++_6936)
        {
          _11891.push_back(_ptr__6931[safe_add( _6927,_6936 )]);
        }
        auto _11893 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11891.size()),_11891.begin(),_11891.end()));
        bfix = _11893;
        std::shared_ptr< monty::ndarray< long long,1 > > _11894;
        bool _11895 = _6923;
        if (_11895)
        {
          std::vector<long long> _11896;
          for (int _6937 = (int)0, _11897 = _6922; _6937 < _11897 ; ++_6937)
          {
            _11896.push_back(_ptr__6930[safe_add( _6925,_6937 )]);
          }
          auto _11898 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11896.size()),_11896.begin(),_11896.end()));
          _11894 = _11898;
        }
        else
        {
          _11894 = nullptr;
        }
        inst = _11894;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}long long mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int,1 > > _6938){
  _checked_ptr_1<int> _ptr__6938(_6938 ? _6938->raw() : nullptr, _6938 ? _6938->size(0) : 0);
  int _6939 = (int)1;
  int _11899 = (int)0;
  int _11900 = (int)((_6938)->size(0));
  for (int _6940 = _11899; _6940 < _11900; ++_6940)
  {
    {
      _6939 *= _ptr__6938[_6940];
    }
  }
  return _6939;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _6941){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _11901;
  for (int _6942 = (int)0, _11902 = (int)((_6941)->size(0)); _6942 < _11902 ; ++_6942)
  {
    for (int _6943 = (int)0, _11903 = (int)((((*_6941)(_6942)))->size(0)); _6943 < _11903 ; ++_6943)
    {
      _11901.push_back(((*((*_6941)(_6942)))(_6943)));
    }
  }
  auto _11904 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_11901.size()),_11901.begin(),_11901.end()));
  return _11904;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6944,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6945){
  if ((NULL == _6944.get()))
  {
    {
      return _6945;
    }
  }
  else if((NULL == _6945.get()))
  {
    {
      return _6944;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6946 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_6944)->size(0)),(int)((_6945)->size(0)) ))));
      int _11905 = (int)0;
      int _11906 = (int)((_6944)->size(0));
      for (int _6947 = _11905; _6947 < _11906; ++_6947)
      {
        {
          ((*_6946)(_6947)) = ((*_6944)(_6947));
        }
      }
      int _11907 = (int)0;
      int _11908 = (int)((_6945)->size(0));
      for (int _6948 = _11907; _6948 < _11908; ++_6948)
      {
        {
          ((*_6946)(safe_add( _6948,(int)((_6944)->size(0)) ))) = ((*_6945)(_6948));
        }
      }
      return _6946;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense  ( monty::rc_ptr< ::mosek::fusion::Expression > _6949) { return mosek::fusion::p_Expr::condense(_6949); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _6949){
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_6949)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _6950) { return mosek::fusion::p_Expr::flatten(_6950); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _6950){
  if ((NULL == _6950.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  long long _6951 = _6950->getSize();
  if ((!(_6951 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum dimension size exceeded"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6950,(int)_6951);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6952,    int _6953,    int _6954) { return mosek::fusion::p_Expr::reshape(_6952,_6953,_6954); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6952,int _6953,int _6954){
  if ((NULL == _6952.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6952,::mosek::fusion::p_Set::make(_6953,_6954));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6955,    int _6956) { return mosek::fusion::p_Expr::reshape(_6955,_6956); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6955,int _6956){
  if ((NULL == _6955.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6955,::mosek::fusion::p_Set::make(_6956));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6957,    std::shared_ptr< monty::ndarray< int,1 > > _6958) { return mosek::fusion::p_Expr::reshape(_6957,_6958); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6957,std::shared_ptr< monty::ndarray< int,1 > > _6958){
  _checked_ptr_1<int> _ptr__6958(_6958 ? _6958->raw() : nullptr, _6958 ? _6958->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_6958,_6957)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: size() { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size(){
  return ((long long)((ptrb)->size(0)) - (int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( std::shared_ptr< monty::ndarray< int,1 > > _6959) { return mosek::fusion::p_Expr::zeros(_6959); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int,1 > > _6959){
  _checked_ptr_1<int> _ptr__6959(_6959 ? _6959->raw() : nullptr, _6959 ? _6959->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6959,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _6960) { return mosek::fusion::p_Expr::zeros(_6960); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int _6960){
  return ::mosek::fusion::p_Expr::constTerm(_6960,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( ) { return mosek::fusion::p_Expr::ones(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(){
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _6961,    std::shared_ptr< monty::ndarray< int,2 > > _6962) { return mosek::fusion::p_Expr::ones(_6961,_6962); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _6961,std::shared_ptr< monty::ndarray< int,2 > > _6962){
  _checked_ptr_1<int> _ptr__6961(_6961 ? _6961->raw() : nullptr, _6961 ? _6961->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6961,_6962,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _6963) { return mosek::fusion::p_Expr::ones(_6963); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _6963){
  _checked_ptr_1<int> _ptr__6963(_6963 ? _6963->raw() : nullptr, _6963 ? _6963->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6963,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _6964) { return mosek::fusion::p_Expr::ones(_6964); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int _6964){
  return ::mosek::fusion::p_Expr::constTerm(_6964,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6965) { return mosek::fusion::p_Expr::constTerm(_6965); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6965){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_6965)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_6965)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_6965)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6966) { return mosek::fusion::p_Expr::constTerm(_6966); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _6966){
  int _6967 = _6966->numRows();
  int _6968 = _6966->numColumns();
  std::shared_ptr< monty::ndarray< int,1 > > _6969 = ::mosek::fusion::p_Set::make(_6967,_6968);
  _checked_ptr_1<int> _ptr__6969(_6969 ? _6969->raw() : nullptr,_6969 ? _6969->size(0) : 0);
  if (_6966->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _6970 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6966->numNonzeros())));
      _checked_ptr_1<double> _ptr__6970(_6970 ? _6970->raw() : nullptr,_6970 ? _6970->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6971 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6966->numNonzeros())));
      _checked_ptr_1<int> _ptr__6971(_6971 ? _6971->raw() : nullptr,_6971 ? _6971->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6972 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6966->numNonzeros())));
      _checked_ptr_1<int> _ptr__6972(_6972 ? _6972->raw() : nullptr,_6972 ? _6972->size(0) : 0);
      _6966->getDataAsTriplets(_6972,_6971,_6970);
      std::vector<long long> _11909;
      for (int _6974 = (int)0, _11910 = (int)((_6971)->size(0)); _6974 < _11910 ; ++_6974)
      {
        _11909.push_back(safe_add( safe_mul( _ptr__6972[_6974],_6968 ),_ptr__6971[_6974] ));
      }
      auto _11911 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11909.size()),_11909.begin(),_11909.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _6973 = _11911;
      _checked_ptr_1<long long> _ptr__6973(_6973 ? _6973->raw() : nullptr,_6973 ? _6973->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6969,_6973,_6970)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6969,nullptr,_6966->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _6975) { return mosek::fusion::p_Expr::constTerm(_6975); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _6975){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,_6975)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6976,    std::shared_ptr< monty::ndarray< int,2 > > _6977,    double _6978) { return mosek::fusion::p_Expr::constTerm(_6976,_6977,_6978); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6976,std::shared_ptr< monty::ndarray< int,2 > > _6977,double _6978){
  _checked_ptr_1<int> _ptr__6976(_6976 ? _6976->raw() : nullptr, _6976 ? _6976->size(0) : 0);
  int _6979 = (int)((_6977)->size(0));
  int _6980 = (int)((_6976)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _6981 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6979)));
  _checked_ptr_1<long long> _ptr__6981(_6981 ? _6981->raw() : nullptr,_6981 ? _6981->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6982 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6980)));
  _checked_ptr_1<long long> _ptr__6982(_6982 ? _6982->raw() : nullptr,_6982 ? _6982->size(0) : 0);
  _ptr__6982[(_6980 - (int)1)] = (int)1;
  int _11912 = (int)1;
  int _11913 = _6980;
  for (int _6983 = _11912; _6983 < _11913; ++_6983)
  {
    {
      _ptr__6982[((_6980 - _6983) - (int)1)] = safe_mul( _ptr__6982[(_6980 - _6983)],_ptr__6976[(_6980 - _6983)] );
    }
  }
  int _11914 = (int)0;
  int _11915 = _6979;
  for (int _6984 = _11914; _6984 < _11915; ++_6984)
  {
    {
      int _11916 = (int)0;
      int _11917 = _6980;
      for (int _6985 = _11916; _6985 < _11917; ++_6985)
      {
        {
          _ptr__6981[_6984] += safe_mul( _ptr__6982[_6985],((*_6977)(_6984,_6985)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6976,_6981,_6978)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6986,    std::shared_ptr< monty::ndarray< int,2 > > _6987,    std::shared_ptr< monty::ndarray< double,1 > > _6988) { return mosek::fusion::p_Expr::constTerm(_6986,_6987,_6988); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6986,std::shared_ptr< monty::ndarray< int,2 > > _6987,std::shared_ptr< monty::ndarray< double,1 > > _6988){
  _checked_ptr_1<int> _ptr__6986(_6986 ? _6986->raw() : nullptr, _6986 ? _6986->size(0) : 0);
  _checked_ptr_1<double> _ptr__6988(_6988 ? _6988->raw() : nullptr, _6988 ? _6988->size(0) : 0);
  int _6989 = (int)((_6987)->size(0));
  int _6990 = (int)((_6986)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _6991 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6989)));
  _checked_ptr_1<long long> _ptr__6991(_6991 ? _6991->raw() : nullptr,_6991 ? _6991->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6992 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6990)));
  _checked_ptr_1<long long> _ptr__6992(_6992 ? _6992->raw() : nullptr,_6992 ? _6992->size(0) : 0);
  _ptr__6992[(_6990 - (int)1)] = (int)1;
  int _11918 = (int)1;
  int _11919 = _6990;
  for (int _6993 = _11918; _6993 < _11919; ++_6993)
  {
    {
      _ptr__6992[((_6990 - _6993) - (int)1)] = safe_mul( _ptr__6992[(_6990 - _6993)],_ptr__6986[(_6990 - _6993)] );
    }
  }
  int _11920 = (int)0;
  int _11921 = _6989;
  for (int _6994 = _11920; _6994 < _11921; ++_6994)
  {
    {
      int _11922 = (int)0;
      int _11923 = _6990;
      for (int _6995 = _11922; _6995 < _11923; ++_6995)
      {
        {
          _ptr__6991[_6994] += safe_mul( _ptr__6992[_6995],((*_6987)(_6994,_6995)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6986,_6991,_6988)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6996,    double _6997) { return mosek::fusion::p_Expr::constTerm(_6996,_6997); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6996,double _6997){
  _checked_ptr_1<int> _ptr__6996(_6996 ? _6996->raw() : nullptr, _6996 ? _6996->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6996,nullptr,_6997)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _6998,    double _6999) { return mosek::fusion::p_Expr::constTerm(_6998,_6999); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int _6998,double _6999){
  std::vector<double> _11924;
  for (int _7000 = (int)0, _11925 = _6998; _7000 < _11925 ; ++_7000)
  {
    _11924.push_back(_6999);
  }
  auto _11926 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11924.size()),_11924.begin(),_11924.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6998)}),nullptr,_11926)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _7001) { return mosek::fusion::p_Expr::constTerm(_7001); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _7001){
  std::vector<double> _11927;
  for (int _7002 = (int)0, _11928 = (int)((_7001)->size(0)); _7002 < _11928 ; ++_7002)
  {
    for (int _7003 = (int)0, _11929 = (int)((_7001)->size(1)); _7003 < _11929 ; ++_7003)
    {
      _11927.push_back(((*_7001)(_7002,_7003)));
    }
  }
  auto _11930 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11927.size()),_11927.begin(),_11927.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7001)->size(0))),(int)((int)((_7001)->size(1)))}),nullptr,_11930)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _7004) { return mosek::fusion::p_Expr::constTerm(_7004); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _7004){
  _checked_ptr_1<double> _ptr__7004(_7004 ? _7004->raw() : nullptr, _7004 ? _7004->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7004)->size(0)))}),nullptr,_7004)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: numNonzeros() { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros(){
  return (long long)((cof_v)->size(0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _7005,    int _7006) { return mosek::fusion::p_Expr::sum(_7005,_7006); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7005,int _7006){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_7006,_7005)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _7007) { return mosek::fusion::p_Expr::sum(_7007); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7007){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_7007))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _7008) { return mosek::fusion::p_Expr::neg(_7008); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _7008){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_7008)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _7009,monty::rc_ptr< ::mosek::fusion::Matrix > _7010,monty::rc_ptr< ::mosek::fusion::Expression > _7011){
  long long _7012 = _7010->numNonzeros();
  int _7013 = _7010->numRows();
  int _7014 = _7010->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7015 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7012)));
  _checked_ptr_1<double> _ptr__7015(_7015 ? _7015->raw() : nullptr,_7015 ? _7015->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7016 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7012)));
  _checked_ptr_1<int> _ptr__7016(_7016 ? _7016->raw() : nullptr,_7016 ? _7016->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7017 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7012)));
  _checked_ptr_1<int> _ptr__7017(_7017 ? _7017->raw() : nullptr,_7017 ? _7017->size(0) : 0);
  _7010->getDataAsTriplets(_7017,_7016,_7015);
  if (_7009)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_7013,_7014,_7017,_7016,_7015,_7011)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_7013,_7014,_7017,_7016,_7015,_7011)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7018,    monty::rc_ptr< ::mosek::fusion::Parameter > _7019) { return mosek::fusion::p_Expr::mulDiag(_7018,_7019); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7018,monty::rc_ptr< ::mosek::fusion::Parameter > _7019){
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7018->__mosek_2fusion_2Variable__asExpr(),_7019)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7020,    monty::rc_ptr< ::mosek::fusion::Variable > _7021) { return mosek::fusion::p_Expr::mulDiag(_7020,_7021); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7020,monty::rc_ptr< ::mosek::fusion::Variable > _7021){
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7020,_7021->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7022,    monty::rc_ptr< ::mosek::fusion::Parameter > _7023) { return mosek::fusion::p_Expr::mulDiag(_7022,_7023); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7022,monty::rc_ptr< ::mosek::fusion::Parameter > _7023){
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7022,_7023)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7024,    monty::rc_ptr< ::mosek::fusion::Expression > _7025) { return mosek::fusion::p_Expr::mulDiag(_7024,_7025); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7024,monty::rc_ptr< ::mosek::fusion::Expression > _7025){
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7024,_7025)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7026,    monty::rc_ptr< ::mosek::fusion::Matrix > _7027) { return mosek::fusion::p_Expr::mulDiag(_7026,_7027); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7026,monty::rc_ptr< ::mosek::fusion::Matrix > _7027){
  return ::mosek::fusion::p_Expr::mulDiag(false,_7027,_7026->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7028,    monty::rc_ptr< ::mosek::fusion::Variable > _7029) { return mosek::fusion::p_Expr::mulDiag(_7028,_7029); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7028,monty::rc_ptr< ::mosek::fusion::Variable > _7029){
  return ::mosek::fusion::p_Expr::mulDiag(true,_7028,_7029->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7030,    monty::rc_ptr< ::mosek::fusion::Matrix > _7031) { return mosek::fusion::p_Expr::mulDiag(_7030,_7031); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7030,monty::rc_ptr< ::mosek::fusion::Matrix > _7031){
  return ::mosek::fusion::p_Expr::mulDiag(false,_7031,_7030);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7032,    monty::rc_ptr< ::mosek::fusion::Expression > _7033) { return mosek::fusion::p_Expr::mulDiag(_7032,_7033); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7032,monty::rc_ptr< ::mosek::fusion::Expression > _7033){
  return ::mosek::fusion::p_Expr::mulDiag(true,_7032,_7033);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7034,    std::shared_ptr< monty::ndarray< double,2 > > _7035) { return mosek::fusion::p_Expr::mulDiag(_7034,_7035); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7034,std::shared_ptr< monty::ndarray< double,2 > > _7035){
  std::vector<int> _11931;
  for (int _7036 = (int)0, _11932 = (int)((_7035)->size(0)); _7036 < _11932 ; ++_7036)
  {
    for (int _7037 = (int)0, _11933 = (int)((_7035)->size(1)); _7037 < _11933 ; ++_7037)
    {
      _11931.push_back(_7036);
    }
  }
  auto _11934 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11931.size()),_11931.begin(),_11931.end()));
  std::vector<int> _11935;
  for (int _7038 = (int)0, _11936 = (int)((_7035)->size(0)); _7038 < _11936 ; ++_7038)
  {
    for (int _7039 = (int)0, _11937 = (int)((_7035)->size(1)); _7039 < _11937 ; ++_7039)
    {
      _11935.push_back(_7039);
    }
  }
  auto _11938 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11935.size()),_11935.begin(),_11935.end()));
  std::vector<double> _11939;
  for (int _7040 = (int)0, _11940 = (int)((_7035)->size(0)); _7040 < _11940 ; ++_7040)
  {
    for (int _7041 = (int)0, _11941 = (int)((_7035)->size(1)); _7041 < _11941 ; ++_7041)
    {
      _11939.push_back(((*_7035)(_7040,_7041)));
    }
  }
  auto _11942 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11939.size()),_11939.begin(),_11939.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7035)->size(0)),(int)((_7035)->size(1)),_11934,_11938,_11942,_7034->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7042,    std::shared_ptr< monty::ndarray< double,2 > > _7043) { return mosek::fusion::p_Expr::mulDiag(_7042,_7043); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7042,std::shared_ptr< monty::ndarray< double,2 > > _7043){
  std::vector<int> _11943;
  for (int _7044 = (int)0, _11944 = (int)((_7043)->size(0)); _7044 < _11944 ; ++_7044)
  {
    for (int _7045 = (int)0, _11945 = (int)((_7043)->size(1)); _7045 < _11945 ; ++_7045)
    {
      _11943.push_back(_7044);
    }
  }
  auto _11946 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11943.size()),_11943.begin(),_11943.end()));
  std::vector<int> _11947;
  for (int _7046 = (int)0, _11948 = (int)((_7043)->size(0)); _7046 < _11948 ; ++_7046)
  {
    for (int _7047 = (int)0, _11949 = (int)((_7043)->size(1)); _7047 < _11949 ; ++_7047)
    {
      _11947.push_back(_7047);
    }
  }
  auto _11950 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11947.size()),_11947.begin(),_11947.end()));
  std::vector<double> _11951;
  for (int _7048 = (int)0, _11952 = (int)((_7043)->size(0)); _7048 < _11952 ; ++_7048)
  {
    for (int _7049 = (int)0, _11953 = (int)((_7043)->size(1)); _7049 < _11953 ; ++_7049)
    {
      _11951.push_back(((*_7043)(_7048,_7049)));
    }
  }
  auto _11954 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11951.size()),_11951.begin(),_11951.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7043)->size(0)),(int)((_7043)->size(1)),_11946,_11950,_11954,_7042)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _7050,    monty::rc_ptr< ::mosek::fusion::Variable > _7051) { return mosek::fusion::p_Expr::mulDiag(_7050,_7051); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7050,monty::rc_ptr< ::mosek::fusion::Variable > _7051){
  std::vector<int> _11955;
  for (int _7052 = (int)0, _11956 = (int)((_7050)->size(0)); _7052 < _11956 ; ++_7052)
  {
    for (int _7053 = (int)0, _11957 = (int)((_7050)->size(1)); _7053 < _11957 ; ++_7053)
    {
      _11955.push_back(_7052);
    }
  }
  auto _11958 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11955.size()),_11955.begin(),_11955.end()));
  std::vector<int> _11959;
  for (int _7054 = (int)0, _11960 = (int)((_7050)->size(0)); _7054 < _11960 ; ++_7054)
  {
    for (int _7055 = (int)0, _11961 = (int)((_7050)->size(1)); _7055 < _11961 ; ++_7055)
    {
      _11959.push_back(_7055);
    }
  }
  auto _11962 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11959.size()),_11959.begin(),_11959.end()));
  std::vector<double> _11963;
  for (int _7056 = (int)0, _11964 = (int)((_7050)->size(0)); _7056 < _11964 ; ++_7056)
  {
    for (int _7057 = (int)0, _11965 = (int)((_7050)->size(1)); _7057 < _11965 ; ++_7057)
    {
      _11963.push_back(((*_7050)(_7056,_7057)));
    }
  }
  auto _11966 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11963.size()),_11963.begin(),_11963.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7050)->size(0)),(int)((_7050)->size(1)),_11958,_11962,_11966,_7051->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _7058,    monty::rc_ptr< ::mosek::fusion::Expression > _7059) { return mosek::fusion::p_Expr::mulDiag(_7058,_7059); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7058,monty::rc_ptr< ::mosek::fusion::Expression > _7059){
  std::vector<int> _11967;
  for (int _7060 = (int)0, _11968 = (int)((_7058)->size(0)); _7060 < _11968 ; ++_7060)
  {
    for (int _7061 = (int)0, _11969 = (int)((_7058)->size(1)); _7061 < _11969 ; ++_7061)
    {
      _11967.push_back(_7060);
    }
  }
  auto _11970 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11967.size()),_11967.begin(),_11967.end()));
  std::vector<int> _11971;
  for (int _7062 = (int)0, _11972 = (int)((_7058)->size(0)); _7062 < _11972 ; ++_7062)
  {
    for (int _7063 = (int)0, _11973 = (int)((_7058)->size(1)); _7063 < _11973 ; ++_7063)
    {
      _11971.push_back(_7063);
    }
  }
  auto _11974 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11971.size()),_11971.begin(),_11971.end()));
  std::vector<double> _11975;
  for (int _7064 = (int)0, _11976 = (int)((_7058)->size(0)); _7064 < _11976 ; ++_7064)
  {
    for (int _7065 = (int)0, _11977 = (int)((_7058)->size(1)); _7065 < _11977 ; ++_7065)
    {
      _11975.push_back(((*_7058)(_7064,_7065)));
    }
  }
  auto _11978 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11975.size()),_11975.begin(),_11975.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7058)->size(0)),(int)((_7058)->size(1)),_11970,_11974,_11978,_7059)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _7066,monty::rc_ptr< ::mosek::fusion::Expression > _7067){
  std::shared_ptr< monty::ndarray< int,1 > > _7068 = _7067->getShape();
  _checked_ptr_1<int> _ptr__7068(_7068 ? _7068->raw() : nullptr,_7068 ? _7068->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _7069 = _7067;
  if (((int)((_7068)->size(0)) == (int)1))
  {
    {
      _7068 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7068[(int)0]),(int)((int)1)});
      _ptr__7068.update(_7068 ? _7068->raw() : nullptr, _7068 ? _7068->size(0) : 0);
      _7069 = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7068,_7067)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7068)->size(0)) != (int)2) || ((_7066->numRows() != _ptr__7068[(int)0]) || (_7066->numColumns() != _ptr__7068[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int _7070 = _7066->numColumns();
  long long _7071 = _7066->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _7072 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7071)));
  _checked_ptr_1<int> _ptr__7072(_7072 ? _7072->raw() : nullptr,_7072 ? _7072->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7073 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7071)));
  _checked_ptr_1<int> _ptr__7073(_7073 ? _7073->raw() : nullptr,_7073 ? _7073->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7074 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7071)));
  _checked_ptr_1<double> _ptr__7074(_7074 ? _7074->raw() : nullptr,_7074 ? _7074->size(0) : 0);
  _7066->getDataAsTriplets(_7072,_7073,_7074);
  std::vector<long long> _11979;
  for (long long _7075 = (int)0, _11980 = _7071; _7075 < _11980 ; ++_7075)
  {
    _11979.push_back(safe_add( safe_mul( _ptr__7072[_7075],_7070 ),_ptr__7073[_7075] ));
  }
  auto _11981 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11979.size()),_11979.begin(),_11979.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7074,_11981,_7069,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _7076,monty::rc_ptr< ::mosek::fusion::Expression > _7077){
  _checked_ptr_1<double> _ptr__7076(_7076 ? _7076->raw() : nullptr, _7076 ? _7076->size(0) : 0);
  if (((NULL == _7076.get()) || (NULL == _7077.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_7077->getND() == (int)0) && ((int)((_7076)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__7076[(int)0],_7077)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7077->getND() != (int)1) || (_7077->getDim((int)0) != (int)((_7076)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<long long> _11982;
      for (int _7078 = (int)0, _11983 = (int)((_7076)->size(0)); _7078 < _11983 ; ++_7078)
      {
        _11982.push_back(_7078);
      }
      auto _11984 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11982.size()),_11982.begin(),_11982.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7076,_11984,_7077)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7079,monty::rc_ptr< ::mosek::fusion::Expression > _7080){
  if (((NULL == _7079.get()) || (NULL == _7080.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7081 = _7080->getShape();
  _checked_ptr_1<int> _ptr__7081(_7081 ? _7081->raw() : nullptr,_7081 ? _7081->size(0) : 0);
  if (((int)((_7081)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7079)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int _11985 = (int)0;
  int _11986 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7079)->dims)->size(0));
  for (int _7082 = _11985; _7082 < _11986; ++_7082)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_7079)->dims)(_7082)) != _ptr__7081[_7082]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_7079)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_7079)->inst,_7080)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7083,    double _7084) { return mosek::fusion::p_Expr::mul(_7083,_7084); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7083,double _7084){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7084,_7083)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _7085,    monty::rc_ptr< ::mosek::fusion::Expression > _7086) { return mosek::fusion::p_Expr::mul(_7085,_7086); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _7085,monty::rc_ptr< ::mosek::fusion::Expression > _7086){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7085,_7086)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7087,    std::shared_ptr< monty::ndarray< double,1 > > _7088) { return mosek::fusion::p_Expr::mul(_7087,_7088); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7087,std::shared_ptr< monty::ndarray< double,1 > > _7088){
  _checked_ptr_1<double> _ptr__7088(_7088 ? _7088->raw() : nullptr, _7088 ? _7088->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_7088,_7087);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _7089,    monty::rc_ptr< ::mosek::fusion::Expression > _7090) { return mosek::fusion::p_Expr::mul(_7089,_7090); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _7089,monty::rc_ptr< ::mosek::fusion::Expression > _7090){
  _checked_ptr_1<double> _ptr__7089(_7089 ? _7089->raw() : nullptr, _7089 ? _7089->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_7089,_7090);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7091,    std::shared_ptr< monty::ndarray< double,2 > > _7092) { return mosek::fusion::p_Expr::mul(_7091,_7092); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7091,std::shared_ptr< monty::ndarray< double,2 > > _7092){
  return ::mosek::fusion::p_Expr::mul(false,_7092,_7091);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _7093,    monty::rc_ptr< ::mosek::fusion::Expression > _7094) { return mosek::fusion::p_Expr::mul(_7093,_7094); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _7093,monty::rc_ptr< ::mosek::fusion::Expression > _7094){
  return ::mosek::fusion::p_Expr::mul(true,_7093,_7094);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7095,    monty::rc_ptr< ::mosek::fusion::Matrix > _7096) { return mosek::fusion::p_Expr::mul(_7095,_7096); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7095,monty::rc_ptr< ::mosek::fusion::Matrix > _7096){
  return ::mosek::fusion::p_Expr::mul(false,_7096,_7095);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7097,    monty::rc_ptr< ::mosek::fusion::Expression > _7098) { return mosek::fusion::p_Expr::mul(_7097,_7098); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7097,monty::rc_ptr< ::mosek::fusion::Expression > _7098){
  return ::mosek::fusion::p_Expr::mul(true,_7097,_7098);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7099,std::shared_ptr< monty::ndarray< double,1 > > _7100,monty::rc_ptr< ::mosek::fusion::Expression > _7101){
  _checked_ptr_1<double> _ptr__7100(_7100 ? _7100->raw() : nullptr, _7100 ? _7100->size(0) : 0);
  int _7102 = (int)((_7100)->size(0));
  int _7103 = _7102;
  std::shared_ptr< monty::ndarray< double,1 > > _7104 = ::mosek::fusion::Utils::Tools::arraycopy(_7100);
  _checked_ptr_1<double> _ptr__7104(_7104 ? _7104->raw() : nullptr,_7104 ? _7104->size(0) : 0);
  int _7105 = _7101->getND();
  if ((_7105 == (int)0))
  {
    {
      std::vector<int> _11987;
      for (int _7106 = (int)0, _11988 = _7102; _7106 < _11988 ; ++_7106)
      {
        _11987.push_back(_7106);
      }
      auto _11989 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11987.size()),_11987.begin(),_11987.end()));
      std::vector<int> _11990;
      for (int _7107 = (int)0, _11991 = _7102; _7107 < _11991 ; ++_7107)
      {
        _11990.push_back((int)0);
      }
      auto _11992 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11990.size()),_11990.begin(),_11990.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7102)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7102,(int)1,_11989,_11992,_7104,_7101,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7105 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_7099 && (_7101->getDim((int)0) == (int)((_7100)->size(0)))))
  {
    {
      std::vector<int> _11993;
      for (int _7108 = (int)0, _11994 = _7102; _7108 < _11994 ; ++_7108)
      {
        _11993.push_back((int)0);
      }
      auto _11995 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11993.size()),_11993.begin(),_11993.end()));
      std::vector<int> _11996;
      for (int _7109 = (int)0, _11997 = _7102; _7109 < _11997 ; ++_7109)
      {
        _11996.push_back(_7109);
      }
      auto _11998 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11996.size()),_11996.begin(),_11996.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7101->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_7102,_11995,_11998,_7104,_7101)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7099 && (_7101->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int> _11999;
      for (int _7110 = (int)0, _12000 = _7102; _7110 < _12000 ; ++_7110)
      {
        _11999.push_back(_7110);
      }
      auto _12001 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11999.size()),_11999.begin(),_11999.end()));
      std::vector<int> _12002;
      for (int _7111 = (int)0, _12003 = _7102; _7111 < _12003 ; ++_7111)
      {
        _12002.push_back((int)0);
      }
      auto _12004 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12002.size()),_12002.begin(),_12002.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7102,(int)1,_12001,_12004,_7104,_7101,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7099) && (_7101->getDim((int)1) == _7102)))
  {
    {
      std::vector<int> _12005;
      for (int _7112 = (int)0, _12006 = _7102; _7112 < _12006 ; ++_7112)
      {
        _12005.push_back(_7112);
      }
      auto _12007 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12005.size()),_12005.begin(),_12005.end()));
      std::vector<int> _12008;
      for (int _7113 = (int)0, _12009 = _7102; _7113 < _12009 ; ++_7113)
      {
        _12008.push_back((int)0);
      }
      auto _12010 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12008.size()),_12008.begin(),_12008.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7101->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7102,(int)1,_12007,_12010,_7104,_7101)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7099) && (_7101->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int> _12011;
      for (int _7114 = (int)0, _12012 = _7102; _7114 < _12012 ; ++_7114)
      {
        _12011.push_back((int)0);
      }
      auto _12013 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12011.size()),_12011.begin(),_12011.end()));
      std::vector<int> _12014;
      for (int _7115 = (int)0, _12015 = _7102; _7115 < _12015 ; ++_7115)
      {
        _12014.push_back(_7115);
      }
      auto _12016 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12014.size()),_12014.begin(),_12014.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_7102,_12013,_12016,_7104,_7101,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7116,std::shared_ptr< monty::ndarray< double,2 > > _7117,monty::rc_ptr< ::mosek::fusion::Expression > _7118){
  int _7119 = (int)((_7117)->size(0));
  int _7120 = (int)((_7117)->size(1));
  int _7121 = safe_mul( _7119,_7120 );
  std::vector<int> _12017;
  for (int _7123 = (int)0, _12018 = _7119; _7123 < _12018 ; ++_7123)
  {
    for (int _7124 = (int)0, _12019 = _7120; _7124 < _12019 ; ++_7124)
    {
      _12017.push_back(_7123);
    }
  }
  auto _12020 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12017.size()),_12017.begin(),_12017.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7122 = _12020;
  _checked_ptr_1<int> _ptr__7122(_7122 ? _7122->raw() : nullptr,_7122 ? _7122->size(0) : 0);
  std::vector<int> _12021;
  for (int _7126 = (int)0, _12022 = _7119; _7126 < _12022 ; ++_7126)
  {
    for (int _7127 = (int)0, _12023 = _7120; _7127 < _12023 ; ++_7127)
    {
      _12021.push_back(_7127);
    }
  }
  auto _12024 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12021.size()),_12021.begin(),_12021.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7125 = _12024;
  _checked_ptr_1<int> _ptr__7125(_7125 ? _7125->raw() : nullptr,_7125 ? _7125->size(0) : 0);
  std::vector<double> _12025;
  for (int _7129 = (int)0, _12026 = _7119; _7129 < _12026 ; ++_7129)
  {
    for (int _7130 = (int)0, _12027 = _7120; _7130 < _12027 ; ++_7130)
    {
      _12025.push_back(((*_7117)(_7129,_7130)));
    }
  }
  auto _12028 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12025.size()),_12025.begin(),_12025.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7128 = _12028;
  _checked_ptr_1<double> _ptr__7128(_7128 ? _7128->raw() : nullptr,_7128 ? _7128->size(0) : 0);
  long long _7131 = _7118->getSize();
  std::shared_ptr< monty::ndarray< int,1 > > _7132 = _7118->getShape();
  _checked_ptr_1<int> _ptr__7132(_7132 ? _7132->raw() : nullptr,_7132 ? _7132->size(0) : 0);
  if (((int)((_7132)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7119,_7120,_7122,_7125,_7128,_7118,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_7116)
  {
    {
      if (((int)((_7132)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7117)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7119,_7120,_7122,_7125,_7128,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7132[(int)0]),(int)((int)1)}),_7118)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7132)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7119,_7120,_7122,_7125,_7128,_7118)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_7132)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7117)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7119,_7120,_7122,_7125,_7128,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7132[(int)0])}),_7118)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7132)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7119,_7120,_7122,_7125,_7128,_7118)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7133,monty::rc_ptr< ::mosek::fusion::Matrix > _7134,monty::rc_ptr< ::mosek::fusion::Expression > _7135){
  long long _7136 = _7134->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _7137 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7136)));
  _checked_ptr_1<int> _ptr__7137(_7137 ? _7137->raw() : nullptr,_7137 ? _7137->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7138 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7136)));
  _checked_ptr_1<int> _ptr__7138(_7138 ? _7138->raw() : nullptr,_7138 ? _7138->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7139 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7136)));
  _checked_ptr_1<double> _ptr__7139(_7139 ? _7139->raw() : nullptr,_7139 ? _7139->size(0) : 0);
  int _7140 = _7134->numRows();
  int _7141 = _7134->numColumns();
  _7134->getDataAsTriplets(_7137,_7138,_7139);
  int _7142 = _7135->getND();
  if ((_7142 == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7140,_7141,_7137,_7138,_7139,_7135)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7142 == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7143 = _7135->getShape();
      _checked_ptr_1<int> _ptr__7143(_7143 ? _7143->raw() : nullptr,_7143 ? _7143->size(0) : 0);
      if (_7133)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7140)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7140,_7141,_7137,_7138,_7139,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7143[(int)0]),(int)((int)1)}),_7135)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7141)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7140,_7141,_7137,_7138,_7139,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7143[(int)0])}),_7135)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_7142 == (int)2))
  {
    {
      if (_7133)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7140,_7141,_7137,_7138,_7139,_7135)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7140,_7141,_7137,_7138,_7139,_7135)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _7144,    monty::rc_ptr< ::mosek::fusion::Matrix > _7145) { return mosek::fusion::p_Expr::mul(_7144,_7145); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _7144,monty::rc_ptr< ::mosek::fusion::Matrix > _7145){
  int _7146 = _7145->numRows();
  int _7147 = _7145->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7148 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7145->numNonzeros())));
  _checked_ptr_1<double> _ptr__7148(_7148 ? _7148->raw() : nullptr,_7148 ? _7148->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7149 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7145->numNonzeros())));
  _checked_ptr_1<int> _ptr__7149(_7149 ? _7149->raw() : nullptr,_7149 ? _7149->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7150 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7145->numNonzeros())));
  _checked_ptr_1<int> _ptr__7150(_7150 ? _7150->raw() : nullptr,_7150 ? _7150->size(0) : 0);
  _7145->getDataAsTriplets(_7150,_7149,_7148);
  return ::mosek::fusion::p_Expr::mul(false,_7146,_7147,_7150,_7149,_7148,_7144);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7151,    monty::rc_ptr< ::mosek::fusion::Variable > _7152) { return mosek::fusion::p_Expr::mul(_7151,_7152); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7151,monty::rc_ptr< ::mosek::fusion::Variable > _7152){
  int _7153 = _7151->numRows();
  int _7154 = _7151->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7155 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7151->numNonzeros())));
  _checked_ptr_1<double> _ptr__7155(_7155 ? _7155->raw() : nullptr,_7155 ? _7155->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7156 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7151->numNonzeros())));
  _checked_ptr_1<int> _ptr__7156(_7156 ? _7156->raw() : nullptr,_7156 ? _7156->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7157 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7151->numNonzeros())));
  _checked_ptr_1<int> _ptr__7157(_7157 ? _7157->raw() : nullptr,_7157 ? _7157->size(0) : 0);
  _7151->getDataAsTriplets(_7157,_7156,_7155);
  return ::mosek::fusion::p_Expr::mul(true,_7153,_7154,_7157,_7156,_7155,_7152);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7158,int _7159,int _7160,std::shared_ptr< monty::ndarray< int,1 > > _7161,std::shared_ptr< monty::ndarray< int,1 > > _7162,std::shared_ptr< monty::ndarray< double,1 > > _7163,monty::rc_ptr< ::mosek::fusion::Variable > _7164){
  _checked_ptr_1<int> _ptr__7161(_7161 ? _7161->raw() : nullptr, _7161 ? _7161->size(0) : 0);
  _checked_ptr_1<int> _ptr__7162(_7162 ? _7162->raw() : nullptr, _7162 ? _7162->size(0) : 0);
  _checked_ptr_1<double> _ptr__7163(_7163 ? _7163->raw() : nullptr, _7163 ? _7163->size(0) : 0);
  if ((_7164->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_7159,_7160,_7161,_7162,_7163,_7164)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7164->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7165 = _7164->getShape();
      _checked_ptr_1<int> _ptr__7165(_7165 ? _7165->raw() : nullptr,_7165 ? _7165->size(0) : 0);
      int _12029;
      bool _12030 = _7158;
      if (_12030)
      {
        _12029 = _7159;
      }
      else
      {
        _12029 = _7160;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _12031;
      bool _12032 = _7158;
      if (_12032)
      {
        _12031 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7165[(int)0]),(int)((int)1)});
      }
      else
      {
        _12031 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7165[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_12029)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7158,_7159,_7160,_7161,_7162,_7163,::mosek::fusion::p_Var::reshape(_7164,_12031))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7158,_7159,_7160,_7161,_7162,_7163,_7164)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7166,    monty::rc_ptr< ::mosek::fusion::Parameter > _7167) { return mosek::fusion::p_Expr::mul(_7166,_7167); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7166,monty::rc_ptr< ::mosek::fusion::Parameter > _7167){
  if (((_7167->getND() == (int)2) && (_7166->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7166,_7167)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7167->getND() == (int)1) && (_7166->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7166->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7166,_7167->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7167->getDim((int)0)),(int)((int)1)})))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7167->getND() == (int)2) && (_7166->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7167->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight((::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7166->getDim((int)0))}),_7166)).as<::mosek::fusion::Expression>(),_7167)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7167->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7167,_7166)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7166->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7167,_7166)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7168,    monty::rc_ptr< ::mosek::fusion::Expression > _7169) { return mosek::fusion::p_Expr::mul(_7168,_7169); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Parameter > _7168,monty::rc_ptr< ::mosek::fusion::Expression > _7169){
  if (((_7168->getND() == (int)2) && (_7169->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7168,_7169)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7168->getND() == (int)1) && (_7169->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7169->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7168->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7168->getDim((int)0))})),_7169)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7168->getND() == (int)2) && (_7169->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7168->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7168,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7169->getDim((int)0)),(int)((int)1)}),_7169)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7168->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7168,_7169)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7169->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7168,_7169)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7170,    monty::rc_ptr< ::mosek::fusion::Matrix > _7171) { return mosek::fusion::p_Expr::dot(_7170,_7171); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7170,monty::rc_ptr< ::mosek::fusion::Matrix > _7171){
  long long _7172 = _7171->numNonzeros();
  if ((!_7171->isSparse()))
  {
    {
      std::vector<long long> _12033;
      for (long long _7173 = (int)0, _12034 = _7172; _7173 < _12034 ; ++_7173)
      {
        _12033.push_back(_7173);
      }
      auto _12035 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12033.size()),_12033.begin(),_12033.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7170,_12035,_7171->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7174 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7172)));
      _checked_ptr_1<int> _ptr__7174(_7174 ? _7174->raw() : nullptr,_7174 ? _7174->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7175 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7172)));
      _checked_ptr_1<int> _ptr__7175(_7175 ? _7175->raw() : nullptr,_7175 ? _7175->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7176 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7172)));
      _checked_ptr_1<double> _ptr__7176(_7176 ? _7176->raw() : nullptr,_7176 ? _7176->size(0) : 0);
      int _7177 = _7171->numColumns();
      _7171->getDataAsTriplets(_7174,_7175,_7176);
      std::vector<long long> _12036;
      for (int _7178 = (int)0, _12037 = (int)((_7174)->size(0)); _7178 < _12037 ; ++_7178)
      {
        _12036.push_back(safe_add( safe_mul( _ptr__7174[_7178],_7177 ),_ptr__7175[_7178] ));
      }
      auto _12038 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12036.size()),_12036.begin(),_12036.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7170,_12038,_7176)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7179,    std::shared_ptr< monty::ndarray< double,2 > > _7180) { return mosek::fusion::p_Expr::dot(_7179,_7180); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7179,std::shared_ptr< monty::ndarray< double,2 > > _7180){
  std::vector<long long> _12039;
  for (int _7181 = (int)0, _12040 = safe_mul( (int)((_7180)->size(0)),(int)((_7180)->size(1)) ); _7181 < _12040 ; ++_7181)
  {
    _12039.push_back(_7181);
  }
  auto _12041 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12039.size()),_12039.begin(),_12039.end()));
  std::vector<double> _12042;
  for (int _7182 = (int)0, _12043 = (int)((_7180)->size(0)); _7182 < _12043 ; ++_7182)
  {
    for (int _7183 = (int)0, _12044 = (int)((_7180)->size(1)); _7183 < _12044 ; ++_7183)
    {
      _12042.push_back(((*_7180)(_7182,_7183)));
    }
  }
  auto _12045 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12042.size()),_12042.begin(),_12042.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7179,_12041,_12045)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7184,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7185) { return mosek::fusion::p_Expr::dot(_7184,_7185); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7184,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7185){
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7184,mosek::fusion::p_NDSparseArray::_get_impl(_7185)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7185)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7186,    std::shared_ptr< monty::ndarray< double,1 > > _7187) { return mosek::fusion::p_Expr::dot(_7186,_7187); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7186,std::shared_ptr< monty::ndarray< double,1 > > _7187){
  _checked_ptr_1<double> _ptr__7187(_7187 ? _7187->raw() : nullptr, _7187 ? _7187->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7188 = _7186->getShape();
  _checked_ptr_1<int> _ptr__7188(_7188 ? _7188->raw() : nullptr,_7188 ? _7188->size(0) : 0);
  if (((_7186->getSize() == (int)((_7187)->size(0))) && ((int)((_7188)->size(0)) > (int)1)))
  {
    {
      int _7189 = (int)0;
      int _12046 = (int)0;
      int _12047 = (int)((_7188)->size(0));
      for (int _7190 = _12046; _7190 < _12047; ++_7190)
      {
        {
          if ((_ptr__7188[_7190] > (int)1))
          {
            {
              ++ _7189;
            }
          }
          {}
        }
      }
      if ((_7189 > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7191 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)_7186->getSize())});
          _checked_ptr_1<int> _ptr__7191(_7191 ? _7191->raw() : nullptr,_7191 ? _7191->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7191,_7186)).as<::mosek::fusion::Expression>(),_7187)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7186,_7187)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7192,    monty::rc_ptr< ::mosek::fusion::Expression > _7193) { return mosek::fusion::p_Expr::dot(_7192,_7193); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _7192,monty::rc_ptr< ::mosek::fusion::Expression > _7193){
  return ::mosek::fusion::p_Expr::dot(_7193,_7192);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7194,    monty::rc_ptr< ::mosek::fusion::Expression > _7195) { return mosek::fusion::p_Expr::dot(_7194,_7195); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7194,monty::rc_ptr< ::mosek::fusion::Expression > _7195){
  return ::mosek::fusion::p_Expr::dot(_7195,_7194);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _7196,    monty::rc_ptr< ::mosek::fusion::Expression > _7197) { return mosek::fusion::p_Expr::dot(_7196,_7197); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _7196,monty::rc_ptr< ::mosek::fusion::Expression > _7197){
  return ::mosek::fusion::p_Expr::dot(_7197,_7196);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _7198,    monty::rc_ptr< ::mosek::fusion::Expression > _7199) { return mosek::fusion::p_Expr::dot(_7198,_7199); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _7198,monty::rc_ptr< ::mosek::fusion::Expression > _7199){
  _checked_ptr_1<double> _ptr__7198(_7198 ? _7198->raw() : nullptr, _7198 ? _7198->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_7199,_7198);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7200,    monty::rc_ptr< ::mosek::fusion::Parameter > _7201) { return mosek::fusion::p_Expr::dot(_7200,_7201); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7200,monty::rc_ptr< ::mosek::fusion::Parameter > _7201){
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7201,_7200)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7202,    monty::rc_ptr< ::mosek::fusion::Expression > _7203) { return mosek::fusion::p_Expr::dot(_7202,_7203); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Parameter > _7202,monty::rc_ptr< ::mosek::fusion::Expression > _7203){
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7202,_7203)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7204,    monty::rc_ptr< ::mosek::fusion::Variable > _7205) { return mosek::fusion::p_Expr::outer(_7204,_7205); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _7204,monty::rc_ptr< ::mosek::fusion::Variable > _7205){
  std::shared_ptr< monty::ndarray< int,1 > > _7206 = _7205->getShape();
  _checked_ptr_1<int> _ptr__7206(_7206 ? _7206->raw() : nullptr,_7206 ? _7206->size(0) : 0);
  if ((!(((int)((_7206)->size(0)) == (int)1) || (((int)((_7206)->size(0)) == (int)2) && (_ptr__7206[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7204)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _12048 = _7204;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12048.get()))
  {
    ::mosek::fusion::DenseMatrix::t _7207 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12048.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_7205,_ptr__7206[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_7207)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_7207)->data)->size(0)),true);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _7208 = _12048;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7209 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7208->numNonzeros())));
      _checked_ptr_1<double> _ptr__7209(_7209 ? _7209->raw() : nullptr,_7209 ? _7209->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7210 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7208->numNonzeros())));
      _checked_ptr_1<int> _ptr__7210(_7210 ? _7210->raw() : nullptr,_7210 ? _7210->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7211 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7208->numNonzeros())));
      _checked_ptr_1<int> _ptr__7211(_7211 ? _7211->raw() : nullptr,_7211 ? _7211->size(0) : 0);
      _7208->getDataAsTriplets(_7211,_7210,_7209);
      return ::mosek::fusion::p_Expr::outer_(_7205,_ptr__7206[(int)0],_7209,_7211,mosek::fusion::p_Matrix::_get_impl(_7208)->dimi,true);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _7212,    monty::rc_ptr< ::mosek::fusion::Matrix > _7213) { return mosek::fusion::p_Expr::outer(_7212,_7213); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _7212,monty::rc_ptr< ::mosek::fusion::Matrix > _7213){
  std::shared_ptr< monty::ndarray< int,1 > > _7214 = _7212->getShape();
  _checked_ptr_1<int> _ptr__7214(_7214 ? _7214->raw() : nullptr,_7214 ? _7214->size(0) : 0);
  if ((!((_7212->getND() == (int)1) || ((_7212->getND() == (int)2) && (_ptr__7214[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7213)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _12049 = _7213;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12049.get()))
  {
    ::mosek::fusion::DenseMatrix::t _7215 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12049.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_7212,_ptr__7214[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_7215)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_7215)->data)->size(0)),false);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _7216 = _12049;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7217 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7216->numNonzeros())));
      _checked_ptr_1<double> _ptr__7217(_7217 ? _7217->raw() : nullptr,_7217 ? _7217->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7218 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7216->numNonzeros())));
      _checked_ptr_1<int> _ptr__7218(_7218 ? _7218->raw() : nullptr,_7218 ? _7218->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7219 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7213->numNonzeros())));
      _checked_ptr_1<int> _ptr__7219(_7219 ? _7219->raw() : nullptr,_7219 ? _7219->size(0) : 0);
      _7216->getDataAsTriplets(_7219,_7218,_7217);
      return ::mosek::fusion::p_Expr::outer_(_7212,((*_7212->getShape())((int)0)),_7217,_7219,mosek::fusion::p_Matrix::_get_impl(_7216)->dimi,false);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _7220,    monty::rc_ptr< ::mosek::fusion::Variable > _7221) { return mosek::fusion::p_Expr::outer(_7220,_7221); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _7220,monty::rc_ptr< ::mosek::fusion::Variable > _7221){
  _checked_ptr_1<double> _ptr__7220(_7220 ? _7220->raw() : nullptr, _7220 ? _7220->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7222 = _7221->getShape();
  _checked_ptr_1<int> _ptr__7222(_7222 ? _7222->raw() : nullptr,_7222 ? _7222->size(0) : 0);
  if ((!((_7221->getND() == (int)1) || ((_7221->getND() == (int)2) && (_ptr__7222[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_7221,_ptr__7222[(int)0],_7220,nullptr,(int)((_7220)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _7223,    std::shared_ptr< monty::ndarray< double,1 > > _7224) { return mosek::fusion::p_Expr::outer(_7223,_7224); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _7223,std::shared_ptr< monty::ndarray< double,1 > > _7224){
  _checked_ptr_1<double> _ptr__7224(_7224 ? _7224->raw() : nullptr, _7224 ? _7224->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7225 = _7223->getShape();
  _checked_ptr_1<int> _ptr__7225(_7225 ? _7225->raw() : nullptr,_7225 ? _7225->size(0) : 0);
  if ((!((_7223->getND() == (int)1) || ((_7223->getND() == (int)2) && (_ptr__7225[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_7223,_ptr__7225[(int)0],_7224,nullptr,(int)((_7224)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int _7226,std::shared_ptr< monty::ndarray< long long,1 > > _7227,std::shared_ptr< monty::ndarray< long long,1 > > _7228,std::shared_ptr< monty::ndarray< double,1 > > _7229,std::shared_ptr< monty::ndarray< double,1 > > _7230,std::shared_ptr< monty::ndarray< long long,1 > > _7231,std::shared_ptr< monty::ndarray< double,1 > > _7232,std::shared_ptr< monty::ndarray< int,1 > > _7233,int _7234,bool _7235){
  _checked_ptr_1<long long> _ptr__7227(_7227 ? _7227->raw() : nullptr, _7227 ? _7227->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7228(_7228 ? _7228->raw() : nullptr, _7228 ? _7228->size(0) : 0);
  _checked_ptr_1<double> _ptr__7229(_7229 ? _7229->raw() : nullptr, _7229 ? _7229->size(0) : 0);
  _checked_ptr_1<double> _ptr__7230(_7230 ? _7230->raw() : nullptr, _7230 ? _7230->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7231(_7231 ? _7231->raw() : nullptr, _7231 ? _7231->size(0) : 0);
  _checked_ptr_1<double> _ptr__7232(_7232 ? _7232->raw() : nullptr, _7232 ? _7232->size(0) : 0);
  _checked_ptr_1<int> _ptr__7233(_7233 ? _7233->raw() : nullptr, _7233 ? _7233->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12050;
  bool _12051 = (!_7235);
  if (_12051)
  {
    _12050 = ::mosek::fusion::p_Set::make(_7226,_7234);
  }
  else
  {
    _12050 = ::mosek::fusion::p_Set::make(_7234,_7226);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7236 = _12050;
  _checked_ptr_1<int> _ptr__7236(_7236 ? _7236->raw() : nullptr,_7236 ? _7236->size(0) : 0);
  int _7237 = safe_mul( (int)((_7232)->size(0)),(int)((_7231)->size(0)) );
  int _7238 = safe_mul( (int)((_7232)->size(0)),(int)((_7228)->size(0)) );
  std::shared_ptr< monty::ndarray< long long,1 > > _7239 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7237)));
  _checked_ptr_1<long long> _ptr__7239(_7239 ? _7239->raw() : nullptr,_7239 ? _7239->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12052;
  bool _12053 = (NULL != _7230.get());
  if (_12053)
  {
    _12052 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7237)));
  }
  else
  {
    _12052 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7240 = _12052;
  _checked_ptr_1<double> _ptr__7240(_7240 ? _7240->raw() : nullptr,_7240 ? _7240->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7241 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7238)));
  _checked_ptr_1<double> _ptr__7241(_7241 ? _7241->raw() : nullptr,_7241 ? _7241->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7242 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7238)));
  _checked_ptr_1<long long> _ptr__7242(_7242 ? _7242->raw() : nullptr,_7242 ? _7242->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7243 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _7237,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7243(_7243 ? _7243->raw() : nullptr,_7243 ? _7243->size(0) : 0);
  int _7244 = (int)_ptr__7243[((int)((_7243)->size(0)) - (int)1)];
  if ((!_7235))
  {
    {
      long long _7245 = (long long)0;
      long long _7246 = (long long)0;
      int _12054 = (int)0;
      int _12055 = (int)((_7231)->size(0));
      for (int _7247 = _12054; _7247 < _12055; ++_7247)
      {
        {
          long long _7248 = (_ptr__7227[safe_add( _7247,(int)1 )] - _ptr__7227[_7247]);
          int _12056 = (int)0;
          int _12057 = (int)((_7232)->size(0));
          for (int _7249 = _12056; _7249 < _12057; ++_7249)
          {
            {
              _ptr__7231[_7245] = safe_add( safe_mul( _ptr__7231[_7247],_7234 ),_ptr__7233[_7249] );
              _ptr__7243[safe_add( _7245,(int)1 )] = safe_add( _ptr__7243[_7245],_7248 );
              ++ _7245;
              long long _12058 = _ptr__7227[_7247];
              long long _12059 = _ptr__7227[safe_add( _7247,(int)1 )];
              for (long long _7250 = _12058; _7250 < _12059; ++_7250)
              {
                {
                  _ptr__7242[_7246] = _ptr__7228[_7250];
                  _ptr__7241[_7246] = (_ptr__7229[_7250] * _ptr__7232[_7249]);
                  ++ _7246;
                }
              }
            }
          }
        }
      }
      if ((NULL != _7240.get()))
      {
        {
          int _7251 = (int)0;
          int _12060 = (int)0;
          int _12061 = (int)((_7231)->size(0));
          for (int _7252 = _12060; _7252 < _12061; ++_7252)
          {
            {
              int _12062 = (int)0;
              int _12063 = (int)((_7232)->size(0));
              for (int _7253 = _12062; _7253 < _12063; ++_7253)
              {
                {
                  _ptr__7240[_7251] = (_ptr__7232[_7253] * _ptr__7230[_7252]);
                  ++ _7251;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      long long _7254 = (long long)0;
      long long _7255 = (long long)0;
      int _12064 = (int)0;
      int _12065 = (int)((_7232)->size(0));
      for (int _7256 = _12064; _7256 < _12065; ++_7256)
      {
        {
          double _7257 = _ptr__7232[_7256];
          ::mosek::fusion::Utils::Tools::arraycopy(_7228,(long long)((int)0),_7242,_7255,(long long)(_7244));
          int _12066 = (int)0;
          int _12067 = _7244;
          for (int _7258 = _12066; _7258 < _12067; ++_7258)
          {
            {
              _ptr__7241[safe_add( _7255,_7258 )] = (_ptr__7229[_7258] * _ptr__7232[_7256]);
            }
          }
          int _12068 = (int)0;
          int _12069 = (int)((_7231)->size(0));
          for (int _7259 = _12068; _7259 < _12069; ++_7259)
          {
            {
              long long _7260 = (_ptr__7227[safe_add( _7259,(int)1 )] - _ptr__7227[_7259]);
              _ptr__7231[_7254] = safe_add( safe_mul( _ptr__7231[_7259],_7234 ),_ptr__7233[_7256] );
              _ptr__7243[safe_add( _7254,(int)1 )] = safe_add( _ptr__7243[_7254],_7260 );
              ++ _7254;
            }
          }
          _7255 += _7244;
        }
      }
      if ((NULL != _7240.get()))
      {
        {
          int _7261 = (int)0;
          int _12070 = (int)0;
          int _12071 = (int)((_7232)->size(0));
          for (int _7262 = _12070; _7262 < _12071; ++_7262)
          {
            {
              double _7263 = _ptr__7232[_7262];
              int _12072 = (int)0;
              int _12073 = (int)((_7231)->size(0));
              for (int _7264 = _12072; _7264 < _12073; ++_7264)
              {
                {
                  _ptr__7240[_7261] = (_ptr__7230[_7264] * _7263);
                  ++ _7261;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7243,_7242,_7241,_7240,_7236,_7239)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _7265,int _7266,std::shared_ptr< monty::ndarray< double,1 > > _7267,std::shared_ptr< monty::ndarray< int,1 > > _7268,int _7269,bool _7270){
  _checked_ptr_1<double> _ptr__7267(_7267 ? _7267->raw() : nullptr, _7267 ? _7267->size(0) : 0);
  _checked_ptr_1<int> _ptr__7268(_7268 ? _7268->raw() : nullptr, _7268 ? _7268->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12074;
  bool _12075 = (!_7270);
  if (_12075)
  {
    _12074 = ::mosek::fusion::p_Set::make(_7266,_7269);
  }
  else
  {
    _12074 = ::mosek::fusion::p_Set::make(_7269,_7266);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7271 = _12074;
  _checked_ptr_1<int> _ptr__7271(_7271 ? _7271->raw() : nullptr,_7271 ? _7271->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _12076;
  bool _12077 = (_7269 == (int)((_7267)->size(0)));
  if (_12077)
  {
    _12076 = nullptr;
  }
  else
  {
    _12076 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_7267)->size(0)),_7266 ))));
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _7272 = _12076;
  _checked_ptr_1<long long> _ptr__7272(_7272 ? _7272->raw() : nullptr,_7272 ? _7272->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7273 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7267)->size(0)),_7266 ))));
  _checked_ptr_1<double> _ptr__7273(_7273 ? _7273->raw() : nullptr,_7273 ? _7273->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7274 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7267)->size(0)),_7266 ))));
  _checked_ptr_1<double> _ptr__7274(_7274 ? _7274->raw() : nullptr,_7274 ? _7274->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7275 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_7267)->size(0)),_7266 ))));
  _checked_ptr_1<long long> _ptr__7275(_7275 ? _7275->raw() : nullptr,_7275 ? _7275->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7276 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( safe_mul( (int)((_7267)->size(0)),_7266 ),(int)1 ))));
  _checked_ptr_1<long long> _ptr__7276(_7276 ? _7276->raw() : nullptr,_7276 ? _7276->size(0) : 0);
  if ((_7269 == (int)((_7267)->size(0))))
  {
    {
      long long _7277 = (long long)0;
      if ((!_7270))
      {
        {
          int _12078 = (int)0;
          int _12079 = _7266;
          for (int _7278 = _12078; _7278 < _12079; ++_7278)
          {
            {
              int _12080 = (int)0;
              int _12081 = _7269;
              for (int _7279 = _12080; _7279 < _12081; ++_7279)
              {
                {
                  _ptr__7276[safe_add( _7277,(int)1 )] = safe_add( _7277,(int)1 );
                  _ptr__7275[_7277] = (long long)_7278;
                  _ptr__7274[_7277] = _ptr__7267[_7279];
                  ++ _7277;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _12082 = (int)0;
          int _12083 = _7269;
          for (int _7280 = _12082; _7280 < _12083; ++_7280)
          {
            {
              int _12084 = (int)0;
              int _12085 = _7266;
              for (int _7281 = _12084; _7281 < _12085; ++_7281)
              {
                {
                  _ptr__7276[safe_add( _7277,(int)1 )] = safe_add( _7277,(int)1 );
                  _ptr__7275[_7277] = (long long)_7281;
                  _ptr__7274[_7277] = _ptr__7267[_7280];
                  ++ _7277;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      long long _7282 = (long long)0;
      if ((!_7270))
      {
        {
          int _12086 = (int)0;
          int _12087 = _7266;
          for (int _7283 = _12086; _7283 < _12087; ++_7283)
          {
            {
              int _12088 = (int)0;
              int _12089 = (int)((_7267)->size(0));
              for (int _7284 = _12088; _7284 < _12089; ++_7284)
              {
                {
                  _ptr__7276[safe_add( _7282,(int)1 )] = safe_add( _7282,(int)1 );
                  _ptr__7275[_7282] = (long long)_7283;
                  _ptr__7274[_7282] = _ptr__7267[_7284];
                  _ptr__7272[_7282] = safe_add( safe_mul( _7283,_7269 ),_ptr__7268[_7284] );
                  ++ _7282;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _12090 = (int)0;
          int _12091 = (int)((_7267)->size(0));
          for (int _7285 = _12090; _7285 < _12091; ++_7285)
          {
            {
              int _12092 = (int)0;
              int _12093 = _7266;
              for (int _7286 = _12092; _7286 < _12093; ++_7286)
              {
                {
                  _ptr__7276[safe_add( _7282,(int)1 )] = safe_add( _7282,(int)1 );
                  _ptr__7275[_7282] = (long long)_7286;
                  _ptr__7274[_7282] = _ptr__7267[_7285];
                  _ptr__7272[_7282] = safe_add( safe_mul( _ptr__7268[_7285],_7266 ),_7286 );
                  ++ _7282;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7276,_7275,_7274,_7273,_7271,_7272)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7287) { return mosek::fusion::p_Expr::stack(_7287); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7287){
  if ((NULL == _7287.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12094 = (int)0;
  int _12095 = (int)((_7287)->size(0));
  for (int _7288 = _12094; _7288 < _12095; ++_7288)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7289 = ((*_7287)(_7288));
      if ((NULL == _7289.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int _12096 = (int)0;
      int _12097 = (int)((_7289)->size(0));
      for (int _7290 = _12096; _7290 < _12097; ++_7290)
      {
        {
          if ((NULL == ((*_7289)(_7290)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _12098;
  for (int _7292 = (int)0, _12099 = (int)((_7287)->size(0)); _7292 < _12099 ; ++_7292)
  {
    _12098.push_back(::mosek::fusion::p_Expr::stack_(((*_7287)(_7292)),(int)1));
  }
  auto _12100 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_12098.size()),_12098.begin(),_12098.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7291 = _12100;
  return ::mosek::fusion::p_Expr::stack_(_7291,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7293,    double _7294,    double _7295) { return mosek::fusion::p_Expr::vstack(_7293,_7294,_7295); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7293,double _7294,double _7295){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7293).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7294).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7295).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7296,    double _7297,    monty::rc_ptr< ::mosek::fusion::Expression > _7298) { return mosek::fusion::p_Expr::vstack(_7296,_7297,_7298); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7296,double _7297,monty::rc_ptr< ::mosek::fusion::Expression > _7298){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7296).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7297).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7298.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7299,    monty::rc_ptr< ::mosek::fusion::Expression > _7300,    double _7301) { return mosek::fusion::p_Expr::vstack(_7299,_7300,_7301); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7299,monty::rc_ptr< ::mosek::fusion::Expression > _7300,double _7301){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7299).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7300.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7301).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7302,    monty::rc_ptr< ::mosek::fusion::Expression > _7303,    monty::rc_ptr< ::mosek::fusion::Expression > _7304) { return mosek::fusion::p_Expr::vstack(_7302,_7303,_7304); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7302,monty::rc_ptr< ::mosek::fusion::Expression > _7303,monty::rc_ptr< ::mosek::fusion::Expression > _7304){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7302).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7303.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7304.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7305,    double _7306,    double _7307) { return mosek::fusion::p_Expr::vstack(_7305,_7306,_7307); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7305,double _7306,double _7307){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7305.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7306).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7307).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7308,    double _7309,    monty::rc_ptr< ::mosek::fusion::Expression > _7310) { return mosek::fusion::p_Expr::vstack(_7308,_7309,_7310); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7308,double _7309,monty::rc_ptr< ::mosek::fusion::Expression > _7310){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7308.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7309).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7310.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7311,    monty::rc_ptr< ::mosek::fusion::Expression > _7312,    double _7313) { return mosek::fusion::p_Expr::vstack(_7311,_7312,_7313); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7311,monty::rc_ptr< ::mosek::fusion::Expression > _7312,double _7313){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7311.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7312.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7313).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7314,    monty::rc_ptr< ::mosek::fusion::Expression > _7315,    monty::rc_ptr< ::mosek::fusion::Expression > _7316) { return mosek::fusion::p_Expr::vstack(_7314,_7315,_7316); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7314,monty::rc_ptr< ::mosek::fusion::Expression > _7315,monty::rc_ptr< ::mosek::fusion::Expression > _7316){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7314.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7315.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7316.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7317,    monty::rc_ptr< ::mosek::fusion::Expression > _7318) { return mosek::fusion::p_Expr::vstack(_7317,_7318); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7317,monty::rc_ptr< ::mosek::fusion::Expression > _7318){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7317).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7318.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7319,    double _7320) { return mosek::fusion::p_Expr::vstack(_7319,_7320); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7319,double _7320){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7319.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7320).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7321,    monty::rc_ptr< ::mosek::fusion::Expression > _7322) { return mosek::fusion::p_Expr::vstack(_7321,_7322); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7321,monty::rc_ptr< ::mosek::fusion::Expression > _7322){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7321.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7322.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7323) { return mosek::fusion::p_Expr::vstack(_7323); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7323){
  if ((NULL == _7323.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12101 = (int)0;
  int _12102 = (int)((_7323)->size(0));
  for (int _7324 = _12101; _7324 < _12102; ++_7324)
  {
    {
      if ((NULL == ((*_7323)(_7324)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7323,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7325,    monty::rc_ptr< ::mosek::fusion::Expression > _7326,    monty::rc_ptr< ::mosek::fusion::Expression > _7327) { return mosek::fusion::p_Expr::hstack(_7325,_7326,_7327); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7325,monty::rc_ptr< ::mosek::fusion::Expression > _7326,monty::rc_ptr< ::mosek::fusion::Expression > _7327){
  if (((NULL == _7325.get()) || ((NULL == _7326.get()) || (NULL == _7327.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7325.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7326.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7327.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7328,    monty::rc_ptr< ::mosek::fusion::Expression > _7329,    double _7330) { return mosek::fusion::p_Expr::hstack(_7328,_7329,_7330); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7328,monty::rc_ptr< ::mosek::fusion::Expression > _7329,double _7330){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7328.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7329.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7330).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7331,    double _7332,    monty::rc_ptr< ::mosek::fusion::Expression > _7333) { return mosek::fusion::p_Expr::hstack(_7331,_7332,_7333); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7331,double _7332,monty::rc_ptr< ::mosek::fusion::Expression > _7333){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7331.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7332).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7333.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7334,    double _7335,    double _7336) { return mosek::fusion::p_Expr::hstack(_7334,_7335,_7336); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7334,double _7335,double _7336){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7334.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7335).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7336).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7337,    monty::rc_ptr< ::mosek::fusion::Expression > _7338,    monty::rc_ptr< ::mosek::fusion::Expression > _7339) { return mosek::fusion::p_Expr::hstack(_7337,_7338,_7339); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7337,monty::rc_ptr< ::mosek::fusion::Expression > _7338,monty::rc_ptr< ::mosek::fusion::Expression > _7339){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7337).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7338.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7339.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7340,    monty::rc_ptr< ::mosek::fusion::Expression > _7341,    double _7342) { return mosek::fusion::p_Expr::hstack(_7340,_7341,_7342); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7340,monty::rc_ptr< ::mosek::fusion::Expression > _7341,double _7342){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7340).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7341.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7342).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7343,    double _7344,    monty::rc_ptr< ::mosek::fusion::Expression > _7345) { return mosek::fusion::p_Expr::hstack(_7343,_7344,_7345); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7343,double _7344,monty::rc_ptr< ::mosek::fusion::Expression > _7345){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7343).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7344).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7345.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7346,    monty::rc_ptr< ::mosek::fusion::Expression > _7347) { return mosek::fusion::p_Expr::hstack(_7346,_7347); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7346,monty::rc_ptr< ::mosek::fusion::Expression > _7347){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7346).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7347.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7348,    double _7349) { return mosek::fusion::p_Expr::hstack(_7348,_7349); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7348,double _7349){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7348.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7349).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7350,    monty::rc_ptr< ::mosek::fusion::Expression > _7351) { return mosek::fusion::p_Expr::hstack(_7350,_7351); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7350,monty::rc_ptr< ::mosek::fusion::Expression > _7351){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7350.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7351.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7352) { return mosek::fusion::p_Expr::hstack(_7352); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7352){
  if ((NULL == _7352.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12103 = (int)0;
  int _12104 = (int)((_7352)->size(0));
  for (int _7353 = _12103; _7353 < _12104; ++_7353)
  {
    {
      if ((NULL == ((*_7352)(_7353)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7352,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7354,    monty::rc_ptr< ::mosek::fusion::Expression > _7355,    monty::rc_ptr< ::mosek::fusion::Expression > _7356,    monty::rc_ptr< ::mosek::fusion::Expression > _7357) { return mosek::fusion::p_Expr::stack(_7354,_7355,_7356,_7357); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7354,monty::rc_ptr< ::mosek::fusion::Expression > _7355,monty::rc_ptr< ::mosek::fusion::Expression > _7356,monty::rc_ptr< ::mosek::fusion::Expression > _7357){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7355.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7356.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7357.get())}),_7354);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7358,    monty::rc_ptr< ::mosek::fusion::Expression > _7359,    monty::rc_ptr< ::mosek::fusion::Expression > _7360,    double _7361) { return mosek::fusion::p_Expr::stack(_7358,_7359,_7360,_7361); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7358,monty::rc_ptr< ::mosek::fusion::Expression > _7359,monty::rc_ptr< ::mosek::fusion::Expression > _7360,double _7361){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7359.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7360.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7361).get())}),_7358);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7362,    monty::rc_ptr< ::mosek::fusion::Expression > _7363,    double _7364,    monty::rc_ptr< ::mosek::fusion::Expression > _7365) { return mosek::fusion::p_Expr::stack(_7362,_7363,_7364,_7365); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7362,monty::rc_ptr< ::mosek::fusion::Expression > _7363,double _7364,monty::rc_ptr< ::mosek::fusion::Expression > _7365){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7363.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7364).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7365.get())}),_7362);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7366,    monty::rc_ptr< ::mosek::fusion::Expression > _7367,    double _7368,    double _7369) { return mosek::fusion::p_Expr::stack(_7366,_7367,_7368,_7369); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7366,monty::rc_ptr< ::mosek::fusion::Expression > _7367,double _7368,double _7369){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7367.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7368).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7369).get())}),_7366);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7370,    double _7371,    monty::rc_ptr< ::mosek::fusion::Expression > _7372,    monty::rc_ptr< ::mosek::fusion::Expression > _7373) { return mosek::fusion::p_Expr::stack(_7370,_7371,_7372,_7373); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7370,double _7371,monty::rc_ptr< ::mosek::fusion::Expression > _7372,monty::rc_ptr< ::mosek::fusion::Expression > _7373){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7371).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7372.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7373.get())}),_7370);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7374,    double _7375,    monty::rc_ptr< ::mosek::fusion::Expression > _7376,    double _7377) { return mosek::fusion::p_Expr::stack(_7374,_7375,_7376,_7377); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7374,double _7375,monty::rc_ptr< ::mosek::fusion::Expression > _7376,double _7377){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7375).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7376.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7377).get())}),_7374);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7378,    double _7379,    double _7380,    monty::rc_ptr< ::mosek::fusion::Expression > _7381) { return mosek::fusion::p_Expr::stack(_7378,_7379,_7380,_7381); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7378,double _7379,double _7380,monty::rc_ptr< ::mosek::fusion::Expression > _7381){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7379).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7380).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7381.get())}),_7378);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7382,    double _7383,    monty::rc_ptr< ::mosek::fusion::Expression > _7384) { return mosek::fusion::p_Expr::stack(_7382,_7383,_7384); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7382,double _7383,monty::rc_ptr< ::mosek::fusion::Expression > _7384){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7383).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7384.get())}),_7382);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7385,    monty::rc_ptr< ::mosek::fusion::Expression > _7386,    double _7387) { return mosek::fusion::p_Expr::stack(_7385,_7386,_7387); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7385,monty::rc_ptr< ::mosek::fusion::Expression > _7386,double _7387){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7386.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7387).get())}),_7385);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7388,    monty::rc_ptr< ::mosek::fusion::Expression > _7389,    monty::rc_ptr< ::mosek::fusion::Expression > _7390) { return mosek::fusion::p_Expr::stack(_7388,_7389,_7390); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7388,monty::rc_ptr< ::mosek::fusion::Expression > _7389,monty::rc_ptr< ::mosek::fusion::Expression > _7390){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7389.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7390.get())}),_7388);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7391,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7392) { return mosek::fusion::p_Expr::stack(_7391,_7392); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7391,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7392){
  return ::mosek::fusion::p_Expr::stack_(_7392,_7391);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7393,int _7394){
  if (((int)((_7393)->size(0)) == (int)1))
  {
    {
      return ((*_7393)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_7393,_7394),_7394)).as<::mosek::fusion::Expression>();
    }
  }
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7395,int _7396){
  int _7397 = (int)((_7395)->size(0));
  std::vector<int> _12105;
  for (int _7399 = (int)0, _12106 = _7397; _7399 < _12106 ; ++_7399)
  {
    _12105.push_back(((*_7395)(_7399))->getND());
  }
  auto _12107 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12105.size()),_12105.begin(),_12105.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7398 = _12107;
  _checked_ptr_1<int> _ptr__7398(_7398 ? _7398->raw() : nullptr,_7398 ? _7398->size(0) : 0);
  int _7400 = _ptr__7398[(int)0];
  int _7401 = _ptr__7398[(int)0];
  int _12108 = (int)1;
  int _12109 = _7397;
  for (int _7402 = _12108; _7402 < _12109; ++_7402)
  {
    {
      if ((_ptr__7398[_7402] < _7401))
      {
        {
          _7401 = _ptr__7398[_7402];
        }
      }
      {}
      if ((_ptr__7398[_7402] > _7400))
      {
        {
          _7400 = _ptr__7398[_7402];
        }
      }
      {}
    }
  }
  if ((_7400 < _7396))
  {
    {
      _7400 = _7396;
    }
  }
  {}
  if ((_7401 < _7400))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7403 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_7397)));
      std::shared_ptr< monty::ndarray< int,1 > > _7404 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7400)));
      _checked_ptr_1<int> _ptr__7404(_7404 ? _7404->raw() : nullptr,_7404 ? _7404->size(0) : 0);
      int _12110 = (int)0;
      int _12111 = _7397;
      for (int _7405 = _12110; _7405 < _12111; ++_7405)
      {
        {
          if ((((*_7395)(_7405))->getND() == _7400))
          {
            {
              ((*_7403)(_7405)) = ((*_7395)(_7405));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int,1 > > _7406 = ((*_7395)(_7405))->getShape();
              _checked_ptr_1<int> _ptr__7406(_7406 ? _7406->raw() : nullptr,_7406 ? _7406->size(0) : 0);
              int _12112 = (int)0;
              int _12113 = (int)((_7406)->size(0));
              for (int _7407 = _12112; _7407 < _12113; ++_7407)
              {
                {
                  _ptr__7404[_7407] = _ptr__7406[_7407];
                }
              }
              int _12114 = (int)((_7406)->size(0));
              int _12115 = _7400;
              for (int _7408 = _12114; _7408 < _12115; ++_7408)
              {
                {
                  _ptr__7404[_7408] = (int)1;
                }
              }
              ((*_7403)(_7405)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7404,((*_7395)(_7405)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _7403;
    }
  }
  else
  {
    {
      return _7395;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _7409,    int _7410,    int _7411) { return mosek::fusion::p_Expr::repeat(_7409,_7410,_7411); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _7409,int _7410,int _7411){
  return ::mosek::fusion::p_Expr::repeat(_7409->__mosek_2fusion_2Variable__asExpr(),_7410,_7411);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _7412,    int _7413,    int _7414) { return mosek::fusion::p_Expr::repeat(_7412,_7413,_7414); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _7412,int _7413,int _7414){
  if ((_7413 <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  if (((_7414 < (int)0) || (_7414 > _7412->getND())))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  else
  {
    {
      if ((_7414 == _7412->getND()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7415 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _7414,(int)1 ))));
          _checked_ptr_1<int> _ptr__7415(_7415 ? _7415->raw() : nullptr,_7415 ? _7415->size(0) : 0);
          int _12116 = (int)0;
          int _12117 = _7414;
          for (int _7416 = _12116; _7416 < _12117; ++_7416)
          {
            {
              _ptr__7415[_7416] = _7412->getDim(_7416);
            }
          }
          _ptr__7415[_7414] = (int)1;
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(::mosek::fusion::p_Expr::reshape(_7412,_7415),_7414,_7413)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(_7412,_7414,_7413)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7417) { return mosek::fusion::p_Expr::add(_7417); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7417){
  std::vector<double> _12118;
  for (int _7418 = (int)0, _12119 = (int)((_7417)->size(0)); _7418 < _12119 ; ++_7418)
  {
    _12118.push_back(1.0);
  }
  auto _12120 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12118.size()),_12118.begin(),_12118.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_7417,_12120)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7419) { return mosek::fusion::p_Expr::add(_7419); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7419){
  if ((NULL == _7419.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_7419)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)((int)0)}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7419)->size(0)) > (int)0) && (NULL == ((*_7419)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int _7420 = ((*_7419)((int)0))->getND();
  int _12121 = (int)1;
  int _12122 = (int)((_7419)->size(0));
  for (int _7421 = _12121; _7421 < _12122; ++_7421)
  {
    {
      if ((_7420 < ((*_7419)(_7421))->getND()))
      {
        {
          _7420 = ((*_7419)(_7421))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,2 > > _7422 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_7419)->size(0)),_7420)));
  int _12123 = (int)0;
  int _12124 = (int)((_7419)->size(0));
  for (int _7423 = _12123; _7423 < _12124; ++_7423)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7424 = ((*_7419)(_7423))->getShape();
      _checked_ptr_1<int> _ptr__7424(_7424 ? _7424->raw() : nullptr,_7424 ? _7424->size(0) : 0);
      int _12125 = (int)0;
      int _12126 = (int)((_7424)->size(0));
      for (int _7425 = _12125; _7425 < _12126; ++_7425)
      {
        {
          ((*_7422)(_7423,_7425)) = _ptr__7424[_7425];
        }
      }
      int _12127 = (int)((_7424)->size(0));
      int _12128 = _7420;
      for (int _7426 = _12127; _7426 < _12128; ++_7426)
      {
        {
          ((*_7422)(_7423,_7426)) = (int)1;
        }
      }
    }
  }
  int _12129 = (int)1;
  int _12130 = (int)((_7419)->size(0));
  for (int _7427 = _12129; _7427 < _12130; ++_7427)
  {
    {
      int _12131 = (int)0;
      int _12132 = _7420;
      for (int _7428 = _12131; _7428 < _12132; ++_7428)
      {
        {
          if ((((*_7422)((int)0,_7428)) != ((*_7422)(_7427,_7428))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _12133;
  for (int _7430 = (int)0, _12134 = _7420; _7430 < _12134 ; ++_7430)
  {
    _12133.push_back(((*_7422)((int)0,_7430)));
  }
  auto _12135 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12133.size()),_12133.begin(),_12133.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7429 = _12135;
  _checked_ptr_1<int> _ptr__7429(_7429 ? _7429->raw() : nullptr,_7429 ? _7429->size(0) : 0);
  int _7431 = (int)1;
  int _12136 = (int)0;
  int _12137 = _7420;
  for (int _7432 = _12136; _7432 < _12137; ++_7432)
  {
    {
      _7431 *= _ptr__7429[_7432];
    }
  }
  int _7433 = (int)0;
  int _7434 = (int)0;
  int _12138 = (int)0;
  int _12139 = (int)((_7419)->size(0));
  for (int _7435 = _12138; _7435 < _12139; ++_7435)
  {
    {
      int _7436 = ((*_7419)(_7435))->numInst();
      _7433 += _7436;
      int _12140;
      bool _12141 = (_7434 > _7436);
      if (_12141)
      {
        _12140 = _7434;
      }
      else
      {
        _12140 = _7436;
      }
      _7434 = _12140;
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _7437 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _7431,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7437(_7437 ? _7437->raw() : nullptr,_7437 ? _7437->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7438 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7433)));
  _checked_ptr_1<long long> _ptr__7438(_7438 ? _7438->raw() : nullptr,_7438 ? _7438->size(0) : 0);
  std::vector<double> _12142;
  for (int _7440 = (int)0, _12143 = _7433; _7440 < _12143 ; ++_7440)
  {
    _12142.push_back(1.0);
  }
  auto _12144 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12142.size()),_12142.begin(),_12142.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7439 = _12144;
  _checked_ptr_1<double> _ptr__7439(_7439 ? _7439->raw() : nullptr,_7439 ? _7439->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< long long,1 > > _7441 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7434)));
    _checked_ptr_1<long long> _ptr__7441(_7441 ? _7441->raw() : nullptr,_7441 ? _7441->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _7442 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7434)));
    _checked_ptr_1<long long> _ptr__7442(_7442 ? _7442->raw() : nullptr,_7442 ? _7442->size(0) : 0);
    int _12145 = (int)0;
    int _12146 = (int)((_7419)->size(0));
    for (int _7443 = _12145; _7443 < _12146; ++_7443)
    {
      {
        int _7444 = ((*_7419)(_7443))->inst((int)0,_7441,(int)0,_7442);
        int _12147 = (int)0;
        int _12148 = _7444;
        for (int _7445 = _12147; _7445 < _12148; ++_7445)
        {
          {
            _ptr__7437[safe_add( _ptr__7441[_7445],(int)1 )] += (int)1;
          }
        }
      }
    }
    int _12149 = (int)0;
    int _12150 = _7431;
    for (int _7446 = _12149; _7446 < _12150; ++_7446)
    {
      {
        _ptr__7437[safe_add( _7446,(int)1 )] += _ptr__7437[_7446];
      }
    }
    int _12151 = (int)0;
    int _12152 = (int)((_7419)->size(0));
    for (int _7447 = _12151; _7447 < _12152; ++_7447)
    {
      {
        int _7448 = ((*_7419)(_7447))->inst((int)0,_7441,(int)0,_7442);
        int _12153 = (int)0;
        int _12154 = _7448;
        for (int _7449 = _12153; _7449 < _12154; ++_7449)
        {
          {
            _ptr__7438[_ptr__7437[_ptr__7441[_7449]]] = _ptr__7442[_7449];
            ++ _ptr__7437[_ptr__7441[_7449]];
          }
        }
      }
    }
    int _12155 = (int)0;
    int _12156 = _7431;
    for (int _7450 = _12155; _7450 < _12156; ++_7450)
    {
      {
        _ptr__7437[(_7431 - _7450)] = _ptr__7437[((_7431 - _7450) - (int)1)];
      }
    }
    _ptr__7437[(int)0] = (int)0;
  }
  std::vector<double> _12157;
  for (int _7451 = (int)0, _12158 = _7431; _7451 < _12158 ; ++_7451)
  {
    _12157.push_back(0.0);
  }
  auto _12159 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12157.size()),_12157.begin(),_12157.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_7437,_7438,_7439,_12159,_7429,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _7452,double _7453,monty::rc_ptr< ::mosek::fusion::Expression > _7454,double _7455){
  int _7456 = _7452->getND();
  int _7457 = _7454->getND();
  if ((_7456 == _7457))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7452,_7454,_7453,_7455)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _12160;
      bool _12161 = (_7456 > _7457);
      if (_12161)
      {
        _12160 = _7456;
      }
      else
      {
        _12160 = _7457;
      }
      int _7458 = _12160;
      std::shared_ptr< monty::ndarray< int,1 > > _7459 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7458)));
      _checked_ptr_1<int> _ptr__7459(_7459 ? _7459->raw() : nullptr,_7459 ? _7459->size(0) : 0);
      if ((_7456 < _7457))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7460 = _7452->getShape();
          _checked_ptr_1<int> _ptr__7460(_7460 ? _7460->raw() : nullptr,_7460 ? _7460->size(0) : 0);
          int _12162 = (int)0;
          int _12163 = _7456;
          for (int _7461 = _12162; _7461 < _12163; ++_7461)
          {
            {
              _ptr__7459[_7461] = _ptr__7460[_7461];
            }
          }
          int _12164 = _7456;
          int _12165 = _7458;
          for (int _7462 = _12164; _7462 < _12165; ++_7462)
          {
            {
              _ptr__7459[_7462] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7459,_7452)).as<::mosek::fusion::Expression>(),_7454,_7453,_7455)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7463 = _7454->getShape();
          _checked_ptr_1<int> _ptr__7463(_7463 ? _7463->raw() : nullptr,_7463 ? _7463->size(0) : 0);
          int _12166 = (int)0;
          int _12167 = _7457;
          for (int _7464 = _12166; _7464 < _12167; ++_7464)
          {
            {
              _ptr__7459[_7464] = _ptr__7463[_7464];
            }
          }
          int _12168 = _7457;
          int _12169 = _7458;
          for (int _7465 = _12168; _7465 < _12169; ++_7465)
          {
            {
              _ptr__7459[_7465] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7452,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7459,_7454)).as<::mosek::fusion::Expression>(),_7453,_7455)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( monty::rc_ptr< ::mosek::fusion::Expression > _7466) { return mosek::fusion::p_Expr::transpose(_7466); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _7466){
  if ((_7466->getND() == (int)0))
  {
    {
      return _7466;
    }
  }
  else if((_7466->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7466->getDim((int)0))}),_7466)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7466->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_7466)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7467,    monty::rc_ptr< ::mosek::fusion::Expression > _7468) { return mosek::fusion::p_Expr::mulElm(_7467,_7468); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _7467,monty::rc_ptr< ::mosek::fusion::Expression > _7468){
  return ::mosek::fusion::p_Expr::mulElm_(_7467,_7468);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7469,    monty::rc_ptr< ::mosek::fusion::Expression > _7470) { return mosek::fusion::p_Expr::mulElm(_7469,_7470); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7469,monty::rc_ptr< ::mosek::fusion::Expression > _7470){
  return ::mosek::fusion::p_Expr::mulElm_(_7469,_7470);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _7471,    monty::rc_ptr< ::mosek::fusion::Expression > _7472) { return mosek::fusion::p_Expr::mulElm(_7471,_7472); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _7471,monty::rc_ptr< ::mosek::fusion::Expression > _7472){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7471),_7472);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _7473,    monty::rc_ptr< ::mosek::fusion::Expression > _7474) { return mosek::fusion::p_Expr::mulElm(_7473,_7474); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _7473,monty::rc_ptr< ::mosek::fusion::Expression > _7474){
  _checked_ptr_1<double> _ptr__7473(_7473 ? _7473->raw() : nullptr, _7473 ? _7473->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7473,_7474);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7475,    monty::rc_ptr< ::mosek::fusion::Matrix > _7476) { return mosek::fusion::p_Expr::mulElm(_7475,_7476); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7475,monty::rc_ptr< ::mosek::fusion::Matrix > _7476){
  return ::mosek::fusion::p_Expr::mulElm_(_7476,_7475);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7477,    std::shared_ptr< monty::ndarray< double,2 > > _7478) { return mosek::fusion::p_Expr::mulElm(_7477,_7478); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7477,std::shared_ptr< monty::ndarray< double,2 > > _7478){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7478),_7477);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7479,    std::shared_ptr< monty::ndarray< double,1 > > _7480) { return mosek::fusion::p_Expr::mulElm(_7479,_7480); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7479,std::shared_ptr< monty::ndarray< double,1 > > _7480){
  _checked_ptr_1<double> _ptr__7480(_7480 ? _7480->raw() : nullptr, _7480 ? _7480->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7480,_7479);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7481,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7482) { return mosek::fusion::p_Expr::mulElm(_7481,_7482); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7481,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7482){
  return ::mosek::fusion::p_Expr::mulElm_(_7482,_7481);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7483,    monty::rc_ptr< ::mosek::fusion::Expression > _7484) { return mosek::fusion::p_Expr::mulElm(_7483,_7484); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Parameter > _7483,monty::rc_ptr< ::mosek::fusion::Expression > _7484){
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7483,_7484)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7485,    monty::rc_ptr< ::mosek::fusion::Parameter > _7486) { return mosek::fusion::p_Expr::mulElm(_7485,_7486); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7485,monty::rc_ptr< ::mosek::fusion::Parameter > _7486){
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7486,_7485)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7487,    monty::rc_ptr< ::mosek::fusion::Expression > _7488) { return mosek::fusion::p_Expr::sub(_7487,_7488); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7487,monty::rc_ptr< ::mosek::fusion::Expression > _7488){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7487),1.0,_7488,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7489,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7490) { return mosek::fusion::p_Expr::sub(_7489,_7490); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7489,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7490){
  return ::mosek::fusion::p_Expr::add_(_7489,1.0,::mosek::fusion::p_Expr::constTerm(_7490),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7491,    monty::rc_ptr< ::mosek::fusion::Expression > _7492) { return mosek::fusion::p_Expr::sub(_7491,_7492); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _7491,monty::rc_ptr< ::mosek::fusion::Expression > _7492){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7491),1.0,_7492,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7493,    monty::rc_ptr< ::mosek::fusion::Matrix > _7494) { return mosek::fusion::p_Expr::sub(_7493,_7494); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7493,monty::rc_ptr< ::mosek::fusion::Matrix > _7494){
  return ::mosek::fusion::p_Expr::add_(_7493,1.0,::mosek::fusion::p_Expr::constTerm(_7494),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _7495,    monty::rc_ptr< ::mosek::fusion::Expression > _7496) { return mosek::fusion::p_Expr::sub(_7495,_7496); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _7495,monty::rc_ptr< ::mosek::fusion::Expression > _7496){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7496->getShape(),_7495),1.0,_7496,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7497,    double _7498) { return mosek::fusion::p_Expr::sub(_7497,_7498); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7497,double _7498){
  return ::mosek::fusion::p_Expr::add_(_7497,1.0,::mosek::fusion::p_Expr::constTerm(_7497->getShape(),_7498),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _7499,    monty::rc_ptr< ::mosek::fusion::Expression > _7500) { return mosek::fusion::p_Expr::sub(_7499,_7500); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _7499,monty::rc_ptr< ::mosek::fusion::Expression > _7500){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7499),1.0,_7500,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _7501,    monty::rc_ptr< ::mosek::fusion::Expression > _7502) { return mosek::fusion::p_Expr::sub(_7501,_7502); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _7501,monty::rc_ptr< ::mosek::fusion::Expression > _7502){
  _checked_ptr_1<double> _ptr__7501(_7501 ? _7501->raw() : nullptr, _7501 ? _7501->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7501),1.0,_7502,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7503,    std::shared_ptr< monty::ndarray< double,2 > > _7504) { return mosek::fusion::p_Expr::sub(_7503,_7504); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7503,std::shared_ptr< monty::ndarray< double,2 > > _7504){
  return ::mosek::fusion::p_Expr::add_(_7503,1.0,::mosek::fusion::p_Expr::constTerm(_7504),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7505,    std::shared_ptr< monty::ndarray< double,1 > > _7506) { return mosek::fusion::p_Expr::sub(_7505,_7506); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7505,std::shared_ptr< monty::ndarray< double,1 > > _7506){
  _checked_ptr_1<double> _ptr__7506(_7506 ? _7506->raw() : nullptr, _7506 ? _7506->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7505,1.0,::mosek::fusion::p_Expr::constTerm(_7506),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7507,    monty::rc_ptr< ::mosek::fusion::Expression > _7508) { return mosek::fusion::p_Expr::sub(_7507,_7508); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7507,monty::rc_ptr< ::mosek::fusion::Expression > _7508){
  return ::mosek::fusion::p_Expr::add_(_7507,1.0,_7508,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7509,    monty::rc_ptr< ::mosek::fusion::Expression > _7510) { return mosek::fusion::p_Expr::add(_7509,_7510); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7509,monty::rc_ptr< ::mosek::fusion::Expression > _7510){
  return ::mosek::fusion::p_Expr::add_(_7510,1.0,::mosek::fusion::p_Expr::constTerm(_7509),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7511,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7512) { return mosek::fusion::p_Expr::add(_7511,_7512); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7511,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7512){
  return ::mosek::fusion::p_Expr::add_(_7511,1.0,::mosek::fusion::p_Expr::constTerm(_7512),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7513,    monty::rc_ptr< ::mosek::fusion::Expression > _7514) { return mosek::fusion::p_Expr::add(_7513,_7514); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _7513,monty::rc_ptr< ::mosek::fusion::Expression > _7514){
  return ::mosek::fusion::p_Expr::add_(_7514,1.0,::mosek::fusion::p_Expr::constTerm(_7513),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7515,    monty::rc_ptr< ::mosek::fusion::Matrix > _7516) { return mosek::fusion::p_Expr::add(_7515,_7516); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7515,monty::rc_ptr< ::mosek::fusion::Matrix > _7516){
  return ::mosek::fusion::p_Expr::add_(_7515,1.0,::mosek::fusion::p_Expr::constTerm(_7516),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _7517,    monty::rc_ptr< ::mosek::fusion::Expression > _7518) { return mosek::fusion::p_Expr::add(_7517,_7518); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _7517,monty::rc_ptr< ::mosek::fusion::Expression > _7518){
  return ::mosek::fusion::p_Expr::add_(_7518,1.0,::mosek::fusion::p_Expr::constTerm(_7518->getShape(),_7517),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7519,    double _7520) { return mosek::fusion::p_Expr::add(_7519,_7520); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7519,double _7520){
  return ::mosek::fusion::p_Expr::add_(_7519,1.0,::mosek::fusion::p_Expr::constTerm(_7519->getShape(),_7520),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _7521,    monty::rc_ptr< ::mosek::fusion::Expression > _7522) { return mosek::fusion::p_Expr::add(_7521,_7522); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _7521,monty::rc_ptr< ::mosek::fusion::Expression > _7522){
  return ::mosek::fusion::p_Expr::add_(_7522,1.0,::mosek::fusion::p_Expr::constTerm(_7521),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _7523,    monty::rc_ptr< ::mosek::fusion::Expression > _7524) { return mosek::fusion::p_Expr::add(_7523,_7524); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _7523,monty::rc_ptr< ::mosek::fusion::Expression > _7524){
  _checked_ptr_1<double> _ptr__7523(_7523 ? _7523->raw() : nullptr, _7523 ? _7523->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7524,1.0,::mosek::fusion::p_Expr::constTerm(_7523),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7525,    std::shared_ptr< monty::ndarray< double,2 > > _7526) { return mosek::fusion::p_Expr::add(_7525,_7526); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7525,std::shared_ptr< monty::ndarray< double,2 > > _7526){
  return ::mosek::fusion::p_Expr::add_(_7525,1.0,::mosek::fusion::p_Expr::constTerm(_7526),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7527,    std::shared_ptr< monty::ndarray< double,1 > > _7528) { return mosek::fusion::p_Expr::add(_7527,_7528); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7527,std::shared_ptr< monty::ndarray< double,1 > > _7528){
  _checked_ptr_1<double> _ptr__7528(_7528 ? _7528->raw() : nullptr, _7528 ? _7528->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7527,1.0,::mosek::fusion::p_Expr::constTerm(_7528),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7529,    monty::rc_ptr< ::mosek::fusion::Expression > _7530) { return mosek::fusion::p_Expr::add(_7529,_7530); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7529,monty::rc_ptr< ::mosek::fusion::Expression > _7530){
  return ::mosek::fusion::p_Expr::add_(_7529,1.0,_7530,1.0);
}
int mosek::fusion::Expr :: getND() { return mosek::fusion::p_Expr::_get_impl(this)->getND(); }int mosek::fusion::p_Expr::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Expr :: getShape() { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Expr::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7531,monty::rc_ptr< ::mosek::fusion::WorkStack > _7532,monty::rc_ptr< ::mosek::fusion::WorkStack > _7533) { mosek::fusion::p_Expr::_get_impl(this)->eval(_7531,_7532,_7533); }void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7531,monty::rc_ptr< ::mosek::fusion::WorkStack > _7532,monty::rc_ptr< ::mosek::fusion::WorkStack > _7533){
  int _7534 = ((int)((ptrb)->size(0)) - (int)1);
  int _7535 = safe_add( (int)((*ptrb)(_7534)),_7534 );
  int _7536 = (int)((shape)->size(0));
  _7531->alloc_expr(_7536,_7534,_7535,(NULL != inst.get()));
  int _7537 = mosek::fusion::p_WorkStack::_get_impl(_7531)->ptr_base;
  int _7538 = mosek::fusion::p_WorkStack::_get_impl(_7531)->nidxs_base;
  int _7539 = mosek::fusion::p_WorkStack::_get_impl(_7531)->sp_base;
  int _7540 = mosek::fusion::p_WorkStack::_get_impl(_7531)->cof_base;
  int _7541 = mosek::fusion::p_WorkStack::_get_impl(_7531)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _7542 = mosek::fusion::p_WorkStack::_get_impl(_7531)->i32;
  _checked_ptr_1<int> _ptr__7542(_7542 ? _7542->raw() : nullptr,_7542 ? _7542->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7543 = mosek::fusion::p_WorkStack::_get_impl(_7531)->i64;
  _checked_ptr_1<long long> _ptr__7543(_7543 ? _7543->raw() : nullptr,_7543 ? _7543->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7544 = mosek::fusion::p_WorkStack::_get_impl(_7531)->f64;
  _checked_ptr_1<double> _ptr__7544(_7544 ? _7544->raw() : nullptr,_7544 ? _7544->size(0) : 0);
  {
    int _12170 = (int)0;
    int _12171 = _7536;
    for (int _7545 = _12170; _7545 < _12171; ++_7545)
    {
      {
        _ptr__7542[safe_add( _7541,_7545 )] = ((*shape)(_7545));
      }
    }
    _ptr__7542[_7537] = (int)0;
    int _7546 = (int)0;
    int _12172 = (int)0;
    int _12173 = _7534;
    for (int _7547 = _12172; _7547 < _12173; ++_7547)
    {
      {
        long long _12174 = ((*ptrb)(_7547));
        long long _12175 = ((*ptrb)(safe_add( _7547,(int)1 )));
        for (long long _7548 = _12174; _7548 < _12175; ++_7548)
        {
          {
            _ptr__7543[safe_add( _7538,_7546 )] = ((*subj)(_7548));
            _ptr__7544[safe_add( _7540,_7546 )] = ((*cof_v)(_7548));
            ++ _7546;
          }
        }
        _ptr__7543[safe_add( _7538,_7546 )] = (int)0;
        _ptr__7544[safe_add( _7540,_7546 )] = ((*bfix)(_7547));
        ++ _7546;
        _ptr__7542[safe_add( safe_add( _7537,_7547 ),(int)1 )] = _7546;
      }
    }
  }
}
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< long long,1 > > _7549,std::shared_ptr< monty::ndarray< long long,1 > > _7550,std::shared_ptr< monty::ndarray< double,1 > > _7551,std::shared_ptr< monty::ndarray< double,1 > > _7552,std::shared_ptr< monty::ndarray< int,1 > > _7553,std::shared_ptr< monty::ndarray< long long,1 > > _7554){
  _checked_ptr_1<long long> _ptr__7549(_7549 ? _7549->raw() : nullptr, _7549 ? _7549->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7550(_7550 ? _7550->raw() : nullptr, _7550 ? _7550->size(0) : 0);
  _checked_ptr_1<double> _ptr__7551(_7551 ? _7551->raw() : nullptr, _7551 ? _7551->size(0) : 0);
  _checked_ptr_1<double> _ptr__7552(_7552 ? _7552->raw() : nullptr, _7552 ? _7552->size(0) : 0);
  _checked_ptr_1<int> _ptr__7553(_7553 ? _7553->raw() : nullptr, _7553 ? _7553->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7554(_7554 ? _7554->raw() : nullptr, _7554 ? _7554->size(0) : 0);
  if ((NULL == _7553.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int _7555 = ((int)((_7549)->size(0)) - (int)1);
  long long _7556 = _ptr__7549[((int)((_7549)->size(0)) - (int)1)];
  int _7557 = (int)((_7553)->size(0));
  long long _7558 = (long long)1;
  int _12176 = (int)0;
  int _12177 = _7557;
  for (int _7559 = _12176; _7559 < _12177; ++_7559)
  {
    {
      _7558 *= _ptr__7553[_7559];
    }
  }
  if (((int)((_7549)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_7556 != (int)((_7550)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_7556 != (int)((_7551)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _7552.get()) || (_7555 != (int)((_7552)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _7554.get()) && ((int)((_7554)->size(0)) < _7558)))
  {
    {
      if (((int)((_7554)->size(0)) != ((int)((_7549)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_7554)->size(0)) > (int)0))
      {
        {
          if (((_ptr__7554[(int)0] < (int)0) || (_ptr__7554[(int)0] >= _7558)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _7560 = true;
          long long _7561 = _7558;
          int _12178 = (int)1;
          int _12179 = (int)((_7554)->size(0));
          for (int _7562 = _12178; _7562 < _12179; ++_7562)
          {
            {
              _7560 = (_7560 && ((_ptr__7554[_7562] >= (int)0) && ((_ptr__7554[_7562] < _7561) && (_ptr__7554[_7562] > _ptr__7554[(_7562 - (int)1)]))));
            }
          }
          if ((!_7560))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_7558 != ((long long)((_7549)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _7563 = false;
  bool _7564 = false;
  if ((_ptr__7549[(int)0] != (long long)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _7565 = true;
  int _12180 = (int)0;
  int _12181 = _7555;
  for (int _7566 = _12180; _7566 < _12181; ++_7566)
  {
    {
      _7565 = (_7565 && (_ptr__7549[_7566] <= _ptr__7549[safe_add( _7566,(int)1 )]));
    }
  }
  if ((!_7565))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7567){
  monty::rc_ptr< ::mosek::fusion::Model > _12182;
  bool _12183 = ((NULL == _7567.get()) || ((int)((_7567)->size(0)) == (int)0));
  if (_12183)
  {
    _12182 = nullptr;
  }
  else
  {
    _12182 = ((*_7567)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _12182;
}
void mosek::fusion::p_Expr::destroy(){inst.reset();cof_v.reset();subj.reset();ptrb.reset();bfix.reset();shape.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,2 > > _7568) { return __mosek_2fusion_2Expression__pick(_7568); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,1 > > _7569) { return __mosek_2fusion_2Expression__pick(_7569); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int,1 > > _7570) { return __mosek_2fusion_2Expression__index(_7570); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int _7571) { return __mosek_2fusion_2Expression__index(_7571); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int,1 > > _7572,std::shared_ptr< monty::ndarray< int,1 > > _7573) { return __mosek_2fusion_2Expression__slice(_7572,_7573); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int _7574,int _7575) { return __mosek_2fusion_2Expression__slice(_7574,_7575); }
mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _7580,    int _7581,    std::shared_ptr< monty::ndarray< int,1 > > _7582,    std::shared_ptr< monty::ndarray< int,1 > > _7583,    std::shared_ptr< monty::ndarray< double,1 > > _7584,    std::shared_ptr< monty::ndarray< int,1 > > _7585,    std::shared_ptr< monty::ndarray< int,1 > > _7586,    std::shared_ptr< monty::ndarray< double,1 > > _7587,    double _7588){ return new mosek::fusion::SymmetricMatrix(_7580,_7581,_7582,_7583,_7584,_7585,_7586,_7587,_7588); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _7580,    int _7581,    std::shared_ptr< monty::ndarray< int,1 > > _7582,    std::shared_ptr< monty::ndarray< int,1 > > _7583,    std::shared_ptr< monty::ndarray< double,1 > > _7584,    std::shared_ptr< monty::ndarray< int,1 > > _7585,    std::shared_ptr< monty::ndarray< int,1 > > _7586,    std::shared_ptr< monty::ndarray< double,1 > > _7587,    double _7588) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_7580,_7581,_7582,_7583,_7584,_7585,_7586,_7587,_7588); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _7580,    int _7581,    std::shared_ptr< monty::ndarray< int,1 > > _7582,    std::shared_ptr< monty::ndarray< int,1 > > _7583,    std::shared_ptr< monty::ndarray< double,1 > > _7584,    std::shared_ptr< monty::ndarray< int,1 > > _7585,    std::shared_ptr< monty::ndarray< int,1 > > _7586,    std::shared_ptr< monty::ndarray< double,1 > > _7587,    double _7588){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7582(_7582 ? _7582->raw() : nullptr, _7582 ? _7582->size(0) : 0);
    _checked_ptr_1<int> _ptr__7583(_7583 ? _7583->raw() : nullptr, _7583 ? _7583->size(0) : 0);
    _checked_ptr_1<double> _ptr__7584(_7584 ? _7584->raw() : nullptr, _7584 ? _7584->size(0) : 0);
    _checked_ptr_1<int> _ptr__7585(_7585 ? _7585->raw() : nullptr, _7585 ? _7585->size(0) : 0);
    _checked_ptr_1<int> _ptr__7586(_7586 ? _7586->raw() : nullptr, _7586 ? _7586->size(0) : 0);
    _checked_ptr_1<double> _ptr__7587(_7587 ? _7587->raw() : nullptr, _7587 ? _7587->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _7580;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _7581;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _7582;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _7583;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _7584;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _7585;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _7586;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _7587;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _7588;
    nnz = (-(int)1);
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _7589,    std::shared_ptr< monty::ndarray< int,1 > > _7590,    std::shared_ptr< monty::ndarray< double,1 > > _7591) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7589,_7590,_7591); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int _7589,std::shared_ptr< monty::ndarray< int,1 > > _7590,std::shared_ptr< monty::ndarray< double,1 > > _7591){
  _checked_ptr_1<int> _ptr__7590(_7590 ? _7590->raw() : nullptr, _7590 ? _7590->size(0) : 0);
  _checked_ptr_1<double> _ptr__7591(_7591 ? _7591->raw() : nullptr, _7591 ? _7591->size(0) : 0);
  if (((int)((_7590)->size(0)) != (int)((_7591)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int _12184 = (int)0;
  int _12185 = (int)((_7590)->size(0));
  for (int _7592 = _12184; _7592 < _12185; ++_7592)
  {
    {
      if (((_ptr__7590[_7592] < (int)0) || (_ptr__7590[_7592] >= _7589)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int> _12186;
  for (int _7594 = (int)0, _12187 = (int)((_7590)->size(0)); _7594 < _12187 ; ++_7594)
  {
    _12186.push_back(_ptr__7590[_7594]);
  }
  auto _12188 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12186.size()),_12186.begin(),_12186.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7593 = _12188;
  _checked_ptr_1<int> _ptr__7593(_7593 ? _7593->raw() : nullptr,_7593 ? _7593->size(0) : 0);
  std::vector<int> _12189;
  for (int _7596 = (int)0, _12190 = (int)((_7590)->size(0)); _7596 < _12190 ; ++_7596)
  {
    _12189.push_back((int)1);
  }
  auto _12191 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12189.size()),_12189.begin(),_12189.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7595 = _12191;
  _checked_ptr_1<int> _ptr__7595(_7595 ? _7595->raw() : nullptr,_7595 ? _7595->size(0) : 0);
  std::vector<double> _12192;
  for (int _7598 = (int)0, _12193 = (int)((_7591)->size(0)); _7598 < _12193 ; ++_7598)
  {
    _12192.push_back(_ptr__7591[_7598]);
  }
  auto _12194 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12192.size()),_12192.begin(),_12192.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7597 = _12194;
  _checked_ptr_1<double> _ptr__7597(_7597 ? _7597->raw() : nullptr,_7597 ? _7597->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7589,(int)1,_7593,_7595,_7597,_7593,_7595,_7597,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _7599) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7599); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _7599){
  _checked_ptr_1<double> _ptr__7599(_7599 ? _7599->raw() : nullptr, _7599 ? _7599->size(0) : 0);
  int _7600 = (int)((_7599)->size(0));
  std::vector<int> _12195;
  for (int _7602 = (int)0, _12196 = _7600; _7602 < _12196 ; ++_7602)
  {
    _12195.push_back(_7602);
  }
  auto _12197 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12195.size()),_12195.begin(),_12195.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7601 = _12197;
  _checked_ptr_1<int> _ptr__7601(_7601 ? _7601->raw() : nullptr,_7601 ? _7601->size(0) : 0);
  std::vector<int> _12198;
  for (int _7604 = (int)0, _12199 = _7600; _7604 < _12199 ; ++_7604)
  {
    _12198.push_back((int)1);
  }
  auto _12200 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12198.size()),_12198.begin(),_12198.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7603 = _12200;
  _checked_ptr_1<int> _ptr__7603(_7603 ? _7603->raw() : nullptr,_7603 ? _7603->size(0) : 0);
  std::vector<double> _12201;
  for (int _7606 = (int)0, _12202 = _7600; _7606 < _12202 ; ++_7606)
  {
    _12201.push_back(_ptr__7599[_7606]);
  }
  auto _12203 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12201.size()),_12201.begin(),_12201.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7605 = _12203;
  _checked_ptr_1<double> _ptr__7605(_7605 ? _7605->raw() : nullptr,_7605 ? _7605->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7600,(int)1,_7601,_7603,_7605,_7601,_7603,_7605,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7607) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_7607); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _7607){
  _checked_ptr_1<double> _ptr__7607(_7607 ? _7607->raw() : nullptr, _7607 ? _7607->size(0) : 0);
  int _7608 = (int)((_7607)->size(0));
  std::vector<int> _12204;
  for (int _7610 = (int)0, _12205 = _7608; _7610 < _12205 ; ++_7610)
  {
    _12204.push_back(_7610);
  }
  auto _12206 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12204.size()),_12204.begin(),_12204.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7609 = _12206;
  _checked_ptr_1<int> _ptr__7609(_7609 ? _7609->raw() : nullptr,_7609 ? _7609->size(0) : 0);
  std::vector<int> _12207;
  for (int _7611 = (int)0, _12208 = _7608; _7611 < _12208 ; ++_7611)
  {
    _12207.push_back((_7608 - _7611));
  }
  auto _12209 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12207.size()),_12207.begin(),_12207.end()));
  std::vector<double> _12210;
  for (int _7612 = (int)0, _12211 = _7608; _7612 < _12211 ; ++_7612)
  {
    _12210.push_back(_ptr__7607[_7612]);
  }
  auto _12212 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12210.size()),_12210.begin(),_12210.end()));
  std::vector<double> _12213;
  for (int _7613 = (int)0, _12214 = _7608; _7613 < _12214 ; ++_7613)
  {
    _12213.push_back(1.0);
  }
  auto _12215 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12213.size()),_12213.begin(),_12213.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7608,_7608,_7609,_12209,_12212,_7609,_7609,_12215,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7614) { return mosek::fusion::p_SymmetricMatrix::diag(_7614); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7614){
  _checked_ptr_1<double> _ptr__7614(_7614 ? _7614->raw() : nullptr, _7614 ? _7614->size(0) : 0);
  int _7615 = (int)((_7614)->size(0));
  std::vector<int> _12216;
  for (int _7617 = (int)0, _12217 = _7615; _7617 < _12217 ; ++_7617)
  {
    _12216.push_back(_7617);
  }
  auto _12218 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12216.size()),_12216.begin(),_12216.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7616 = _12218;
  _checked_ptr_1<int> _ptr__7616(_7616 ? _7616->raw() : nullptr,_7616 ? _7616->size(0) : 0);
  std::vector<double> _12219;
  for (int _7618 = (int)0, _12220 = _7615; _7618 < _12220 ; ++_7618)
  {
    _12219.push_back(_ptr__7614[_7618]);
  }
  auto _12221 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12219.size()),_12219.begin(),_12219.end()));
  std::vector<double> _12222;
  for (int _7619 = (int)0, _12223 = _7615; _7619 < _12223 ; ++_7619)
  {
    _12222.push_back(1.0);
  }
  auto _12224 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12222.size()),_12222.begin(),_12222.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7615,_7615,_7616,_7616,_12221,_7616,_7616,_12224,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7620) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_7620); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7620) { return __mosek_2fusion_2SymmetricMatrix__add(_7620); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7620){
  int _7621 = _pubthis->getdim();
  if ((_7620->getdim() != _7621))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int _7622 = (int)((usubi)->size(0));
  int _7623 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->usubi)->size(0));
  int _7624 = safe_add( _7622,_7623 );
  int _7625 = (int)((vsubi)->size(0));
  int _7626 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->vsubi)->size(0));
  int _7627 = safe_add( _7625,_7626 );
  std::shared_ptr< monty::ndarray< double,1 > > _7628 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7627)));
  _checked_ptr_1<double> _ptr__7628(_7628 ? _7628->raw() : nullptr,_7628 ? _7628->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7629 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7627)));
  _checked_ptr_1<int> _ptr__7629(_7629 ? _7629->raw() : nullptr,_7629 ? _7629->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7630 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7627)));
  _checked_ptr_1<int> _ptr__7630(_7630 ? _7630->raw() : nullptr,_7630 ? _7630->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7631 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7624)));
  _checked_ptr_1<double> _ptr__7631(_7631 ? _7631->raw() : nullptr,_7631 ? _7631->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7632 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7624)));
  _checked_ptr_1<int> _ptr__7632(_7632 ? _7632->raw() : nullptr,_7632 ? _7632->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7633 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7624)));
  _checked_ptr_1<int> _ptr__7633(_7633 ? _7633->raw() : nullptr,_7633 ? _7633->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7633,(int)0,_7622);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->usubi,(int)0,_7633,_7622,_7623);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_7632,(int)0,_7622);
  int _12225 = (int)0;
  int _12226 = _7623;
  for (int _7634 = _12225; _7634 < _12226; ++_7634)
  {
    {
      _ptr__7632[safe_add( _7634,_7622 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->usubj)(_7634)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_7631,(int)0,_7622);
    }
  }
  else
  {
    {
      int _12227 = (int)0;
      int _12228 = _7622;
      for (int _7635 = _12227; _7635 < _12228; ++_7635)
      {
        {
          _ptr__7631[_7635] = (scale * ((*uval)(_7635)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->uval,(int)0,_7631,_7622,_7623);
    }
  }
  else
  {
    {
      int _12229 = (int)0;
      int _12230 = _7623;
      for (int _7636 = _12229; _7636 < _12230; ++_7636)
      {
        {
          _ptr__7631[safe_add( _7636,_7622 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->uval)(_7636)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7633,(int)0,_7622);
  int _12231 = (int)0;
  int _12232 = _7626;
  for (int _7637 = _12231; _7637 < _12232; ++_7637)
  {
    {
      _ptr__7630[safe_add( _7637,_7625 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->vsubi)(_7637)),mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_7629,(int)0,_7625);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->vsubj,_7625,_7629,_7625,_7626);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_7628,(int)0,_7625);
    }
  }
  else
  {
    {
      int _12233 = (int)0;
      int _12234 = _7625;
      for (int _7638 = _12233; _7638 < _12234; ++_7638)
      {
        {
          _ptr__7628[_7638] = (scale * ((*vval)(_7638)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->vval,(int)0,_7628,_7625,_7626);
    }
  }
  else
  {
    {
      int _12235 = (int)0;
      int _12236 = _7626;
      for (int _7639 = _12235; _7639 < _12236; ++_7639)
      {
        {
          _ptr__7628[safe_add( _7639,_7625 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->vval)(_7639)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_7620)->d1 ),_7633,_7632,_7631,_7630,_7629,_7628,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7640) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_7640); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7640) { return __mosek_2fusion_2SymmetricMatrix__sub(_7640); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7640){
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_7640->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _7641) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_7641); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _7641) { return __mosek_2fusion_2SymmetricMatrix__mul(_7641); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _7641){
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _7641));
}
int mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim(){
  return d0;
}
void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7642,    std::shared_ptr< monty::ndarray< int,2 > > _7643,    std::shared_ptr< monty::ndarray< double,1 > > _7644){ return new mosek::fusion::NDSparseArray(_7642,_7643,_7644); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7642,    std::shared_ptr< monty::ndarray< int,2 > > _7643,    std::shared_ptr< monty::ndarray< double,1 > > _7644) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7642,_7643,_7644); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _7642,    std::shared_ptr< monty::ndarray< int,2 > > _7643,    std::shared_ptr< monty::ndarray< double,1 > > _7644){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7642(_7642 ? _7642->raw() : nullptr, _7642 ? _7642->size(0) : 0);
    _checked_ptr_1<double> _ptr__7644(_7644 ? _7644->raw() : nullptr, _7644 ? _7644->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _7645 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_7643)->size(0)))));
    _checked_ptr_1<long long> _ptr__7645(_7645 ? _7645->raw() : nullptr,_7645 ? _7645->size(0) : 0);
    size = (long long)1;
    int _12237 = (int)0;
    int _12238 = (int)((_7642)->size(0));
    for (int _7646 = _12237; _7646 < _12238; ++_7646)
    {
      {
        size = safe_mul( size,_ptr__7642[_7646] );
      }
    }
    int _7647 = (int)((_7642)->size(0));
    if (((int)((_7643)->size(0)) != (int)((_7644)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_7643)->size(1)) != _7647))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _7648 = false;
    int _12239 = (int)0;
    int _12240 = (int)((_7643)->size(0));
    for (int _7649 = _12239; _7649 < _12240; ++_7649)
    {
      {
        int _12241 = (int)0;
        int _12242 = (int)((_7643)->size(1));
        for (int _7650 = _12241; _7650 < _12242; ++_7650)
        {
          {
            if (((((*_7643)(_7649,_7650)) < (int)0) || (((*_7643)(_7649,_7650)) >= _ptr__7642[_7650])))
            {
              {
                _7648 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_7648)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int _12243 = (int)0;
    int _12244 = (int)((_7643)->size(0));
    for (int _7651 = _12243; _7651 < _12244; ++_7651)
    {
      {
        long long _7652 = (long long)0;
        int _12245 = (int)0;
        int _12246 = (int)((_7643)->size(1));
        for (int _7653 = _12245; _7653 < _12246; ++_7653)
        {
          {
            _7652 = safe_add( safe_mul( _7652,_ptr__7642[_7653] ),((*_7643)(_7651,_7653)) );
          }
        }
        _ptr__7645[_7651] = _7652;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7642);
    bool _7654 = true;
    int _12247 = (int)1;
    int _12248 = (int)((_7645)->size(0));
    for (int _7655 = _12247; _7655 < _12248; ++_7655)
    {
      {
        _7654 = (_7654 && (_ptr__7645[_7655] >= _ptr__7645[(_7655 - (int)1)]));
      }
    }
    if (_7654)
    {
      {
        int _7656 = (int)1;
        int _12249 = (int)1;
        int _12250 = (int)((_7645)->size(0));
        for (int _7657 = _12249; _7657 < _12250; ++_7657)
        {
          {
            if ((_ptr__7645[(_7657 - (int)1)] < _ptr__7645[_7657]))
            {
              {
                ++ _7656;
              }
            }
            {}
          }
        }
        if ((_7656 == (int)((_7645)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7645);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7644);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7656)));
            ((*inst)((int)0)) = _ptr__7645[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7656)));
            ((*cof)((int)0)) = _ptr__7644[(int)0];
            int _7658 = (int)0;
            int _12251 = (int)1;
            int _12252 = (int)((_7645)->size(0));
            for (int _7659 = _12251; _7659 < _12252; ++_7659)
            {
              {
                if ((_ptr__7645[_7659] > _ptr__7645[(_7659 - (int)1)]))
                {
                  {
                    ++ _7658;
                    ((*inst)(_7658)) = _ptr__7645[_7659];
                    ((*cof)(_7658)) = _ptr__7644[_7659];
                  }
                }
                else
                {
                  {
                    ((*cof)(_7658)) = (((*cof)(_7658)) + _ptr__7644[_7659]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _7660 = ::mosek::fusion::Utils::Tools::range((long long)((_7645)->size(0)));
        _checked_ptr_1<long long> _ptr__7660(_7660 ? _7660->raw() : nullptr,_7660 ? _7660->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_7660,_7645,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_7645)->size(0)));
        int _7661 = (int)1;
        int _12253 = (int)1;
        int _12254 = (int)((_7645)->size(0));
        for (int _7662 = _12253; _7662 < _12254; ++_7662)
        {
          {
            if ((_ptr__7645[_ptr__7660[(_7662 - (int)1)]] < _ptr__7645[_ptr__7660[_7662]]))
            {
              {
                ++ _7661;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7661)));
        ((*inst)((int)0)) = _ptr__7645[_ptr__7660[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7661)));
        ((*cof)((int)0)) = _ptr__7644[_ptr__7660[(int)0]];
        int _7663 = (int)0;
        int _12255 = (int)1;
        int _12256 = (int)((_7645)->size(0));
        for (int _7664 = _12255; _7664 < _12256; ++_7664)
        {
          {
            if ((_ptr__7645[_ptr__7660[_7664]] > _ptr__7645[_ptr__7660[(_7664 - (int)1)]]))
            {
              {
                ++ _7663;
                ((*inst)(_7663)) = _ptr__7645[_ptr__7660[_7664]];
                ((*cof)(_7663)) = _ptr__7644[_ptr__7660[_7664]];
              }
            }
            else
            {
              {
                ((*cof)(_7663)) = (((*cof)(_7663)) + _ptr__7644[_ptr__7660[_7664]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7665,    std::shared_ptr< monty::ndarray< long long,1 > > _7666,    std::shared_ptr< monty::ndarray< double,1 > > _7667){ return new mosek::fusion::NDSparseArray(_7665,_7666,_7667); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7665,    std::shared_ptr< monty::ndarray< long long,1 > > _7666,    std::shared_ptr< monty::ndarray< double,1 > > _7667) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7665,_7666,_7667); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _7665,    std::shared_ptr< monty::ndarray< long long,1 > > _7666,    std::shared_ptr< monty::ndarray< double,1 > > _7667){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7665(_7665 ? _7665->raw() : nullptr, _7665 ? _7665->size(0) : 0);
    _checked_ptr_1<long long> _ptr__7666(_7666 ? _7666->raw() : nullptr, _7666 ? _7666->size(0) : 0);
    _checked_ptr_1<double> _ptr__7667(_7667 ? _7667->raw() : nullptr, _7667 ? _7667->size(0) : 0);
    size = (long long)1;
    int _12257 = (int)0;
    int _12258 = (int)((_7665)->size(0));
    for (int _7668 = _12257; _7668 < _12258; ++_7668)
    {
      {
        size = safe_mul( size,_ptr__7665[_7668] );
      }
    }
    int _7669 = (int)((_7666)->size(0));
    if ((_7669 != (int)((_7667)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _7670 = false;
      int _12259 = (int)0;
      int _12260 = _7669;
      for (int _7671 = _12259; _7671 < _12260; ++_7671)
      {
        {
          _7670 = (_7670 || ((_ptr__7666[_7671] < (int)0) || (_ptr__7666[_7671] >= size)));
        }
      }
      if (_7670)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7665);
    bool _7672 = true;
    int _12261 = (int)1;
    int _12262 = (int)((_7666)->size(0));
    for (int _7673 = _12261; _7673 < _12262; ++_7673)
    {
      {
        _7672 = (_7672 && (_ptr__7666[_7673] >= _ptr__7666[(_7673 - (int)1)]));
      }
    }
    if (_7672)
    {
      {
        int _7674 = (int)1;
        int _12263 = (int)1;
        int _12264 = (int)((_7666)->size(0));
        for (int _7675 = _12263; _7675 < _12264; ++_7675)
        {
          {
            if ((_ptr__7666[(_7675 - (int)1)] < _ptr__7666[_7675]))
            {
              {
                ++ _7674;
              }
            }
            {}
          }
        }
        if ((_7674 == (int)((_7666)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7666);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7667);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7674)));
            ((*inst)((int)0)) = _ptr__7666[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7674)));
            ((*cof)((int)0)) = _ptr__7667[(int)0];
            int _7676 = (int)0;
            int _12265 = (int)1;
            int _12266 = (int)((_7666)->size(0));
            for (int _7677 = _12265; _7677 < _12266; ++_7677)
            {
              {
                if ((_ptr__7666[_7677] > _ptr__7666[(_7677 - (int)1)]))
                {
                  {
                    ++ _7676;
                    ((*inst)(_7676)) = _ptr__7666[_7677];
                    ((*cof)(_7676)) = _ptr__7667[_7677];
                  }
                }
                else
                {
                  {
                    ((*cof)(_7676)) = (((*cof)(_7676)) + _ptr__7667[_7677]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _7678 = ::mosek::fusion::Utils::Tools::range((long long)((_7666)->size(0)));
        _checked_ptr_1<long long> _ptr__7678(_7678 ? _7678->raw() : nullptr,_7678 ? _7678->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_7678,_7666,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_7666)->size(0)));
        int _7679 = (int)1;
        int _12267 = (int)1;
        int _12268 = (int)((_7666)->size(0));
        for (int _7680 = _12267; _7680 < _12268; ++_7680)
        {
          {
            if ((_ptr__7666[_ptr__7678[(_7680 - (int)1)]] < _ptr__7666[_ptr__7678[_7680]]))
            {
              {
                ++ _7679;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7679)));
        ((*inst)((int)0)) = _ptr__7666[_ptr__7678[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7679)));
        ((*cof)((int)0)) = _ptr__7667[_ptr__7678[(int)0]];
        int _7681 = (int)0;
        int _12269 = (int)1;
        int _12270 = (int)((_7666)->size(0));
        for (int _7682 = _12269; _7682 < _12270; ++_7682)
        {
          {
            if ((_ptr__7666[_ptr__7678[_7682]] > ((*inst)(_ptr__7678[(_7682 - (int)1)]))))
            {
              {
                ++ _7681;
                ((*inst)(_7681)) = _ptr__7666[_ptr__7678[_7682]];
                ((*cof)(_7681)) = _ptr__7667[_ptr__7678[_7682]];
              }
            }
            else
            {
              {
                ((*cof)(_7681)) = (((*cof)(_7681)) + _ptr__7667[_ptr__7678[_7682]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _7683){ return new mosek::fusion::NDSparseArray(_7683); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _7683) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7683); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _7683){monty::rc_reserve __reserve_this(_pubthis);   {
    long long _7684 = _7683->numNonzeros();
    int _7685 = _7683->numColumns();
    int _7686 = _7683->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _7687 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7684)));
    _checked_ptr_1<double> _ptr__7687(_7687 ? _7687->raw() : nullptr,_7687 ? _7687->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7688 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7684)));
    _checked_ptr_1<int> _ptr__7688(_7688 ? _7688->raw() : nullptr,_7688 ? _7688->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7689 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7684)));
    _checked_ptr_1<int> _ptr__7689(_7689 ? _7689->raw() : nullptr,_7689 ? _7689->size(0) : 0);
    _7683->getDataAsTriplets(_7689,_7688,_7687);
    size = safe_mul( (long long)_7683->numRows(),(long long)_7683->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7686),(int)(_7685)});
    std::vector<long long> _12271;
    for (long long _7690 = (long long)0, _12272 = _7684; _7690 < _12272 ; ++_7690)
    {
      _12271.push_back(safe_add( safe_mul( (long long)_ptr__7689[_7690],_7685 ),(long long)_ptr__7688[_7690] ));
    }
    auto _12273 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12271.size()),_12271.begin(),_12271.end()));
    inst = _12273;
    cof = _7687;
  }
}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7691) { return mosek::fusion::p_NDSparseArray::make(_7691); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _7691){
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7691);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _7692,    std::shared_ptr< monty::ndarray< long long,1 > > _7693,    std::shared_ptr< monty::ndarray< double,1 > > _7694) { return mosek::fusion::p_NDSparseArray::make(_7692,_7693,_7694); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _7692,std::shared_ptr< monty::ndarray< long long,1 > > _7693,std::shared_ptr< monty::ndarray< double,1 > > _7694){
  _checked_ptr_1<int> _ptr__7692(_7692 ? _7692->raw() : nullptr, _7692 ? _7692->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7693(_7693 ? _7693->raw() : nullptr, _7693 ? _7693->size(0) : 0);
  _checked_ptr_1<double> _ptr__7694(_7694 ? _7694->raw() : nullptr, _7694 ? _7694->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7692,_7693,_7694);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _7695,    std::shared_ptr< monty::ndarray< int,2 > > _7696,    std::shared_ptr< monty::ndarray< double,1 > > _7697) { return mosek::fusion::p_NDSparseArray::make(_7695,_7696,_7697); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _7695,std::shared_ptr< monty::ndarray< int,2 > > _7696,std::shared_ptr< monty::ndarray< double,1 > > _7697){
  _checked_ptr_1<int> _ptr__7695(_7695 ? _7695->raw() : nullptr, _7695 ? _7695->size(0) : 0);
  _checked_ptr_1<double> _ptr__7697(_7697 ? _7697->raw() : nullptr, _7697 ? _7697->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7695,_7696,_7697);
}
void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _7698,    int _7699,    std::shared_ptr< monty::ndarray< double,1 > > _7700){ return new mosek::fusion::DenseMatrix(_7698,_7699,_7700); }mosek::fusion::DenseMatrix::DenseMatrix  (int _7698,    int _7699,    std::shared_ptr< monty::ndarray< double,1 > > _7700) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7698,_7699,_7700); }void mosek::fusion::p_DenseMatrix::_initialize  (int _7698,    int _7699,    std::shared_ptr< monty::ndarray< double,1 > > _7700){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__7700(_7700 ? _7700->raw() : nullptr, _7700 ? _7700->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7698,_7699);
    nnz = (long long)safe_mul( _7698,_7699 );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _7698,_7699 ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_7700,(int)0,data,(int)0,safe_mul( _7698,_7699 ));
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _7701){ return new mosek::fusion::DenseMatrix(_7701); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _7701) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7701); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _7701){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_7701)->dimi,mosek::fusion::p_Matrix::_get_impl(_7701)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _12274 = _7701;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12274.get()))
    {
      ::mosek::fusion::DenseMatrix::t _7702 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12274.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_7702)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12274.get()))
    {
      ::mosek::fusion::SparseMatrix::t _7703 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12274.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_7703)->dimi,mosek::fusion::p_Matrix::_get_impl(_7703)->dimj ));
        long long _12275 = (long long)0;
        long long _12276 = mosek::fusion::p_SparseMatrix::_get_impl(_7703)->nnz;
        for (long long _7705 = _12275; _7705 < _12276; ++_7705)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_7703)->subi)(_7705)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_7703)->subj)(_7705)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_7703)->val)(_7705));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _7704 = _12274;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _7706){ return new mosek::fusion::DenseMatrix(_7706); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _7706) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7706); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _7706){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize((int)((_7706)->size(0)),(int)((_7706)->size(1)));
    std::vector<double> _12277;
    for (int _7707 = (int)0, _12278 = dimi; _7707 < _12278 ; ++_7707)
    {
      for (int _7708 = (int)0, _12279 = dimj; _7708 < _12279 ; ++_7708)
      {
        _12277.push_back(((*_7706)(_7707,_7708)));
      }
    }
    auto _12280 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12277.size()),_12277.begin(),_12277.end()));
    data = _12280;
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _7709,    int _7710,    double _7711){ return new mosek::fusion::DenseMatrix(_7709,_7710,_7711); }mosek::fusion::DenseMatrix::DenseMatrix  (int _7709,    int _7710,    double _7711) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7709,_7710,_7711); }void mosek::fusion::p_DenseMatrix::_initialize  (int _7709,    int _7710,    double _7711){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(_7709,_7710);
    std::vector<double> _12281;
    for (int _7712 = (int)0, _12282 = _7709; _7712 < _12282 ; ++_7712)
    {
      for (int _7713 = (int)0, _12283 = _7710; _7713 < _12283 ; ++_7713)
      {
        _12281.push_back(_7711);
      }
    }
    auto _12284 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12281.size()),_12281.begin(),_12281.end()));
    data = _12284;
    nnz = (long long)safe_mul( _7709,_7710 );
  }
}std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7714 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _7714->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _7714->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _7714->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _7714->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _7714->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int _7715 = (int)0;
  {
    int _7716 = (int)0;
    for(;(_7716 < dimi);++ _7716)
    {
      {
        if ((_7716 > (int)0))
        {
          {
            _7714->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _7714->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _7714->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_7715)));
        ++ _7715;
        {
          int _7717 = (int)1;
          for(;(_7717 < dimj);++ _7717)
          {
            {
              _7714->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _7714->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_7715)));
              ++ _7715;
            }
          }
        }
        _7714->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _7714->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _7714->toString();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose(){
  std::shared_ptr< monty::ndarray< double,1 > > _7718 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__7718(_7718 ? _7718->raw() : nullptr,_7718 ? _7718->size(0) : 0);
  int _7719 = (int)0;
  int _7720 = dimi;
  int _12285 = (int)0;
  int _12286 = dimi;
  for (int _7721 = _12285; _7721 < _12286; ++_7721)
  {
    {
      int _7722 = _7721;
      int _12287 = (int)0;
      int _12288 = dimj;
      for (int _7723 = _12287; _7723 < _12288; ++_7723)
      {
        {
          _ptr__7718[_7722] = ((*data)(_7719));
          _7722 = safe_add( _7722,_7720 );
          ++ _7719;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_7718)).as<::mosek::fusion::Matrix>();
}
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse(){
  return false;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray(){
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7724,std::shared_ptr< monty::ndarray< int,1 > > _7725,std::shared_ptr< monty::ndarray< double,1 > > _7726) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_7724,_7725,_7726); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7724,std::shared_ptr< monty::ndarray< int,1 > > _7725,std::shared_ptr< monty::ndarray< double,1 > > _7726){
  _checked_ptr_1<int> _ptr__7724(_7724 ? _7724->raw() : nullptr, _7724 ? _7724->size(0) : 0);
  _checked_ptr_1<int> _ptr__7725(_7725 ? _7725->raw() : nullptr, _7725 ? _7725->size(0) : 0);
  _checked_ptr_1<double> _ptr__7726(_7726 ? _7726->raw() : nullptr, _7726 ? _7726->size(0) : 0);
  if ((((int)((_7724)->size(0)) < nnz) || (((int)((_7725)->size(0)) < nnz) || ((int)((_7726)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_7726,(int)0,(int)((data)->size(0)));
  int _7727 = (int)0;
  int _12289 = (int)0;
  int _12290 = dimi;
  for (int _7728 = _12289; _7728 < _12290; ++_7728)
  {
    {
      int _12291 = (int)0;
      int _12292 = dimj;
      for (int _7729 = _12291; _7729 < _12292; ++_7729)
      {
        {
          _ptr__7724[_7727] = _7728;
          _ptr__7725[_7727] = _7729;
          ++ _7727;
        }
      }
    }
  }
}
double mosek::fusion::DenseMatrix :: get(int _7730,int _7731) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_7730,_7731); }double mosek::fusion::p_DenseMatrix::get(int _7730,int _7731){
  return ((*data)(safe_add( safe_mul( _7730,dimj ),_7731 )));
}
long long mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros(){
  return (long long)safe_mul( dimi,dimj );
}
void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _7732,    int _7733,    std::shared_ptr< monty::ndarray< int,1 > > _7734,    std::shared_ptr< monty::ndarray< int,1 > > _7735,    std::shared_ptr< monty::ndarray< double,1 > > _7736,    long long _7737){ return new mosek::fusion::SparseMatrix(_7732,_7733,_7734,_7735,_7736,_7737); }mosek::fusion::SparseMatrix::SparseMatrix  (int _7732,    int _7733,    std::shared_ptr< monty::ndarray< int,1 > > _7734,    std::shared_ptr< monty::ndarray< int,1 > > _7735,    std::shared_ptr< monty::ndarray< double,1 > > _7736,    long long _7737) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_7732,_7733,_7734,_7735,_7736,_7737); }void mosek::fusion::p_SparseMatrix::_initialize  (int _7732,    int _7733,    std::shared_ptr< monty::ndarray< int,1 > > _7734,    std::shared_ptr< monty::ndarray< int,1 > > _7735,    std::shared_ptr< monty::ndarray< double,1 > > _7736,    long long _7737){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7734(_7734 ? _7734->raw() : nullptr, _7734 ? _7734->size(0) : 0);
    _checked_ptr_1<int> _ptr__7735(_7735 ? _7735->raw() : nullptr, _7735 ? _7735->size(0) : 0);
    _checked_ptr_1<double> _ptr__7736(_7736 ? _7736->raw() : nullptr, _7736 ? _7736->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7732,_7733);
    if ((_7737 > (int)0))
    {
      {
        if ((((int)((_7734)->size(0)) < _7737) || (((int)((_7735)->size(0)) < _7737) || ((int)((_7736)->size(0)) < _7737))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _7738 = false;
        long long _12293 = (long long)0;
        long long _12294 = _7737;
        for (long long _7739 = _12293; _7739 < _12294; ++_7739)
        {
          {
            if (((_ptr__7734[_7739] < (int)0) || ((_ptr__7734[_7739] >= dimi) || ((_ptr__7735[_7739] < (int)0) || (_ptr__7735[_7739] >= dimj)))))
            {
              {
                _7738 = true;
              }
            }
            {}
          }
        }
        if (_7738)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _7740 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _7741 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _7742 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_7734,_7735,_7736,_7740,_7741,_7742,_7737,dimi,dimj);
        subi = ((*_7740)((int)0));
        subj = ((*_7741)((int)0));
        val = ((*_7742)((int)0));
        nnz = (long long)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (long long)0;
      }
    }
  }
}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _7743,    int _7744,    std::shared_ptr< monty::ndarray< int,1 > > _7745,    std::shared_ptr< monty::ndarray< int,1 > > _7746,    std::shared_ptr< monty::ndarray< double,1 > > _7747){ return new mosek::fusion::SparseMatrix(_7743,_7744,_7745,_7746,_7747); }mosek::fusion::SparseMatrix::SparseMatrix  (int _7743,    int _7744,    std::shared_ptr< monty::ndarray< int,1 > > _7745,    std::shared_ptr< monty::ndarray< int,1 > > _7746,    std::shared_ptr< monty::ndarray< double,1 > > _7747) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_7743,_7744,_7745,_7746,_7747); }void mosek::fusion::p_SparseMatrix::_initialize  (int _7743,    int _7744,    std::shared_ptr< monty::ndarray< int,1 > > _7745,    std::shared_ptr< monty::ndarray< int,1 > > _7746,    std::shared_ptr< monty::ndarray< double,1 > > _7747){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7745(_7745 ? _7745->raw() : nullptr, _7745 ? _7745->size(0) : 0);
    _checked_ptr_1<int> _ptr__7746(_7746 ? _7746->raw() : nullptr, _7746 ? _7746->size(0) : 0);
    _checked_ptr_1<double> _ptr__7747(_7747 ? _7747->raw() : nullptr, _7747 ? _7747->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7743,_7744);
    int _7748 = (int)0;
    int _12295 = (int)0;
    int _12296 = (int)((_7747)->size(0));
    for (int _7749 = _12295; _7749 < _12296; ++_7749)
    {
      {
        if (((_ptr__7747[_7749] > (int)0) || (_ptr__7747[_7749] < (int)0)))
        {
          {
            ++ _7748;
          }
        }
        {}
      }
    }
    if (((_7748 > (int)0) && (_7748 < (int)((_7745)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7748)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7748)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7748)));
        nnz = _7748;
        int _7750 = (int)0;
        int _12297 = (int)0;
        int _12298 = (int)((_7747)->size(0));
        for (int _7751 = _12297; _7751 < _12298; ++_7751)
        {
          {
            if (((_ptr__7747[_7751] < (int)0) || (_ptr__7747[_7751] > (int)0)))
            {
              {
                ((*val)(_7750)) = _ptr__7747[_7751];
                ((*subj)(_7750)) = _ptr__7746[_7751];
                ((*subi)(_7750)) = _ptr__7745[_7751];
                ++ _7750;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _7745;
        subj = _7746;
        val = _7747;
        if ((NULL == _7745.get()))
        {
          {
            nnz = (long long)0;
          }
        }
        else
        {
          {
            nnz = (long long)((subi)->size(0));
          }
        }
      }
    }
  }
}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb(){
  std::shared_ptr< monty::ndarray< long long,1 > > _7752 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7752(_7752 ? _7752->raw() : nullptr,_7752 ? _7752->size(0) : 0);
  long long _7753 = (long long)0;
  int _12299 = (int)0;
  int _12300 = dimi;
  for (int _7754 = _12299; _7754 < _12300; ++_7754)
  {
    {
      _ptr__7752[_7754] = _7753;
      {
        for(;((_7753 < nnz) && (((*subi)(_7753)) == _7754));++ _7753)
        {
          {
          }
        }
      }
    }
  }
  _ptr__7752[dimi] = _7753;
  return _7752;
}
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7755 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _7755->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _7755->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int _12301 = (int)1;
      int _12302 = (int)((subi)->size(0));
      for (int _7756 = _12301; _7756 < _12302; ++_7756)
      {
        {
          _7755->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_7756)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_7756)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_7756)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _7755->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _7755->toString();
}
long long mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros(){
  return nnz;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose(){
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse(){
  return true;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray(){
  std::shared_ptr< monty::ndarray< double,1 > > _7757 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__7757(_7757 ? _7757->raw() : nullptr,_7757 ? _7757->size(0) : 0);
  int _12303 = (int)0;
  int _12304 = (int)((subi)->size(0));
  for (int _7758 = _12303; _7758 < _12304; ++_7758)
  {
    {
      _ptr__7757[safe_add( safe_mul( ((*subi)(_7758)),dimj ),((*subj)(_7758)) )] = ((*val)(_7758));
    }
  }
  return _7757;
}
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7759,std::shared_ptr< monty::ndarray< int,1 > > _7760,std::shared_ptr< monty::ndarray< double,1 > > _7761) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_7759,_7760,_7761); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7759,std::shared_ptr< monty::ndarray< int,1 > > _7760,std::shared_ptr< monty::ndarray< double,1 > > _7761){
  _checked_ptr_1<int> _ptr__7759(_7759 ? _7759->raw() : nullptr, _7759 ? _7759->size(0) : 0);
  _checked_ptr_1<int> _ptr__7760(_7760 ? _7760->raw() : nullptr, _7760 ? _7760->size(0) : 0);
  _checked_ptr_1<double> _ptr__7761(_7761 ? _7761->raw() : nullptr, _7761 ? _7761->size(0) : 0);
  if ((((long long)((_7759)->size(0)) < nnz) || (((long long)((_7760)->size(0)) < nnz) || ((long long)((_7761)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_7759,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_7760,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_7761,(long long)0,nnz);
    }
  }
  {}
}
double mosek::fusion::SparseMatrix :: get(int _7762,int _7763) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_7762,_7763); }double mosek::fusion::p_SparseMatrix::get(int _7762,int _7763){
  if (((_7762 < (int)0) || ((_7762 >= dimi) || ((_7763 < (int)0) || (_7763 >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int _7764 = (int)((subi)->size(0));
  int _7765 = (int)0;
  while ( ((_7764 - _7765) > (int)1) )
  {
    {
      int _7766 = (safe_add( _7765,_7764 ) / (int)2);
      if (((((*subi)(_7766)) < _7762) || ((((*subi)(_7766)) == _7762) && (((*subj)(_7766)) < _7763))))
      {
        {
          _7765 = _7766;
        }
      }
      else if(((((*subi)(_7766)) > _7762) || ((((*subi)(_7766)) == _7762) && (((*subj)(_7766)) > _7763))))
      {
        {
          _7764 = _7766;
        }
      }
      else
      {
        {
          return ((*val)(_7766));
        }
      }
    }
  }
  if (((((*subi)(_7765)) == _7762) && (((*subj)(_7765)) == _7763)))
  {
    {
      return ((*val)(_7765));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _7767,    int _7768){monty::rc_reserve __reserve_this(_pubthis);   {
    if (((_7767 < (int)0) || (_7768 < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _7767;
    dimj = _7768;
  }
}std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString(){
  return std::string ("");
}
void mosek::fusion::p_Matrix::switchDims(){
  int _7769 = dimi;
  dimi = dimj;
  dimj = _7769;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7770,    monty::rc_ptr< ::mosek::fusion::Matrix > _7771) { return mosek::fusion::p_Matrix::diag(_7770,_7771); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7770,monty::rc_ptr< ::mosek::fusion::Matrix > _7771){
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _12305;
  for (int _7772 = (int)0, _12306 = _7770; _7772 < _12306 ; ++_7772)
  {
    _12305.push_back(_7771);
  }
  auto _12307 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_12305.size()),_12305.begin(),_12305.end()));
  return ::mosek::fusion::p_Matrix::diag(_12307);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7773) { return mosek::fusion::p_Matrix::diag(_7773); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7773){
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7774 = _7773;
  long long _7775 = (long long)0;
  int _7776 = (int)0;
  int _7777 = (int)0;
  int _12308 = (int)0;
  int _12309 = (int)((_7773)->size(0));
  for (int _7778 = _12308; _7778 < _12309; ++_7778)
  {
    {
      _7777 = safe_add( _7777,mosek::fusion::p_Matrix::_get_impl(((*_7773)(_7778)))->dimi );
      _7776 = safe_add( _7776,mosek::fusion::p_Matrix::_get_impl(((*_7773)(_7778)))->dimj );
      _7775 = safe_add( _7775,((*_7773)(_7778))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7779 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7775)));
  _checked_ptr_1<int> _ptr__7779(_7779 ? _7779->raw() : nullptr,_7779 ? _7779->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7780 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7775)));
  _checked_ptr_1<int> _ptr__7780(_7780 ? _7780->raw() : nullptr,_7780 ? _7780->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7781 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7775)));
  _checked_ptr_1<double> _ptr__7781(_7781 ? _7781->raw() : nullptr,_7781 ? _7781->size(0) : 0);
  {
    int _7782 = (int)0;
    int _7783 = (int)0;
    long long _7784 = (long long)0;
    int _12310 = (int)0;
    int _12311 = (int)((_7773)->size(0));
    for (int _7785 = _12310; _7785 < _12311; ++_7785)
    {
      {
        long long _7786 = ((*_7773)(_7785))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _7787 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7786)));
        _checked_ptr_1<double> _ptr__7787(_7787 ? _7787->raw() : nullptr,_7787 ? _7787->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _7788 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7786)));
        _checked_ptr_1<int> _ptr__7788(_7788 ? _7788->raw() : nullptr,_7788 ? _7788->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _7789 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7786)));
        _checked_ptr_1<int> _ptr__7789(_7789 ? _7789->raw() : nullptr,_7789 ? _7789->size(0) : 0);
        ((*_7773)(_7785))->getDataAsTriplets(_7789,_7788,_7787);
        ::mosek::fusion::Utils::Tools::arraycopy(_7787,(long long)0,_7781,_7784,_7786);
        long long _12312 = (long long)0;
        long long _12313 = _7786;
        for (long long _7790 = _12312; _7790 < _12313; ++_7790)
        {
          {
            _ptr__7779[safe_add( _7784,_7790 )] = safe_add( _ptr__7789[_7790],_7783 );
            _ptr__7780[safe_add( _7784,_7790 )] = safe_add( _ptr__7789[_7790],_7782 );
          }
        }
        _7784 = safe_add( _7784,_7786 );
        _7783 = safe_add( _7783,mosek::fusion::p_Matrix::_get_impl(((*_7773)(_7785)))->dimi );
        _7782 = safe_add( _7782,mosek::fusion::p_Matrix::_get_impl(((*_7773)(_7785)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7777,_7776,_7779,_7780,_7781)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _7791,    double _7792,    int _7793) { return mosek::fusion::p_Matrix::antidiag(_7791,_7792,_7793); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _7791,double _7792,int _7793){
  if (((_7793 < _7791) && (_7793 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7792,(_7791 - _7793)),_7793);
    }
  }
  else if(((_7793 > (-_7791)) && (_7793 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7792,safe_add( _7791,_7793 )),_7793);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _7794,    double _7795) { return mosek::fusion::p_Matrix::antidiag(_7794,_7795); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _7794,double _7795){
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7795,_7794),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7796,    double _7797,    int _7798) { return mosek::fusion::p_Matrix::diag(_7796,_7797,_7798); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7796,double _7797,int _7798){
  if (((_7798 < _7796) && (_7798 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7797,(_7796 - _7798)),_7798);
    }
  }
  else if(((_7798 > (-_7796)) && (_7798 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7797,safe_add( _7796,_7798 )),_7798);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7799,    double _7800) { return mosek::fusion::p_Matrix::diag(_7799,_7800); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7799,double _7800){
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7800,_7799),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7801,    int _7802) { return mosek::fusion::p_Matrix::antidiag(_7801,_7802); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _7801,int _7802){
  _checked_ptr_1<double> _ptr__7801(_7801 ? _7801->raw() : nullptr, _7801 ? _7801->size(0) : 0);
  int _12314;
  bool _12315 = (_7802 > (int)0);
  if (_12315)
  {
    _12314 = _7802;
  }
  else
  {
    _12314 = (-_7802);
  }
  int _7803 = _12314;
  int _7804 = safe_add( (int)((_7801)->size(0)),_7803 );
  int _7805 = (int)((_7801)->size(0));
  if ((_7802 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7806 = ::mosek::fusion::Utils::Tools::range(_7802,safe_add( _7805,_7802 ));
      _checked_ptr_1<int> _ptr__7806(_7806 ? _7806->raw() : nullptr,_7806 ? _7806->size(0) : 0);
      std::vector<int> _12316;
      for (int _7808 = (int)1, _12317 = safe_add( _7805,(int)1 ); _7808 < _12317 ; ++_7808)
      {
        _12316.push_back((safe_add( _7805,_7802 ) - _7808));
      }
      auto _12318 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12316.size()),_12316.begin(),_12316.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _7807 = _12318;
      _checked_ptr_1<int> _ptr__7807(_7807 ? _7807->raw() : nullptr,_7807 ? _7807->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7804,_7804,_7806,_7807,_7801)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7809 = ::mosek::fusion::Utils::Tools::range((int)0,_7805);
      _checked_ptr_1<int> _ptr__7809(_7809 ? _7809->raw() : nullptr,_7809 ? _7809->size(0) : 0);
      std::vector<int> _12319;
      for (int _7811 = (int)1, _12320 = safe_add( _7805,(int)1 ); _7811 < _12320 ; ++_7811)
      {
        _12319.push_back((_7805 - _7811));
      }
      auto _12321 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12319.size()),_12319.begin(),_12319.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _7810 = _12321;
      _checked_ptr_1<int> _ptr__7810(_7810 ? _7810->raw() : nullptr,_7810 ? _7810->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7804,_7804,_7809,_7810,_7801)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7812) { return mosek::fusion::p_Matrix::antidiag(_7812); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _7812){
  _checked_ptr_1<double> _ptr__7812(_7812 ? _7812->raw() : nullptr, _7812 ? _7812->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_7812,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7813,    int _7814) { return mosek::fusion::p_Matrix::diag(_7813,_7814); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7813,int _7814){
  _checked_ptr_1<double> _ptr__7813(_7813 ? _7813->raw() : nullptr, _7813 ? _7813->size(0) : 0);
  int _12322;
  bool _12323 = (_7814 > (int)0);
  if (_12323)
  {
    _12322 = _7814;
  }
  else
  {
    _12322 = (-_7814);
  }
  int _7815 = _12322;
  int _7816 = safe_add( (int)((_7813)->size(0)),_7815 );
  int _7817 = (int)((_7813)->size(0));
  if ((_7814 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7818 = ::mosek::fusion::Utils::Tools::range((int)0,_7817);
      _checked_ptr_1<int> _ptr__7818(_7818 ? _7818->raw() : nullptr,_7818 ? _7818->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7819 = ::mosek::fusion::Utils::Tools::range(_7815,safe_add( _7817,_7815 ));
      _checked_ptr_1<int> _ptr__7819(_7819 ? _7819->raw() : nullptr,_7819 ? _7819->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7816,_7816,_7818,_7819,_7813)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7820 = ::mosek::fusion::Utils::Tools::range(_7815,safe_add( _7817,_7815 ));
      _checked_ptr_1<int> _ptr__7820(_7820 ? _7820->raw() : nullptr,_7820 ? _7820->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7821 = ::mosek::fusion::Utils::Tools::range((int)0,_7817);
      _checked_ptr_1<int> _ptr__7821(_7821 ? _7821->raw() : nullptr,_7821 ? _7821->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7816,_7816,_7820,_7821,_7813)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7822) { return mosek::fusion::p_Matrix::diag(_7822); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7822){
  _checked_ptr_1<double> _ptr__7822(_7822 ? _7822->raw() : nullptr, _7822 ? _7822->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_7822,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _7823,    int _7824) { return mosek::fusion::p_Matrix::ones(_7823,_7824); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int _7823,int _7824){
  return ::mosek::fusion::p_Matrix::dense(_7823,_7824,1.0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _7825) { return mosek::fusion::p_Matrix::eye(_7825); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int _7825){
  std::vector<double> _12324;
  for (int _7826 = (int)0, _12325 = _7825; _7826 < _12325 ; ++_7826)
  {
    _12324.push_back(1.0);
  }
  auto _12326 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12324.size()),_12324.begin(),_12324.end()));
  return ::mosek::fusion::p_Matrix::diag(_12326);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7827) { return mosek::fusion::p_Matrix::dense(_7827); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _7827){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7827)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _7828,    int _7829,    double _7830) { return mosek::fusion::p_Matrix::dense(_7828,_7829,_7830); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _7828,int _7829,double _7830){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7828,_7829,_7830)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _7831,    int _7832,    std::shared_ptr< monty::ndarray< double,1 > > _7833) { return mosek::fusion::p_Matrix::dense(_7831,_7832,_7833); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _7831,int _7832,std::shared_ptr< monty::ndarray< double,1 > > _7833){
  _checked_ptr_1<double> _ptr__7833(_7833 ? _7833->raw() : nullptr, _7833 ? _7833->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7831,_7832,_7833)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _7834) { return mosek::fusion::p_Matrix::dense(_7834); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _7834){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7834)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7835) { return mosek::fusion::p_Matrix::sparse(_7835); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _7835){
  std::shared_ptr< monty::ndarray< int,1 > > _7836 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7835->numNonzeros())));
  _checked_ptr_1<int> _ptr__7836(_7836 ? _7836->raw() : nullptr,_7836 ? _7836->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7837 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7835->numNonzeros())));
  _checked_ptr_1<int> _ptr__7837(_7837 ? _7837->raw() : nullptr,_7837 ? _7837->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7838 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7835->numNonzeros())));
  _checked_ptr_1<double> _ptr__7838(_7838 ? _7838->raw() : nullptr,_7838 ? _7838->size(0) : 0);
  _7835->getDataAsTriplets(_7836,_7837,_7838);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7835->numRows(),_7835->numColumns(),_7836,_7837,_7838)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _7839) { return mosek::fusion::p_Matrix::sparse(_7839); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _7839){
  int _7840 = (int)((_7839)->size(0));
  int _7841 = (int)((((*_7839)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _7842 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7840)));
  _checked_ptr_1<int> _ptr__7842(_7842 ? _7842->raw() : nullptr,_7842 ? _7842->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7843 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7841)));
  _checked_ptr_1<int> _ptr__7843(_7843 ? _7843->raw() : nullptr,_7843 ? _7843->size(0) : 0);
  long long _7844 = (long long)0;
  int _7845 = (int)0;
  {
    int _7846 = (int)0;
    for(;(_7846 < _7840);++ _7846)
    {
      {
        {
          int _7847 = (int)0;
          for(;(_7847 < _7841);++ _7847)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _7848 = ((*((*_7839)(_7846)))(_7847));
              if ((NULL != _7848.get()))
              {
                {
                  if ((_ptr__7843[_7847] == (int)0))
                  {
                    {
                      _ptr__7843[_7847] = mosek::fusion::p_Matrix::_get_impl(_7848)->dimj;
                    }
                  }
                  else if((_ptr__7843[_7847] != mosek::fusion::p_Matrix::_get_impl(_7848)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__7842[_7846] == (int)0))
                  {
                    {
                      _ptr__7842[_7846] = mosek::fusion::p_Matrix::_get_impl(_7848)->dimi;
                    }
                  }
                  else if((_ptr__7842[_7846] != mosek::fusion::p_Matrix::_get_impl(_7848)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _7844 = safe_add( _7844,_7848->numNonzeros() );
                }
              }
              {}
              ++ _7845;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7849 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7844)));
  _checked_ptr_1<double> _ptr__7849(_7849 ? _7849->raw() : nullptr,_7849 ? _7849->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7850 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7844)));
  _checked_ptr_1<int> _ptr__7850(_7850 ? _7850->raw() : nullptr,_7850 ? _7850->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7851 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7844)));
  _checked_ptr_1<int> _ptr__7851(_7851 ? _7851->raw() : nullptr,_7851 ? _7851->size(0) : 0);
  int _7852 = (int)0;
  int _7853 = (int)0;
  {
    int _7854 = (int)0;
    for(;(_7854 < _7840);++ _7854)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _7855 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7841)));
        _checked_ptr_1<int> _ptr__7855(_7855 ? _7855->raw() : nullptr,_7855 ? _7855->size(0) : 0);
        {
          int _7856 = (int)0;
          for(;(_7856 < _ptr__7842[_7854]);++ _7856)
          {
            {
              int _7857 = (int)0;
              {
                int _7858 = (int)0;
                for(;(_7858 < _7841);++ _7858)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _7859 = ((*((*_7839)(_7854)))(_7858));
                    if ((NULL != _7859.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _12327 = _7859;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12327.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _7860 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12327.get()));
                          {
                            int _7863 = _ptr__7855[_7858];
                            {
                              int _7864 = (int)0;
                              for(;(_7864 < mosek::fusion::p_Matrix::_get_impl(_7860)->dimj);++ _7864)
                              {
                                {
                                  _ptr__7849[_7852] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_7860)->data)(_7863));
                                  _ptr__7850[_7852] = safe_add( _7853,_7856 );
                                  _ptr__7851[_7852] = safe_add( _7857,_7864 );
                                  ++ _7863;
                                  ++ _7852;
                                }
                              }
                            }
                            _ptr__7855[_7858] = _7863;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12327.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _7861 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12327.get()));
                          {
                            int _7865;
                            {
                              _7865 = _ptr__7855[_7858];
                              for(;((_7865 < mosek::fusion::p_SparseMatrix::_get_impl(_7861)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_7861)->subi)(_7865)) == _7856));++ _7865)
                              {
                                {
                                  _ptr__7849[_7852] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_7861)->val)(_7865));
                                  _ptr__7851[_7852] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_7861)->subj)(_7865)),_7857 );
                                  _ptr__7850[_7852] = safe_add( _7853,_7856 );
                                  ++ _7852;
                                }
                              }
                            }
                            _ptr__7855[_7858] = _7865;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _7862 = _12327;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _7857 = safe_add( _7857,_ptr__7843[_7858] );
                  }
                }
              }
            }
          }
        }
        _7853 = safe_add( _7853,_ptr__7842[_7854] );
      }
    }
  }
  int _7866 = (int)0;
  int _7867 = (int)0;
  {
    int _7868 = (int)0;
    for(;(_7868 < _7840);++ _7868)
    {
      {
        _7866 = safe_add( _7866,_ptr__7842[_7868] );
      }
    }
  }
  {
    int _7869 = (int)0;
    for(;(_7869 < _7841);++ _7869)
    {
      {
        _7867 = safe_add( _7867,_ptr__7843[_7869] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7866,_7867,_7850,_7851,_7849)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _7870) { return mosek::fusion::p_Matrix::sparse(_7870); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _7870){
  int _7871 = (int)((_7870)->size(0));
  int _7872 = (int)((_7870)->size(1));
  long long _7873 = (long long)safe_mul( _7871,_7872 );
  int _7874 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _7875 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7873)));
  _checked_ptr_1<int> _ptr__7875(_7875 ? _7875->raw() : nullptr,_7875 ? _7875->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7876 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7873)));
  _checked_ptr_1<int> _ptr__7876(_7876 ? _7876->raw() : nullptr,_7876 ? _7876->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7877 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7873)));
  _checked_ptr_1<double> _ptr__7877(_7877 ? _7877->raw() : nullptr,_7877 ? _7877->size(0) : 0);
  {
    int _7878 = (int)0;
    for(;(_7878 < _7871);++ _7878)
    {
      {
        {
          int _7879 = (int)0;
          for(;(_7879 < _7872);++ _7879)
          {
            {
              _ptr__7875[_7874] = _7878;
              _ptr__7876[_7874] = _7879;
              _ptr__7877[_7874] = ((*_7870)(_7878,_7879));
              ++ _7874;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7871,_7872,_7875,_7876,_7877)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7880,    int _7881) { return mosek::fusion::p_Matrix::sparse(_7880,_7881); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7880,int _7881){
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7880,_7881,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7882,    int _7883,    std::shared_ptr< monty::ndarray< int,1 > > _7884,    std::shared_ptr< monty::ndarray< int,1 > > _7885,    double _7886) { return mosek::fusion::p_Matrix::sparse(_7882,_7883,_7884,_7885,_7886); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7882,int _7883,std::shared_ptr< monty::ndarray< int,1 > > _7884,std::shared_ptr< monty::ndarray< int,1 > > _7885,double _7886){
  _checked_ptr_1<int> _ptr__7884(_7884 ? _7884->raw() : nullptr, _7884 ? _7884->size(0) : 0);
  _checked_ptr_1<int> _ptr__7885(_7885 ? _7885->raw() : nullptr, _7885 ? _7885->size(0) : 0);
  int _7887 = (int)0;
  if ((NULL != _7884.get()))
  {
    {
      _7887 = (int)((_7884)->size(0));
    }
  }
  else if((NULL != _7885.get()))
  {
    {
      _7887 = (int)((_7885)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_7882,_7883,_7884,_7885,::mosek::fusion::Utils::Tools::makevector(_7886,_7887));
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _7888,    std::shared_ptr< monty::ndarray< int,1 > > _7889,    double _7890) { return mosek::fusion::p_Matrix::sparse(_7888,_7889,_7890); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _7888,std::shared_ptr< monty::ndarray< int,1 > > _7889,double _7890){
  _checked_ptr_1<int> _ptr__7888(_7888 ? _7888->raw() : nullptr, _7888 ? _7888->size(0) : 0);
  _checked_ptr_1<int> _ptr__7889(_7889 ? _7889->raw() : nullptr, _7889 ? _7889->size(0) : 0);
  int _7891 = (int)0;
  int _7892 = (int)0;
  int _7893 = (int)((_7888)->size(0));
  if ((_7893 > (int)((_7889)->size(0))))
  {
    {
      _7893 = (int)((_7889)->size(0));
    }
  }
  {}
  int _12328 = (int)0;
  int _12329 = _7893;
  for (int _7894 = _12328; _7894 < _12329; ++_7894)
  {
    {
      if ((_7892 < _ptr__7888[_7894]))
      {
        {
          _7892 = _ptr__7888[_7894];
        }
      }
      {}
      if ((_7891 < _ptr__7889[_7894]))
      {
        {
          _7891 = _ptr__7889[_7894];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _7892,(int)1 ),safe_add( _7891,(int)1 ),_7888,_7889,_7890);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _7895,    std::shared_ptr< monty::ndarray< int,1 > > _7896,    std::shared_ptr< monty::ndarray< double,1 > > _7897) { return mosek::fusion::p_Matrix::sparse(_7895,_7896,_7897); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _7895,std::shared_ptr< monty::ndarray< int,1 > > _7896,std::shared_ptr< monty::ndarray< double,1 > > _7897){
  _checked_ptr_1<int> _ptr__7895(_7895 ? _7895->raw() : nullptr, _7895 ? _7895->size(0) : 0);
  _checked_ptr_1<int> _ptr__7896(_7896 ? _7896->raw() : nullptr, _7896 ? _7896->size(0) : 0);
  _checked_ptr_1<double> _ptr__7897(_7897 ? _7897->raw() : nullptr, _7897 ? _7897->size(0) : 0);
  int _7898 = (int)0;
  int _7899 = (int)0;
  int _7900 = (int)((_7895)->size(0));
  if ((_7900 > (int)((_7896)->size(0))))
  {
    {
      _7900 = (int)((_7896)->size(0));
    }
  }
  {}
  if ((_7900 > (int)((_7897)->size(0))))
  {
    {
      _7900 = (int)((_7897)->size(0));
    }
  }
  {}
  int _12330 = (int)0;
  int _12331 = _7900;
  for (int _7901 = _12330; _7901 < _12331; ++_7901)
  {
    {
      if ((_7899 < _ptr__7895[_7901]))
      {
        {
          _7899 = _ptr__7895[_7901];
        }
      }
      {}
      if ((_7898 < _ptr__7896[_7901]))
      {
        {
          _7898 = _ptr__7896[_7901];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _7899,(int)1 ),safe_add( _7898,(int)1 ),_7895,_7896,_7897);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7902,    int _7903,    std::shared_ptr< monty::ndarray< int,1 > > _7904,    std::shared_ptr< monty::ndarray< int,1 > > _7905,    std::shared_ptr< monty::ndarray< double,1 > > _7906) { return mosek::fusion::p_Matrix::sparse(_7902,_7903,_7904,_7905,_7906); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7902,int _7903,std::shared_ptr< monty::ndarray< int,1 > > _7904,std::shared_ptr< monty::ndarray< int,1 > > _7905,std::shared_ptr< monty::ndarray< double,1 > > _7906){
  _checked_ptr_1<int> _ptr__7904(_7904 ? _7904->raw() : nullptr, _7904 ? _7904->size(0) : 0);
  _checked_ptr_1<int> _ptr__7905(_7905 ? _7905->raw() : nullptr, _7905 ? _7905->size(0) : 0);
  _checked_ptr_1<double> _ptr__7906(_7906 ? _7906->raw() : nullptr, _7906 ? _7906->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12332;
  bool _12333 = (NULL != _7906.get());
  if (_12333)
  {
    _12332 = _7906;
  }
  else
  {
    _12332 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7907 = _12332;
  _checked_ptr_1<double> _ptr__7907(_7907 ? _7907->raw() : nullptr,_7907 ? _7907->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12334;
  bool _12335 = (NULL != _7905.get());
  if (_12335)
  {
    _12334 = _7905;
  }
  else
  {
    _12334 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7908 = _12334;
  _checked_ptr_1<int> _ptr__7908(_7908 ? _7908->raw() : nullptr,_7908 ? _7908->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12336;
  bool _12337 = (NULL != _7904.get());
  if (_12337)
  {
    _12336 = _7904;
  }
  else
  {
    _12336 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7909 = _12336;
  _checked_ptr_1<int> _ptr__7909(_7909 ? _7909->raw() : nullptr,_7909 ? _7909->size(0) : 0);
  long long _7910 = (long long)((_7909)->size(0));
  if ((((long long)((_7908)->size(0)) != _7910) || ((long long)((_7907)->size(0)) != _7910)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7902,_7903,_7909,_7908,_7907,_7910)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
int mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns(){
  return dimj;
}
int mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows(){
  return dimi;
}
void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _7916) : RuntimeException(_7916)  {
  }
mosek::fusion::FatalError::FatalError  ( const std::string &  _7917) : RuntimeException(_7917)  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _7918) : RuntimeException(_7918.toString())  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _7919) : RuntimeException(_7919)  {
  }
mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _7920) : mosek::fusion::FusionRuntimeException(_7920)  {
  }
mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))  {
  }
mosek::fusion::SolutionError::SolutionError  ( const std::string &  _7921) : mosek::fusion::FusionException(_7921)  {
  }
mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))  {
  }
mosek::fusion::SliceError::SliceError  ( const std::string &  _7922) : mosek::fusion::FusionRuntimeException(_7922)  {
  }
mosek::fusion::UpdateError::UpdateError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Cannot update parameterized item"))  {
  }
mosek::fusion::UpdateError::UpdateError  ( const std::string &  _7923) : mosek::fusion::FusionRuntimeException(_7923)  {
  }
mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _7924) : mosek::fusion::FusionRuntimeException(_7924)  {
  }
mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _7925) : mosek::fusion::FusionRuntimeException(_7925)  {
  }
mosek::fusion::NameError::NameError  ( const std::string &  _7926) : mosek::fusion::FusionRuntimeException(_7926)  {
  }
mosek::fusion::DeletionError::DeletionError  ( const std::string &  _7927) : mosek::fusion::FusionRuntimeException(_7927)  {
  }
mosek::fusion::ModelError::ModelError  ( const std::string &  _7928) : mosek::fusion::FusionRuntimeException(_7928)  {
  }
mosek::fusion::MatrixError::MatrixError  ( const std::string &  _7929) : mosek::fusion::FusionRuntimeException(_7929)  {
  }
mosek::fusion::DimensionError::DimensionError  ( const std::string &  _7930) : mosek::fusion::FusionRuntimeException(_7930)  {
  }
mosek::fusion::LengthError::LengthError  ( const std::string &  _7931) : mosek::fusion::FusionRuntimeException(_7931)  {
  }
mosek::fusion::RangeError::RangeError  ( const std::string &  _7932) : mosek::fusion::FusionRuntimeException(_7932)  {
  }
mosek::fusion::IndexError::IndexError  ( const std::string &  _7933) : mosek::fusion::FusionRuntimeException(_7933)  {
  }
mosek::fusion::DomainError::DomainError  ( const std::string &  _7934) : mosek::fusion::FusionRuntimeException(_7934)  {
  }
mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _7935) : mosek::fusion::FusionRuntimeException(_7935)  {
  }
mosek::fusion::ParameterError::ParameterError  ( const std::string &  _7936) : mosek::fusion::FusionRuntimeException(_7936)  {
  }
mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _7937) : mosek::fusion::FusionRuntimeException(_7937)  {
  }
mosek::fusion::IOError::IOError  ( const std::string &  _7938) : mosek::fusion::FusionRuntimeException(_7938)  {
  }
mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _7939) : RuntimeException(_7939)  {
    msg = _7939;
  }
std::string mosek::fusion::FusionRuntimeException::toString(){
  return msg;
}
mosek::fusion::FusionException::FusionException  ( const std::string &  _7940) : Exception(_7940)  {
    msg = _7940;
  }
std::string mosek::fusion::FusionException::toString(){
  return msg;
}
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedBlocks::p_LinkedBlocks  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (){ return new mosek::fusion::LinkedBlocks(); }mosek::fusion::LinkedBlocks::LinkedBlocks  () :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedBlocks::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (int _7941){ return new mosek::fusion::LinkedBlocks(_7941); }mosek::fusion::LinkedBlocks::LinkedBlocks  (int _7941) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_7941); }void mosek::fusion::p_LinkedBlocks::_initialize  (int _7941){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_7941);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7942){ return new mosek::fusion::LinkedBlocks(_7942); }mosek::fusion::LinkedBlocks::LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7942) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_7942); }void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7942){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_7942)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_7942)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_7942)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_7942)->bfirst);
  }
}void mosek::fusion::LinkedBlocks :: free(int _7943) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_7943); }void mosek::fusion::p_LinkedBlocks::free(int _7943){
  int _7944 = ((*bfirst)(_7943));
  ints->free(_7943,((*bsize)(_7943)));
  ((*bsize)(_7943)) = (-(int)1);
  ((*bfirst)(_7943)) = (-(int)1);
  blocks->free(_7944,(int)1);
}
int mosek::fusion::LinkedBlocks :: alloc(int _7945) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_7945); }int mosek::fusion::p_LinkedBlocks::alloc(int _7945){
  int _12338;
  bool _12339 = (_7945 > (int)0);
  if (_12339)
  {
    _12338 = ints->alloc(_7945);
  }
  else
  {
    _12338 = (-(int)1);
  }
  int _7946 = _12338;
  int _7947 = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7948 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__7948(_7948 ? _7948->raw() : nullptr,_7948 ? _7948->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7949 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__7949(_7949 ? _7949->raw() : nullptr,_7949 ? _7949->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_7948,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_7949,(int)0,(int)((bfirst)->size(0)));
      bsize = _7948;
      bfirst = _7949;
    }
  }
  {}
  ((*bfirst)(_7947)) = _7946;
  ((*bsize)(_7947)) = _7945;
  return _7947;
}
int mosek::fusion::LinkedBlocks :: maxidx(int _7950) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_7950); }int mosek::fusion::p_LinkedBlocks::maxidx(int _7950){
  return ints->maxidx(((*bfirst)(_7950)),((*bsize)(_7950)));
}
void mosek::fusion::LinkedBlocks :: get(int _7951,std::shared_ptr< monty::ndarray< int,1 > > _7952,int _7953) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_7951,_7952,_7953); }void mosek::fusion::p_LinkedBlocks::get(int _7951,std::shared_ptr< monty::ndarray< int,1 > > _7952,int _7953){
  _checked_ptr_1<int> _ptr__7952(_7952 ? _7952->raw() : nullptr, _7952 ? _7952->size(0) : 0);
  ints->get(((*bfirst)(_7951)),((*bsize)(_7951)),_7952,_7953);
}
int mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }int mosek::fusion::p_LinkedBlocks::numblocks(){
  return (int)((bsize)->size(0));
}
int mosek::fusion::LinkedBlocks :: blocksize(int _7954) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_7954); }int mosek::fusion::p_LinkedBlocks::blocksize(int _7954){
  return ((*bsize)(_7954));
}
int mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedBlocks::capacity(){
  return ints->capacity();
}
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedBlocks::validate(){
  return (ints->validate() && blocks->validate());
}
void mosek::fusion::p_LinkedBlocks::destroy(){bfirst.reset();bsize.reset();blocks.reset();ints.reset();}void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedInts::p_LinkedInts  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (int _7955){ return new mosek::fusion::LinkedInts(_7955); }mosek::fusion::LinkedInts::LinkedInts  (int _7955) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_7955); }void mosek::fusion::p_LinkedInts::_initialize  (int _7955){monty::rc_reserve __reserve_this(_pubthis);   {
    int _12340;
    bool _12341 = (_7955 > (int)0);
    if (_12341)
    {
      _12340 = _7955;
    }
    else
    {
      _12340 = (int)128;
    }
    int _7956 = _12340;
    next = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7956)));
    prev = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7956)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_7956 - (int)1);
    int _12342 = (int)1;
    int _12343 = _7956;
    for (int _7957 = _12342; _7957 < _12343; ++_7957)
    {
      {
        ((*prev)(_7957)) = (_7957 - (int)1);
        ((*next)((_7957 - (int)1))) = _7957;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_7956 - (int)1))) = (-(int)1);
    nfree = _7956;
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (){ return new mosek::fusion::LinkedInts(); }mosek::fusion::LinkedInts::LinkedInts  () :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedInts::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7958){ return new mosek::fusion::LinkedInts(_7958); }mosek::fusion::LinkedInts::LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7958) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_7958); }void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7958){monty::rc_reserve __reserve_this(_pubthis);   {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_7958)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_7958)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_7958)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_7958)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_7958)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_7958)->nfree;
  }
}void mosek::fusion::LinkedInts :: free(int _7959,int _7960) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_7959,_7960); }void mosek::fusion::p_LinkedInts::free(int _7959,int _7960){
  int _7961 = _7959;
  int _7962 = _7961;
  int _12344 = (int)0;
  int _12345 = (_7960 - (int)1);
  for (int _7963 = _12344; _7963 < _12345; ++_7963)
  {
    {
      _7962 = ((*next)(_7962));
    }
  }
  int _7964 = ((*prev)(_7961));
  int _7965 = ((*next)(_7962));
  if ((_7964 >= (int)0))
  {
    {
      ((*next)(_7964)) = _7965;
    }
  }
  {}
  if ((_7965 >= (int)0))
  {
    {
      ((*prev)(_7965)) = _7964;
    }
  }
  {}
  ((*prev)(_7961)) = (-(int)1);
  ((*next)(_7962)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _7962;
    }
  }
  {}
  first_free = _7961;
  nfree += _7960;
}
int mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }int mosek::fusion::p_LinkedInts::alloc(){
  return allocblock((int)1);
}
int mosek::fusion::LinkedInts :: alloc(int _7966) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_7966); }int mosek::fusion::p_LinkedInts::alloc(int _7966){
  return allocblock(_7966);
}
void mosek::fusion::LinkedInts :: alloc(int _7967,std::shared_ptr< monty::ndarray< int,1 > > _7968,int _7969) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_7967,_7968,_7969); }void mosek::fusion::p_LinkedInts::alloc(int _7967,std::shared_ptr< monty::ndarray< int,1 > > _7968,int _7969){
  _checked_ptr_1<int> _ptr__7968(_7968 ? _7968->raw() : nullptr, _7968 ? _7968->size(0) : 0);
  int _7970 = allocblock(_7967);
  int _12346 = (int)0;
  int _12347 = _7967;
  for (int _7971 = _12346; _7971 < _12347; ++_7971)
  {
    {
      _ptr__7968[safe_add( _7971,_7969 )] = _7970;
      _7970 = ((*next)(_7970));
    }
  }
}
void mosek::fusion::LinkedInts :: get(int _7972,int _7973,std::shared_ptr< monty::ndarray< int,1 > > _7974,int _7975) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_7972,_7973,_7974,_7975); }void mosek::fusion::p_LinkedInts::get(int _7972,int _7973,std::shared_ptr< monty::ndarray< int,1 > > _7974,int _7975){
  _checked_ptr_1<int> _ptr__7974(_7974 ? _7974->raw() : nullptr, _7974 ? _7974->size(0) : 0);
  int _7976 = _7972;
  int _12348 = (int)0;
  int _12349 = _7973;
  for (int _7977 = _12348; _7977 < _12349; ++_7977)
  {
    {
      _ptr__7974[safe_add( _7977,_7975 )] = _7976;
      _7976 = ((*next)(_7976));
    }
  }
}
int mosek::fusion::LinkedInts :: maxidx(int _7978,int _7979) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_7978,_7979); }int mosek::fusion::p_LinkedInts::maxidx(int _7978,int _7979){
  int _7980 = _7978;
  int _7981 = _7978;
  int _12350 = (int)1;
  int _12351 = _7979;
  for (int _7982 = _12350; _7982 < _12351; ++_7982)
  {
    {
      _7981 = ((*next)(_7981));
      if ((_7980 < _7981))
      {
        {
          _7980 = _7981;
        }
      }
      {}
    }
  }
  return _7980;
}
int mosek::fusion::p_LinkedInts::allocblock(int _7983){
  int _7984 = (int)((next)->size(0));
  if ((nfree < _7983))
  {
    {
      int _7985 = (_7983 - nfree);
      if ((_7985 < _7984))
      {
        {
          _7985 = _7984;
        }
      }
      {}
      recap(safe_add( _7985,_7984 ));
    }
  }
  {}
  int _7986 = first_free;
  int _7987 = _7986;
  int _12352 = (int)0;
  int _12353 = (_7983 - (int)1);
  for (int _7988 = _12352; _7988 < _12353; ++_7988)
  {
    {
      _7987 = ((*next)(_7987));
    }
  }
  first_free = ((*next)(_7987));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_7987)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _7987;
    }
  }
  {}
  first_used = _7986;
  nfree -= _7983;
  return _7986;
}
void mosek::fusion::p_LinkedInts::recap(int _7989){
  int _7990 = (int)((next)->size(0));
  if ((_7989 > _7990))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_7989);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_7989);
      int _12354 = _7990;
      int _12355 = (_7989 - (int)1);
      for (int _7991 = _12354; _7991 < _12355; ++_7991)
      {
        {
          ((*next)(_7991)) = safe_add( _7991,(int)1 );
          ((*prev)(safe_add( _7991,(int)1 ))) = _7991;
        }
      }
      ((*next)((_7989 - (int)1))) = (-(int)1);
      ((*prev)(_7990)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _7990;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _7990;
        }
      }
      last_free = (_7989 - (int)1);
      nfree += (_7989 - _7990);
    }
  }
  {}
}
int mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedInts::capacity(){
  return (int)((next)->size(0));
}
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedInts::validate(){
  std::shared_ptr< monty::ndarray< bool,1 > > _7992 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int _7993 = first_used;
  while ( (_7993 >= (int)0) )
  {
    {
      ((*_7992)(_7993)) = true;
      _7993 = ((*next)(_7993));
      if (((_7993 >= (int)0) && ((*_7992)(_7993))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _7993 = first_free;
  int _7994 = (int)0;
  while ( (_7993 >= (int)0) )
  {
    {
      ++ _7994;
      ((*_7992)(_7993)) = true;
      _7993 = ((*next)(_7993));
      if (((_7993 >= (int)0) && ((*_7992)(_7993))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_7994 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int _12356 = (int)0;
  int _12357 = (int)((_7992)->size(0));
  for (int _7995 = _12356; _7995 < _12357; ++_7995)
  {
    {
      if ((!((*_7992)(_7993))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int _12358 = (int)0;
  int _12359 = (int)((_7992)->size(0));
  for (int _7996 = _12358; _7996 < _12359; ++_7996)
  {
    {
      ((*_7992)(_7996)) = false;
    }
  }
  _7993 = last_free;
  int _7997 = (int)0;
  while ( (_7993 >= (int)0) )
  {
    {
      ++ _7997;
      ((*_7992)(_7993)) = true;
      _7993 = ((*prev)(_7993));
      if (((_7993 >= (int)0) && ((*_7992)(_7993))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_7997 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinkedInts::destroy(){prev.reset();next.reset();}void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _7998,    const std::string & _7999,    double _8000) { mosek::fusion::p_Parameters::setParameter(_7998,_7999,_8000); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _7998,const std::string & _7999,double _8000){
  if (false)
  {
    {
    }
  }
  else if((_7999 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_7999 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_7999 == std::string ("numThreads")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8001 = _8000;
          if (((int)0 <= _8001))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8001);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_7999 == std::string ("mtSpincount")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8002 = _8000;
          if ((((int)0 <= _8002) && (_8002 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8002);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_7999 == std::string ("biMaxIterations")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8003 = _8000;
          if (((int)0 <= _8003))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8003);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8004 = _8000;
          if (((int)0 <= _8004))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8004);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logCutSecondOpt")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8005 = _8000;
          if (((int)0 <= _8005))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8005);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logResponse")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8006 = _8000;
          if (((int)0 <= _8006))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8006);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_7999 == std::string ("logBi")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8007 = _8000;
          if (((int)0 <= _8007))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8007);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logBiFreq")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8008 = _8000;
          if (((int)0 <= _8008))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8008);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_7999 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_7999 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_7999 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_7999 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_7999 == std::string ("logIntpnt")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8009 = _8000;
          if (((int)0 <= _8009))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8009);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntMaxIterations")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8010 = _8000;
          if (((int)0 <= _8010))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8010);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntOffColTrh")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8011 = _8000;
          if (((int)0 <= _8011))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8011);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_7999 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8012 = _8000;
          if (((int)0 <= _8012))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8012);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_7999 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_7999 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_7999 == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8013 = _8000;
          if (((-(int)1) <= _8013))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8013);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_7999 == std::string ("presolveLevel")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8014 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8014);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logPresolve")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8015 = _8000;
          if (((int)0 <= _8015))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8015);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_7999 == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8016 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8016);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8017 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8017);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8018 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8018);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("simPrimalCrash")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8019 = _8000;
          if (((int)0 <= _8019))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8019);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logSim")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8020 = _8000;
          if (((int)0 <= _8020))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8020);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logSimMinor")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8021 = _8000;
          if (((int)0 <= _8021))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8021);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logSimFreq")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8022 = _8000;
          if (((int)0 <= _8022))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8022);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8023 = _8000;
          if ((((int)0 <= _8023) && (_8023 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8023);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_7999 == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8024 = _8000;
          if ((((int)0 <= _8024) && (_8024 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8024);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_7999 == std::string ("simMaxIterations")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8025 = _8000;
          if (((int)0 <= _8025))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8025);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_7999 == std::string ("simRefactorFreq")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8026 = _8000;
          if (((int)0 <= _8026))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8026);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("simSeed")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8027 = _8000;
          if ((((int)0 <= _8027) && (_8027 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8027);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_7999 == std::string ("logMio")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8028 = _8000;
          if (((int)0 <= _8028))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8028);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logMioFreq")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8029 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8029);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8030 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8030);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8031 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8031);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8032 = _8000;
          if (((int)0 <= _8032))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8032);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8033 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8033);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_7999 == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8034 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8034);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioProbingLevel")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8035 = _8000;
          if ((((-(int)1) <= _8035) && (_8035 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8035);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8036 = _8000;
          if ((((-(int)1) <= _8036) && (_8036 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8036);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8037 = _8000;
          if ((((-(int)1) <= _8037) && (_8037 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8037);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_7999 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_7999 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_7999 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_7999 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_7999 == std::string ("mioSeed")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8038 = _8000;
          if (((int)0 <= _8038))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8038);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_7999 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_7999 == std::string ("writeLpLineWidth")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8039 = _8000;
          if (((int)40 <= _8039))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8039);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("writeLpTermsPerLine")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8040 = _8000;
          if (((int)0 <= _8040))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8040);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_7999 == std::string ("logInfeasAna")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8041 = _8000;
          if (((int)0 <= _8041))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8041);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_7999 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_7999 == std::string ("licensePauseTime")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8042 = _8000;
          if ((((int)0 <= _8042) && (_8042 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8042);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_7999 == std::string ("log")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8043 = _8000;
          if (((int)0 <= _8043))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8043);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logExpand")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8044 = _8000;
          if (((int)0 <= _8044))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8044);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logFile")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8045 = _8000;
          if (((int)0 <= _8045))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8045);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("logOrder")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8046 = _8000;
          if (((int)0 <= _8046))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8046);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_7999 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_7999 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8047 = _8000;
          if ((((int)0 <= _8047) && (_8047 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8047);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8048 = _8000;
          if ((((int)0 <= _8048) && (_8048 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8048);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8049 = _8000;
          if (((int)0 <= _8049))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8049);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_7999 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_7999 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_7999 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_7999 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_7999 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_7999 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_7999 == std::string ("simDualCrash")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8050 = _8000;
          if (((int)0 <= _8050))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8050);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_7999 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8051 = _8000;
          if ((((-(int)1) <= _8051) && (_8051 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8051);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_7999 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_7999 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_7999 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_7999 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_7999 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8052 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8052);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8053 = _8000;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8053);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_7999 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_7999 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_7999 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_7999 == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8054 = _8000;
          if (((-(int)1) <= _8054))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8054);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_8000 - (int)_8000) == 0.0))
      {
        {
          double _8055 = _8000;
          if ((((-(int)1) <= _8055) && (_8055 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8055);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("optimizerMaxTime")))
  {
    {
      double _8056 = _8000;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8056);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("lowerObjCut")))
  {
    {
      double _8057 = _8000;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8057);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("upperObjCut")))
  {
    {
      double _8058 = _8000;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8058);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8059 = _8000;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8059);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8060 = _8000;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8060);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolRelGap")))
  {
    {
      double _8061 = _8000;
      if ((1.000000e-14 <= _8061))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8061);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolStepSize")))
  {
    {
      double _8062 = _8000;
      if (((0.000000e+00 <= _8062) && (_8062 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8062);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("simLuTolRelPiv")))
  {
    {
      double _8063 = _8000;
      if (((1.000000e-06 <= _8063) && (_8063 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8063);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolRelStep")))
  {
    {
      double _8064 = _8000;
      if (((1.000000e-04 <= _8064) && (_8064 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8064);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolPath")))
  {
    {
      double _8065 = _8000;
      if (((0.000000e+00 <= _8065) && (_8065 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8065);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolPfeas")))
  {
    {
      double _8066 = _8000;
      if (((0.000000e+00 <= _8066) && (_8066 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8066);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolDfeas")))
  {
    {
      double _8067 = _8000;
      if (((0.000000e+00 <= _8067) && (_8067 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8067);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolMuRed")))
  {
    {
      double _8068 = _8000;
      if (((0.000000e+00 <= _8068) && (_8068 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8068);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolInfeas")))
  {
    {
      double _8069 = _8000;
      if (((0.000000e+00 <= _8069) && (_8069 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8069);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8070 = _8000;
      if (((0.000000e+00 <= _8070) && (_8070 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8070);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8071 = _8000;
      if (((0.000000e+00 <= _8071) && (_8071 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8071);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8072 = _8000;
      if (((0.000000e+00 <= _8072) && (_8072 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8072);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8073 = _8000;
      if (((0.000000e+00 <= _8073) && (_8073 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8073);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8074 = _8000;
      if ((1.000000e+00 <= _8074))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8074);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8075 = _8000;
      if (((0.000000e+00 <= _8075) && (_8075 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8075);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolPsafe")))
  {
    {
      double _8076 = _8000;
      if ((1.000000e-04 <= _8076))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8076);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("intpntTolDsafe")))
  {
    {
      double _8077 = _8000;
      if ((1.000000e-04 <= _8077))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8077);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioMaxTime")))
  {
    {
      double _8078 = _8000;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8078);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioRelGapConst")))
  {
    {
      double _8079 = _8000;
      if ((1.000000e-15 <= _8079))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8079);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioTolRelGap")))
  {
    {
      double _8080 = _8000;
      if ((0.000000e+00 <= _8080))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8080);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioTolAbsGap")))
  {
    {
      double _8081 = _8000;
      if ((0.000000e+00 <= _8081))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8081);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8082 = _8000;
      if ((1.000000e-09 <= _8082))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8082);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("basisTolX")))
  {
    {
      double _8083 = _8000;
      if ((1.000000e-09 <= _8083))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8083);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("basisTolS")))
  {
    {
      double _8084 = _8000;
      if ((1.000000e-09 <= _8084))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8084);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("basisRelTolS")))
  {
    {
      double _8085 = _8000;
      if ((0.000000e+00 <= _8085))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8085);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("presolveTolX")))
  {
    {
      double _8086 = _8000;
      if ((0.000000e+00 <= _8086))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8086);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("presolveTolS")))
  {
    {
      double _8087 = _8000;
      if ((0.000000e+00 <= _8087))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8087);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("presolveTolAij")))
  {
    {
      double _8088 = _8000;
      if ((1.000000e-15 <= _8088))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8088);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8089 = _8000;
      if ((0.000000e+00 <= _8089))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8089);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("presolveTolRelLindep")))
  {
    {
      double _8090 = _8000;
      if ((0.000000e+00 <= _8090))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8090);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8091 = _8000;
      if ((1.000000e-12 <= _8091))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8091);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioTolFeas")))
  {
    {
      double _8092 = _8000;
      if (((1.000000e-09 <= _8092) && (_8092 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8092);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_7999 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8093 = _8000;
      if (((0.000000e+00 <= _8093) && (_8093 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_7998.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8093);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_7999 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_7999 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_7999 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_7999 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_7999 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_7999 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8094,    const std::string & _8095,    int _8096) { mosek::fusion::p_Parameters::setParameter(_8094,_8095,_8096); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8094,const std::string & _8095,int _8096){
  if (false)
  {
    {
    }
  }
  else if((_8095 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8095 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8095 == std::string ("numThreads")))
  {
    {
      int _8097 = _8096;
      if (((int)0 <= _8097))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8097);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_8095 == std::string ("mtSpincount")))
  {
    {
      int _8098 = _8096;
      if ((((int)0 <= _8098) && (_8098 <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8098);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8095 == std::string ("biMaxIterations")))
  {
    {
      int _8099 = _8096;
      if (((int)0 <= _8099))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8099);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int _8100 = _8096;
      if (((int)0 <= _8100))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8100);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logCutSecondOpt")))
  {
    {
      int _8101 = _8096;
      if (((int)0 <= _8101))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8101);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logResponse")))
  {
    {
      int _8102 = _8096;
      if (((int)0 <= _8102))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8102);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8095 == std::string ("logBi")))
  {
    {
      int _8103 = _8096;
      if (((int)0 <= _8103))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8103);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logBiFreq")))
  {
    {
      int _8104 = _8096;
      if (((int)0 <= _8104))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8104);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8095 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8095 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8095 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8095 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8095 == std::string ("logIntpnt")))
  {
    {
      int _8105 = _8096;
      if (((int)0 <= _8105))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8105);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntMaxIterations")))
  {
    {
      int _8106 = _8096;
      if (((int)0 <= _8106))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8106);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntOffColTrh")))
  {
    {
      int _8107 = _8096;
      if (((int)0 <= _8107))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8107);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8095 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int _8108 = _8096;
      if (((int)0 <= _8108))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8108);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8095 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8095 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8095 == std::string ("intpntMaxNumCor")))
  {
    {
      int _8109 = _8096;
      if (((-(int)1) <= _8109))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8109);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8095 == std::string ("presolveLevel")))
  {
    {
      int _8110 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8110);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logPresolve")))
  {
    {
      int _8111 = _8096;
      if (((int)0 <= _8111))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8111);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8095 == std::string ("presolveMaxNumPass")))
  {
    {
      int _8112 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8112);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int _8113 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8113);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int _8114 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8114);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("simPrimalCrash")))
  {
    {
      int _8115 = _8096;
      if (((int)0 <= _8115))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8115);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logSim")))
  {
    {
      int _8116 = _8096;
      if (((int)0 <= _8116))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8116);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logSimMinor")))
  {
    {
      int _8117 = _8096;
      if (((int)0 <= _8117))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8117);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logSimFreq")))
  {
    {
      int _8118 = _8096;
      if (((int)0 <= _8118))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8118);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("simPrimalRestrictSelection")))
  {
    {
      int _8119 = _8096;
      if ((((int)0 <= _8119) && (_8119 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8119);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8095 == std::string ("simDualRestrictSelection")))
  {
    {
      int _8120 = _8096;
      if ((((int)0 <= _8120) && (_8120 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8120);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8095 == std::string ("simMaxIterations")))
  {
    {
      int _8121 = _8096;
      if (((int)0 <= _8121))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8121);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8095 == std::string ("simRefactorFreq")))
  {
    {
      int _8122 = _8096;
      if (((int)0 <= _8122))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8122);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("simSeed")))
  {
    {
      int _8123 = _8096;
      if ((((int)0 <= _8123) && (_8123 <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8123);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8095 == std::string ("logMio")))
  {
    {
      int _8124 = _8096;
      if (((int)0 <= _8124))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8124);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logMioFreq")))
  {
    {
      int _8125 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8125);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioMaxNumRelaxs")))
  {
    {
      int _8126 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8126);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioMaxNumBranches")))
  {
    {
      int _8127 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8127);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int _8128 = _8096;
      if (((int)0 <= _8128))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8128);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioMaxNumSolutions")))
  {
    {
      int _8129 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8129);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8095 == std::string ("mioHeuristicLevel")))
  {
    {
      int _8130 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8130);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioProbingLevel")))
  {
    {
      int _8131 = _8096;
      if ((((-(int)1) <= _8131) && (_8131 <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8131);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioCutSelectionLevel")))
  {
    {
      int _8132 = _8096;
      if ((((-(int)1) <= _8132) && (_8132 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8132);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioVbDetectionLevel")))
  {
    {
      int _8133 = _8096;
      if ((((-(int)1) <= _8133) && (_8133 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8133);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8095 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8095 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8095 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8095 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8095 == std::string ("mioSeed")))
  {
    {
      int _8134 = _8096;
      if (((int)0 <= _8134))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8134);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8095 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_8095 == std::string ("writeLpLineWidth")))
  {
    {
      int _8135 = _8096;
      if (((int)40 <= _8135))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8135);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("writeLpTermsPerLine")))
  {
    {
      int _8136 = _8096;
      if (((int)0 <= _8136))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8136);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_8095 == std::string ("logInfeasAna")))
  {
    {
      int _8137 = _8096;
      if (((int)0 <= _8137))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8137);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8095 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8095 == std::string ("licensePauseTime")))
  {
    {
      int _8138 = _8096;
      if ((((int)0 <= _8138) && (_8138 <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8138);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8095 == std::string ("log")))
  {
    {
      int _8139 = _8096;
      if (((int)0 <= _8139))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8139);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logExpand")))
  {
    {
      int _8140 = _8096;
      if (((int)0 <= _8140))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8140);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logFile")))
  {
    {
      int _8141 = _8096;
      if (((int)0 <= _8141))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8141);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("logOrder")))
  {
    {
      int _8142 = _8096;
      if (((int)0 <= _8142))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8142);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8095 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8095 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int _8143 = _8096;
      if ((((int)0 <= _8143) && (_8143 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8143);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("simDualPhaseoneMethod")))
  {
    {
      int _8144 = _8096;
      if ((((int)0 <= _8144) && (_8144 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8144);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("simMaxNumSetbacks")))
  {
    {
      int _8145 = _8096;
      if (((int)0 <= _8145))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8145);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8095 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8095 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8095 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8095 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8095 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8095 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8095 == std::string ("simDualCrash")))
  {
    {
      int _8146 = _8096;
      if (((int)0 <= _8146))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8146);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8095 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int _8147 = _8096;
      if ((((-(int)1) <= _8147) && (_8147 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8147);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8095 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8095 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8095 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8095 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_8095 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int _8148 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8148);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int _8149 = _8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8149);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8095 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8095 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8095 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8095 == std::string ("mioRinsMaxNodes")))
  {
    {
      int _8150 = _8096;
      if (((-(int)1) <= _8150))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8150);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioFeaspumpLevel")))
  {
    {
      int _8151 = _8096;
      if ((((-(int)1) <= _8151) && (_8151 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8151);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("optimizerMaxTime")))
  {
    {
      double _8152 = (double)_8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8152);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("lowerObjCut")))
  {
    {
      double _8153 = (double)_8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8153);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("upperObjCut")))
  {
    {
      double _8154 = (double)_8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8154);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8155 = (double)_8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8155);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8156 = (double)_8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8156);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolRelGap")))
  {
    {
      double _8157 = (double)_8096;
      if ((1.000000e-14 <= _8157))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8157);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolStepSize")))
  {
    {
      double _8158 = (double)_8096;
      if (((0.000000e+00 <= _8158) && (_8158 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8158);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("simLuTolRelPiv")))
  {
    {
      double _8159 = (double)_8096;
      if (((1.000000e-06 <= _8159) && (_8159 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8159);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolRelStep")))
  {
    {
      double _8160 = (double)_8096;
      if (((1.000000e-04 <= _8160) && (_8160 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8160);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolPath")))
  {
    {
      double _8161 = (double)_8096;
      if (((0.000000e+00 <= _8161) && (_8161 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8161);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolPfeas")))
  {
    {
      double _8162 = (double)_8096;
      if (((0.000000e+00 <= _8162) && (_8162 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8162);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolDfeas")))
  {
    {
      double _8163 = (double)_8096;
      if (((0.000000e+00 <= _8163) && (_8163 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8163);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolMuRed")))
  {
    {
      double _8164 = (double)_8096;
      if (((0.000000e+00 <= _8164) && (_8164 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8164);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolInfeas")))
  {
    {
      double _8165 = (double)_8096;
      if (((0.000000e+00 <= _8165) && (_8165 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8165);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8166 = (double)_8096;
      if (((0.000000e+00 <= _8166) && (_8166 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8166);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8167 = (double)_8096;
      if (((0.000000e+00 <= _8167) && (_8167 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8167);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8168 = (double)_8096;
      if (((0.000000e+00 <= _8168) && (_8168 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8168);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8169 = (double)_8096;
      if (((0.000000e+00 <= _8169) && (_8169 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8169);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8170 = (double)_8096;
      if ((1.000000e+00 <= _8170))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8170);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8171 = (double)_8096;
      if (((0.000000e+00 <= _8171) && (_8171 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8171);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolPsafe")))
  {
    {
      double _8172 = (double)_8096;
      if ((1.000000e-04 <= _8172))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8172);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("intpntTolDsafe")))
  {
    {
      double _8173 = (double)_8096;
      if ((1.000000e-04 <= _8173))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8173);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioMaxTime")))
  {
    {
      double _8174 = (double)_8096;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8174);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioRelGapConst")))
  {
    {
      double _8175 = (double)_8096;
      if ((1.000000e-15 <= _8175))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8175);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioTolRelGap")))
  {
    {
      double _8176 = (double)_8096;
      if ((0.000000e+00 <= _8176))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8176);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioTolAbsGap")))
  {
    {
      double _8177 = (double)_8096;
      if ((0.000000e+00 <= _8177))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8177);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8178 = (double)_8096;
      if ((1.000000e-09 <= _8178))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8178);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("basisTolX")))
  {
    {
      double _8179 = (double)_8096;
      if ((1.000000e-09 <= _8179))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8179);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("basisTolS")))
  {
    {
      double _8180 = (double)_8096;
      if ((1.000000e-09 <= _8180))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8180);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("basisRelTolS")))
  {
    {
      double _8181 = (double)_8096;
      if ((0.000000e+00 <= _8181))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8181);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("presolveTolX")))
  {
    {
      double _8182 = (double)_8096;
      if ((0.000000e+00 <= _8182))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8182);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("presolveTolS")))
  {
    {
      double _8183 = (double)_8096;
      if ((0.000000e+00 <= _8183))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8183);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("presolveTolAij")))
  {
    {
      double _8184 = (double)_8096;
      if ((1.000000e-15 <= _8184))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8184);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8185 = (double)_8096;
      if ((0.000000e+00 <= _8185))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8185);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("presolveTolRelLindep")))
  {
    {
      double _8186 = (double)_8096;
      if ((0.000000e+00 <= _8186))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8186);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8187 = (double)_8096;
      if ((1.000000e-12 <= _8187))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8187);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioTolFeas")))
  {
    {
      double _8188 = (double)_8096;
      if (((1.000000e-09 <= _8188) && (_8188 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8188);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8095 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8189 = (double)_8096;
      if (((0.000000e+00 <= _8189) && (_8189 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8094.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8189);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8095 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8095 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8095 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8095 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8095 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8095 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8190,    const std::string & _8191,    const std::string & _8192) { mosek::fusion::p_Parameters::setParameter(_8190,_8191,_8192); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8190,const std::string & _8191,const std::string & _8192){
  if (false)
  {
    {
    }
  }
  {}
  if ((_8191 == std::string ("autoUpdateSolInfo")))
  {
    {
      int _8193 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8193 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_8193);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("removeUnusedSolutions")))
  {
    {
      int _8194 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8194 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_8194);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("numThreads")))
  {
    {
      try
      {
        {
          int _8196 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8196))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8196);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8195)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntMultiThread")))
  {
    {
      int _8197 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8197 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_8197);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mtSpincount")))
  {
    {
      try
      {
        {
          int _8199 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((int)0 <= _8199) && (_8199 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8199);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8198)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("optimizer")))
  {
    {
      int _8200 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8192);
      if ((_8200 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_8200);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("biMaxIterations")))
  {
    {
      try
      {
        {
          int _8202 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8202))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8202);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8201)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      try
      {
        {
          int _8204 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8204))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8204);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8203)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logCutSecondOpt")))
  {
    {
      try
      {
        {
          int _8206 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8206))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8206);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8205)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logResponse")))
  {
    {
      try
      {
        {
          int _8208 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8208))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8208);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8207)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logLocalInfo")))
  {
    {
      int _8209 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8209 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_8209);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("logBi")))
  {
    {
      try
      {
        {
          int _8211 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8211))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8211);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8210)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logBiFreq")))
  {
    {
      try
      {
        {
          int _8213 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8213))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8213);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8212)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("biCleanOptimizer")))
  {
    {
      int _8214 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8192);
      if ((_8214 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_8214);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("intpntStartingPoint")))
  {
    {
      int _8215 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_8192);
      if ((_8215 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_8215);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("intpntDiffStep")))
  {
    {
      int _8216 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8216 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_8216);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("intpntScaling")))
  {
    {
      int _8217 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8192);
      if ((_8217 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_8217);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("intpntSolveForm")))
  {
    {
      int _8218 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8192);
      if ((_8218 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_8218);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("logIntpnt")))
  {
    {
      try
      {
        {
          int _8220 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8220))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8220);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8219)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntMaxIterations")))
  {
    {
      try
      {
        {
          int _8222 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8222))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8222);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8221)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntOffColTrh")))
  {
    {
      try
      {
        {
          int _8224 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8224))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8224);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8223)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntOrderMethod")))
  {
    {
      int _8225 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_8192);
      if ((_8225 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_8225);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      try
      {
        {
          int _8227 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8227))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8227);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8226)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntBasis")))
  {
    {
      int _8228 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_8192);
      if ((_8228 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_8228);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("biIgnoreMaxIter")))
  {
    {
      int _8229 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8229 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_8229);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("biIgnoreNumError")))
  {
    {
      int _8230 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8230 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_8230);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("intpntMaxNumCor")))
  {
    {
      try
      {
        {
          int _8232 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((-(int)1) <= _8232))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8232);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8231)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveUse")))
  {
    {
      int _8233 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_8192);
      if ((_8233 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_8233);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("presolveLevel")))
  {
    {
      try
      {
        {
          int _8235 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8235);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8234)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logPresolve")))
  {
    {
      try
      {
        {
          int _8237 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8237))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8237);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8236)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveLindepUse")))
  {
    {
      int _8238 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8238 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_8238);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("presolveMaxNumPass")))
  {
    {
      try
      {
        {
          int _8240 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8240);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8239)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      try
      {
        {
          int _8242 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8242);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8241)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      try
      {
        {
          int _8244 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8244);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8243)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simPrimalCrash")))
  {
    {
      try
      {
        {
          int _8246 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8246))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8246);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8245)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logSim")))
  {
    {
      try
      {
        {
          int _8248 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8248))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8248);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8247)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logSimMinor")))
  {
    {
      try
      {
        {
          int _8250 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8250))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8250);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8249)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logSimFreq")))
  {
    {
      try
      {
        {
          int _8252 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8252))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8252);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8251)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simPrimalRestrictSelection")))
  {
    {
      try
      {
        {
          int _8254 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((int)0 <= _8254) && (_8254 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8254);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8253)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simPrimalSelection")))
  {
    {
      int _8255 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8192);
      if ((_8255 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_8255);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simDualRestrictSelection")))
  {
    {
      try
      {
        {
          int _8257 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((int)0 <= _8257) && (_8257 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8257);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8256)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simDualSelection")))
  {
    {
      int _8258 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8192);
      if ((_8258 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_8258);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simMaxIterations")))
  {
    {
      try
      {
        {
          int _8260 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8260))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8260);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8259)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simHotstartLu")))
  {
    {
      int _8261 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8261 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_8261);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simRefactorFreq")))
  {
    {
      try
      {
        {
          int _8263 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8263))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8263);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8262)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simSeed")))
  {
    {
      try
      {
        {
          int _8265 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((int)0 <= _8265) && (_8265 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8265);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8264)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioMode")))
  {
    {
      int _8266 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_8192);
      if ((_8266 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_8266);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("logMio")))
  {
    {
      try
      {
        {
          int _8268 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8268))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8268);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8267)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logMioFreq")))
  {
    {
      try
      {
        {
          int _8270 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8270);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8269)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioMaxNumRelaxs")))
  {
    {
      try
      {
        {
          int _8272 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8272);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8271)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioMaxNumBranches")))
  {
    {
      try
      {
        {
          int _8274 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8274);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8273)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      try
      {
        {
          int _8276 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8276))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8276);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8275)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioMaxNumSolutions")))
  {
    {
      try
      {
        {
          int _8278 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8278);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8277)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioNodeSelection")))
  {
    {
      int _8279 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_8192);
      if ((_8279 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_8279);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioHeuristicLevel")))
  {
    {
      try
      {
        {
          int _8281 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8281);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8280)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioProbingLevel")))
  {
    {
      try
      {
        {
          int _8283 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((-(int)1) <= _8283) && (_8283 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8283);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8282)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioCutSelectionLevel")))
  {
    {
      try
      {
        {
          int _8285 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((-(int)1) <= _8285) && (_8285 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8285);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8284)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioVbDetectionLevel")))
  {
    {
      try
      {
        {
          int _8287 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((-(int)1) <= _8287) && (_8287 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8287);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8286)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioBranchDir")))
  {
    {
      int _8288 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_8192);
      if ((_8288 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_8288);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioRootOptimizer")))
  {
    {
      int _8289 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8192);
      if ((_8289 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_8289);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioNodeOptimizer")))
  {
    {
      int _8290 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8192);
      if ((_8290 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_8290);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioPerspectiveReformulate")))
  {
    {
      int _8291 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8291 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_8291);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int _8292 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8292 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_8292);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioSeed")))
  {
    {
      try
      {
        {
          int _8294 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8294))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8294);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8293)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioConicOuterApproximation")))
  {
    {
      int _8295 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8295 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_8295);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("writeLpQuotedNames")))
  {
    {
      int _8296 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8296 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_8296);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("writeLpLineWidth")))
  {
    {
      try
      {
        {
          int _8298 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)40 <= _8298))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8298);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8297)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("writeLpTermsPerLine")))
  {
    {
      try
      {
        {
          int _8300 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8300))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8300);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8299)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("writeLpFullObj")))
  {
    {
      int _8301 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8301 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_8301);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("logInfeasAna")))
  {
    {
      try
      {
        {
          int _8303 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8303))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8303);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8302)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("licenseWait")))
  {
    {
      int _8304 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8304 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_8304);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int _8305 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8305 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_8305);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("licensePauseTime")))
  {
    {
      try
      {
        {
          int _8307 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((int)0 <= _8307) && (_8307 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8307);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8306)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("licenseDebug")))
  {
    {
      int _8308 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8308 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_8308);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("log")))
  {
    {
      try
      {
        {
          int _8310 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8310))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8310);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8309)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logExpand")))
  {
    {
      try
      {
        {
          int _8312 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8312))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8312);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8311)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logFile")))
  {
    {
      try
      {
        {
          int _8314 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8314))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8314);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8313)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("logOrder")))
  {
    {
      try
      {
        {
          int _8316 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8316))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8316);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8315)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simScaling")))
  {
    {
      int _8317 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8192);
      if ((_8317 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_8317);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simScalingMethod")))
  {
    {
      int _8318 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_8192);
      if ((_8318 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_8318);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _8320 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((int)0 <= _8320) && (_8320 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8320);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8319)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simDualPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _8322 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((int)0 <= _8322) && (_8322 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8322);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8321)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simMaxNumSetbacks")))
  {
    {
      try
      {
        {
          int _8324 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8324))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8324);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8323)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simHotstart")))
  {
    {
      int _8325 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_8192);
      if ((_8325 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_8325);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simBasisFactorUse")))
  {
    {
      int _8326 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8326 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_8326);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simDegen")))
  {
    {
      int _8327 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_8192);
      if ((_8327 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_8327);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simReformulation")))
  {
    {
      int _8328 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_8192);
      if ((_8328 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_8328);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simExploitDupvec")))
  {
    {
      int _8329 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_8192);
      if ((_8329 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_8329);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simSaveLu")))
  {
    {
      int _8330 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8330 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_8330);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simNonSingular")))
  {
    {
      int _8331 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8331 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_8331);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simDualCrash")))
  {
    {
      try
      {
        {
          int _8333 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((int)0 <= _8333))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8333);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8332)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("infeasPreferPrimal")))
  {
    {
      int _8334 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8334 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_8334);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      try
      {
        {
          int _8336 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((-(int)1) <= _8336) && (_8336 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8336);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8335)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioCutCmir")))
  {
    {
      int _8337 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8337 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_8337);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioCutClique")))
  {
    {
      int _8338 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8338 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_8338);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioCutImpliedBound")))
  {
    {
      int _8339 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8339 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_8339);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioCutKnapsackCover")))
  {
    {
      int _8340 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8340 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_8340);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioCutGmi")))
  {
    {
      int _8341 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8341 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_8341);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      try
      {
        {
          int _8343 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8343);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8342)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      try
      {
        {
          int _8345 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8345);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8344)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("cacheLicense")))
  {
    {
      int _8346 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8346 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_8346);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("intpntRegularizationUse")))
  {
    {
      int _8347 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8347 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_8347);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simSolveForm")))
  {
    {
      int _8348 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8192);
      if ((_8348 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_8348);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("simSwitchOptimizer")))
  {
    {
      int _8349 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8192);
      if ((_8349 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_8349);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("mioRinsMaxNodes")))
  {
    {
      try
      {
        {
          int _8351 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if (((-(int)1) <= _8351))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8351);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8350)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioFeaspumpLevel")))
  {
    {
      try
      {
        {
          int _8353 = ::mosek::fusion::Utils::Tools::toInt(_8192);
          if ((((-(int)1) <= _8353) && (_8353 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8353);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8352)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("optimizerMaxTime")))
  {
    {
      try
      {
        {
          double _8355 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8355);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8354)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("lowerObjCut")))
  {
    {
      try
      {
        {
          double _8357 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8357);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8356)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("upperObjCut")))
  {
    {
      try
      {
        {
          double _8359 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8359);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8358)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _8361 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8361);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8360)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _8363 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8363);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8362)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolRelGap")))
  {
    {
      try
      {
        {
          double _8365 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e-14 <= _8365))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8365);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8364)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolStepSize")))
  {
    {
      try
      {
        {
          double _8367 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8367) && (_8367 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8367);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8366)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simLuTolRelPiv")))
  {
    {
      try
      {
        {
          double _8369 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((1.000000e-06 <= _8369) && (_8369 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8369);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8368)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolRelStep")))
  {
    {
      try
      {
        {
          double _8371 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((1.000000e-04 <= _8371) && (_8371 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8371);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8370)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolPath")))
  {
    {
      try
      {
        {
          double _8373 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8373) && (_8373 <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8373);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8372)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolPfeas")))
  {
    {
      try
      {
        {
          double _8375 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8375) && (_8375 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8375);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8374)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolDfeas")))
  {
    {
      try
      {
        {
          double _8377 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8377) && (_8377 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8377);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8376)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolMuRed")))
  {
    {
      try
      {
        {
          double _8379 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8379) && (_8379 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8379);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8378)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolInfeas")))
  {
    {
      try
      {
        {
          double _8381 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8381) && (_8381 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8381);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8380)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntCoTolRelGap")))
  {
    {
      try
      {
        {
          double _8383 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8383) && (_8383 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8383);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8382)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntCoTolPfeas")))
  {
    {
      try
      {
        {
          double _8385 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8385) && (_8385 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8385);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8384)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntCoTolDfeas")))
  {
    {
      try
      {
        {
          double _8387 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8387) && (_8387 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8387);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8386)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntCoTolMuRed")))
  {
    {
      try
      {
        {
          double _8389 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8389) && (_8389 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8389);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8388)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntCoTolNearRel")))
  {
    {
      try
      {
        {
          double _8391 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e+00 <= _8391))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8391);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8390)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntCoTolInfeas")))
  {
    {
      try
      {
        {
          double _8393 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8393) && (_8393 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8393);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8392)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolPsafe")))
  {
    {
      try
      {
        {
          double _8395 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e-04 <= _8395))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8395);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8394)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("intpntTolDsafe")))
  {
    {
      try
      {
        {
          double _8397 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e-04 <= _8397))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8397);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8396)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioMaxTime")))
  {
    {
      try
      {
        {
          double _8399 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8399);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8398)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioRelGapConst")))
  {
    {
      try
      {
        {
          double _8401 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e-15 <= _8401))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8401);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8400)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioTolRelGap")))
  {
    {
      try
      {
        {
          double _8403 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((0.000000e+00 <= _8403))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8403);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8402)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioTolAbsGap")))
  {
    {
      try
      {
        {
          double _8405 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((0.000000e+00 <= _8405))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8405);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8404)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      try
      {
        {
          double _8407 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e-09 <= _8407))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8407);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8406)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("basisTolX")))
  {
    {
      try
      {
        {
          double _8409 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e-09 <= _8409))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8409);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8408)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("basisTolS")))
  {
    {
      try
      {
        {
          double _8411 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e-09 <= _8411))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8411);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8410)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("basisRelTolS")))
  {
    {
      try
      {
        {
          double _8413 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((0.000000e+00 <= _8413))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8413);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8412)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveTolX")))
  {
    {
      try
      {
        {
          double _8415 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((0.000000e+00 <= _8415))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8415);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8414)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveTolS")))
  {
    {
      try
      {
        {
          double _8417 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((0.000000e+00 <= _8417))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8417);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8416)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveTolAij")))
  {
    {
      try
      {
        {
          double _8419 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e-15 <= _8419))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8419);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8418)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveTolAbsLindep")))
  {
    {
      try
      {
        {
          double _8421 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((0.000000e+00 <= _8421))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8421);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8420)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("presolveTolRelLindep")))
  {
    {
      try
      {
        {
          double _8423 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((0.000000e+00 <= _8423))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8423);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8422)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("simplexAbsTolPiv")))
  {
    {
      try
      {
        {
          double _8425 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if ((1.000000e-12 <= _8425))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8425);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8424)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioTolFeas")))
  {
    {
      try
      {
        {
          double _8427 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((1.000000e-09 <= _8427) && (_8427 <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8427);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8426)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      try
      {
        {
          double _8429 = ::mosek::fusion::Utils::Tools::toDouble(_8192);
          if (((0.000000e+00 <= _8429) && (_8429 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8429);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8428)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_8191 == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_8192);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_8192);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_8192);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_8192);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_8192);
      return;
    }
  }
  {}
  if ((_8191 == std::string ("remoteAccessToken")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8190.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_ACCESS_TOKEN"),_8192);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
int mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _8430){
  if ((_8430 == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8430 == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8430 == std::string ("optimizeResponse")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8430 == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8430 == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8430 == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8430 == std::string ("mioNodeDepth")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumbin")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumint")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumcont")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumcon")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumcone")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumqcones")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumrqcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumpexpcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumdexpcones")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumppowcones")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumdpowcones")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumconevar")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumbinconevar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumintconevar")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumcontconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8430 == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8430 == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8430 == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8430 == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumRelax")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumBranch")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8430 == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8430 == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8430 == std::string ("mioUserObjCut")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8430 == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8430 == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8430 == std::string ("rdProtype")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8430 == std::string ("rdNumcon")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8430 == std::string ("rdNumvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8430 == std::string ("rdNumbarvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8430 == std::string ("rdNumintvar")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8430 == std::string ("rdNumq")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8430 == std::string ("simDualDegIter")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8430 == std::string ("simDualInfIter")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8430 == std::string ("simDualHotstartLu")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8430 == std::string ("simPrimalIter")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8430 == std::string ("simDualIter")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8430 == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8430 == std::string ("simPrimalInfIter")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8430 == std::string ("simPrimalDegIter")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8430 == std::string ("simPrimalHotstart")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8430 == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8430 == std::string ("simDualHotstart")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8430 == std::string ("solItrProsta")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8430 == std::string ("solItrSolsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8430 == std::string ("solBasProsta")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8430 == std::string ("solBasSolsta")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8430 == std::string ("solItgProsta")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8430 == std::string ("solItgSolsta")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8430 == std::string ("simNumcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8430 == std::string ("simNumvar")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8430 == std::string ("optNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8430 == std::string ("optNumvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8430 == std::string ("stoNumARealloc")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8430 == std::string ("rdNumcone")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8430 == std::string ("simSolveDual")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8430 == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8430 == std::string ("purifyDualSuccess")))
  {
    {
      return (int)72;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _8431){
  if ((_8431 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8431 == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8431 == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8431 == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8431 == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _8432){
  if ((_8432 == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8432 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8432 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _8433){
  if ((_8433 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8433 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8433 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8433 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8433 == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _8434){
  if ((_8434 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8434 == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8434 == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8434 == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _8435){
  if ((_8435 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8435 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8435 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _8436){
  if ((_8436 == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8436 == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8436 == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _8437){
  if ((_8437 == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8437 == std::string ("sensitivityDualTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8437 == std::string ("intpntGfeas")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8437 == std::string ("intpntMu")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8437 == std::string ("intpntInitIterTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8437 == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8437 == std::string ("intpntUpdateTime")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8437 == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8437 == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8437 == std::string ("intpntSolveTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8437 == std::string ("intpntIterRefTime")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8437 == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8437 == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8437 == std::string ("presolveAcoltTime")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8437 == std::string ("presolveSetupTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8437 == std::string ("presolveCheckproTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8437 == std::string ("presolveDupconTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8437 == std::string ("presolveDupvarTime")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8437 == std::string ("presolveFinalTime")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8437 == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8437 == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8437 == std::string ("primalSimplexInftime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8437 == std::string ("dualSimplexInftime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8437 == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8437 == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8437 == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8437 == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8437 == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8437 == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8437 == std::string ("biPrimalDone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8437 == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8437 == std::string ("simPrimalObj")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8437 == std::string ("simPrimalFeas")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8437 == std::string ("simDualObj")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8437 == std::string ("simDualFeas")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8437 == std::string ("biPrimalObj")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8437 == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8437 == std::string ("biPrimalFeas")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8437 == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8437 == std::string ("intpntPurifyTime")))
  {
    {
      return (int)63;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _8438){
  if ((_8438 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8438 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _8439){
  if ((_8439 == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8439 == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _8440){
  if ((_8440 == std::string ("mioAnz")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8440 == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8440 == std::string ("mioSimplexIter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8440 == std::string ("mioIntpntIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8440 == std::string ("biPrimalIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8440 == std::string ("biDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8440 == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8440 == std::string ("biCleanDualIter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8440 == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8440 == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8440 == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8440 == std::string ("rdNumanz")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8440 == std::string ("rdNumqnz")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _8441){
  if ((_8441 == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8441 == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8441 == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _8442){
  if ((_8442 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8442 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8442 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8442 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_language_value(const std::string & _8443){
  if ((_8443 == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8443 == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _8444){
  if ((_8444 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8444 == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8444 == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8444 == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8444 == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8444 == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _8445){
  if ((_8445 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8445 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8445 == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8445 == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8445 == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _8446){
  if ((_8446 == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8446 == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_8446 == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8446 == std::string ("intpntPurify")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8446 == std::string ("numThreads")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8446 == std::string ("intpntMultiThread")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8446 == std::string ("timingLevel")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_8446 == std::string ("mtSpincount")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8446 == std::string ("maxNumWarnings")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8446 == std::string ("optimizer")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8446 == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8446 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8446 == std::string ("logIncludeSummary")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8446 == std::string ("logCutSecondOpt")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8446 == std::string ("logAnaPro")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8446 == std::string ("logResponse")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8446 == std::string ("logLocalInfo")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8446 == std::string ("logBi")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8446 == std::string ("logBiFreq")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8446 == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8446 == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8446 == std::string ("intpntStartingPoint")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8446 == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8446 == std::string ("intpntScaling")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8446 == std::string ("intpntSolveForm")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8446 == std::string ("logIntpnt")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8446 == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8446 == std::string ("intpntOffColTrh")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8446 == std::string ("intpntOrderMethod")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8446 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8446 == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8446 == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8446 == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8446 == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8446 == std::string ("presolveUse")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_8446 == std::string ("presolveLevel")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8446 == std::string ("logPresolve")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8446 == std::string ("presolveLindepUse")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8446 == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_8446 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8446 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8446 == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_8446 == std::string ("simStabilityPriority")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_8446 == std::string ("simPrimalCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_8446 == std::string ("logSim")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8446 == std::string ("logSimMinor")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8446 == std::string ("logSimFreq")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8446 == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_8446 == std::string ("simPrimalSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_8446 == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_8446 == std::string ("simDualSelection")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_8446 == std::string ("simMaxIterations")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_8446 == std::string ("simHotstartLu")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_8446 == std::string ("simRefactorFreq")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_8446 == std::string ("simSeed")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_8446 == std::string ("mioMode")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8446 == std::string ("logMio")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8446 == std::string ("logMioFreq")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8446 == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8446 == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8446 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8446 == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8446 == std::string ("mioNodeSelection")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8446 == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8446 == std::string ("mioProbingLevel")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8446 == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8446 == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8446 == std::string ("mioBranchDir")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8446 == std::string ("mioRootOptimizer")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8446 == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8446 == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8446 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8446 == std::string ("mioSeed")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8446 == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8446 == std::string ("readKeepFreeCon")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_8446 == std::string ("readMpsFormat")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_8446 == std::string ("writeMpsFormat")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_8446 == std::string ("readMpsWidth")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_8446 == std::string ("readDebug")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_8446 == std::string ("readLpQuotedNames")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_8446 == std::string ("writeDataParam")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_8446 == std::string ("writeFreeCon")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_8446 == std::string ("writeGenericNames")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_8446 == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_8446 == std::string ("writeCompression")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_8446 == std::string ("writeMpsInt")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_8446 == std::string ("writeLpStrictFormat")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_8446 == std::string ("writeLpQuotedNames")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_8446 == std::string ("writeLpLineWidth")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_8446 == std::string ("writeLpTermsPerLine")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_8446 == std::string ("writeLpFullObj")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_8446 == std::string ("writePrecision")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_8446 == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_8446 == std::string ("writeSolHead")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_8446 == std::string ("writeSolConstraints")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_8446 == std::string ("writeSolVariables")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_8446 == std::string ("writeSolBarvariables")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_8446 == std::string ("writeBasHead")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_8446 == std::string ("writeBasConstraints")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_8446 == std::string ("writeBasVariables")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_8446 == std::string ("writeIntHead")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_8446 == std::string ("writeIntConstraints")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_8446 == std::string ("writeIntVariables")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_8446 == std::string ("solReadNameWidth")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_8446 == std::string ("solReadWidth")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_8446 == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8446 == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8446 == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8446 == std::string ("logInfeasAna")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8446 == std::string ("licenseWait")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8446 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8446 == std::string ("licensePauseTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8446 == std::string ("licenseDebug")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8446 == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_8446 == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_8446 == std::string ("log")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8446 == std::string ("logExpand")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8446 == std::string ("logFile")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8446 == std::string ("logOrder")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8446 == std::string ("logSensitivity")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8446 == std::string ("logSensitivityOpt")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8446 == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_8446 == std::string ("writeTaskIncSol")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_8446 == std::string ("paramReadCaseName")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8446 == std::string ("paramReadIgnError")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8446 == std::string ("solutionCallback")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_8446 == std::string ("simScaling")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_8446 == std::string ("simScalingMethod")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_8446 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_8446 == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_8446 == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_8446 == std::string ("simHotstart")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_8446 == std::string ("simBasisFactorUse")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_8446 == std::string ("simDegen")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_8446 == std::string ("simReformulation")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_8446 == std::string ("simExploitDupvec")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_8446 == std::string ("simSaveLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_8446 == std::string ("simNonSingular")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_8446 == std::string ("simDualCrash")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_8446 == std::string ("logStorage")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8446 == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8446 == std::string ("readLpDropNewVarsInBou")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_8446 == std::string ("opfWriteLineLength")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8446 == std::string ("opfWriteHints")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8446 == std::string ("opfWriteParameters")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8446 == std::string ("opfWriteProblem")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8446 == std::string ("opfWriteHeader")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8446 == std::string ("opfWriteSolutions")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8446 == std::string ("opfWriteSolBas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8446 == std::string ("opfWriteSolItg")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8446 == std::string ("opfWriteSolItr")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8446 == std::string ("ptfWriteTransform")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_8446 == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_8446 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8446 == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8446 == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8446 == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8446 == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8446 == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8446 == std::string ("sensitivityType")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_8446 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8446 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8446 == std::string ("sensitivityAll")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_8446 == std::string ("logFeasRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8446 == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8446 == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8446 == std::string ("simSolveForm")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_8446 == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_8446 == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_8446 == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8446 == std::string ("logCheckConvexity")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8446 == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8446 == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_8446 == std::string ("writeXmlMode")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_8446 == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8446 == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8446 == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8446 == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8446 == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8446 == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _8447){
  if ((_8447 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8447 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _8448){
  if ((_8448 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8448 == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8448 == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8448 == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8448 == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8448 == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8448 == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _8449){
  if ((_8449 == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8449 == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8449 == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8449 == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8449 == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8449 == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8449 == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8449 == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8449 == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8449 == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8449 == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8449 == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8449 == std::string ("optimizerMaxTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8449 == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8449 == std::string ("upperObjCut")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8449 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8449 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8449 == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8449 == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8449 == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8449 == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8449 == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8449 == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8449 == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8449 == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8449 == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8449 == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8449 == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8449 == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8449 == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8449 == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8449 == std::string ("mioMaxTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8449 == std::string ("mioRelGapConst")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8449 == std::string ("mioTolRelGap")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8449 == std::string ("mioTolAbsGap")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8449 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8449 == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8449 == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8449 == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8449 == std::string ("presolveTolX")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8449 == std::string ("presolveTolS")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8449 == std::string ("presolveTolAij")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8449 == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8449 == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8449 == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8449 == std::string ("mioTolFeas")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8449 == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8449 == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8449 == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8449 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)45;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _8450){
  if ((_8450 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8450 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8450 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _8451){
  if ((_8451 == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8451 == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8451 == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8451 == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _8452){
  if ((_8452 == std::string ("versionMajor")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8452 == std::string ("versionMinor")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8452 == std::string ("versionRevision")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8452 == std::string ("presolveLindepWork")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8452 == std::string ("presolveLindepPivots")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8452 == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8452 == std::string ("presolveOutofspace")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8452 == std::string ("presolveBadPrecision")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8452 == std::string ("optObjectiveSense")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8452 == std::string ("optimizer")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8452 == std::string ("intpntFirRefIter")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8452 == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8452 == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8452 == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8452 == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8452 == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumcon")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumvar")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumbarvar")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumblo")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumbup")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumbfr")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumbfx")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumcone")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumconevar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumbndcone")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumrqcones")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumqcones")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8452 == std::string ("intpntNumppowcones")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8452 == std::string ("intpntMinconedim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8452 == std::string ("intpntMaxconedim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8452 == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumcfr")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumcfx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumclo")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumcup")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumcra")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumcnl")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumvfr")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumvfx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumvlo")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumvup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumvra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumvnl")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumnza")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumcon")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumcfr")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumcfx")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumclo")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumcup")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumcra")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumcnl")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumvar")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumvfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumvfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumvlo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumvup")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumvra")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumvnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8452 == std::string ("presolveFnumnza")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumElimns")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8452 == std::string ("presolveEliNumTries")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8452 == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8452 == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8452 == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8452 == std::string ("presolveLindepNum")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8452 == std::string ("presolveForceConNum")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8452 == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8452 == std::string ("presolveForceVarNum")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8452 == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8452 == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8452 == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8452 == std::string ("presolveNumQuadConeOrthoTrans")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8452 == std::string ("intpntFactorNum")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8452 == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8452 == std::string ("simPrimalHotstartNumBasics")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8452 == std::string ("simPrimalHotstartBasisRank")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8452 == std::string ("simDualHotstartNumBasics")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8452 == std::string ("simDualHotstartBasisRank")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8452 == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8452 == std::string ("numLuFactorizations")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8452 == std::string ("simPrimalTrust")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8452 == std::string ("simDualTrust")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8452 == std::string ("simPrimalNumSetbacks")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8452 == std::string ("simDualNumSetbacks")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8452 == std::string ("simNumDupvec")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8452 == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8452 == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8452 == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8452 == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8452 == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8452 == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)57;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _8453){
  if ((_8453 == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8453 == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8453 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8453 == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _8454){
  if ((_8454 == std::string ("beginRootCutgen")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8454 == std::string ("imRootCutgen")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8454 == std::string ("endRootCutgen")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8454 == std::string ("beginOptimizer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8454 == std::string ("endOptimizer")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8454 == std::string ("beginPresolve")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8454 == std::string ("updatePresolve")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8454 == std::string ("imPresolve")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8454 == std::string ("endPresolve")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8454 == std::string ("beginIntpnt")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8454 == std::string ("intpnt")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8454 == std::string ("imIntpnt")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8454 == std::string ("endIntpnt")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8454 == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8454 == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8454 == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8454 == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8454 == std::string ("primalSimplex")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8454 == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8454 == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8454 == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8454 == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8454 == std::string ("beginPrimalBi")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8454 == std::string ("imPrimalBi")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8454 == std::string ("updatePrimalBi")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8454 == std::string ("endPrimalBi")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8454 == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8454 == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8454 == std::string ("updateDualBi")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8454 == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8454 == std::string ("beginSimplexBi")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8454 == std::string ("imSimplexBi")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8454 == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8454 == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8454 == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8454 == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8454 == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8454 == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8454 == std::string ("endSimplexBi")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8454 == std::string ("beginMio")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8454 == std::string ("imMio")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8454 == std::string ("newIntMio")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8454 == std::string ("endMio")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8454 == std::string ("beginSimplex")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8454 == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8454 == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8454 == std::string ("updateDualSimplex")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8454 == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8454 == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8454 == std::string ("imPrimalSimplex")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8454 == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8454 == std::string ("endPrimalSimplex")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8454 == std::string ("endSimplex")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8454 == std::string ("beginInfeasAna")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8454 == std::string ("endInfeasAna")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8454 == std::string ("imPrimalSensivity")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8454 == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8454 == std::string ("imMioIntpnt")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8454 == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8454 == std::string ("imMioDualSimplex")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8454 == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8454 == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8454 == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8454 == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8454 == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8454 == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8454 == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8454 == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8454 == std::string ("beginLicenseWait")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8454 == std::string ("endLicenseWait")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8454 == std::string ("imLicenseWait")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8454 == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8454 == std::string ("endQcqoReformulate")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8454 == std::string ("imQoReformulate")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8454 == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8454 == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8454 == std::string ("beginFullConvexityCheck")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8454 == std::string ("endFullConvexityCheck")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8454 == std::string ("imFullConvexityCheck")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8454 == std::string ("beginPrimalRepair")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8454 == std::string ("endPrimalRepair")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8454 == std::string ("beginRead")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8454 == std::string ("imRead")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8454 == std::string ("endRead")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8454 == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8454 == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8454 == std::string ("readOpfSection")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8454 == std::string ("imLu")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8454 == std::string ("imOrder")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8454 == std::string ("imSimplex")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8454 == std::string ("readOpf")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8454 == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8454 == std::string ("solvingRemote")))
  {
    {
      return (int)84;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _8455){
  if ((_8455 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8455 == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8455 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8455 == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _8456){
  if ((_8456 == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8456 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_value_value(const std::string & _8457){
  if ((_8457 == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_8457 == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _8458){
  if ((_8458 == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8458 == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8458 == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8458 == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8458 == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8458 == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8458 == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8458 == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8458 == std::string ("solFilterXcLow")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8458 == std::string ("solFilterXcUpr")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8458 == std::string ("solFilterXxLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8458 == std::string ("solFilterXxUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8458 == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8458 == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8458 == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8458 == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8458 == std::string ("statFileName")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8458 == std::string ("statName")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8458 == std::string ("statKey")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8458 == std::string ("writeLpGenVarName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8458 == std::string ("sensitivityResFileName")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8458 == std::string ("sensitivityFileName")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8458 == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8458 == std::string ("remoteAccessToken")))
  {
    {
      return (int)13;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _8459){
  if ((_8459 == std::string ("intpntLenbarvar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8459 == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8459 == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8459 == std::string ("intpntFactorMlOrderSparseLNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8459 == std::string ("intpntFactorGpOrderSparseLNz")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8459 == std::string ("presolveStackSize")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8459 == std::string ("intpntFactorVNz")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8459 == std::string ("intpntFactorUpdatedVNz")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _8460){
  if ((_8460 == std::string ("biTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8460 == std::string ("biPrimalTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8460 == std::string ("biDualTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8460 == std::string ("biCleanTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8460 == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8460 == std::string ("biCleanDualTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8460 == std::string ("intpntTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8460 == std::string ("intpntOrderTime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8460 == std::string ("intpntPrimalObj")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8460 == std::string ("intpntDualObj")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8460 == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8460 == std::string ("intpntDualFeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8460 == std::string ("intpntOptStatus")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8460 == std::string ("simTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8460 == std::string ("simPrimalTime")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8460 == std::string ("simDualTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8460 == std::string ("simObj")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8460 == std::string ("simFeas")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8460 == std::string ("mioTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8460 == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8460 == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8460 == std::string ("toConicTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8460 == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8460 == std::string ("mioObjInt")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8460 == std::string ("mioObjBound")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8460 == std::string ("mioObjRelGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8460 == std::string ("mioObjAbsGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8460 == std::string ("mioUserObjCut")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8460 == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8460 == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8460 == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8460 == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8460 == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8460 == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8460 == std::string ("mioProbingTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8460 == std::string ("optimizerTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8460 == std::string ("presolveTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8460 == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8460 == std::string ("presolveEliTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8460 == std::string ("presolveLindepTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8460 == std::string ("rdTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8460 == std::string ("solItrPrimalObj")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8460 == std::string ("solItrPviolcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8460 == std::string ("solItrPviolvar")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8460 == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8460 == std::string ("solItrPviolcones")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8460 == std::string ("solItrDualObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8460 == std::string ("solItrDviolcon")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8460 == std::string ("solItrDviolvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8460 == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8460 == std::string ("solItrDviolcones")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmXc")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmXx")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmBarx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmY")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmSlc")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmSuc")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmSlx")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmSux")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmSnx")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8460 == std::string ("solItrNrmBars")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8460 == std::string ("solBasPrimalObj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8460 == std::string ("solBasPviolcon")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8460 == std::string ("solBasPviolvar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8460 == std::string ("solBasDualObj")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8460 == std::string ("solBasDviolcon")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8460 == std::string ("solBasDviolvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8460 == std::string ("solBasNrmXc")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8460 == std::string ("solBasNrmXx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8460 == std::string ("solBasNrmBarx")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8460 == std::string ("solBasNrmY")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8460 == std::string ("solBasNrmSlc")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8460 == std::string ("solBasNrmSuc")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8460 == std::string ("solBasNrmSlx")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8460 == std::string ("solBasNrmSux")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8460 == std::string ("solItgPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8460 == std::string ("solItgPviolcon")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8460 == std::string ("solItgPviolvar")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8460 == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8460 == std::string ("solItgPviolcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8460 == std::string ("solItgPviolitg")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8460 == std::string ("solItgNrmXc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8460 == std::string ("solItgNrmXx")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8460 == std::string ("solItgNrmBarx")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8460 == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8460 == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8460 == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8460 == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8460 == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8460 == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)35;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _8461){
  if ((_8461 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8461 == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8461 == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _8462){
  if ((_8462 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8462 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8462 == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8462 == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _8463){
  if ((_8463 == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8463 == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8463 == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _8464){
  if ((_8464 == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8464 == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _8465){
  if ((_8465 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8465 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8465 == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8465 == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8465 == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _8466){
  if ((_8466 == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8466 == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8466 == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8466 == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scopr_value(const std::string & _8467){
  if ((_8467 == std::string ("ent")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8467 == std::string ("exp")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8467 == std::string ("log")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8467 == std::string ("pow")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8467 == std::string ("sqrt")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _8468){
  if ((_8468 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8468 == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8468 == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8468 == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8468 == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8468 == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _8469){
  if ((_8469 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8469 == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8469 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _8470){
  if ((_8470 == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8470 == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8470 == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8470 == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8470 == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8470 == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8470 == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _8471){
  if ((_8471 == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8471 == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _8472){
  if ((_8472 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8472 == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8472 == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8472 == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _8473){
  if ((_8473 == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8473 == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8473 == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8473 == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8473 == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _8474){
  if ((_8474 == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8474 == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8474 == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8474 == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8474 == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8474 == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8474 == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8474 == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _8475){
  if ((_8475 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8475 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8475 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _8476){
  if ((_8476 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8476 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _8477){
  if ((_8477 == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8477 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8477 == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8477 == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8477 == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8477 == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8477 == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _8478){
  if ((_8478 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8478 == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8478 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8478 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8478 == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8478 == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8478 == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8478 == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8478 == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8478 == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _8479){
  if ((_8479 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8479 == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8479 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8479 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8479 == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8479 == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8479 == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8479 == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8479 == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _8480){
  if ((_8480 == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8480 == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _8481){
  if ((_8481 == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8481 == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _8482){
  if ((_8482 == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8482 == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _8483){
  if ((_8483 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8483 == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8483 == std::string ("moderate")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8483 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _8484){
  if ((_8484 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8484 == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8484 == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8484 == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8484 == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _8485){
  if ((_8485 == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8485 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8485 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8485 == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8485 == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8485 == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8485 == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8485 == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8485 == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _8486){
  if ((_8486 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8486 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8486 == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _8487){
  if ((_8487 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8487 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8487 == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8487 == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8487 == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8487 == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8487 == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8487 == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _8488){
  if ((_8488 == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _8489){
  if ((_8489 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8489 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8489 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8489 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _8490){
  if ((_8490 == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _8491){
  if ((_8491 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8491 == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8491 == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8491 == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8491 == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8491 == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8491 == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8491 == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8491 == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_8491 == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_8491 == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_8491 == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_8491 == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_8491 == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_8491 == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_8491 == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_8491 == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_8491 == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_8491 == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_8491 == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_8491 == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_8491 == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_8491 == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_8491 == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_8491 == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_8491 == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_8491 == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_8491 == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_8491 == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_8491 == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_8491 == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_8491 == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_8491 == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_8491 == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)804;
    }
  }
  {}
  if ((_8491 == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_8491 == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_8491 == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_8491 == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_8491 == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_8491 == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_8491 == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_8491 == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_8491 == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_8491 == std::string ("wrnQuadConesWithRootFixedAtZero")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_8491 == std::string ("wrnRquadConesWithRootFixedAtZero")))
  {
    {
      return (int)931;
    }
  }
  {}
  if ((_8491 == std::string ("wrnExpConesWithVariablesFixedAtZero")))
  {
    {
      return (int)932;
    }
  }
  {}
  if ((_8491 == std::string ("wrnPowConesWithRootFixedAtZero")))
  {
    {
      return (int)933;
    }
  }
  {}
  if ((_8491 == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_8491 == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_8491 == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_8491 == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_8491 == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_8491 == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_8491 == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_8491 == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_8491 == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_8491 == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_8491 == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_8491 == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_8491 == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_8491 == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_8491 == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_8491 == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_8491 == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_8491 == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_8491 == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_8491 == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_8491 == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_8491 == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_8491 == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_8491 == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_8491 == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_8491 == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_8491 == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_8491 == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_8491 == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_8491 == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_8491 == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_8491 == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_8491 == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_8491 == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_8491 == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_8491 == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_8491 == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_8491 == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_8491 == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_8491 == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsInvConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsInvBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsInvSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_8491 == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_8491 == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_8491 == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_8491 == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_8491 == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_8491 == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_8491 == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_8491 == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_8491 == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_8491 == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_8491 == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_8491 == std::string ("errLpFormat")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_8491 == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_8491 == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_8491 == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_8491 == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_8491 == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_8491 == std::string ("errPtfFormat")))
  {
    {
      return (int)1167;
    }
  }
  {}
  if ((_8491 == std::string ("errOpfFormat")))
  {
    {
      return (int)1168;
    }
  }
  {}
  if ((_8491 == std::string ("errOpfNewVariable")))
  {
    {
      return (int)1169;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_8491 == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_8491 == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1172;
    }
  }
  {}
  if ((_8491 == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_8491 == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_8491 == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_8491 == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_8491 == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_8491 == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_8491 == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_8491 == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_8491 == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_8491 == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_8491 == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_8491 == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_8491 == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_8491 == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_8491 == std::string ("errParamName")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_8491 == std::string ("errParamNameDou")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_8491 == std::string ("errParamNameInt")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_8491 == std::string ("errParamNameStr")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_8491 == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_8491 == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_8491 == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_8491 == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_8491 == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_8491 == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_8491 == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_8491 == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_8491 == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_8491 == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_8491 == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_8491 == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_8491 == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_8491 == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_8491 == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_8491 == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_8491 == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_8491 == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_8491 == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_8491 == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_8491 == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_8491 == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_8491 == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_8491 == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_8491 == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_8491 == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_8491 == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_8491 == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_8491 == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_8491 == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_8491 == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_8491 == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_8491 == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_8491 == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_8491 == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_8491 == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_8491 == std::string ("errUndefSolution")))
  {
    {
      return (int)1265;
    }
  }
  {}
  if ((_8491 == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_8491 == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_8491 == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_8491 == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_8491 == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_8491 == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_8491 == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_8491 == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_8491 == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_8491 == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_8491 == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_8491 == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_8491 == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_8491 == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_8491 == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_8491 == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_8491 == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_8491 == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_8491 == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_8491 == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_8491 == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_8491 == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_8491 == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_8491 == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_8491 == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_8491 == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_8491 == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_8491 == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_8491 == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_8491 == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_8491 == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_8491 == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_8491 == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_8491 == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_8491 == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_8491 == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_8491 == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_8491 == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_8491 == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_8491 == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_8491 == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_8491 == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_8491 == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_8491 == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_8491 == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_8491 == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_8491 == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_8491 == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_8491 == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_8491 == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_8491 == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_8491 == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_8491 == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_8491 == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_8491 == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_8491 == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_8491 == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_8491 == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_8491 == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_8491 == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_8491 == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_8491 == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_8491 == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_8491 == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_8491 == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_8491 == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_8491 == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_8491 == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_8491 == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_8491 == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_8491 == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_8491 == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_8491 == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_8491 == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_8491 == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_8491 == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_8491 == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_8491 == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_8491 == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_8491 == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_8491 == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_8491 == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_8491 == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_8491 == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_8491 == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_8491 == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_8491 == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_8491 == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_8491 == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_8491 == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_8491 == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_8491 == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_8491 == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_8491 == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_8491 == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_8491 == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_8491 == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_8491 == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_8491 == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_8491 == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_8491 == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_8491 == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_8491 == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_8491 == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_8491 == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_8491 == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_8491 == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_8491 == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_8491 == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_8491 == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_8491 == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_8491 == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_8491 == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_8491 == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_8491 == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_8491 == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_8491 == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_8491 == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_8491 == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_8491 == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_8491 == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_8491 == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_8491 == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_8491 == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_8491 == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_8491 == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_8491 == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_8491 == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_8491 == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_8491 == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_8491 == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_8491 == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_8491 == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_8491 == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_8491 == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_8491 == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_8491 == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_8491 == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_8491 == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_8491 == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_8491 == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_8491 == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_8491 == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_8491 == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_8491 == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_8491 == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_8491 == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_8491 == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_8491 == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_8491 == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_8491 == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_8491 == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_8491 == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_8491 == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_8491 == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7109;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7740;
    }
  }
  {}
  if ((_8491 == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7741;
    }
  }
  {}
  if ((_8491 == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_8491 == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_8491 == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_8491 == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_8491 == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_8491 == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_8491 == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_8491 == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_8491 == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_8491 == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_8491 == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_8491 == std::string ("errServerProblemSize")))
  {
    {
      return (int)8008;
    }
  }
  {}
  if ((_8491 == std::string ("trmMaxIterations")))
  {
    {
      return (int)10000;
    }
  }
  {}
  if ((_8491 == std::string ("trmMaxTime")))
  {
    {
      return (int)10001;
    }
  }
  {}
  if ((_8491 == std::string ("trmObjectiveRange")))
  {
    {
      return (int)10002;
    }
  }
  {}
  if ((_8491 == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)10008;
    }
  }
  {}
  if ((_8491 == std::string ("trmMioNumBranches")))
  {
    {
      return (int)10009;
    }
  }
  {}
  if ((_8491 == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)10015;
    }
  }
  {}
  if ((_8491 == std::string ("trmStall")))
  {
    {
      return (int)10006;
    }
  }
  {}
  if ((_8491 == std::string ("trmUserCallback")))
  {
    {
      return (int)10007;
    }
  }
  {}
  if ((_8491 == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)10020;
    }
  }
  {}
  if ((_8491 == std::string ("trmNumericalProblem")))
  {
    {
      return (int)10025;
    }
  }
  {}
  if ((_8491 == std::string ("trmInternal")))
  {
    {
      return (int)10030;
    }
  }
  {}
  if ((_8491 == std::string ("trmInternalStop")))
  {
    {
      return (int)10031;
    }
  }
  {}
  return (-(int)1);
}
void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }