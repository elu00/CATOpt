#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1 
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {} 
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; } 
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; } 
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr; 
  size_t sz0, sz1; 
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {} 
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; } 
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; } 
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T> 
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow; 
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_add(int a, int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, int b) { return safe_add_<long long int>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow; 
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, int b) { return safe_mul_<long long int>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _151,    std::shared_ptr< monty::ndarray< long long,1 > > _152,    int _153,    int _154,    int _155,    std::shared_ptr< monty::ndarray< long long,1 > > _156) { mosek::fusion::p_Sort::argTransposeSort(_151,_152,_153,_154,_155,_156); }void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< long long,1 > > _151,std::shared_ptr< monty::ndarray< long long,1 > > _152,int _153,int _154,int _155,std::shared_ptr< monty::ndarray< long long,1 > > _156){
  _checked_ptr_1<long long> _ptr__151(_151 ? _151->raw() : nullptr, _151 ? _151->size(0) : 0);
  _checked_ptr_1<long long> _ptr__152(_152 ? _152->raw() : nullptr, _152 ? _152->size(0) : 0);
  _checked_ptr_1<long long> _ptr__156(_156 ? _156->raw() : nullptr, _156 ? _156->size(0) : 0);
  int _6743 = (int)0;
  int _6744 = safe_add( safe_mul( _153,_155 ),(int)1 );
  for (int _157 = _6743; _157 < _6744; ++_157)
  {
    {
      _ptr__152[_157] = (int)0;
    }
  }
  int _6745 = (int)0;
  int _6746 = (int)((_156)->size(0));
  for (int _158 = _6745; _158 < _6746; ++_158)
  {
    {
      ++ _ptr__152[safe_add( safe_add( safe_mul( (_ptr__156[_ptr__151[_158]] / safe_mul( _154,_155 )),_155 ),(_ptr__156[_ptr__151[_158]] % _155) ),(int)1 )];
    }
  }
  int _6747 = (int)0;
  int _6748 = safe_mul( _153,_155 );
  for (int _159 = _6747; _159 < _6748; ++_159)
  {
    {
      _ptr__152[safe_add( _159,(int)1 )] = safe_add( _ptr__152[safe_add( _159,(int)1 )],_ptr__152[_159] );
    }
  }
  std::vector<long long> _6749;
  for (int _161 = (int)0, _6750 = (int)((_151)->size(0)); _161 < _6750 ; ++_161)
  {
    _6749.push_back(_ptr__151[_161]);
  }
  auto _6751 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6749.size()),_6749.begin(),_6749.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _160 = _6751;
  _checked_ptr_1<long long> _ptr__160(_160 ? _160->raw() : nullptr,_160 ? _160->size(0) : 0);
  long long _6752 = (long long)0;
  long long _6753 = (long long)((_156)->size(0));
  for (long long _162 = _6752; _162 < _6753; ++_162)
  {
    {
      long long _163 = safe_add( safe_mul( (_ptr__156[_ptr__160[_162]] / safe_mul( _154,_155 )),_155 ),(_ptr__156[_ptr__160[_162]] % _155) );
      _ptr__151[_ptr__152[_163]] = _ptr__160[_162];
      ++ _ptr__152[_163];
    }
  }
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _164,    std::shared_ptr< monty::ndarray< long long,1 > > _165) { mosek::fusion::p_Sort::argsort(_164,_165); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _164,std::shared_ptr< monty::ndarray< long long,1 > > _165){
  _checked_ptr_1<long long> _ptr__164(_164 ? _164->raw() : nullptr, _164 ? _164->size(0) : 0);
  _checked_ptr_1<long long> _ptr__165(_165 ? _165->raw() : nullptr, _165 ? _165->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_164,_165,(long long)((int)0),(long long)((int)((_164)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _166,    std::shared_ptr< monty::ndarray< int,1 > > _167) { mosek::fusion::p_Sort::argsort(_166,_167); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _166,std::shared_ptr< monty::ndarray< int,1 > > _167){
  _checked_ptr_1<long long> _ptr__166(_166 ? _166->raw() : nullptr, _166 ? _166->size(0) : 0);
  _checked_ptr_1<int> _ptr__167(_167 ? _167->raw() : nullptr, _167 ? _167->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_166,_167,(long long)((int)0),(long long)((int)((_166)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _168,    std::shared_ptr< monty::ndarray< long long,1 > > _169,    std::shared_ptr< monty::ndarray< long long,1 > > _170) { mosek::fusion::p_Sort::argsort(_168,_169,_170); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _168,std::shared_ptr< monty::ndarray< long long,1 > > _169,std::shared_ptr< monty::ndarray< long long,1 > > _170){
  _checked_ptr_1<long long> _ptr__168(_168 ? _168->raw() : nullptr, _168 ? _168->size(0) : 0);
  _checked_ptr_1<long long> _ptr__169(_169 ? _169->raw() : nullptr, _169 ? _169->size(0) : 0);
  _checked_ptr_1<long long> _ptr__170(_170 ? _170->raw() : nullptr, _170 ? _170->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_168,_169,_170,(long long)((int)0),(long long)((int)((_168)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _171,    std::shared_ptr< monty::ndarray< int,1 > > _172,    std::shared_ptr< monty::ndarray< int,1 > > _173) { mosek::fusion::p_Sort::argsort(_171,_172,_173); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _171,std::shared_ptr< monty::ndarray< int,1 > > _172,std::shared_ptr< monty::ndarray< int,1 > > _173){
  _checked_ptr_1<long long> _ptr__171(_171 ? _171->raw() : nullptr, _171 ? _171->size(0) : 0);
  _checked_ptr_1<int> _ptr__172(_172 ? _172->raw() : nullptr, _172 ? _172->size(0) : 0);
  _checked_ptr_1<int> _ptr__173(_173 ? _173->raw() : nullptr, _173 ? _173->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_171,_172,_173,(long long)((int)0),(long long)((int)((_171)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    long long _176,    long long _177) { mosek::fusion::p_Sort::argsort(_174,_175,_176,_177); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,long long _176,long long _177){
  _checked_ptr_1<long long> _ptr__174(_174 ? _174->raw() : nullptr, _174 ? _174->size(0) : 0);
  _checked_ptr_1<long long> _ptr__175(_175 ? _175->raw() : nullptr, _175 ? _175->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_174,_175,_176,_177,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _178,    std::shared_ptr< monty::ndarray< int,1 > > _179,    long long _180,    long long _181) { mosek::fusion::p_Sort::argsort(_178,_179,_180,_181); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _178,std::shared_ptr< monty::ndarray< int,1 > > _179,long long _180,long long _181){
  _checked_ptr_1<long long> _ptr__178(_178 ? _178->raw() : nullptr, _178 ? _178->size(0) : 0);
  _checked_ptr_1<int> _ptr__179(_179 ? _179->raw() : nullptr, _179 ? _179->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_178,_179,_180,_181,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _182,    std::shared_ptr< monty::ndarray< long long,1 > > _183,    std::shared_ptr< monty::ndarray< long long,1 > > _184,    long long _185,    long long _186) { mosek::fusion::p_Sort::argsort(_182,_183,_184,_185,_186); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _182,std::shared_ptr< monty::ndarray< long long,1 > > _183,std::shared_ptr< monty::ndarray< long long,1 > > _184,long long _185,long long _186){
  _checked_ptr_1<long long> _ptr__182(_182 ? _182->raw() : nullptr, _182 ? _182->size(0) : 0);
  _checked_ptr_1<long long> _ptr__183(_183 ? _183->raw() : nullptr, _183 ? _183->size(0) : 0);
  _checked_ptr_1<long long> _ptr__184(_184 ? _184->raw() : nullptr, _184 ? _184->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_182,_183,_184,_185,_186,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _187,    std::shared_ptr< monty::ndarray< int,1 > > _188,    std::shared_ptr< monty::ndarray< int,1 > > _189,    long long _190,    long long _191) { mosek::fusion::p_Sort::argsort(_187,_188,_189,_190,_191); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _187,std::shared_ptr< monty::ndarray< int,1 > > _188,std::shared_ptr< monty::ndarray< int,1 > > _189,long long _190,long long _191){
  _checked_ptr_1<long long> _ptr__187(_187 ? _187->raw() : nullptr, _187 ? _187->size(0) : 0);
  _checked_ptr_1<int> _ptr__188(_188 ? _188->raw() : nullptr, _188 ? _188->size(0) : 0);
  _checked_ptr_1<int> _ptr__189(_189 ? _189->raw() : nullptr, _189 ? _189->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_187,_188,_189,_190,_191,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _192,    std::shared_ptr< monty::ndarray< long long,1 > > _193,    long long _194,    long long _195,    bool _196) { mosek::fusion::p_Sort::argsort(_192,_193,_194,_195,_196); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _192,std::shared_ptr< monty::ndarray< long long,1 > > _193,long long _194,long long _195,bool _196){
  _checked_ptr_1<long long> _ptr__192(_192 ? _192->raw() : nullptr, _192 ? _192->size(0) : 0);
  _checked_ptr_1<long long> _ptr__193(_193 ? _193->raw() : nullptr, _193 ? _193->size(0) : 0);
  if (((!_196) || ((_195 - _194) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_192,_193,_194,_195);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_192,_193,_194,_195,_196)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _197 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__197(_197 ? _197->raw() : nullptr,_197 ? _197->size(0) : 0);
      int _198 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_192,_193,nullptr,_194,_195,_197);
      if (((_ptr__197[(int)1] - _ptr__197[(int)0]) < safe_mul( _198,(_195 - _194) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_192,_193,_194,_195,_ptr__197[(int)0],_ptr__197[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_192,_193,_194,_195);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _199,    std::shared_ptr< monty::ndarray< int,1 > > _200,    long long _201,    long long _202,    bool _203) { mosek::fusion::p_Sort::argsort(_199,_200,_201,_202,_203); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _199,std::shared_ptr< monty::ndarray< int,1 > > _200,long long _201,long long _202,bool _203){
  _checked_ptr_1<long long> _ptr__199(_199 ? _199->raw() : nullptr, _199 ? _199->size(0) : 0);
  _checked_ptr_1<int> _ptr__200(_200 ? _200->raw() : nullptr, _200 ? _200->size(0) : 0);
  if (((!_203) || ((_202 - _201) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_199,_200,_201,_202);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_199,_200,_201,_202,_203)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _204 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__204(_204 ? _204->raw() : nullptr,_204 ? _204->size(0) : 0);
      int _205 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_199,_200,nullptr,_201,_202,_204);
      if (((_ptr__204[(int)1] - _ptr__204[(int)0]) < safe_mul( _205,(_202 - _201) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_199,_200,_201,_202,_ptr__204[(int)0],_ptr__204[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_199,_200,_201,_202);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _206,    std::shared_ptr< monty::ndarray< long long,1 > > _207,    std::shared_ptr< monty::ndarray< long long,1 > > _208,    long long _209,    long long _210,    bool _211) { mosek::fusion::p_Sort::argsort(_206,_207,_208,_209,_210,_211); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _206,std::shared_ptr< monty::ndarray< long long,1 > > _207,std::shared_ptr< monty::ndarray< long long,1 > > _208,long long _209,long long _210,bool _211){
  _checked_ptr_1<long long> _ptr__206(_206 ? _206->raw() : nullptr, _206 ? _206->size(0) : 0);
  _checked_ptr_1<long long> _ptr__207(_207 ? _207->raw() : nullptr, _207 ? _207->size(0) : 0);
  _checked_ptr_1<long long> _ptr__208(_208 ? _208->raw() : nullptr, _208 ? _208->size(0) : 0);
  if (((!_211) || ((_210 - _209) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_206,_207,_208,_209,_210,_211)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _212 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__212(_212 ? _212->raw() : nullptr,_212 ? _212->size(0) : 0);
      int _213 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_206,_207,_208,_209,_210,_212);
      if ((((_ptr__212[(int)1] - _ptr__212[(int)0]) < safe_mul( _213,(_210 - _209) )) && ((_ptr__212[(int)3] - _ptr__212[(int)2]) < safe_mul( _213,(_210 - _209) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_206,_208,_209,_210,_ptr__212[(int)2],_ptr__212[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_206,_207,_209,_210,_ptr__212[(int)0],_ptr__212[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _214,    std::shared_ptr< monty::ndarray< int,1 > > _215,    std::shared_ptr< monty::ndarray< int,1 > > _216,    long long _217,    long long _218,    bool _219) { mosek::fusion::p_Sort::argsort(_214,_215,_216,_217,_218,_219); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _214,std::shared_ptr< monty::ndarray< int,1 > > _215,std::shared_ptr< monty::ndarray< int,1 > > _216,long long _217,long long _218,bool _219){
  _checked_ptr_1<long long> _ptr__214(_214 ? _214->raw() : nullptr, _214 ? _214->size(0) : 0);
  _checked_ptr_1<int> _ptr__215(_215 ? _215->raw() : nullptr, _215 ? _215->size(0) : 0);
  _checked_ptr_1<int> _ptr__216(_216 ? _216->raw() : nullptr, _216 ? _216->size(0) : 0);
  if (((!_219) || ((_218 - _217) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_214,_215,_216,_217,_218);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_214,_215,_216,_217,_218,_219)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _220 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__220(_220 ? _220->raw() : nullptr,_220 ? _220->size(0) : 0);
      int _221 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_214,_215,_216,_217,_218,_220);
      if ((((_ptr__220[(int)1] - _ptr__220[(int)0]) < safe_mul( _221,(_218 - _217) )) && ((_ptr__220[(int)3] - _ptr__220[(int)2]) < safe_mul( _221,(_218 - _217) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_214,_216,_217,_218,_ptr__220[(int)2],_ptr__220[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_214,_215,_217,_218,_ptr__220[(int)0],_ptr__220[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_214,_215,_216,_217,_218);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _222,    std::shared_ptr< monty::ndarray< long long,1 > > _223,    long long _224,    long long _225,    long long _226,    long long _227) { mosek::fusion::p_Sort::argbucketsort(_222,_223,_224,_225,_226,_227); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _222,std::shared_ptr< monty::ndarray< long long,1 > > _223,long long _224,long long _225,long long _226,long long _227){
  _checked_ptr_1<long long> _ptr__222(_222 ? _222->raw() : nullptr, _222 ? _222->size(0) : 0);
  _checked_ptr_1<long long> _ptr__223(_223 ? _223->raw() : nullptr, _223 ? _223->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_222,_224,_225,_223,_226,_227);
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _228,    std::shared_ptr< monty::ndarray< int,1 > > _229,    long long _230,    long long _231,    int _232,    int _233) { mosek::fusion::p_Sort::argbucketsort(_228,_229,_230,_231,_232,_233); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _228,std::shared_ptr< monty::ndarray< int,1 > > _229,long long _230,long long _231,int _232,int _233){
  _checked_ptr_1<long long> _ptr__228(_228 ? _228->raw() : nullptr, _228 ? _228->size(0) : 0);
  _checked_ptr_1<int> _ptr__229(_229 ? _229->raw() : nullptr, _229 ? _229->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_228,_230,_231,_229,_232,_233);
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _234,    std::shared_ptr< monty::ndarray< long long,1 > > _235,    std::shared_ptr< monty::ndarray< long long,1 > > _236,    long long _237,    long long _238,    std::shared_ptr< monty::ndarray< long long,1 > > _239) { mosek::fusion::p_Sort::getminmax(_234,_235,_236,_237,_238,_239); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _234,std::shared_ptr< monty::ndarray< long long,1 > > _235,std::shared_ptr< monty::ndarray< long long,1 > > _236,long long _237,long long _238,std::shared_ptr< monty::ndarray< long long,1 > > _239){
  _checked_ptr_1<long long> _ptr__234(_234 ? _234->raw() : nullptr, _234 ? _234->size(0) : 0);
  _checked_ptr_1<long long> _ptr__235(_235 ? _235->raw() : nullptr, _235 ? _235->size(0) : 0);
  _checked_ptr_1<long long> _ptr__236(_236 ? _236->raw() : nullptr, _236 ? _236->size(0) : 0);
  _checked_ptr_1<long long> _ptr__239(_239 ? _239->raw() : nullptr, _239 ? _239->size(0) : 0);
  _ptr__239[(int)0] = _ptr__235[_ptr__234[_237]];
  _ptr__239[(int)1] = _ptr__235[_ptr__234[_237]];
  long long _6754 = safe_add( _237,(int)1 );
  long long _6755 = _238;
  for (long long _240 = _6754; _240 < _6755; ++_240)
  {
    {
      if ((_ptr__239[(int)0] > _ptr__235[_ptr__234[_240]]))
      {
        {
          _ptr__239[(int)0] = _ptr__235[_ptr__234[_240]];
        }
      }
      {}
      if ((_ptr__239[(int)1] < _ptr__235[_ptr__234[_240]]))
      {
        {
          _ptr__239[(int)1] = _ptr__235[_ptr__234[_240]];
        }
      }
      {}
    }
  }
  if ((NULL != _236.get()))
  {
    {
      _ptr__239[(int)2] = _ptr__236[_ptr__234[_237]];
      _ptr__239[(int)3] = _ptr__236[_ptr__234[_237]];
      long long _6756 = safe_add( _237,(int)1 );
      long long _6757 = _238;
      for (long long _241 = _6756; _241 < _6757; ++_241)
      {
        {
          if ((_ptr__239[(int)2] > _ptr__236[_ptr__234[_241]]))
          {
            {
              _ptr__239[(int)2] = _ptr__236[_ptr__234[_241]];
            }
          }
          {}
          if ((_ptr__239[(int)3] < _ptr__236[_ptr__234[_241]]))
          {
            {
              _ptr__239[(int)3] = _ptr__236[_ptr__234[_241]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _242,    std::shared_ptr< monty::ndarray< int,1 > > _243,    std::shared_ptr< monty::ndarray< int,1 > > _244,    long long _245,    long long _246,    std::shared_ptr< monty::ndarray< int,1 > > _247) { mosek::fusion::p_Sort::getminmax(_242,_243,_244,_245,_246,_247); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _242,std::shared_ptr< monty::ndarray< int,1 > > _243,std::shared_ptr< monty::ndarray< int,1 > > _244,long long _245,long long _246,std::shared_ptr< monty::ndarray< int,1 > > _247){
  _checked_ptr_1<long long> _ptr__242(_242 ? _242->raw() : nullptr, _242 ? _242->size(0) : 0);
  _checked_ptr_1<int> _ptr__243(_243 ? _243->raw() : nullptr, _243 ? _243->size(0) : 0);
  _checked_ptr_1<int> _ptr__244(_244 ? _244->raw() : nullptr, _244 ? _244->size(0) : 0);
  _checked_ptr_1<int> _ptr__247(_247 ? _247->raw() : nullptr, _247 ? _247->size(0) : 0);
  _ptr__247[(int)0] = _ptr__243[_ptr__242[_245]];
  _ptr__247[(int)1] = _ptr__243[_ptr__242[_245]];
  long long _6758 = safe_add( _245,(int)1 );
  long long _6759 = _246;
  for (long long _248 = _6758; _248 < _6759; ++_248)
  {
    {
      if ((_ptr__247[(int)0] > _ptr__243[_ptr__242[_248]]))
      {
        {
          _ptr__247[(int)0] = _ptr__243[_ptr__242[_248]];
        }
      }
      {}
      if ((_ptr__247[(int)1] < _ptr__243[_ptr__242[_248]]))
      {
        {
          _ptr__247[(int)1] = _ptr__243[_ptr__242[_248]];
        }
      }
      {}
    }
  }
  if ((NULL != _244.get()))
  {
    {
      _ptr__247[(int)2] = _ptr__244[_ptr__242[_245]];
      _ptr__247[(int)3] = _ptr__244[_ptr__242[_245]];
      long long _6760 = safe_add( _245,(int)1 );
      long long _6761 = _246;
      for (long long _249 = _6760; _249 < _6761; ++_249)
      {
        {
          if ((_ptr__247[(int)2] > _ptr__244[_ptr__242[_249]]))
          {
            {
              _ptr__247[(int)2] = _ptr__244[_ptr__242[_249]];
            }
          }
          {}
          if ((_ptr__247[(int)3] < _ptr__244[_ptr__242[_249]]))
          {
            {
              _ptr__247[(int)3] = _ptr__244[_ptr__242[_249]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _250,    std::shared_ptr< monty::ndarray< long long,1 > > _251,    long long _252,    long long _253,    bool _254) { return mosek::fusion::p_Sort::issorted(_250,_251,_252,_253,_254); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _250,std::shared_ptr< monty::ndarray< long long,1 > > _251,long long _252,long long _253,bool _254){
  _checked_ptr_1<long long> _ptr__250(_250 ? _250->raw() : nullptr, _250 ? _250->size(0) : 0);
  _checked_ptr_1<long long> _ptr__251(_251 ? _251->raw() : nullptr, _251 ? _251->size(0) : 0);
  long long _6762 = _252;
  long long _6763 = (_253 - (int)1);
  for (long long _255 = _6762; _255 < _6763; ++_255)
  {
    {
      if ((_ptr__251[_ptr__250[_255]] > _ptr__251[_ptr__250[safe_add( _255,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _256,    std::shared_ptr< monty::ndarray< int,1 > > _257,    long long _258,    long long _259,    bool _260) { return mosek::fusion::p_Sort::issorted(_256,_257,_258,_259,_260); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _256,std::shared_ptr< monty::ndarray< int,1 > > _257,long long _258,long long _259,bool _260){
  _checked_ptr_1<long long> _ptr__256(_256 ? _256->raw() : nullptr, _256 ? _256->size(0) : 0);
  _checked_ptr_1<int> _ptr__257(_257 ? _257->raw() : nullptr, _257 ? _257->size(0) : 0);
  long long _6764 = _258;
  long long _6765 = (_259 - (int)1);
  for (long long _261 = _6764; _261 < _6765; ++_261)
  {
    {
      if ((_ptr__257[_ptr__256[_261]] > _ptr__257[_ptr__256[safe_add( _261,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _262,    std::shared_ptr< monty::ndarray< long long,1 > > _263,    std::shared_ptr< monty::ndarray< long long,1 > > _264,    long long _265,    long long _266,    bool _267) { return mosek::fusion::p_Sort::issorted(_262,_263,_264,_265,_266,_267); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _262,std::shared_ptr< monty::ndarray< long long,1 > > _263,std::shared_ptr< monty::ndarray< long long,1 > > _264,long long _265,long long _266,bool _267){
  _checked_ptr_1<long long> _ptr__262(_262 ? _262->raw() : nullptr, _262 ? _262->size(0) : 0);
  _checked_ptr_1<long long> _ptr__263(_263 ? _263->raw() : nullptr, _263 ? _263->size(0) : 0);
  _checked_ptr_1<long long> _ptr__264(_264 ? _264->raw() : nullptr, _264 ? _264->size(0) : 0);
  long long _6766 = _265;
  long long _6767 = (_266 - (int)1);
  for (long long _268 = _6766; _268 < _6767; ++_268)
  {
    {
      if (((_ptr__263[_ptr__262[_268]] > _ptr__263[_ptr__262[safe_add( _268,(int)1 )]]) || ((_ptr__263[_ptr__262[safe_add( _268,(int)1 )]] == _ptr__263[_ptr__262[_268]]) && (_ptr__264[_ptr__262[_268]] > _ptr__264[_ptr__262[safe_add( _268,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _269,    std::shared_ptr< monty::ndarray< int,1 > > _270,    std::shared_ptr< monty::ndarray< int,1 > > _271,    long long _272,    long long _273,    bool _274) { return mosek::fusion::p_Sort::issorted(_269,_270,_271,_272,_273,_274); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _269,std::shared_ptr< monty::ndarray< int,1 > > _270,std::shared_ptr< monty::ndarray< int,1 > > _271,long long _272,long long _273,bool _274){
  _checked_ptr_1<long long> _ptr__269(_269 ? _269->raw() : nullptr, _269 ? _269->size(0) : 0);
  _checked_ptr_1<int> _ptr__270(_270 ? _270->raw() : nullptr, _270 ? _270->size(0) : 0);
  _checked_ptr_1<int> _ptr__271(_271 ? _271->raw() : nullptr, _271 ? _271->size(0) : 0);
  long long _6768 = _272;
  long long _6769 = (_273 - (int)1);
  for (long long _275 = _6768; _275 < _6769; ++_275)
  {
    {
      if (((_ptr__270[_ptr__269[_275]] > _ptr__270[_ptr__269[safe_add( _275,(int)1 )]]) || ((_ptr__270[_ptr__269[_275]] == _ptr__270[_ptr__269[safe_add( _275,(int)1 )]]) && (_ptr__271[_ptr__269[_275]] > _ptr__271[_ptr__269[safe_add( _275,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _276){ return new mosek::fusion::IndexCounter(_276); }mosek::fusion::IndexCounter::IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _276) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_276); }void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _276){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__276(_276 ? _276->raw() : nullptr, _276 ? _276->size(0) : 0);
    n = (int)((_276)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    start = (long long)0;
    strides = ::mosek::fusion::p_Set::strides(_276);
    std::vector<int> _6770;
    for (int _277 = (int)0, _6771 = (int)((_276)->size(0)); _277 < _6771 ; ++_277)
    {
      _6770.push_back(_ptr__276[_277]);
    }
    auto _6772 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6770.size()),_6770.begin(),_6770.end()));
    dims = _6772;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _278,    std::shared_ptr< monty::ndarray< int,1 > > _279,    std::shared_ptr< monty::ndarray< int,1 > > _280){ return new mosek::fusion::IndexCounter(_278,_279,_280); }mosek::fusion::IndexCounter::IndexCounter  (long long _278,    std::shared_ptr< monty::ndarray< int,1 > > _279,    std::shared_ptr< monty::ndarray< int,1 > > _280) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_278,_279,_280); }void mosek::fusion::p_IndexCounter::_initialize  (long long _278,    std::shared_ptr< monty::ndarray< int,1 > > _279,    std::shared_ptr< monty::ndarray< int,1 > > _280){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__279(_279 ? _279->raw() : nullptr, _279 ? _279->size(0) : 0);
    _checked_ptr_1<int> _ptr__280(_280 ? _280->raw() : nullptr, _280 ? _280->size(0) : 0);
    int _281 = (int)((_280)->size(0));
    n = (int)((_279)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _6773 = (int)0;
    int _6774 = n;
    for (int _282 = _6773; _282 < _6774; ++_282)
    {
      {
        ((*st)(_282)) = _278;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_280);
    dims = _279;
    start = _278;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< long long,1 > > _285){ return new mosek::fusion::IndexCounter(_283,_284,_285); }mosek::fusion::IndexCounter::IndexCounter  (long long _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< long long,1 > > _285) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_283,_284,_285); }void mosek::fusion::p_IndexCounter::_initialize  (long long _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< long long,1 > > _285){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__284(_284 ? _284->raw() : nullptr, _284 ? _284->size(0) : 0);
    _checked_ptr_1<long long> _ptr__285(_285 ? _285->raw() : nullptr, _285 ? _285->size(0) : 0);
    n = (int)((_284)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _6775 = (int)0;
    int _6776 = n;
    for (int _286 = _6775; _286 < _6776; ++_286)
    {
      {
        ((*st)(_286)) = _283;
      }
    }
    strides = _285;
    dims = _284;
    start = _283;
  }
}bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd(){
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex(){
  return ii;
}
long long mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next(){
  long long _287 = _pubthis->get();
  _pubthis->inc();
  return _287;
}
long long mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get(){
  return ((*st)((int)0));
}
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc(){
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int _288;
  {
    _288 = (int)0;
    for(;((_288 < (n - (int)1)) && (((*ii)(_288)) == ((*dims)(((n - _288) - (int)1)))));++ _288)
    {
      {
        ((*ii)(_288)) = (int)0;
        ++ ((*ii)(safe_add( _288,(int)1 )));
        ((*st)(safe_add( _288,(int)1 ))) = safe_add( ((*st)(safe_add( _288,(int)1 ))),((*strides)(((n - _288) - (int)2))) );
      }
    }
  }
  int _6777 = (int)0;
  int _6778 = _288;
  for (int _289 = _6777; _289 < _6778; ++_289)
  {
    {
      ((*st)(_289)) = ((*st)(_288));
    }
  }
}
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset(){
  st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
  int _6779 = (int)0;
  int _6780 = n;
  for (int _290 = _6779; _290 < _6780; ++_290)
  {
    {
      ((*st)(_290)) = start;
    }
  }
}
void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< long long,1 > > _291,    int _292) { return mosek::fusion::p_CommonTools::resize(_291,_292); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< long long,1 > > _291,int _292){
  _checked_ptr_1<long long> _ptr__291(_291 ? _291->raw() : nullptr, _291 ? _291->size(0) : 0);
  if ((_292 == (int)((_291)->size(0))))
  {
    {
      return _291;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _293 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_292)));
      _checked_ptr_1<long long> _ptr__293(_293 ? _293->raw() : nullptr,_293 ? _293->size(0) : 0);
      if ((_292 > (int)((_291)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_291,(int)0,_293,(int)0,(int)((_291)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_291,(int)0,_293,(int)0,_292);
        }
      }
      return _293;
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< int,1 > > _294,    int _295) { return mosek::fusion::p_CommonTools::resize(_294,_295); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int,1 > > _294,int _295){
  _checked_ptr_1<int> _ptr__294(_294 ? _294->raw() : nullptr, _294 ? _294->size(0) : 0);
  if ((_295 == (int)((_294)->size(0))))
  {
    {
      return _294;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _296 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_295)));
      _checked_ptr_1<int> _ptr__296(_296 ? _296->raw() : nullptr,_296 ? _296->size(0) : 0);
      if ((_295 > (int)((_294)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_294,(int)0,_296,(int)0,(int)((_294)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_294,(int)0,_296,(int)0,_295);
        }
      }
      return _296;
    }
  }
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< double,1 > > _297,    int _298) { return mosek::fusion::p_CommonTools::resize(_297,_298); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _297,int _298){
  _checked_ptr_1<double> _ptr__297(_297 ? _297->raw() : nullptr, _297 ? _297->size(0) : 0);
  if ((_298 == (int)((_297)->size(0))))
  {
    {
      return _297;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _299 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_298)));
      _checked_ptr_1<double> _ptr__299(_299 ? _299->raw() : nullptr,_299 ? _299->size(0) : 0);
      if ((_298 > (int)((_297)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,(int)((_297)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,_298);
        }
      }
      return _299;
    }
  }
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< int,1 > > _300,    int _301) { return mosek::fusion::p_CommonTools::binarySearch(_300,_301); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int,1 > > _300,int _301){
  _checked_ptr_1<int> _ptr__300(_300 ? _300->raw() : nullptr, _300 ? _300->size(0) : 0);
  int _302 = (int)0;
  int _303 = (int)((_300)->size(0));
  if ((_ptr__300[_302] == _301))
  {
    {
      return _302;
    }
  }
  else if((_ptr__300[(_303 - (int)1)] == _301))
  {
    {
      return (_303 - (int)1);
    }
  }
  {}
  while ( (_302 < (_303 - (int)1)) )
  {
    {
      int _304 = ((_303 - _302) / (int)2);
      if ((_301 < _ptr__300[_304]))
      {
        {
          _302 = safe_add( _304,(int)1 );
        }
      }
      else if((_301 > _ptr__300[_304]))
      {
        {
          _303 = _304;
        }
      }
      else
      {
        {
          return _304;
        }
      }
    }
  }
  return (-(int)1);
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< long long,1 > > _305,    long long _306) { return mosek::fusion::p_CommonTools::binarySearch(_305,_306); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< long long,1 > > _305,long long _306){
  _checked_ptr_1<long long> _ptr__305(_305 ? _305->raw() : nullptr, _305 ? _305->size(0) : 0);
  int _307 = ::mosek::fusion::p_CommonTools::binarySearchL(_305,_306);
  if (((_307 < (int)((_305)->size(0))) && (_ptr__305[_307] == _306)))
  {
    {
      return _307;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
int mosek::fusion::CommonTools::binarySearchR  ( std::shared_ptr< monty::ndarray< long long,1 > > _308,    long long _309) { return mosek::fusion::p_CommonTools::binarySearchR(_308,_309); }int mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< long long,1 > > _308,long long _309){
  _checked_ptr_1<long long> _ptr__308(_308 ? _308->raw() : nullptr, _308 ? _308->size(0) : 0);
  int _310 = (int)0;
  int _311 = (int)((_308)->size(0));
  if ((_ptr__308[_310] > _309))
  {
    {
      return _310;
    }
  }
  {}
  while ( (_310 < (_311 - (int)1)) )
  {
    {
      int _312 = (safe_add( _311,_310 ) / (int)2);
      if ((_309 >= _ptr__308[_312]))
      {
        {
          _310 = _312;
        }
      }
      else
      {
        {
          _311 = _312;
        }
      }
    }
  }
  return _311;
}
int mosek::fusion::CommonTools::binarySearchL  ( std::shared_ptr< monty::ndarray< long long,1 > > _313,    long long _314) { return mosek::fusion::p_CommonTools::binarySearchL(_313,_314); }int mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< long long,1 > > _313,long long _314){
  _checked_ptr_1<long long> _ptr__313(_313 ? _313->raw() : nullptr, _313 ? _313->size(0) : 0);
  int _315 = (int)0;
  int _316 = (int)((_313)->size(0));
  if ((_314 <= _ptr__313[_315]))
  {
    {
      return _315;
    }
  }
  {}
  while ( (_315 < (_316 - (int)1)) )
  {
    {
      int _317 = (safe_add( _316,_315 ) / (int)2);
      if ((_ptr__313[_317] < _314))
      {
        {
          _315 = _317;
        }
      }
      else
      {
        {
          _316 = _317;
        }
      }
    }
  }
  return _316;
}
void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _318,    std::shared_ptr< monty::ndarray< int,1 > > _319,    std::shared_ptr< monty::ndarray< int,1 > > _320) { mosek::fusion::p_CommonTools::ndIncr(_318,_319,_320); }void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int,1 > > _318,std::shared_ptr< monty::ndarray< int,1 > > _319,std::shared_ptr< monty::ndarray< int,1 > > _320){
  _checked_ptr_1<int> _ptr__318(_318 ? _318->raw() : nullptr, _318 ? _318->size(0) : 0);
  _checked_ptr_1<int> _ptr__319(_319 ? _319->raw() : nullptr, _319 ? _319->size(0) : 0);
  _checked_ptr_1<int> _ptr__320(_320 ? _320->raw() : nullptr, _320 ? _320->size(0) : 0);
  int _321 = ((int)((_318)->size(0)) - (int)1);
  ++ _ptr__318[_321];
  while ( ((_321 > (int)0) && (_ptr__318[_321] >= _ptr__320[_321])) )
  {
    {
      _ptr__318[_321] = _ptr__319[_321];
      ++ _ptr__318[(_321 - (int)1)];
    }
  }
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _322,    std::shared_ptr< monty::ndarray< int,1 > > _323,    std::shared_ptr< monty::ndarray< double,1 > > _324,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _325,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _326,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _327,    long long _328,    int _329,    int _330) { mosek::fusion::p_CommonTools::transposeTriplets(_322,_323,_324,_325,_326,_327,_328,_329,_330); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _322,std::shared_ptr< monty::ndarray< int,1 > > _323,std::shared_ptr< monty::ndarray< double,1 > > _324,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _325,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _326,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _327,long long _328,int _329,int _330){
  _checked_ptr_1<int> _ptr__322(_322 ? _322->raw() : nullptr, _322 ? _322->size(0) : 0);
  _checked_ptr_1<int> _ptr__323(_323 ? _323->raw() : nullptr, _323 ? _323->size(0) : 0);
  _checked_ptr_1<double> _ptr__324(_324 ? _324->raw() : nullptr, _324 ? _324->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _331 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _329,(int)2 ))));
  _checked_ptr_1<long long> _ptr__331(_331 ? _331->raw() : nullptr,_331 ? _331->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _332 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _330,(int)2 ))));
  _checked_ptr_1<long long> _ptr__332(_332 ? _332->raw() : nullptr,_332 ? _332->size(0) : 0);
  {
    long long _333 = (long long)0;
    for(;(_333 < _328);++ _333)
    {
      {
        _ptr__332[safe_add( _ptr__323[_333],(int)2 )] = safe_add( _ptr__332[safe_add( _ptr__323[_333],(int)2 )],(int)1 );
        _ptr__331[safe_add( _ptr__322[_333],(int)2 )] = safe_add( _ptr__331[safe_add( _ptr__322[_333],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _334 = (int)1;
    for(;(_334 < _329);++ _334)
    {
      {
        _ptr__331[safe_add( _334,(int)1 )] = safe_add( _ptr__331[safe_add( _334,(int)1 )],_ptr__331[_334] );
      }
    }
  }
  {
    int _335 = (int)1;
    for(;(_335 < _330);++ _335)
    {
      {
        _ptr__332[safe_add( _335,(int)1 )] = safe_add( _ptr__332[safe_add( _335,(int)1 )],_ptr__332[_335] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _336 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_328)));
  _checked_ptr_1<long long> _ptr__336(_336 ? _336->raw() : nullptr,_336 ? _336->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_328)));
  _checked_ptr_1<long long> _ptr__337(_337 ? _337->raw() : nullptr,_337 ? _337->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _338 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_328)));
  _checked_ptr_1<double> _ptr__338(_338 ? _338->raw() : nullptr,_338 ? _338->size(0) : 0);
  int _6781 = (int)0;
  int _6782 = _329;
  for (int _339 = _6781; _339 < _6782; ++_339)
  {
    {
      {
        long long _340 = _ptr__331[_339];
        for(;(_340 < _ptr__331[safe_add( _339,(int)1 )]);++ _340)
        {
          {
            int _341 = _ptr__323[_340];
            long long _342 = _ptr__332[_341];
            _ptr__336[_342] = _339;
            _ptr__337[_342] = _341;
            _ptr__338[_342] = _ptr__324[_340];
            _ptr__332[_341] = safe_add( _342,(int)1 );
          }
        }
      }
    }
  }
  ((*_325)((int)0)) = _337;
  ((*_326)((int)0)) = _336;
  ((*_327)((int)0)) = _338;
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _343,    std::shared_ptr< monty::ndarray< int,1 > > _344,    std::shared_ptr< monty::ndarray< double,1 > > _345,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _346,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _347,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _348,    long long _349,    int _350,    int _351) { mosek::fusion::p_CommonTools::transposeTriplets(_343,_344,_345,_346,_347,_348,_349,_350,_351); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _343,std::shared_ptr< monty::ndarray< int,1 > > _344,std::shared_ptr< monty::ndarray< double,1 > > _345,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _346,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _347,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _348,long long _349,int _350,int _351){
  _checked_ptr_1<int> _ptr__343(_343 ? _343->raw() : nullptr, _343 ? _343->size(0) : 0);
  _checked_ptr_1<int> _ptr__344(_344 ? _344->raw() : nullptr, _344 ? _344->size(0) : 0);
  _checked_ptr_1<double> _ptr__345(_345 ? _345->raw() : nullptr, _345 ? _345->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _350,(int)2 ))));
  _checked_ptr_1<long long> _ptr__352(_352 ? _352->raw() : nullptr,_352 ? _352->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _353 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _351,(int)2 ))));
  _checked_ptr_1<long long> _ptr__353(_353 ? _353->raw() : nullptr,_353 ? _353->size(0) : 0);
  {
    long long _354 = (long long)0;
    for(;(_354 < _349);++ _354)
    {
      {
        _ptr__353[safe_add( _ptr__344[_354],(int)2 )] = safe_add( _ptr__353[safe_add( _ptr__344[_354],(int)2 )],(int)1 );
        _ptr__352[safe_add( _ptr__343[_354],(int)2 )] = safe_add( _ptr__352[safe_add( _ptr__343[_354],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _355 = (int)1;
    for(;(_355 < _350);++ _355)
    {
      {
        _ptr__352[safe_add( _355,(int)1 )] = safe_add( _ptr__352[safe_add( _355,(int)1 )],_ptr__352[_355] );
      }
    }
  }
  {
    int _356 = (int)1;
    for(;(_356 < _351);++ _356)
    {
      {
        _ptr__353[safe_add( _356,(int)1 )] = safe_add( _ptr__353[safe_add( _356,(int)1 )],_ptr__353[_356] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _357 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_349)));
  _checked_ptr_1<int> _ptr__357(_357 ? _357->raw() : nullptr,_357 ? _357->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _358 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_349)));
  _checked_ptr_1<int> _ptr__358(_358 ? _358->raw() : nullptr,_358 ? _358->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _359 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_349)));
  _checked_ptr_1<double> _ptr__359(_359 ? _359->raw() : nullptr,_359 ? _359->size(0) : 0);
  {
    int _360 = (int)0;
    for(;(_360 < _350);++ _360)
    {
      {
        long long _6783 = _ptr__352[_360];
        long long _6784 = _ptr__352[safe_add( _360,(int)1 )];
        for (long long _361 = _6783; _361 < _6784; ++_361)
        {
          {
            int _362 = _ptr__344[_361];
            long long _363 = _ptr__353[_362];
            _ptr__357[_363] = _360;
            _ptr__358[_363] = _362;
            _ptr__359[_363] = _ptr__345[_361];
            _ptr__353[_362] = safe_add( _363,(int)1 );
          }
        }
      }
    }
  }
  ((*_346)((int)0)) = _358;
  ((*_347)((int)0)) = _357;
  ((*_348)((int)0)) = _359;
}
void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _364,    std::shared_ptr< monty::ndarray< int,1 > > _365,    std::shared_ptr< monty::ndarray< double,1 > > _366,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _367,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _368,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _369,    long long _370,    int _371,    int _372) { mosek::fusion::p_CommonTools::tripletSort(_364,_365,_366,_367,_368,_369,_370,_371,_372); }void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int,1 > > _364,std::shared_ptr< monty::ndarray< int,1 > > _365,std::shared_ptr< monty::ndarray< double,1 > > _366,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _367,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _368,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _369,long long _370,int _371,int _372){
  _checked_ptr_1<int> _ptr__364(_364 ? _364->raw() : nullptr, _364 ? _364->size(0) : 0);
  _checked_ptr_1<int> _ptr__365(_365 ? _365->raw() : nullptr, _365 ? _365->size(0) : 0);
  _checked_ptr_1<double> _ptr__366(_366 ? _366->raw() : nullptr, _366 ? _366->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _373 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_370)));
  _checked_ptr_1<int> _ptr__373(_373 ? _373->raw() : nullptr,_373 ? _373->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _374 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _372,(int)2 ))));
  _checked_ptr_1<long long> _ptr__374(_374 ? _374->raw() : nullptr,_374 ? _374->size(0) : 0);
  long long _6785 = (long long)0;
  long long _6786 = _370;
  for (long long _375 = _6785; _375 < _6786; ++_375)
  {
    {
      _ptr__374[safe_add( _ptr__365[_375],(int)2 )] = safe_add( _ptr__374[safe_add( _ptr__365[_375],(int)2 )],(int)1 );
    }
  }
  int _6787 = (int)1;
  int _6788 = _372;
  for (int _376 = _6787; _376 < _6788; ++_376)
  {
    {
      _ptr__374[safe_add( _376,(int)1 )] = safe_add( _ptr__374[safe_add( _376,(int)1 )],_ptr__374[_376] );
    }
  }
  int _6789 = (int)0;
  int _6790 = (int)_370;
  for (int _377 = _6789; _377 < _6790; ++_377)
  {
    {
      int _378 = _ptr__365[_377];
      _ptr__373[_ptr__374[safe_add( _378,(int)1 )]] = _377;
      _ptr__374[safe_add( _378,(int)1 )] = safe_add( _ptr__374[safe_add( _378,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _379 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _371,(int)2 ))));
  _checked_ptr_1<long long> _ptr__379(_379 ? _379->raw() : nullptr,_379 ? _379->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _380 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_370)));
  _checked_ptr_1<int> _ptr__380(_380 ? _380->raw() : nullptr,_380 ? _380->size(0) : 0);
  {
    int _381 = (int)0;
    for(;(_381 < _370);++ _381)
    {
      {
        _ptr__379[safe_add( _ptr__364[_381],(int)2 )] = safe_add( _ptr__379[safe_add( _ptr__364[_381],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _382 = (int)1;
    for(;(_382 < _371);++ _382)
    {
      {
        _ptr__379[safe_add( _382,(int)1 )] = safe_add( _ptr__379[safe_add( _382,(int)1 )],_ptr__379[_382] );
      }
    }
  }
  {
    int _383 = (int)0;
    for(;(_383 < _372);++ _383)
    {
      {
        {
          long long _384 = _ptr__374[_383];
          for(;(_384 < _ptr__374[safe_add( _383,(int)1 )]);++ _384)
          {
            {
              int _385 = _ptr__364[_ptr__373[_384]];
              _ptr__380[_ptr__379[safe_add( _385,(int)1 )]] = _ptr__373[_384];
              _ptr__379[safe_add( _385,(int)1 )] = safe_add( _ptr__379[safe_add( _385,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int _386 = (int)1;
  {
    int _387 = _ptr__364[_ptr__380[(int)0]];
    int _388 = _ptr__365[_ptr__380[(int)0]];
    {
      int _389 = (int)1;
      for(;(_389 < _370);++ _389)
      {
        {
          int _390 = _ptr__380[_389];
          if (((_387 != _ptr__364[_390]) || (_388 != _ptr__365[_390])))
          {
            {
              _387 = _ptr__364[_390];
              _388 = _ptr__365[_390];
              ++ _386;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _391 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_386)));
  _checked_ptr_1<int> _ptr__391(_391 ? _391->raw() : nullptr,_391 ? _391->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _392 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_386)));
  _checked_ptr_1<int> _ptr__392(_392 ? _392->raw() : nullptr,_392 ? _392->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _393 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_386)));
  _checked_ptr_1<double> _ptr__393(_393 ? _393->raw() : nullptr,_393 ? _393->size(0) : 0);
  {
    int _394 = _ptr__380[(int)0];
    _ptr__391[(int)0] = _ptr__364[_394];
    _ptr__392[(int)0] = _ptr__365[_394];
    _ptr__393[(int)0] = _ptr__366[_394];
  }
  int _395 = (int)1;
  int _6791 = (int)1;
  long long _6792 = _370;
  for (long long _396 = _6791; _396 < _6792; ++_396)
  {
    {
      int _397 = _ptr__380[_396];
      if (((_ptr__391[(_395 - (int)1)] == _ptr__364[_397]) && (_ptr__392[(_395 - (int)1)] == _ptr__365[_397])))
      {
        {
          _ptr__393[(_395 - (int)1)] = (_ptr__393[(_395 - (int)1)] + _ptr__366[_397]);
        }
      }
      else
      {
        {
          _ptr__391[_395] = _ptr__364[_397];
          _ptr__392[_395] = _ptr__365[_397];
          _ptr__393[_395] = _ptr__366[_397];
          ++ _395;
        }
      }
    }
  }
  ((*_367)((int)0)) = _391;
  ((*_368)((int)0)) = _392;
  ((*_369)((int)0)) = _393;
}
void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _398,    std::shared_ptr< monty::ndarray< int,1 > > _399) { mosek::fusion::p_CommonTools::argMSort(_398,_399); }void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int,1 > > _398,std::shared_ptr< monty::ndarray< int,1 > > _399){
  _checked_ptr_1<int> _ptr__398(_398 ? _398->raw() : nullptr, _398 ? _398->size(0) : 0);
  _checked_ptr_1<int> _ptr__399(_399 ? _399->raw() : nullptr, _399 ? _399->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _400 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_398)->size(0)))));
  _checked_ptr_1<int> _ptr__400(_400 ? _400->raw() : nullptr,_400 ? _400->size(0) : 0);
  bool _401 = false;
  {
    int _402 = (int)1;
    for(;(_402 < (int)((_398)->size(0)));_402 *= (int)2)
    {
      {
        _401 = (!_401);
        int _6793 = (int)0;
        int _6794 = (int)((_398)->size(0));
        int _6795 = safe_mul( _402,(int)2 );
        for (int _403 = _6793; _403 < _6794; _403 += _6795)
        {
          {
            if (_401)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_398,_400,_399,_403,safe_add( _403,_402 ),safe_add( _403,safe_mul( (int)2,_402 ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_400,_398,_399,_403,safe_add( _403,_402 ),safe_add( _403,safe_mul( (int)2,_402 ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_401)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_400,(int)0,_398,(int)0,(int)((_398)->size(0)));
    }
  }
  {}
}
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int,1 > > _404,std::shared_ptr< monty::ndarray< int,1 > > _405,std::shared_ptr< monty::ndarray< int,1 > > _406,int _407,int _408,int _409){
  _checked_ptr_1<int> _ptr__404(_404 ? _404->raw() : nullptr, _404 ? _404->size(0) : 0);
  _checked_ptr_1<int> _ptr__405(_405 ? _405->raw() : nullptr, _405 ? _405->size(0) : 0);
  _checked_ptr_1<int> _ptr__406(_406 ? _406->raw() : nullptr, _406 ? _406->size(0) : 0);
  int _6796;
  bool _6797 = (_409 > (int)((_404)->size(0)));
  if (_6797)
  {
    _6796 = (int)((_404)->size(0));
  }
  else
  {
    _6796 = _409;
  }
  int _410 = _6796;
  int _6798;
  bool _6799 = (_408 > _410);
  if (_6799)
  {
    _6798 = _410;
  }
  else
  {
    _6798 = _408;
  }
  int _411 = _6798;
  if ((_411 == _410))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_404,_407,_405,_407,(_411 - _407));
    }
  }
  else
  {
    {
      int _412 = _407;
      int _413 = _411;
      int _414;
      {
        _414 = _407;
        for(;((_412 < _411) && (_413 < _410));++ _414)
        {
          {
            if ((_ptr__406[_ptr__404[_412]] < _ptr__406[_ptr__404[_413]]))
            {
              {
                _ptr__405[_414] = _ptr__404[_412];
                ++ _412;
              }
            }
            else
            {
              {
                _ptr__405[_414] = _ptr__404[_413];
                ++ _413;
              }
            }
          }
        }
      }
      while ( (_412 < _411) )
      {
        {
          _ptr__405[_414] = _ptr__404[_412];
          ++ _412;
          ++ _414;
        }
      }
      while ( (_413 < _410) )
      {
        {
          _ptr__405[_414] = _ptr__404[_413];
          ++ _413;
          ++ _414;
        }
      }
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _415,    std::shared_ptr< monty::ndarray< long long,1 > > _416,    std::shared_ptr< monty::ndarray< long long,1 > > _417,    long long _418,    long long _419) { mosek::fusion::p_CommonTools::argQsort(_415,_416,_417,_418,_419); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _415,std::shared_ptr< monty::ndarray< long long,1 > > _416,std::shared_ptr< monty::ndarray< long long,1 > > _417,long long _418,long long _419){
  _checked_ptr_1<long long> _ptr__415(_415 ? _415->raw() : nullptr, _415 ? _415->size(0) : 0);
  _checked_ptr_1<long long> _ptr__416(_416 ? _416->raw() : nullptr, _416 ? _416->size(0) : 0);
  _checked_ptr_1<long long> _ptr__417(_417 ? _417->raw() : nullptr, _417 ? _417->size(0) : 0);
  if ((NULL == _417.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_415,_416,_418,_419);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_415,_416,_417,_418,_419);
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _420,    std::shared_ptr< monty::ndarray< int,1 > > _421,    std::shared_ptr< monty::ndarray< int,1 > > _422,    long long _423,    long long _424) { mosek::fusion::p_CommonTools::argQsort(_420,_421,_422,_423,_424); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _420,std::shared_ptr< monty::ndarray< int,1 > > _421,std::shared_ptr< monty::ndarray< int,1 > > _422,long long _423,long long _424){
  _checked_ptr_1<long long> _ptr__420(_420 ? _420->raw() : nullptr, _420 ? _420->size(0) : 0);
  _checked_ptr_1<int> _ptr__421(_421 ? _421->raw() : nullptr, _421 ? _421->size(0) : 0);
  _checked_ptr_1<int> _ptr__422(_422 ? _422->raw() : nullptr, _422 ? _422->size(0) : 0);
  if ((NULL == _422.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_420,_421,_423,_424);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_420,_421,_422,_423,_424);
    }
  }
}
void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_snx() { return _impl->snx; }
void mosek::fusion::SolutionStruct::set_snx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->snx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int _val) { _impl->sol_numbarvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcone() { return _impl->sol_numcone; }
void mosek::fusion::SolutionStruct::set_sol_numcone(int _val) { _impl->sol_numcone = _val; }
int mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int _val) { _impl->sol_numvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int _val) { _impl->sol_numcon = _val; }
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _425,    int _426,    int _427,    int _428){ return new mosek::fusion::SolutionStruct(_425,_426,_427,_428); }mosek::fusion::SolutionStruct::SolutionStruct  (int _425,    int _426,    int _427,    int _428) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_425,_426,_427,_428); }void mosek::fusion::p_SolutionStruct::_initialize  (int _425,    int _426,    int _427,    int _428){monty::rc_reserve __reserve_this(_pubthis);   {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _425;
    sol_numcon = _426;
    sol_numcone = _427;
    sol_numbarvar = _428;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    snx = nullptr;
    barx = nullptr;
    bars = nullptr;
    if ((_425 > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
      }
    }
    {}
    if ((_428 > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
      }
    }
    {}
    if ((_426 > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
      }
    }
    {}
    if ((_427 > (int)0))
    {
      {
        snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
      }
    }
    {}
  }
}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _429){ return new mosek::fusion::SolutionStruct(_429); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _429) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_429); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _429){monty::rc_reserve __reserve_this(_pubthis);   {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numvar;
    sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numcone;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numbarvar;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_429)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_429)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_429)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_429)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_429)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _6800;
    bool _6801 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->xc.get());
    if (_6801)
    {
      _6800 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->xc);
    }
    else
    {
      _6800 = nullptr;
    }
    xc = _6800;
    std::shared_ptr< monty::ndarray< double,1 > > _6802;
    bool _6803 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->xx.get());
    if (_6803)
    {
      _6802 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->xx);
    }
    else
    {
      _6802 = nullptr;
    }
    xx = _6802;
    std::shared_ptr< monty::ndarray< double,1 > > _6804;
    bool _6805 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->yx.get());
    if (_6805)
    {
      _6804 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->yx);
    }
    else
    {
      _6804 = nullptr;
    }
    yx = _6804;
    std::shared_ptr< monty::ndarray< double,1 > > _6806;
    bool _6807 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->slc.get());
    if (_6807)
    {
      _6806 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->slx);
    }
    else
    {
      _6806 = nullptr;
    }
    slc = _6806;
    std::shared_ptr< monty::ndarray< double,1 > > _6808;
    bool _6809 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->suc.get());
    if (_6809)
    {
      _6808 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->sux);
    }
    else
    {
      _6808 = nullptr;
    }
    suc = _6808;
    std::shared_ptr< monty::ndarray< double,1 > > _6810;
    bool _6811 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->y.get());
    if (_6811)
    {
      _6810 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->y);
    }
    else
    {
      _6810 = nullptr;
    }
    y = _6810;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _6812;
    bool _6813 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->slx.get());
    if (_6813)
    {
      _6812 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->slx);
    }
    else
    {
      _6812 = nullptr;
    }
    slx = _6812;
    std::shared_ptr< monty::ndarray< double,1 > > _6814;
    bool _6815 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->sux.get());
    if (_6815)
    {
      _6814 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->sux);
    }
    else
    {
      _6814 = nullptr;
    }
    sux = _6814;
    std::shared_ptr< monty::ndarray< double,1 > > _6816;
    bool _6817 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->snx.get());
    if (_6817)
    {
      _6816 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->snx);
    }
    else
    {
      _6816 = nullptr;
    }
    snx = _6816;
  }
}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone(){
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
void mosek::fusion::SolutionStruct :: resize(int _430,int _431,int _432,int _433) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_430,_431,_432,_433); }void mosek::fusion::p_SolutionStruct::resize(int _430,int _431,int _432,int _433){
  if ((_433 < (int)0))
  {
    {
    }
  }
  else if((_433 <= sol_numbarvar))
  {
    {
      sol_numbarvar = _433;
    }
  }
  else if((_433 <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int _434;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _433,(int)100 )))
      {
        {
          _434 = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _434 = safe_add( _433,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_434);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_434);
      sol_numbarvar = _434;
    }
  }
  if ((_430 < (int)0))
  {
    {
    }
  }
  else if((_430 <= sol_numvar))
  {
    {
      sol_numvar = _430;
    }
  }
  else if((_430 <= (int)((xx)->size(0))))
  {
    {
      int _6818 = sol_numvar;
      int _6819 = _430;
      for (int _435 = _6818; _435 < _6819; ++_435)
      {
        {
          ((*slx)(_435)) = 0.0;
          ((*sux)(_435)) = 0.0;
          ((*xx)(_435)) = 0.0;
          ((*yx)(_435)) = 0.0;
        }
      }
      sol_numvar = _430;
    }
  }
  else
  {
    {
      int _436;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _430,(int)100 )))
      {
        {
          _436 = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _436 = safe_add( _430,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _437 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__437(_437 ? _437->raw() : nullptr,_437 ? _437->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_437,(int)0,(int)((slx)->size(0)));
      slx = _437;
      std::shared_ptr< monty::ndarray< double,1 > > _438 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__438(_438 ? _438->raw() : nullptr,_438 ? _438->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_438,(int)0,(int)((sux)->size(0)));
      sux = _438;
      std::shared_ptr< monty::ndarray< double,1 > > _439 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__439(_439 ? _439->raw() : nullptr,_439 ? _439->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_439,(int)0,(int)((xx)->size(0)));
      xx = _439;
      std::shared_ptr< monty::ndarray< double,1 > > _440 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__440(_440 ? _440->raw() : nullptr,_440 ? _440->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_440,(int)0,(int)((yx)->size(0)));
      yx = _440;
      {
        int _441 = sol_numvar;
        for(;(_441 < _430);++ _441)
        {
          {
            ((*slx)(_441)) = 0.0;
            ((*sux)(_441)) = 0.0;
            ((*xx)(_441)) = 0.0;
          }
        }
      }
      sol_numvar = _430;
    }
  }
  if ((_431 < (int)0))
  {
    {
    }
  }
  else if((_431 <= sol_numcon))
  {
    {
      sol_numcon = _431;
    }
  }
  else if((_431 <= (int)((xx)->size(0))))
  {
    {
      int _6820 = sol_numcon;
      int _6821 = _431;
      for (int _442 = _6820; _442 < _6821; ++_442)
      {
        {
          ((*slc)(_442)) = 0.0;
          ((*suc)(_442)) = 0.0;
          ((*xc)(_442)) = 0.0;
          ((*y)(_442)) = 0.0;
        }
      }
      sol_numcon = _431;
    }
  }
  else
  {
    {
      int _443;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _431,(int)100 )))
      {
        {
          _443 = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _443 = safe_add( _431,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _444 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__444(_444 ? _444->raw() : nullptr,_444 ? _444->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_444,(int)0,(int)((slc)->size(0)));
      slc = _444;
      std::shared_ptr< monty::ndarray< double,1 > > _445 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__445(_445 ? _445->raw() : nullptr,_445 ? _445->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_445,(int)0,(int)((suc)->size(0)));
      suc = _445;
      std::shared_ptr< monty::ndarray< double,1 > > _446 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__446(_446 ? _446->raw() : nullptr,_446 ? _446->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_446,(int)0,(int)((xc)->size(0)));
      xc = _446;
      std::shared_ptr< monty::ndarray< double,1 > > _447 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__447(_447 ? _447->raw() : nullptr,_447 ? _447->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_447,(int)0,(int)((y)->size(0)));
      y = _447;
      int _6822 = sol_numcon;
      int _6823 = _431;
      for (int _448 = _6822; _448 < _6823; ++_448)
      {
        {
          ((*slc)(_448)) = 0.0;
          ((*suc)(_448)) = 0.0;
          ((*xc)(_448)) = 0.0;
          ((*y)(_448)) = 0.0;
        }
      }
      sol_numcon = _431;
    }
  }
  if ((_432 < (int)0))
  {
    {
    }
  }
  else if((_432 <= sol_numcone))
  {
    {
      sol_numcone = _432;
    }
  }
  else if((_432 <= (int)((xx)->size(0))))
  {
    {
      int _6824 = sol_numcone;
      int _6825 = _432;
      for (int _449 = _6824; _449 < _6825; ++_449)
      {
        {
          ((*snx)(_449)) = 0.0;
        }
      }
      sol_numcone = _432;
    }
  }
  else
  {
    {
      int _450;
      if ((safe_mul( sol_numcone,(int)2 ) > safe_add( _432,(int)100 )))
      {
        {
          _450 = safe_mul( sol_numcone,(int)2 );
        }
      }
      else
      {
        {
          _450 = safe_add( _432,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _451 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_450)));
      _checked_ptr_1<double> _ptr__451(_451 ? _451->raw() : nullptr,_451 ? _451->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_451,(int)0,(int)((snx)->size(0)));
      snx = _451;
      {
        int _452 = sol_numcone;
        for(;(_452 < _432);++ _452)
        {
          {
            ((*snx)(_452)) = 0.0;
          }
        }
      }
      sol_numcone = _432;
    }
  }
}
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _453) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_453); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _453){
  return isAcceptable(dstatus,_453);
}
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _454) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_454); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _454){
  return isAcceptable(pstatus,_454);
}
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _455,mosek::fusion::AccSolutionStatus _456){
  if ((_456 == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_456 == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_455 == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_456 == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_455 == ::mosek::fusion::SolutionStatus::Optimal) || (_455 == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_456 == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_455 == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
void mosek::fusion::p_SolutionStruct::destroy(){yx.reset();snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barmidx() { return _impl->barmidx; }
void mosek::fusion::ConNZStruct::set_barmidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConNZStruct::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConNZStruct::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConNZStruct::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_cof() { return _impl->cof; }
void mosek::fusion::ConNZStruct::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_subj() { return _impl->subj; }
void mosek::fusion::ConNZStruct::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::ConNZStruct::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::ConNZStruct::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _457,    std::shared_ptr< monty::ndarray< int,1 > > _458,    std::shared_ptr< monty::ndarray< double,1 > > _459,    std::shared_ptr< monty::ndarray< double,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< int,1 > > _462,    std::shared_ptr< monty::ndarray< int,1 > > _463){ return new mosek::fusion::ConNZStruct(_457,_458,_459,_460,_461,_462,_463); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _457,    std::shared_ptr< monty::ndarray< int,1 > > _458,    std::shared_ptr< monty::ndarray< double,1 > > _459,    std::shared_ptr< monty::ndarray< double,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< int,1 > > _462,    std::shared_ptr< monty::ndarray< int,1 > > _463) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_457,_458,_459,_460,_461,_462,_463); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _457,    std::shared_ptr< monty::ndarray< int,1 > > _458,    std::shared_ptr< monty::ndarray< double,1 > > _459,    std::shared_ptr< monty::ndarray< double,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< int,1 > > _462,    std::shared_ptr< monty::ndarray< int,1 > > _463){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__457(_457 ? _457->raw() : nullptr, _457 ? _457->size(0) : 0);
    _checked_ptr_1<int> _ptr__458(_458 ? _458->raw() : nullptr, _458 ? _458->size(0) : 0);
    _checked_ptr_1<double> _ptr__459(_459 ? _459->raw() : nullptr, _459 ? _459->size(0) : 0);
    _checked_ptr_1<double> _ptr__460(_460 ? _460->raw() : nullptr, _460 ? _460->size(0) : 0);
    _checked_ptr_1<int> _ptr__461(_461 ? _461->raw() : nullptr, _461 ? _461->size(0) : 0);
    _checked_ptr_1<int> _ptr__462(_462 ? _462->raw() : nullptr, _462 ? _462->size(0) : 0);
    _checked_ptr_1<int> _ptr__463(_463 ? _463->raw() : nullptr, _463 ? _463->size(0) : 0);
    ptrb = _457;
    subj = _458;
    cof = _459;
    bfix = _460;
    barsubi = _461;
    barsubj = _462;
    barmidx = _463;
  }
}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _464){ return new mosek::fusion::Model(_464); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _464) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_464); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _464){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_464);
    monty::rc_ptr< ::mosek::fusion::Model > _465 = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_464)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_464)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_464)->solutionptr;
    natvarmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natvarmap_blockid);
    natvarmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natvarmap_idx);
    natvarmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natvarmap_type);
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_464)->natvarmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6826;
    for (int _466 = (int)0, _6827 = (int)((mosek::fusion::p_Model::_get_impl(_464)->vars)->size(0)); _466 < _6827 ; ++_466)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _6828;
      bool _6829 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_464)->vars)(_466)).get());
      if (_6829)
      {
        _6828 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_464)->vars)(_466)).get())->__mosek_2fusion_2ModelVariable__clone(_465);
      }
      else
      {
        _6828 = nullptr;
      }
      _6826.push_back(_6828);
    }
    auto _6830 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6826.size()),_6826.begin(),_6826.end()));
    vars = _6830;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_464)->natconemap);
    natconemap_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconemap_dim);
    natbarvar_numbarvarelm = mosek::fusion::p_Model::_get_impl(_464)->natbarvar_numbarvarelm;
    natbarvar_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_ptr);
    natbarvar_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_i);
    natbarvar_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_j);
    natbarvar_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_idx);
    natbarvarmap_nblock = mosek::fusion::p_Model::_get_impl(_464)->natbarvarmap_nblock;
    natbarvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_dim);
    natbarvarmap_num = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvarmap_num);
    natbarvarmap_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvarmap_ptr);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6831;
    for (int _467 = (int)0, _6832 = (int)((mosek::fusion::p_Model::_get_impl(_464)->barvars)->size(0)); _467 < _6832 ; ++_467)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _6833;
      bool _6834 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_464)->barvars)(_467)).get());
      if (_6834)
      {
        _6833 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_464)->barvars)(_467)).get())->__mosek_2fusion_2ModelVariable__clone(_465);
      }
      else
      {
        _6833 = nullptr;
      }
      _6831.push_back(_6833);
    }
    auto _6835 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6831.size()),_6831.begin(),_6831.end()));
    barvars = _6835;
    var_map = mosek::fusion::p_Model::_get_impl(_464)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    natconmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_blockid);
    natconmap_slackidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_slackidx);
    natconmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_idx);
    natconmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_type);
    natconmap_efix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_efix);
    natconmap_lb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_lb);
    natconmap_ub = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_ub);
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_464)->natconmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _6836;
    for (int _468 = (int)0, _6837 = (int)((mosek::fusion::p_Model::_get_impl(_464)->cons)->size(0)); _468 < _6837 ; ++_468)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _6838;
      bool _6839 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_464)->cons)(_468)).get());
      if (_6839)
      {
        _6838 = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_464)->cons)(_468)).get())->__mosek_2fusion_2ModelConstraint__clone(_465);
      }
      else
      {
        _6838 = nullptr;
      }
      _6836.push_back(_6838);
    }
    auto _6840 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_6836.size()),_6836.begin(),_6836.end()));
    cons = _6840;
    con_map = mosek::fusion::p_Model::_get_impl(_464)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_464)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _469){ return new mosek::fusion::Model(_469); }mosek::fusion::Model::Model  (const std::string &  _469) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_469); }void mosek::fusion::p_Model::_initialize  (const std::string &  _469){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_469,std::string (""));
    model_name = _469;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natvarmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6841;
    for (int _470 = (int)0, _6842 = (int)1024; _470 < _6842 ; ++_470)
    {
      _6841.push_back(nullptr);
    }
    auto _6843 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6841.size()),_6841.begin(),_6841.end()));
    vars = _6843;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconemap_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    natbarvar_ptr = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
    natbarvar_numbarvarelm = (int)0;
    natbarvar_i = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_j = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_nblock = (int)0;
    natbarvar_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_num = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_ptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_slackidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_efix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_lb = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_ub = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _6844;
    for (int _471 = (int)0, _6845 = (int)1024; _471 < _6845 ; ++_471)
    {
      _6844.push_back(nullptr);
    }
    auto _6846 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_6844.size()),_6844.begin(),_6844.end()));
    cons = _6846;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    bfixidx = natvarmap_alloc((int)1);
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _472,std::shared_ptr< monty::ndarray< int,1 > > _473,std::shared_ptr< monty::ndarray< int,1 > > _474){
  _checked_ptr_1<int> _ptr__473(_473 ? _473->raw() : nullptr, _473 ? _473->size(0) : 0);
  _checked_ptr_1<int> _ptr__474(_474 ? _474->raw() : nullptr, _474 ? _474->size(0) : 0);
  return _472;
}
void mosek::fusion::p_Model::connames(std::shared_ptr< monty::ndarray< int,1 > > _475,const std::string & _476,std::shared_ptr< monty::ndarray< int,1 > > _477,std::shared_ptr< monty::ndarray< long long,1 > > _478){
  _checked_ptr_1<int> _ptr__475(_475 ? _475->raw() : nullptr, _475 ? _475->size(0) : 0);
  _checked_ptr_1<int> _ptr__477(_477 ? _477->raw() : nullptr, _477 ? _477->size(0) : 0);
  _checked_ptr_1<long long> _ptr__478(_478 ? _478->raw() : nullptr, _478 ? _478->size(0) : 0);
  task_format_con_names(_475,_476,_477,_478);
}
void mosek::fusion::p_Model::varnames(std::shared_ptr< monty::ndarray< int,1 > > _479,const std::string & _480,std::shared_ptr< monty::ndarray< int,1 > > _481,std::shared_ptr< monty::ndarray< long long,1 > > _482){
  _checked_ptr_1<int> _ptr__479(_479 ? _479->raw() : nullptr, _479 ? _479->size(0) : 0);
  _checked_ptr_1<int> _ptr__481(_481 ? _481->raw() : nullptr, _481 ? _481->size(0) : 0);
  _checked_ptr_1<long long> _ptr__482(_482 ? _482->raw() : nullptr, _482 ? _482->size(0) : 0);
  task_format_var_names(_479,_480,_481,_482);
}
void mosek::fusion::p_Model::varname(int _483,const std::string & _484){
  task_var_name(_483,_484);
}
void mosek::fusion::p_Model::natbarvarmap_get(int _485,std::shared_ptr< monty::ndarray< int,1 > > _486){
  _checked_ptr_1<int> _ptr__486(_486 ? _486->raw() : nullptr, _486 ? _486->size(0) : 0);
  int _487 = ((*natbarvarmap_ptr)(_485));
  int _488 = ((*natbarvarmap_num)(_485));
  int _6847 = (int)0;
  int _6848 = _488;
  for (int _489 = _6847; _489 < _6848; ++_489)
  {
    {
      _ptr__486[_489] = safe_add( _487,_489 );
    }
  }
}
void mosek::fusion::p_Model::natbarvar_get(int _490,std::shared_ptr< monty::ndarray< long long,1 > > _491){
  _checked_ptr_1<long long> _ptr__491(_491 ? _491->raw() : nullptr, _491 ? _491->size(0) : 0);
  int _492 = ((*natbarvarmap_ptr)(_490));
  int _493 = ((*natbarvarmap_num)(_490));
  int _494 = ((*natbarvar_dim)(((*natbarvarmap_ptr)(_490))));
  int _495 = (safe_mul( safe_mul( _493,_494 ),safe_add( _494,(int)1 ) ) / (int)2);
  long long _496 = ((*natbarvar_ptr)(_492));
  int _6849 = (int)0;
  int _6850 = _495;
  for (int _497 = _6849; _497 < _6850; ++_497)
  {
    {
      _ptr__491[_497] = safe_add( _496,_497 );
    }
  }
}
int mosek::fusion::p_Model::natbarvarmap_alloc(int _498,int _499){
  int _500 = (int)((natbarvar_idx)->size(0));
  int _501 = task_numbarvar();
  int _502 = (safe_mul( _499,safe_add( _499,(int)1 ) ) / (int)2);
  int _503 = safe_mul( _498,_502 );
  if ((safe_add( natbarvar_numbarvarelm,_503 ) >= _500))
  {
    {
      if ((_503 < _500))
      {
        {
          _503 = _500;
        }
      }
      {}
      natbarvar_idx = ::mosek::fusion::p_CommonTools::resize(natbarvar_idx,safe_add( _500,_503 ));
      natbarvar_i = ::mosek::fusion::p_CommonTools::resize(natbarvar_i,safe_add( _500,_503 ));
      natbarvar_j = ::mosek::fusion::p_CommonTools::resize(natbarvar_j,safe_add( _500,_503 ));
    }
  }
  {}
  if ((safe_add( natbarvarmap_nblock,(int)1 ) >= (int)((natbarvarmap_num)->size(0))))
  {
    {
      int _6851;
      bool _6852 = ((int)((natbarvarmap_num)->size(0)) > (int)0);
      if (_6852)
      {
        _6851 = safe_mul( (int)((natbarvarmap_num)->size(0)),(int)2 );
      }
      else
      {
        _6851 = (int)32;
      }
      int _504 = _6851;
      natbarvarmap_num = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_num,_504);
      natbarvarmap_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_ptr,safe_add( _504,(int)1 ));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _505 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_504)));
      int _6853 = (int)0;
      int _6854 = (int)((barvars)->size(0));
      for (int _506 = _6853; _506 < _6854; ++_506)
      {
        {
          ((*_505)(_506)) = ((*barvars)(_506));
        }
      }
      barvars = _505;
    }
  }
  {}
  if ((safe_add( _501,_498 ) > (int)((natbarvar_dim)->size(0))))
  {
    {
      int _6855;
      bool _6856 = (safe_add( _501,_498 ) < safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 ));
      if (_6856)
      {
        _6855 = safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 );
      }
      else
      {
        _6855 = safe_add( _501,_498 );
      }
      int _507 = _6855;
      natbarvar_dim = ::mosek::fusion::p_CommonTools::resize(natbarvar_dim,_507);
    }
  }
  {}
  if ((safe_add( _501,_498 ) >= (int)((natbarvar_ptr)->size(0))))
  {
    {
      int _6857;
      bool _6858 = (_498 > (int)((natbarvar_ptr)->size(0)));
      if (_6858)
      {
        _6857 = _498;
      }
      else
      {
        _6857 = (int)((natbarvar_ptr)->size(0));
      }
      int _508 = _6857;
      natbarvar_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvar_ptr,safe_add( safe_add( (int)((natbarvar_ptr)->size(0)),_508 ),(int)1 ));
    }
  }
  {}
  int _6859 = (int)0;
  int _6860 = _498;
  for (int _509 = _6859; _509 < _6860; ++_509)
  {
    {
      ((*natbarvar_dim)(safe_add( _501,_509 ))) = _499;
    }
  }
  ((*natbarvarmap_num)(natbarvarmap_nblock)) = _498;
  ((*natbarvarmap_ptr)(safe_add( natbarvarmap_nblock,(int)1 ))) = safe_add( ((*natbarvarmap_ptr)(natbarvarmap_nblock)),_498 );
  int _510 = task_append_barvar(_499,_498);
  int _511 = ((*natbarvarmap_ptr)(natbarvarmap_nblock));
  {
    long long _512 = ((*natbarvar_ptr)(_501));
    int _6861 = (int)0;
    int _6862 = _499;
    for (int _513 = _6861; _513 < _6862; ++_513)
    {
      {
        int _6863 = _513;
        int _6864 = _499;
        for (int _514 = _6863; _514 < _6864; ++_514)
        {
          {
            int _6865 = (int)0;
            int _6866 = _498;
            for (int _515 = _6865; _515 < _6866; ++_515)
            {
              {
                ((*natbarvar_idx)(safe_add( _512,safe_mul( _515,_502 ) ))) = safe_add( _511,_515 );
                ((*natbarvar_i)(safe_add( _512,safe_mul( _515,_502 ) ))) = _514;
                ((*natbarvar_j)(safe_add( _512,safe_mul( _515,_502 ) ))) = _513;
              }
            }
            ++ _512;
          }
        }
      }
    }
    int _6867 = (int)0;
    int _6868 = _498;
    for (int _516 = _6867; _516 < _6868; ++_516)
    {
      {
        ((*natbarvar_ptr)(safe_add( safe_add( _511,_516 ),(int)1 ))) = safe_add( ((*natbarvar_ptr)(safe_add( _511,_516 ))),_502 );
      }
    }
  }
  natbarvarmap_nblock += (int)1;
  natbarvar_numbarvarelm += safe_mul( _498,_502 );
  return (natbarvarmap_nblock - (int)1);
}
int mosek::fusion::p_Model::natvarmap_alloc(int _517){
  int _518 = natvarmap->alloc(_517);
  int _519 = safe_add( natvarmap->maxidx(_518),(int)1 );
  int _520 = natvarmap->capacity();
  int _521 = natvarmap->numblocks();
  if (((int)((natvarmap_idx)->size(0)) < _520))
  {
    {
      int _522 = (int)((natvarmap_idx)->size(0));
      natvarmap_idx = ::mosek::fusion::p_CommonTools::resize(natvarmap_idx,_520);
      int _6869 = _522;
      int _6870 = _520;
      for (int _523 = _6869; _523 < _6870; ++_523)
      {
        {
          ((*natvarmap_idx)(_523)) = (-(int)1);
        }
      }
      natvarmap_blockid = ::mosek::fusion::p_CommonTools::resize(natvarmap_blockid,_520);
    }
  }
  {}
  if (((int)((vars)->size(0)) < _521))
  {
    {
      natvarmap_type = ::mosek::fusion::p_CommonTools::resize(natvarmap_type,_521);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _524 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_521)));
      int _6871 = (int)0;
      int _6872 = (int)((vars)->size(0));
      for (int _525 = _6871; _525 < _6872; ++_525)
      {
        {
          ((*_524)(_525)) = ((*vars)(_525));
        }
      }
      int _6873 = (int)((vars)->size(0));
      int _6874 = (int)((_524)->size(0));
      for (int _526 = _6873; _526 < _6874; ++_526)
      {
        {
          ((*_524)(_526)) = nullptr;
        }
      }
      vars = _524;
    }
  }
  {}
  if ((task_numvar() < _519))
  {
    {
      task_append_var((_519 - task_numvar()));
    }
  }
  {}
  return _518;
}
int mosek::fusion::p_Model::natconmap_alloc(int _527){
  int _528 = natconmap->alloc(_527);
  int _529 = safe_add( natconmap->maxidx(_528),(int)1 );
  int _530 = natconmap->capacity();
  int _531 = natconmap->numblocks();
  if (((int)((natconmap_idx)->size(0)) < _530))
  {
    {
      int _532 = (int)((natconmap_idx)->size(0));
      natconmap_idx = ::mosek::fusion::p_CommonTools::resize(natconmap_idx,_530);
      int _6875 = _532;
      int _6876 = _530;
      for (int _533 = _6875; _533 < _6876; ++_533)
      {
        {
          ((*natconmap_idx)(_533)) = (-(int)1);
        }
      }
      natconmap_efix = ::mosek::fusion::p_CommonTools::resize(natconmap_efix,_530);
      natconmap_lb = ::mosek::fusion::p_CommonTools::resize(natconmap_lb,_530);
      natconmap_ub = ::mosek::fusion::p_CommonTools::resize(natconmap_ub,_530);
      natconmap_blockid = ::mosek::fusion::p_CommonTools::resize(natconmap_blockid,_530);
      natconmap_slackidx = ::mosek::fusion::p_CommonTools::resize(natconmap_slackidx,_530);
    }
  }
  {}
  if (((int)((cons)->size(0)) < _531))
  {
    {
      natconmap_type = ::mosek::fusion::p_CommonTools::resize(natconmap_type,_531);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _534 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_531)));
      int _6877 = (int)0;
      int _6878 = (int)((cons)->size(0));
      for (int _535 = _6877; _535 < _6878; ++_535)
      {
        {
          ((*_534)(_535)) = ((*cons)(_535));
        }
      }
      int _6879 = (int)((cons)->size(0));
      int _6880 = _531;
      for (int _536 = _6879; _536 < _6880; ++_536)
      {
        {
          ((*_534)(_536)) = nullptr;
        }
      }
      cons = _534;
    }
  }
  {}
  if ((_529 > task_numcon()))
  {
    {
      task_append_con((_529 - task_numcon()));
    }
  }
  {}
  return _528;
}
int mosek::fusion::p_Model::natconemap_alloc(int _537){
  int _538 = natconemap->alloc(_537);
  int _539 = safe_add( natconemap->maxidx(_538),(int)1 );
  if ((_539 > task_numcone()))
  {
    {
      task_append_zerocones((_539 - task_numcone()));
    }
  }
  {}
  natconemap_dim = ::mosek::fusion::p_CommonTools::resize(natconemap_dim,natconemap->numblocks());
  return _538;
}
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _540){
  _checked_ptr_1<long long> _ptr__540(_540 ? _540->raw() : nullptr, _540 ? _540->size(0) : 0);
  int _541 = (int)0;
  int _6881 = (int)0;
  int _6882 = (int)((_540)->size(0));
  for (int _542 = _6881; _542 < _6882; ++_542)
  {
    {
      if ((_ptr__540[_542] > (int)0))
      {
        {
          ++ _541;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _543 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_541)));
  _checked_ptr_1<int> _ptr__543(_543 ? _543->raw() : nullptr,_543 ? _543->size(0) : 0);
  int _544 = (int)0;
  int _6883 = (int)0;
  int _6884 = (int)((_540)->size(0));
  for (int _545 = _6883; _545 < _6884; ++_545)
  {
    {
      if ((_ptr__540[_545] > (int)0))
      {
        {
          _ptr__543[_544] = (int)(_ptr__540[_545] - (int)1);
          ++ _544;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_543);
}
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _546){
  _checked_ptr_1<long long> _ptr__546(_546 ? _546->raw() : nullptr, _546 ? _546->size(0) : 0);
  int _547 = (int)0;
  int _6885 = (int)0;
  int _6886 = (int)((_546)->size(0));
  for (int _548 = _6885; _548 < _6886; ++_548)
  {
    {
      if ((_ptr__546[_548] > (int)0))
      {
        {
          ++ _547;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _549 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_547)));
  _checked_ptr_1<int> _ptr__549(_549 ? _549->raw() : nullptr,_549 ? _549->size(0) : 0);
  int _550 = (int)0;
  int _6887 = (int)0;
  int _6888 = (int)((_546)->size(0));
  for (int _551 = _6887; _551 < _6888; ++_551)
  {
    {
      if ((_ptr__546[_551] > (int)0))
      {
        {
          _ptr__549[_550] = (int)(_ptr__546[_551] - (int)1);
          ++ _550;
        }
      }
      {}
    }
  }
  task_var_putintlist(_549);
}
void mosek::fusion::Model::putlicensewait  ( bool _552) { mosek::fusion::p_Model::putlicensewait(_552); }void mosek::fusion::p_Model::putlicensewait(bool _552){
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_552);
}
void mosek::fusion::Model::putlicensepath  ( const std::string & _553) { mosek::fusion::p_Model::putlicensepath(_553); }void mosek::fusion::p_Model::putlicensepath(const std::string & _553){
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_553);
}
void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _554) { mosek::fusion::p_Model::putlicensecode(_554); }void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int,1 > > _554){
  _checked_ptr_1<int> _ptr__554(_554 ? _554->raw() : nullptr, _554 ? _554->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_554);
}
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose(){
  int _6889 = (int)0;
  int _6890 = (int)((vars)->size(0));
  for (int _555 = _6889; _555 < _6890; ++_555)
  {
    {
      ((*vars)(_555)) = nullptr;
    }
  }
  int _6891 = (int)0;
  int _6892 = (int)((cons)->size(0));
  for (int _556 = _6891; _556 < _6892; ++_556)
  {
    {
      ((*cons)(_556)) = nullptr;
    }
  }
  ::mosek::fusion::p_BaseModel::dispose();
}
void mosek::fusion::p_Model::nativeVarToStr(int _557,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _558){
  if (((_557 < (int)0) || ((_557 >= (int)((natvarmap_idx)->size(0))) || (((*natvarmap_idx)(_557)) < (int)0))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Native variable index is invalid"));
    }
  }
  {}
  ((*vars)(((*natvarmap_blockid)(_557))))->elementName((long long)(((*natvarmap_idx)(_557))),_558);
}
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask(){
  return __mosek_2fusion_2BaseModel__task_get();
}
void mosek::fusion::Model :: getConstraintValues(bool _559,std::shared_ptr< monty::ndarray< int,1 > > _560,std::shared_ptr< monty::ndarray< double,1 > > _561,int _562) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_559,_560,_561,_562); }void mosek::fusion::p_Model::getConstraintValues(bool _559,std::shared_ptr< monty::ndarray< int,1 > > _560,std::shared_ptr< monty::ndarray< double,1 > > _561,int _562){
  _checked_ptr_1<int> _ptr__560(_560 ? _560->raw() : nullptr, _560 ? _560->size(0) : 0);
  _checked_ptr_1<double> _ptr__561(_561 ? _561->raw() : nullptr, _561 ? _561->size(0) : 0);
  int _563 = (int)((_560)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _6893;
  bool _6894 = _559;
  if (_6894)
  {
    _6893 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6893 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _564 = _6893;
  _checked_ptr_1<double> _ptr__564(_564 ? _564->raw() : nullptr,_564 ? _564->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6895;
  bool _6896 = _559;
  if (_6896)
  {
    _6895 = getSolution_barx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6895 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _565 = _6895;
  _checked_ptr_1<double> _ptr__565(_565 ? _565->raw() : nullptr,_565 ? _565->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6897;
  bool _6898 = _559;
  if (_6898)
  {
    _6897 = getSolution_xc(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6897 = getSolution_y(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _566 = _6897;
  _checked_ptr_1<double> _ptr__566(_566 ? _566->raw() : nullptr,_566 ? _566->size(0) : 0);
  int _6899 = (int)0;
  int _6900 = _563;
  for (int _567 = _6899; _567 < _6900; ++_567)
  {
    {
      long long _568 = ((*natconmap_slackidx)(_ptr__560[_567]));
      if ((_568 < (int)0))
      {
        {
          long long _569 = (-safe_add( _568,(int)1 ));
          _ptr__561[safe_add( _562,_567 )] = _ptr__565[_569];
        }
      }
      else if((_568 > (int)0))
      {
        {
          _ptr__561[safe_add( _562,_567 )] = _ptr__564[(_568 - (int)1)];
        }
      }
      else
      {
        {
          _ptr__561[safe_add( _562,_567 )] = _ptr__566[_ptr__560[_567]];
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableDuals(bool _570,std::shared_ptr< monty::ndarray< long long,1 > > _571,std::shared_ptr< monty::ndarray< double,1 > > _572,int _573) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_570,_571,_572,_573); }void mosek::fusion::p_Model::getVariableDuals(bool _570,std::shared_ptr< monty::ndarray< long long,1 > > _571,std::shared_ptr< monty::ndarray< double,1 > > _572,int _573){
  _checked_ptr_1<long long> _ptr__571(_571 ? _571->raw() : nullptr, _571 ? _571->size(0) : 0);
  _checked_ptr_1<double> _ptr__572(_572 ? _572->raw() : nullptr, _572 ? _572->size(0) : 0);
  int _574 = (int)((_571)->size(0));
  if (_570)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _575 = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__575(_575 ? _575->raw() : nullptr,_575 ? _575->size(0) : 0);
      int _6901 = (int)0;
      int _6902 = _574;
      for (int _576 = _6901; _576 < _6902; ++_576)
      {
        {
          if ((_ptr__571[_576] > (int)0))
          {
            {
              _ptr__572[safe_add( _573,_576 )] = _ptr__575[(_ptr__571[_576] - (int)1)];
            }
          }
          else
          {
            {
              _ptr__572[safe_add( _573,_576 )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _577 = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__577(_577 ? _577->raw() : nullptr,_577 ? _577->size(0) : 0);
      int _6903 = (int)0;
      int _6904 = _574;
      for (int _578 = _6903; _578 < _6904; ++_578)
      {
        {
          if ((_ptr__571[_578] > (int)0))
          {
            {
              _ptr__572[safe_add( _573,_578 )] = (-_ptr__577[(_ptr__571[_578] - (int)1)]);
            }
          }
          else
          {
            {
              _ptr__572[safe_add( _573,_578 )] = (int)0;
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableValues(bool _579,std::shared_ptr< monty::ndarray< long long,1 > > _580,std::shared_ptr< monty::ndarray< double,1 > > _581,int _582) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_579,_580,_581,_582); }void mosek::fusion::p_Model::getVariableValues(bool _579,std::shared_ptr< monty::ndarray< long long,1 > > _580,std::shared_ptr< monty::ndarray< double,1 > > _581,int _582){
  _checked_ptr_1<long long> _ptr__580(_580 ? _580->raw() : nullptr, _580 ? _580->size(0) : 0);
  _checked_ptr_1<double> _ptr__581(_581 ? _581->raw() : nullptr, _581 ? _581->size(0) : 0);
  int _583 = (int)((_580)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _6905;
  bool _6906 = _579;
  if (_6906)
  {
    _6905 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6905 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _584 = _6905;
  _checked_ptr_1<double> _ptr__584(_584 ? _584->raw() : nullptr,_584 ? _584->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6907;
  bool _6908 = (natbarvar_numbarvarelm > (int)0);
  if (_6908)
  {
    std::shared_ptr< monty::ndarray< double,1 > > _6909;
    bool _6910 = _579;
    if (_6910)
    {
      _6909 = getSolution_barx(::mosek::fusion::SolutionType::Default);
    }
    else
    {
      _6909 = getSolution_bars(::mosek::fusion::SolutionType::Default);
    }
    _6907 = _6909;
  }
  else
  {
    _6907 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _585 = _6907;
  _checked_ptr_1<double> _ptr__585(_585 ? _585->raw() : nullptr,_585 ? _585->size(0) : 0);
  int _6911 = (int)0;
  int _6912 = _583;
  for (int _586 = _6911; _586 < _6912; ++_586)
  {
    {
      if ((_ptr__580[_586] > (int)0))
      {
        {
          _ptr__581[safe_add( _582,_586 )] = _ptr__584[(_ptr__580[_586] - (int)1)];
        }
      }
      else if((_ptr__580[_586] < (int)0))
      {
        {
          long long _587 = (-safe_add( _ptr__580[_586],(int)1 ));
          _ptr__581[safe_add( _582,_586 )] = _ptr__585[_587];
        }
      }
      else
      {
        {
          _ptr__581[safe_add( _582,_586 )] = (int)0;
        }
      }
    }
  }
}
void mosek::fusion::Model :: setVariableValues(bool _588,std::shared_ptr< monty::ndarray< long long,1 > > _589,std::shared_ptr< monty::ndarray< double,1 > > _590) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_588,_589,_590); }void mosek::fusion::p_Model::setVariableValues(bool _588,std::shared_ptr< monty::ndarray< long long,1 > > _589,std::shared_ptr< monty::ndarray< double,1 > > _590){
  _checked_ptr_1<long long> _ptr__589(_589 ? _589->raw() : nullptr, _589 ? _589->size(0) : 0);
  _checked_ptr_1<double> _ptr__590(_590 ? _590->raw() : nullptr, _590 ? _590->size(0) : 0);
  if (_588)
  {
    {
      int _591 = (int)0;
      int _6913 = (int)0;
      int _6914 = (int)((_589)->size(0));
      for (int _592 = _6913; _592 < _6914; ++_592)
      {
        {
          if ((_ptr__589[_592] >= (int)0))
          {
            {
              ++ _591;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _593 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_591)));
      _checked_ptr_1<int> _ptr__593(_593 ? _593->raw() : nullptr,_593 ? _593->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6915;
      bool _6916 = (_591 == (int)((_589)->size(0)));
      if (_6916)
      {
        _6915 = _590;
      }
      else
      {
        _6915 = _590;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _594 = _6915;
      _checked_ptr_1<double> _ptr__594(_594 ? _594->raw() : nullptr,_594 ? _594->size(0) : 0);
      int _595 = (int)0;
      int _6917 = (int)0;
      int _6918 = (int)((_589)->size(0));
      for (int _596 = _6917; _596 < _6918; ++_596)
      {
        {
          if ((_ptr__589[_596] > (int)0))
          {
            {
              _ptr__593[_595] = (int)(_ptr__589[_596] - (int)1);
              ++ _595;
            }
          }
          {}
        }
      }
      setSolution_xx(_593,_594);
    }
  }
  else
  {
    {
    }
  }
}
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames(){
  int _6919 = (int)0;
  int _6920 = (int)((vars)->size(0));
  for (int _597 = _6919; _597 < _6920; ++_597)
  {
    {
      if ((NULL != ((*vars)(_597)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_597)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _6921 = (int)0;
  int _6922 = (int)((barvars)->size(0));
  for (int _598 = _6921; _598 < _6922; ++_598)
  {
    {
      if ((NULL != ((*barvars)(_598)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_598)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _6923 = (int)0;
  int _6924 = (int)((cons)->size(0));
  for (int _599 = _6923; _599 < _6924; ++_599)
  {
    {
      if ((NULL != ((*cons)(_599)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_599)).get())->flushNames();
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: writeTask(const std::string & _600) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_600); }void mosek::fusion::p_Model::writeTask(const std::string & _600){
  _pubthis->flushNames();
  task_write(_600);
}
long long mosek::fusion::Model :: getSolverLIntInfo(const std::string & _601) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_601); }long long mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _601){
  return task_get_liinf(_601);
}
int mosek::fusion::Model :: getSolverIntInfo(const std::string & _602) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_602); }int mosek::fusion::p_Model::getSolverIntInfo(const std::string & _602){
  return task_get_iinf(_602);
}
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _603) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_603); }double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _603){
  return task_get_dinf(_603);
}
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _604) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_604); }void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _604){
  task_setCallbackHandler(_604);
}
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _605) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_605); }void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _605){
  task_setDataCallbackHandler(_605);
}
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _606) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_606); }void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _606){
  task_setLogHandler(_606);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _607,double _608) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_607,_608); }void mosek::fusion::p_Model::setSolverParam(const std::string & _607,double _608){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_607,_608);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _609,int _610) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_609,_610); }void mosek::fusion::p_Model::setSolverParam(const std::string & _609,int _610){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_609,_610);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _611,const std::string & _612) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_611,_612); }void mosek::fusion::p_Model::setSolverParam(const std::string & _611,const std::string & _612){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_611,_612);
}
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver(){
  task_break_solve();
}
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
  task_solve();
}
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _613){
  if ((NULL != initsol_xx.get()))
  {
    {
      int _614 = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _615 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_614)));
      _checked_ptr_1<double> _ptr__615(_615 ? _615->raw() : nullptr,_615 ? _615->size(0) : 0);
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _617 = __mosek_2fusion_2Model__get_sol_cache(_613,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx.get()))
          {
            {
              int _6925;
              bool _6926 = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx)->size(0)) <= _614);
              if (_6926)
              {
                _6925 = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx)->size(0));
              }
              else
              {
                _6925 = _614;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx,(int)0,_615,(int)0,_6925);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _616)
      {
        {
        }
      }
      int _6927;
      bool _6928 = ((int)((initsol_xx)->size(0)) <= _614);
      if (_6928)
      {
        _6927 = (int)((initsol_xx)->size(0));
      }
      else
      {
        _6927 = _614;
      }
      int _618 = _6927;
      int _6929 = (int)0;
      int _6930 = _618;
      for (int _619 = _6929; _619 < _6930; ++_619)
      {
        {
          if (((*initsol_xx_flag)(_619)))
          {
            {
              _ptr__615[_619] = ((*initsol_xx)(_619));
            }
          }
          {}
        }
      }
      task_putxx_slice(_613,(int)0,_614,_615);
    }
  }
  {}
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(){
  return _pubthis->getDualSolutionStatus(solutionptr);
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(){
  return _pubthis->getProblemStatus(solutionptr);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(){
  return _pubthis->getPrimalSolutionStatus(solutionptr);
}
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _620,bool _621,bool _622){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _623 = nullptr;
  mosek::fusion::SolutionType _624 = _620;
  if ((_624 == ::mosek::fusion::SolutionType::Default))
  {
    {
      _624 = solutionptr;
    }
  }
  {}
  if ((_624 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _623 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _623 = sol_bas;
        }
      }
      else
      {
        {
          _623 = sol_itr;
        }
      }
    }
  }
  else if((_624 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _623 = sol_itr;
    }
  }
  else if((_624 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _623 = sol_bas;
    }
  }
  else if((_624 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _623 = sol_itg;
    }
  }
  {}
  if ((NULL == _623.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_622 || ((_621 && _623->isPrimalAcceptable(acceptable_sol)) || ((!_621) && _623->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _623;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _625 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _626 = mosek::fusion::p_SolutionStruct::_get_impl(_623)->pstatus;
          mosek::fusion::ProblemStatus _627 = mosek::fusion::p_SolutionStruct::_get_impl(_623)->probstatus;
          if ((!_621))
          {
            {
              _626 = mosek::fusion::p_SolutionStruct::_get_impl(_623)->dstatus;
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_626 == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but at least "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_623 == sol_itr))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_623 == sol_bas))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_623 == sol_itg))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_627 == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_625->toString());
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _628,bool _629){
  return __mosek_2fusion_2Model__get_sol_cache(_628,_629,false);
}
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int,1 > > _630,std::shared_ptr< monty::ndarray< double,1 > > _631){
  _checked_ptr_1<int> _ptr__630(_630 ? _630->raw() : nullptr, _630 ? _630->size(0) : 0);
  _checked_ptr_1<double> _ptr__631(_631 ? _631->raw() : nullptr, _631 ? _631->size(0) : 0);
  ensure_initsol_xx();
  int _6931 = (int)0;
  int _6932 = (int)((_630)->size(0));
  for (int _632 = _6931; _632 < _6932; ++_632)
  {
    {
      ((*initsol_xx)(_ptr__630[_632])) = _ptr__631[_632];
      ((*initsol_xx_flag)(_ptr__630[_632])) = true;
    }
  }
}
void mosek::fusion::p_Model::ensure_initsol_xx(){
  int _633 = (int)((natvarmap_idx)->size(0));
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_633)));
      std::vector<bool> _6933;
      for (int _634 = (int)0, _6934 = _633; _634 < _6934 ; ++_634)
      {
        _6933.push_back(false);
      }
      auto _6935 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6933.size()),_6933.begin(),_6933.end()));
      initsol_xx_flag = _6935;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _633))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _635 = initsol_xx;
      _checked_ptr_1<double> _ptr__635(_635 ? _635->raw() : nullptr,_635 ? _635->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _636 = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_633)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_633)));
      ::mosek::fusion::Utils::Tools::arraycopy(_635,(int)0,initsol_xx,(int)0,_633);
      int _6936 = (int)0;
      int _6937 = _633;
      for (int _637 = _6936; _637 < _6937; ++_637)
      {
        {
          ((*initsol_xx_flag)(_637)) = ((*_636)(_637));
        }
      }
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _638){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_638,false))->bars;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _639){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_639,false))->barx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _640){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_640,false))->y;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _641){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_641,true))->xc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx(mosek::fusion::SolutionType _642){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_642,false))->snx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _643){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_643,false))->suc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _644){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_644,false))->slc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _645){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_645,false))->sux;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _646){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_646,false))->slx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _647){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_647,true))->yx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _648){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_648,true))->xx;
}
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _649) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_649); }void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _649){
  solutionptr = _649;
}
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus(){
  return acceptable_sol;
}
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _650) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_650); }void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _650){
  acceptable_sol = _650;
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _651) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_651); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _651){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _652 = nullptr;
  if ((_651 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _652 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _652 = sol_bas;
        }
      }
      else
      {
        {
          _652 = sol_itr;
        }
      }
    }
  }
  else if((_651 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _652 = sol_itr;
    }
  }
  else if((_651 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _652 = sol_bas;
    }
  }
  else if((_651 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _652 = sol_itg;
    }
  }
  {}
  if ((NULL == _652.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_652)->probstatus;
    }
  }
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _653) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_653); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _653){
  return getSolutionStatus(_653,false);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _654) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_654); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _654){
  return getSolutionStatus(_654,true);
}
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _655,bool _656){
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _658 = __mosek_2fusion_2Model__get_sol_cache(_655,_656,true);
      if (_656)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_658)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_658)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _657)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _659,monty::rc_ptr< ::mosek::fusion::Expression > _660){
  _checked_ptr_1<int> _ptr__659(_659 ? _659->raw() : nullptr, _659 ? _659->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_660)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _661 = ws->popi32();
  int _662 = ws->popi32(_661);
  int _663 = ws->popi32();
  int _664 = ws->popi32();
  bool _665 = ((int)0 != ws->popi32());
  int _666 = ws->popi32(safe_add( _663,(int)1 ));
  int _6938;
  bool _6939 = _665;
  if (_6939)
  {
    _6938 = ws->popi64(_663);
  }
  else
  {
    _6938 = (int)0;
  }
  int _667 = _6938;
  int _668 = ws->popi64(_664);
  int _669 = ws->popf64(_663);
  int _670 = ws->popf64(_664);
  std::shared_ptr< monty::ndarray< int,1 > > _671 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__671(_671 ? _671->raw() : nullptr,_671 ? _671->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _672 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__672(_672 ? _672->raw() : nullptr,_672 ? _672->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _673 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__673(_673 ? _673->raw() : nullptr,_673 ? _673->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _674 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _663,(int)1 ))));
  _checked_ptr_1<long long> _ptr__674(_674 ? _674->raw() : nullptr,_674 ? _674->size(0) : 0);
  int _6940 = (int)0;
  int _6941 = _663;
  for (int _675 = _6940; _675 < _6941; ++_675)
  {
    {
      int _6942 = _ptr__671[safe_add( _666,_675 )];
      int _6943 = _ptr__671[safe_add( safe_add( _666,_675 ),(int)1 )];
      for (int _676 = _6942; _676 < _6943; ++_676)
      {
        {
          if ((_ptr__672[safe_add( _668,_676 )] > (int)0))
          {
            {
              ++ _ptr__674[safe_add( _675,(int)1 )];
            }
          }
          {}
        }
      }
    }
  }
  int _6944 = (int)0;
  int _6945 = _663;
  for (int _677 = _6944; _677 < _6945; ++_677)
  {
    {
      _ptr__674[safe_add( _677,(int)1 )] += _ptr__674[_677];
    }
  }
  long long _678 = _ptr__674[_663];
  std::shared_ptr< monty::ndarray< int,1 > > _679 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_678)));
  _checked_ptr_1<int> _ptr__679(_679 ? _679->raw() : nullptr,_679 ? _679->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _680 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_678)));
  _checked_ptr_1<double> _ptr__680(_680 ? _680->raw() : nullptr,_680 ? _680->size(0) : 0);
  int _681 = (int)0;
  int _6946 = (int)0;
  int _6947 = _663;
  for (int _682 = _6946; _682 < _6947; ++_682)
  {
    {
      int _6948 = _ptr__671[safe_add( _666,_682 )];
      int _6949 = _ptr__671[safe_add( safe_add( _666,_682 ),(int)1 )];
      for (int _683 = _6948; _683 < _6949; ++_683)
      {
        {
          if ((_ptr__672[safe_add( _668,_683 )] > (int)0))
          {
            {
              _ptr__679[_681] = (int)(_ptr__672[safe_add( _668,_683 )] - (int)1);
              _ptr__680[_681] = _ptr__673[safe_add( _670,_683 )];
              ++ _681;
            }
          }
          {}
        }
      }
    }
  }
  task_putarowlist(_659,_674,_679,_680);
  std::vector<int> _6950;
  for (int _684 = (int)0, _6951 = _663; _684 < _6951 ; ++_684)
  {
    _6950.push_back(bfixidx);
  }
  auto _6952 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6950.size()),_6950.begin(),_6950.end()));
  std::vector<double> _6953;
  for (int _685 = (int)0, _6954 = _663; _685 < _6954 ; ++_685)
  {
    _6953.push_back(_ptr__673[safe_add( _669,_685 )]);
  }
  auto _6955 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6953.size()),_6953.begin(),_6953.end()));
  task_putaijlist(_659,_6952,_6955,(long long)(_663));
  int _686 = (int)0;
  int _6956 = (int)0;
  int _6957 = _663;
  for (int _687 = _6956; _687 < _6957; ++_687)
  {
    {
      if ((((*natconmap_slackidx)(_ptr__659[_687])) > (int)0))
      {
        {
          ++ _686;
        }
      }
      {}
    }
  }
  if ((_686 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _688 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_686)));
      _checked_ptr_1<int> _ptr__688(_688 ? _688->raw() : nullptr,_688 ? _688->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _689 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_686)));
      _checked_ptr_1<int> _ptr__689(_689 ? _689->raw() : nullptr,_689 ? _689->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _690 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_686)));
      _checked_ptr_1<double> _ptr__690(_690 ? _690->raw() : nullptr,_690 ? _690->size(0) : 0);
      int _691 = (int)0;
      int _6958 = (int)0;
      int _6959 = _663;
      for (int _692 = _6958; _692 < _6959; ++_692)
      {
        {
          if ((((*natconmap_slackidx)(_ptr__659[_692])) > (int)0))
          {
            {
              _ptr__688[_691] = _ptr__659[_692];
              _ptr__689[_691] = (int)(((*natconmap_slackidx)(_ptr__659[_692])) - (int)1);
              _ptr__690[_691] = (-1.0);
              ++ _691;
            }
          }
          {}
        }
      }
      task_putaijlist(_688,_689,_690,(long long)(_686));
    }
  }
  {}
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _693,monty::rc_ptr< ::mosek::fusion::Expression > _694,std::shared_ptr< monty::ndarray< int,1 > > _695,bool _696){
  _checked_ptr_1<int> _ptr__693(_693 ? _693->raw() : nullptr, _693 ? _693->size(0) : 0);
  _checked_ptr_1<int> _ptr__695(_695 ? _695->raw() : nullptr, _695 ? _695->size(0) : 0);
  int _697 = safe_mul( (int)((_693)->size(0)),(int)((_695)->size(0)) );
  std::shared_ptr< monty::ndarray< double,1 > > _698 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_697)));
  _checked_ptr_1<double> _ptr__698(_698 ? _698->raw() : nullptr,_698 ? _698->size(0) : 0);
  std::vector<int> _6960;
  for (int _700 = (int)0, _6961 = (int)((_693)->size(0)); _700 < _6961 ; ++_700)
  {
    for (int _701 = (int)0, _6962 = (int)((_695)->size(0)); _701 < _6962 ; ++_701)
    {
      _6960.push_back(_ptr__693[_700]);
    }
  }
  auto _6963 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6960.size()),_6960.begin(),_6960.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _699 = _6963;
  _checked_ptr_1<int> _ptr__699(_699 ? _699->raw() : nullptr,_699 ? _699->size(0) : 0);
  std::vector<int> _6964;
  for (int _703 = (int)0, _6965 = (int)((_693)->size(0)); _703 < _6965 ; ++_703)
  {
    for (int _704 = (int)0, _6966 = (int)((_695)->size(0)); _704 < _6966 ; ++_704)
    {
      _6964.push_back(_ptr__695[_704]);
    }
  }
  auto _6967 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6964.size()),_6964.begin(),_6964.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _702 = _6967;
  _checked_ptr_1<int> _ptr__702(_702 ? _702->raw() : nullptr,_702 ? _702->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_694)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _705 = ws->popi32();
  int _706 = ws->popi32(_705);
  int _707 = ws->popi32();
  int _708 = ws->popi32();
  bool _709 = ((int)0 != ws->popi32());
  int _710 = ws->popi32(safe_add( _707,(int)1 ));
  int _6968;
  bool _6969 = _709;
  if (_6969)
  {
    _6968 = ws->popi64(_707);
  }
  else
  {
    _6968 = (int)0;
  }
  int _711 = _6968;
  int _712 = ws->popi64(_708);
  int _713 = ws->popf64(_707);
  int _714 = ws->popf64(_708);
  std::shared_ptr< monty::ndarray< int,1 > > _715 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__715(_715 ? _715->raw() : nullptr,_715 ? _715->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _716 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__716(_716 ? _716->raw() : nullptr,_716 ? _716->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _717 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__717(_717 ? _717->raw() : nullptr,_717 ? _717->size(0) : 0);
  int _718 = (int)0;
  int _6970 = (int)0;
  int _6971 = _707;
  for (int _719 = _6970; _719 < _6971; ++_719)
  {
    {
      int _720 = _ptr__715[safe_add( _710,_719 )];
      int _721 = _ptr__715[safe_add( safe_add( _710,_719 ),(int)1 )];
      int _722 = _720;
      int _723 = (int)0;
      while ( ((_723 < (int)((_695)->size(0))) && (_722 < _721)) )
      {
        {
          if ((_ptr__695[_723] < (_ptr__716[safe_add( _712,_722 )] - (int)1)))
          {
            {
              ++ _723;
            }
          }
          else if((_ptr__695[_723] > (_ptr__716[safe_add( _712,_722 )] - (int)1)))
          {
            {
              ++ _722;
            }
          }
          else
          {
            {
              _ptr__698[safe_add( _718,_723 )] = _ptr__717[safe_add( _714,_722 )];
              ++ _723;
              ++ _722;
            }
          }
        }
      }
      _718 += (int)((_695)->size(0));
    }
  }
  task_putaijlist(_699,_702,_698,(long long)(_697));
  if (_696)
  {
    {
      std::vector<int> _6972;
      for (int _724 = (int)0, _6973 = _707; _724 < _6973 ; ++_724)
      {
        _6972.push_back(bfixidx);
      }
      auto _6974 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6972.size()),_6972.begin(),_6972.end()));
      std::vector<double> _6975;
      for (int _725 = (int)0, _6976 = _707; _725 < _6976 ; ++_725)
      {
        _6975.push_back(_ptr__717[safe_add( _713,_725 )]);
      }
      auto _6977 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6975.size()),_6975.begin(),_6975.end()));
      task_putaijlist(_693,_6974,_6977,(long long)(_707));
    }
  }
  {}
}
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _726,monty::rc_ptr< ::mosek::fusion::Variable > _727) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_726,_727); }void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _726,monty::rc_ptr< ::mosek::fusion::Variable > _727){
  if ((_726->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  int _728 = _727->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _729 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_728)));
  _checked_ptr_1<long long> _ptr__729(_729 ? _729->raw() : nullptr,_729 ? _729->size(0) : 0);
  if ((_728 < _727->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _730 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_728)));
      _checked_ptr_1<long long> _ptr__730(_730 ? _730->raw() : nullptr,_730 ? _730->size(0) : 0);
      _727->inst((int)0,_730,(int)0,_729);
    }
  }
  else
  {
    {
      _727->inst((int)0,_729);
    }
  }
  int _6978 = (int)0;
  int _6979 = _728;
  for (int _731 = _6978; _731 < _6979; ++_731)
  {
    {
      if ((_ptr__729[_731] < (int)0))
      {
        {
          throw ::mosek::fusion::UnimplementedError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _732 = true;
  int _6980 = (int)0;
  int _6981 = (_728 - (int)1);
  for (int _733 = _6980; _733 < _6981; ++_733)
  {
    {
      _732 = (_732 && (_ptr__729[_733] < _ptr__729[(_733 - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _734 = nullptr;
  _checked_ptr_1<int> _ptr__734(_734 ? _734->raw() : nullptr,_734 ? _734->size(0) : 0);
  if (_732)
  {
    {
      std::vector<int> _6982;
      for (int _735 = (int)0, _6983 = _728; _735 < _6983 ; ++_735)
      {
        _6982.push_back((int)(_ptr__729[_735] - (int)1));
      }
      auto _6984 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6982.size()),_6982.begin(),_6982.end()));
      _734 = _6984;
      _ptr__734.update(_734 ? _734->raw() : nullptr, _734 ? _734->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<long long> _6985;
      for (int _737 = (-(int)1), _6986 = _728; _737 < _6986 ; ++_737)
      {
        _6985.push_back(_737);
      }
      auto _6987 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6985.size()),_6985.begin(),_6985.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _736 = _6987;
      _checked_ptr_1<long long> _ptr__736(_736 ? _736->raw() : nullptr,_736 ? _736->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_736,_729,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_728));
      std::vector<int> _6988;
      for (int _738 = (int)0, _6989 = _728; _738 < _6989 ; ++_738)
      {
        _6988.push_back((int)(_ptr__729[_ptr__736[_738]] - (int)1));
      }
      auto _6990 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6988.size()),_6988.begin(),_6988.end()));
      _734 = _6990;
      _ptr__734.update(_734 ? _734->raw() : nullptr, _734 ? _734->size(0) : 0);
    }
  }
  int _739 = (int)((_734)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _740 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_739)));
  _checked_ptr_1<double> _ptr__740(_740 ? _740->raw() : nullptr,_740 ? _740->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _741 = _734;
  _checked_ptr_1<int> _ptr__741(_741 ? _741->raw() : nullptr,_741 ? _741->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_726)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _742 = ws->popi32();
  int _743 = ws->popi32(_742);
  int _744 = ws->popi32();
  int _745 = ws->popi32();
  bool _746 = ((int)0 != ws->popi32());
  int _747 = ws->popi32(safe_add( _744,(int)1 ));
  int _6991;
  bool _6992 = _746;
  if (_6992)
  {
    _6991 = ws->popi64(_744);
  }
  else
  {
    _6991 = (int)0;
  }
  int _748 = _6991;
  int _749 = ws->popi64(_745);
  int _750 = ws->popf64(_744);
  int _751 = ws->popf64(_745);
  std::shared_ptr< monty::ndarray< int,1 > > _752 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__752(_752 ? _752->raw() : nullptr,_752 ? _752->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _753 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__753(_753 ? _753->raw() : nullptr,_753 ? _753->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _754 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__754(_754 ? _754->raw() : nullptr,_754 ? _754->size(0) : 0);
  int _755 = (int)0;
  int _6993 = (int)0;
  int _6994 = _744;
  for (int _756 = _6993; _756 < _6994; ++_756)
  {
    {
      int _757 = _ptr__752[safe_add( _747,_756 )];
      int _758 = _ptr__752[safe_add( safe_add( _747,_756 ),(int)1 )];
      int _759 = _757;
      int _760 = (int)0;
      while ( ((_760 < (int)((_734)->size(0))) && (_759 < _758)) )
      {
        {
          if ((_ptr__734[_760] < (_ptr__753[safe_add( _749,_759 )] - (int)1)))
          {
            {
              ++ _760;
            }
          }
          else if((_ptr__734[_760] > (_ptr__753[safe_add( _749,_759 )] - (int)1)))
          {
            {
              ++ _759;
            }
          }
          else
          {
            {
              _ptr__740[safe_add( _755,_760 )] = _ptr__754[safe_add( _751,_759 )];
              ++ _760;
              ++ _759;
            }
          }
        }
      }
      _755 += (int)((_734)->size(0));
    }
  }
  task_putclist(_741,_740);
}
void mosek::fusion::p_Model::objective_(const std::string & _761,mosek::fusion::ObjectiveSense _762,monty::rc_ptr< ::mosek::fusion::Expression > _763){
  task_putobjectivename(_761);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _764 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _765 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_763)).as<::mosek::fusion::Expression>())->eval(_764,_765,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _766 = mosek::fusion::p_WorkStack::_get_impl(_764)->i32;
  _checked_ptr_1<int> _ptr__766(_766 ? _766->raw() : nullptr,_766 ? _766->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _767 = mosek::fusion::p_WorkStack::_get_impl(_764)->i64;
  _checked_ptr_1<long long> _ptr__767(_767 ? _767->raw() : nullptr,_767 ? _767->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _768 = mosek::fusion::p_WorkStack::_get_impl(_764)->f64;
  _checked_ptr_1<double> _ptr__768(_768 ? _768->raw() : nullptr,_768 ? _768->size(0) : 0);
  int _769 = _764->popi32();
  int _770 = (int)1;
  int _6995 = (int)0;
  int _6996 = _769;
  for (int _771 = _6995; _771 < _6996; ++_771)
  {
    {
      _769 *= _764->popi32();
    }
  }
  if ((_770 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  int _772 = _764->popi32();
  if ((_772 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int _773 = _764->popi32();
  bool _774 = (_764->popi32() != (int)0);
  int _775 = _764->popi32(safe_add( _772,(int)1 ));
  int _776 = _764->popi64(_773);
  int _777 = _764->popf64(_772);
  int _778 = _764->popf64(_773);
  int _779 = (int)0;
  int _780 = (int)0;
  int _6997 = (int)0;
  int _6998 = _773;
  for (int _781 = _6997; _781 < _6998; ++_781)
  {
    {
      if ((_ptr__767[safe_add( _776,_781 )] < (int)0))
      {
        {
          ++ _780;
        }
      }
      else if((_ptr__767[safe_add( _776,_781 )] > (int)0))
      {
        {
          ++ _779;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _782 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_779)));
  _checked_ptr_1<int> _ptr__782(_782 ? _782->raw() : nullptr,_782 ? _782->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _783 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_779)));
  _checked_ptr_1<double> _ptr__783(_783 ? _783->raw() : nullptr,_783 ? _783->size(0) : 0);
  {
    int _784 = (int)0;
    int _6999 = (int)0;
    int _7000 = _773;
    for (int _785 = _6999; _785 < _7000; ++_785)
    {
      {
        if ((_ptr__767[safe_add( _776,_785 )] > (int)0))
        {
          {
            _ptr__782[_784] = (int)(_ptr__767[safe_add( _776,_785 )] - (int)1);
            _ptr__783[_784] = _ptr__768[safe_add( _778,_785 )];
            ++ _784;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_762 == ::mosek::fusion::ObjectiveSense::Maximize),_782,_783,_ptr__768[_777]);
  if ((_780 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _786 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_780)));
      _checked_ptr_1<int> _ptr__786(_786 ? _786->raw() : nullptr,_786 ? _786->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _787 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_780)));
      _checked_ptr_1<int> _ptr__787(_787 ? _787->raw() : nullptr,_787 ? _787->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _788 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_780)));
      _checked_ptr_1<int> _ptr__788(_788 ? _788->raw() : nullptr,_788 ? _788->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _789 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_780)));
      _checked_ptr_1<double> _ptr__789(_789 ? _789->raw() : nullptr,_789 ? _789->size(0) : 0);
      int _7001 = (int)0;
      int _7002 = _780;
      for (int _790 = _7001; _790 < _7002; ++_790)
      {
        {
          long long _791 = (-safe_add( _ptr__767[safe_add( _776,_790 )],(int)1 ));
          _ptr__786[_790] = ((*natbarvar_idx)(_791));
          _ptr__787[_790] = ((*natbarvar_i)(_791));
          _ptr__788[_790] = ((*natbarvar_j)(_791));
          double _7003;
          bool _7004 = (_ptr__787[_790] == _ptr__788[_790]);
          if (_7004)
          {
            _7003 = _ptr__768[safe_add( _778,_790 )];
          }
          else
          {
            _7003 = (0.5 * _ptr__768[safe_add( _778,_790 )]);
          }
          _ptr__789[_790] = _7003;
        }
      }
      task_putbarc(_786,_787,_788,_789);
    }
  }
  {}
}
void mosek::fusion::Model :: objective(double _792) { mosek::fusion::p_Model::_get_impl(this)->objective(_792); }void mosek::fusion::p_Model::objective(double _792){
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_792));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _793,double _794) { mosek::fusion::p_Model::_get_impl(this)->objective(_793,_794); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _793,double _794){
  objective_(std::string (""),_793,::mosek::fusion::p_Expr::constTerm(_794));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _795,monty::rc_ptr< ::mosek::fusion::Expression > _796) { mosek::fusion::p_Model::_get_impl(this)->objective(_795,_796); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _795,monty::rc_ptr< ::mosek::fusion::Expression > _796){
  objective_(std::string (""),_795,_796);
}
void mosek::fusion::Model :: objective(const std::string & _797,double _798) { mosek::fusion::p_Model::_get_impl(this)->objective(_797,_798); }void mosek::fusion::p_Model::objective(const std::string & _797,double _798){
  objective_(_797,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_798));
}
void mosek::fusion::Model :: objective(const std::string & _799,mosek::fusion::ObjectiveSense _800,double _801) { mosek::fusion::p_Model::_get_impl(this)->objective(_799,_800,_801); }void mosek::fusion::p_Model::objective(const std::string & _799,mosek::fusion::ObjectiveSense _800,double _801){
  objective_(_799,_800,::mosek::fusion::p_Expr::constTerm(_801));
}
void mosek::fusion::Model :: objective(const std::string & _802,mosek::fusion::ObjectiveSense _803,monty::rc_ptr< ::mosek::fusion::Expression > _804) { mosek::fusion::p_Model::_get_impl(this)->objective(_802,_803,_804); }void mosek::fusion::p_Model::objective(const std::string & _802,mosek::fusion::ObjectiveSense _803,monty::rc_ptr< ::mosek::fusion::Expression > _804){
  objective_(_802,_803,_804);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _805,monty::rc_ptr< ::mosek::fusion::ConeDomain > _806) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_805,_806); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _805,monty::rc_ptr< ::mosek::fusion::ConeDomain > _806) { return __mosek_2fusion_2Model__constraint(_805,_806); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _805,monty::rc_ptr< ::mosek::fusion::ConeDomain > _806){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_805,_806);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _807,monty::rc_ptr< ::mosek::fusion::Expression > _808,monty::rc_ptr< ::mosek::fusion::ConeDomain > _809) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_807,_808,_809); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _807,monty::rc_ptr< ::mosek::fusion::Expression > _808,monty::rc_ptr< ::mosek::fusion::ConeDomain > _809) { return __mosek_2fusion_2Model__constraint(_807,_808,_809); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _807,monty::rc_ptr< ::mosek::fusion::Expression > _808,monty::rc_ptr< ::mosek::fusion::ConeDomain > _809){
  return __mosek_2fusion_2Model__constraint_(_807,_808,_809);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::RangeDomain > _811) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_810,_811); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::RangeDomain > _811) { return __mosek_2fusion_2Model__constraint(_810,_811); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::RangeDomain > _811){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_810,_811);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::RangeDomain > _814) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_812,_813,_814); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::RangeDomain > _814) { return __mosek_2fusion_2Model__constraint(_812,_813,_814); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::RangeDomain > _814){
  return __mosek_2fusion_2Model__constraint_(_812,_813,_814);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::LinearDomain > _816) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_815,_816); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::LinearDomain > _816) { return __mosek_2fusion_2Model__constraint(_815,_816); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::LinearDomain > _816){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_815,_816);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::LinearDomain > _819) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_817,_818,_819); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::LinearDomain > _819) { return __mosek_2fusion_2Model__constraint(_817,_818,_819); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::LinearDomain > _819){
  return __mosek_2fusion_2Model__constraint_(_817,_818,_819);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _821) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_820,_821); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _821) { return __mosek_2fusion_2Model__constraint(_820,_821); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _821){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_820,_821);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _824) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_822,_823,_824); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _824) { return __mosek_2fusion_2Model__constraint(_822,_823,_824); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _824){
  return __mosek_2fusion_2Model__constraint_(_822,_823,_824);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::PSDDomain > _826) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_825,_826); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::PSDDomain > _826) { return __mosek_2fusion_2Model__constraint(_825,_826); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::PSDDomain > _826){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_825,_826);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::PSDDomain > _829) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_827,_828,_829); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::PSDDomain > _829) { return __mosek_2fusion_2Model__constraint(_827,_828,_829); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::PSDDomain > _829){
  return __mosek_2fusion_2Model__constraint_(_827,_828,_829);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _830) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_830); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _830) { return __mosek_2fusion_2Model__variable(_830); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _830){
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_830)->shape,_830);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _831,int _832,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _833) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_831,_832,_833); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _831,int _832,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _833) { return __mosek_2fusion_2Model__variable(_831,_832,_833); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _831,int _832,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _833){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_831),(int)(_831),(int)(_832)}),_833);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _834,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_834,_835); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _834,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835) { return __mosek_2fusion_2Model__variable(_834,_835); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _834,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_834),(int)(_834)}),_835);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _836,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _837) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_836,_837); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _836,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _837) { return __mosek_2fusion_2Model__variable(_836,_837); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _836,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _837){
  return __mosek_2fusion_2Model__variable_(_836,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_837);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _838,int _839,int _840,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _841) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_838,_839,_840,_841); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _838,int _839,int _840,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _841) { return __mosek_2fusion_2Model__variable(_838,_839,_840,_841); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _838,int _839,int _840,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _841){
  return __mosek_2fusion_2Model__variable_(_838,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_839),(int)(_839),(int)(_840)}),_841);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _842,int _843,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _844) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_842,_843,_844); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _842,int _843,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _844) { return __mosek_2fusion_2Model__variable(_842,_843,_844); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _842,int _843,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _844){
  return __mosek_2fusion_2Model__variable_(_842,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_843),(int)(_843)}),_844);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _845,std::shared_ptr< monty::ndarray< int,1 > > _846,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _847) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_845,_846,_847); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _845,std::shared_ptr< monty::ndarray< int,1 > > _846,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _847) { return __mosek_2fusion_2Model__variable(_845,_846,_847); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _845,std::shared_ptr< monty::ndarray< int,1 > > _846,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _847){
  _checked_ptr_1<int> _ptr__846(_846 ? _846->raw() : nullptr, _846 ? _846->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_845,_846,_847);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _848) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_848); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _848) { return __mosek_2fusion_2Model__variable(_848); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _848){
  return (__mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_848)->shape,_848)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _849,int _850,monty::rc_ptr< ::mosek::fusion::PSDDomain > _851) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_849,_850,_851); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _849,int _850,monty::rc_ptr< ::mosek::fusion::PSDDomain > _851) { return __mosek_2fusion_2Model__variable(_849,_850,_851); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _849,int _850,monty::rc_ptr< ::mosek::fusion::PSDDomain > _851){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_849),(int)(_849),(int)(_850)}),_851)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _852,monty::rc_ptr< ::mosek::fusion::PSDDomain > _853) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_852,_853); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _852,monty::rc_ptr< ::mosek::fusion::PSDDomain > _853) { return __mosek_2fusion_2Model__variable(_852,_853); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _852,monty::rc_ptr< ::mosek::fusion::PSDDomain > _853){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_852),(int)(_852)}),_853)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _854,monty::rc_ptr< ::mosek::fusion::PSDDomain > _855) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_854,_855); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _854,monty::rc_ptr< ::mosek::fusion::PSDDomain > _855) { return __mosek_2fusion_2Model__variable(_854,_855); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _854,monty::rc_ptr< ::mosek::fusion::PSDDomain > _855){
  return (__mosek_2fusion_2Model__variable_(_854,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_855)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _856,int _857,int _858,monty::rc_ptr< ::mosek::fusion::PSDDomain > _859) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_856,_857,_858,_859); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _856,int _857,int _858,monty::rc_ptr< ::mosek::fusion::PSDDomain > _859) { return __mosek_2fusion_2Model__variable(_856,_857,_858,_859); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _856,int _857,int _858,monty::rc_ptr< ::mosek::fusion::PSDDomain > _859){
  return (__mosek_2fusion_2Model__variable_(_856,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_857),(int)(_857),(int)(_858)}),_859)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _860,int _861,monty::rc_ptr< ::mosek::fusion::PSDDomain > _862) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_860,_861,_862); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _860,int _861,monty::rc_ptr< ::mosek::fusion::PSDDomain > _862) { return __mosek_2fusion_2Model__variable(_860,_861,_862); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _860,int _861,monty::rc_ptr< ::mosek::fusion::PSDDomain > _862){
  return (__mosek_2fusion_2Model__variable_(_860,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_861),(int)(_861)}),_862)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _863,std::shared_ptr< monty::ndarray< int,1 > > _864,monty::rc_ptr< ::mosek::fusion::PSDDomain > _865) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_863,_864,_865); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _863,std::shared_ptr< monty::ndarray< int,1 > > _864,monty::rc_ptr< ::mosek::fusion::PSDDomain > _865) { return __mosek_2fusion_2Model__variable(_863,_864,_865); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _863,std::shared_ptr< monty::ndarray< int,1 > > _864,monty::rc_ptr< ::mosek::fusion::PSDDomain > _865){
  _checked_ptr_1<int> _ptr__864(_864 ? _864->raw() : nullptr, _864 ? _864->size(0) : 0);
  return (__mosek_2fusion_2Model__variable_(_863,_864,_865)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _866) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_866); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _866) { return __mosek_2fusion_2Model__variable(_866); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _866){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_866);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _867) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_867); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _867) { return __mosek_2fusion_2Model__variable(_867); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _867){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_867);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _868) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_868); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _868) { return __mosek_2fusion_2Model__variable(_868); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _868){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_868);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::ConeDomain > _870) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_869,_870); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::ConeDomain > _870) { return __mosek_2fusion_2Model__variable(_869,_870); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::ConeDomain > _870){
  _checked_ptr_1<int> _ptr__869(_869 ? _869->raw() : nullptr, _869 ? _869->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_869,_870);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _871,monty::rc_ptr< ::mosek::fusion::RangeDomain > _872) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_871,_872); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _871,monty::rc_ptr< ::mosek::fusion::RangeDomain > _872) { return __mosek_2fusion_2Model__variable(_871,_872); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _871,monty::rc_ptr< ::mosek::fusion::RangeDomain > _872){
  _checked_ptr_1<int> _ptr__871(_871 ? _871->raw() : nullptr, _871 ? _871->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_871,_872);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _873,monty::rc_ptr< ::mosek::fusion::LinearDomain > _874) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_873,_874); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _873,monty::rc_ptr< ::mosek::fusion::LinearDomain > _874) { return __mosek_2fusion_2Model__variable(_873,_874); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _873,monty::rc_ptr< ::mosek::fusion::LinearDomain > _874){
  _checked_ptr_1<int> _ptr__873(_873 ? _873->raw() : nullptr, _873 ? _873->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_873,_874);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _875) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_875); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _875) { return __mosek_2fusion_2Model__variable(_875); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _875){
  _checked_ptr_1<int> _ptr__875(_875 ? _875->raw() : nullptr, _875 ? _875->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_875,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _876,monty::rc_ptr< ::mosek::fusion::ConeDomain > _877) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_876,_877); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _876,monty::rc_ptr< ::mosek::fusion::ConeDomain > _877) { return __mosek_2fusion_2Model__variable(_876,_877); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _876,monty::rc_ptr< ::mosek::fusion::ConeDomain > _877){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_876)}),_877);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _878,monty::rc_ptr< ::mosek::fusion::RangeDomain > _879) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_878,_879); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _878,monty::rc_ptr< ::mosek::fusion::RangeDomain > _879) { return __mosek_2fusion_2Model__variable(_878,_879); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _878,monty::rc_ptr< ::mosek::fusion::RangeDomain > _879){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_878)}),_879);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _880,monty::rc_ptr< ::mosek::fusion::LinearDomain > _881) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_880,_881); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _880,monty::rc_ptr< ::mosek::fusion::LinearDomain > _881) { return __mosek_2fusion_2Model__variable(_880,_881); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _880,monty::rc_ptr< ::mosek::fusion::LinearDomain > _881){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_880)}),_881);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _882) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_882); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _882) { return __mosek_2fusion_2Model__variable(_882); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _882){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_882)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _883,monty::rc_ptr< ::mosek::fusion::ConeDomain > _884) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_883,_884); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _883,monty::rc_ptr< ::mosek::fusion::ConeDomain > _884) { return __mosek_2fusion_2Model__variable(_883,_884); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _883,monty::rc_ptr< ::mosek::fusion::ConeDomain > _884){
  return __mosek_2fusion_2Model__variable_(_883,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_884);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _885,monty::rc_ptr< ::mosek::fusion::RangeDomain > _886) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_885,_886); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _885,monty::rc_ptr< ::mosek::fusion::RangeDomain > _886) { return __mosek_2fusion_2Model__variable(_885,_886); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _885,monty::rc_ptr< ::mosek::fusion::RangeDomain > _886){
  return __mosek_2fusion_2Model__ranged_variable(_885,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_886);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _887,monty::rc_ptr< ::mosek::fusion::LinearDomain > _888) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_887,_888); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _887,monty::rc_ptr< ::mosek::fusion::LinearDomain > _888) { return __mosek_2fusion_2Model__variable(_887,_888); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _887,monty::rc_ptr< ::mosek::fusion::LinearDomain > _888){
  return __mosek_2fusion_2Model__variable_(_887,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_888);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _889,std::shared_ptr< monty::ndarray< int,1 > > _890,monty::rc_ptr< ::mosek::fusion::ConeDomain > _891) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_889,_890,_891); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _889,std::shared_ptr< monty::ndarray< int,1 > > _890,monty::rc_ptr< ::mosek::fusion::ConeDomain > _891) { return __mosek_2fusion_2Model__variable(_889,_890,_891); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _889,std::shared_ptr< monty::ndarray< int,1 > > _890,monty::rc_ptr< ::mosek::fusion::ConeDomain > _891){
  _checked_ptr_1<int> _ptr__890(_890 ? _890->raw() : nullptr, _890 ? _890->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_889,_890,_891);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _892,std::shared_ptr< monty::ndarray< int,1 > > _893,monty::rc_ptr< ::mosek::fusion::RangeDomain > _894) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_892,_893,_894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _892,std::shared_ptr< monty::ndarray< int,1 > > _893,monty::rc_ptr< ::mosek::fusion::RangeDomain > _894) { return __mosek_2fusion_2Model__variable(_892,_893,_894); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _892,std::shared_ptr< monty::ndarray< int,1 > > _893,monty::rc_ptr< ::mosek::fusion::RangeDomain > _894){
  _checked_ptr_1<int> _ptr__893(_893 ? _893->raw() : nullptr, _893 ? _893->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_892,_893,_894);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _895,std::shared_ptr< monty::ndarray< int,1 > > _896,monty::rc_ptr< ::mosek::fusion::LinearDomain > _897) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_895,_896,_897); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _895,std::shared_ptr< monty::ndarray< int,1 > > _896,monty::rc_ptr< ::mosek::fusion::LinearDomain > _897) { return __mosek_2fusion_2Model__variable(_895,_896,_897); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _895,std::shared_ptr< monty::ndarray< int,1 > > _896,monty::rc_ptr< ::mosek::fusion::LinearDomain > _897){
  _checked_ptr_1<int> _ptr__896(_896 ? _896->raw() : nullptr, _896 ? _896->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_895,_896,_897);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_898,_899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return __mosek_2fusion_2Model__variable(_898,_899); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899){
  _checked_ptr_1<int> _ptr__899(_899 ? _899->raw() : nullptr, _899 ? _899->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_898,_899,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _900,int _901,monty::rc_ptr< ::mosek::fusion::ConeDomain > _902) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_900,_901,_902); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _900,int _901,monty::rc_ptr< ::mosek::fusion::ConeDomain > _902) { return __mosek_2fusion_2Model__variable(_900,_901,_902); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _900,int _901,monty::rc_ptr< ::mosek::fusion::ConeDomain > _902){
  return __mosek_2fusion_2Model__variable_(_900,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_901)}),_902);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _903,int _904,monty::rc_ptr< ::mosek::fusion::RangeDomain > _905) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_903,_904,_905); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _903,int _904,monty::rc_ptr< ::mosek::fusion::RangeDomain > _905) { return __mosek_2fusion_2Model__variable(_903,_904,_905); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _903,int _904,monty::rc_ptr< ::mosek::fusion::RangeDomain > _905){
  return __mosek_2fusion_2Model__ranged_variable(_903,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_904)}),_905);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _906,int _907,monty::rc_ptr< ::mosek::fusion::LinearDomain > _908) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_906,_907,_908); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _906,int _907,monty::rc_ptr< ::mosek::fusion::LinearDomain > _908) { return __mosek_2fusion_2Model__variable(_906,_907,_908); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _906,int _907,monty::rc_ptr< ::mosek::fusion::LinearDomain > _908){
  return __mosek_2fusion_2Model__variable_(_906,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_907)}),_908);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _909,int _910) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_909,_910); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _909,int _910) { return __mosek_2fusion_2Model__variable(_909,_910); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _909,int _910){
  return __mosek_2fusion_2Model__variable_(_909,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_910)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _911) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_911); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _911) { return __mosek_2fusion_2Model__variable(_911); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _911){
  return __mosek_2fusion_2Model__variable_(_911,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _912,std::shared_ptr< monty::ndarray< int,1 > > _913,monty::rc_ptr< ::mosek::fusion::RangeDomain > _914){
  _checked_ptr_1<int> _ptr__913(_913 ? _913->raw() : nullptr, _913 ? _913->size(0) : 0);
  if ((((int)((_912).size()) > (int)0) && hasVariable(_912)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_912)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7005;
  bool _7006 = (NULL != _913.get());
  if (_7006)
  {
    _7005 = _913;
  }
  else
  {
    _7005 = mosek::fusion::p_RangeDomain::_get_impl(_914)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _915 = _7005;
  _checked_ptr_1<int> _ptr__915(_915 ? _915->raw() : nullptr,_915 ? _915->size(0) : 0);
  if (((NULL != mosek::fusion::p_RangeDomain::_get_impl(_914)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_RangeDomain::_get_impl(_914)->shape,_915))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _915.get()))
  {
    {
      _915 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__915.update(_915 ? _915->raw() : nullptr, _915 ? _915->size(0) : 0);
    }
  }
  {}
  int _916 = (int)((_915)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _917 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_916)));
  _checked_ptr_1<int> _ptr__917(_917 ? _917->raw() : nullptr,_917 ? _917->size(0) : 0);
  if ((_916 > (int)0))
  {
    {
      _ptr__917[(_916 - (int)1)] = (int)1;
      int _7007 = (int)1;
      int _7008 = _916;
      for (int _918 = _7007; _918 < _7008; ++_918)
      {
        {
          _ptr__917[((_916 - _918) - (int)1)] = safe_mul( _ptr__917[(_916 - _918)],_ptr__915[(_916 - _918)] );
        }
      }
    }
  }
  {}
  int _919 = (int)1;
  int _7009 = (int)0;
  int _7010 = (int)((_915)->size(0));
  for (int _920 = _7009; _920 < _7010; ++_920)
  {
    {
      _919 *= _ptr__915[_920];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _921 = nullptr;
  _checked_ptr_1<long long> _ptr__921(_921 ? _921->raw() : nullptr,_921 ? _921->size(0) : 0);
  if ((NULL != _921.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(1)) != _916))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _921 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(0)))));
      _ptr__921.update(_921 ? _921->raw() : nullptr, _921 ? _921->size(0) : 0);
      int _7011 = (int)0;
      int _7012 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(0));
      for (int _922 = _7011; _922 < _7012; ++_922)
      {
        {
          int _7013 = (int)0;
          int _7014 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(1));
          for (int _923 = _7013; _923 < _7014; ++_923)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)(_922,_923)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)(_922,_923)) >= _ptr__915[_923])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          long long _924 = (int)0;
          int _7015 = (int)0;
          int _7016 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(1));
          for (int _925 = _7015; _925 < _7016; ++_925)
          {
            {
              _924 += safe_mul( _ptr__917[_925],((*mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)(_922,_925)) );
            }
          }
          _ptr__921[_922] = _924;
        }
      }
    }
  }
  {}
  int _7017;
  bool _7018 = (NULL != _921.get());
  if (_7018)
  {
    _7017 = (int)((_921)->size(0));
  }
  else
  {
    _7017 = _919;
  }
  int _926 = _7017;
  std::shared_ptr< monty::ndarray< double,1 > > _927;
  _checked_ptr_1<double> _ptr__927(_927 ? _927->raw() : nullptr,_927 ? _927->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _928;
  _checked_ptr_1<double> _ptr__928(_928 ? _928->raw() : nullptr,_928 ? _928->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_914)->scalable)
  {
    {
      std::vector<double> _7019;
      for (int _929 = (int)0, _7020 = _926; _929 < _7020 ; ++_929)
      {
        _7019.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_914)->lb)((int)0)));
      }
      auto _7021 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7019.size()),_7019.begin(),_7019.end()));
      _927 = _7021;
      _ptr__927.update(_927 ? _927->raw() : nullptr, _927 ? _927->size(0) : 0);
      std::vector<double> _7022;
      for (int _930 = (int)0, _7023 = _926; _930 < _7023 ; ++_930)
      {
        _7022.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_914)->ub)((int)0)));
      }
      auto _7024 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7022.size()),_7022.begin(),_7022.end()));
      _928 = _7024;
      _ptr__928.update(_928 ? _928->raw() : nullptr, _928 ? _928->size(0) : 0);
    }
  }
  else
  {
    {
      _927 = mosek::fusion::p_RangeDomain::_get_impl(_914)->lb;
      _ptr__927.update(_927 ? _927->raw() : nullptr, _927 ? _927->size(0) : 0);
      _928 = mosek::fusion::p_RangeDomain::_get_impl(_914)->ub;
      _ptr__928.update(_928 ? _928->raw() : nullptr, _928 ? _928->size(0) : 0);
    }
  }
  int _931 = natvarmap_alloc(_926);
  std::shared_ptr< monty::ndarray< int,1 > > _932 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_931))));
  _checked_ptr_1<int> _ptr__932(_932 ? _932->raw() : nullptr,_932 ? _932->size(0) : 0);
  natvarmap->get(_931,_932,(int)0);
  int _7025 = (int)0;
  int _7026 = _926;
  for (int _933 = _7025; _933 < _7026; ++_933)
  {
    {
      ((*natvarmap_idx)(_ptr__932[_933])) = _931;
    }
  }
  task_var_putboundlist_ra(_932,_927,_928);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _934 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_912,(long long)(_931),_915,_921,_932);
  if (mosek::fusion::p_RangeDomain::_get_impl(_914)->cardinal_flag)
  {
    {
      task_var_putintlist(_932);
    }
  }
  {}
  ((*vars)(_931)) = (_934).as<::mosek::fusion::ModelVariable>();
  if (((int)((_912).size()) > (int)0))
  {
    {
      var_map->setItem(_912,_931);
    }
  }
  {}
  return (_934).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _935,std::shared_ptr< monty::ndarray< int,1 > > _936,monty::rc_ptr< ::mosek::fusion::ConeDomain > _937){
  _checked_ptr_1<int> _ptr__936(_936 ? _936->raw() : nullptr, _936 ? _936->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7027;
  bool _7028 = (NULL != _936.get());
  if (_7028)
  {
    _7027 = _936;
  }
  else
  {
    _7027 = mosek::fusion::p_ConeDomain::_get_impl(_937)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _938 = _7027;
  _checked_ptr_1<int> _ptr__938(_938 ? _938->raw() : nullptr,_938 ? _938->size(0) : 0);
  if ((((int)((_935).size()) > (int)0) && hasVariable(_935)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_935)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((NULL == _938.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape"));
    }
  }
  else if(((NULL != mosek::fusion::p_ConeDomain::_get_impl(_937)->shape.get()) && (!::mosek::fusion::p_Set::match(_938,mosek::fusion::p_ConeDomain::_get_impl(_937)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  else if((_937->getAxis() >= (int)((_938)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension"));
    }
  }
  {}
  int _7029;
  bool _7030 = (NULL != mosek::fusion::p_ConeDomain::_get_impl(_937)->shape.get());
  if (_7030)
  {
    _7029 = _937->getAxis();
  }
  else
  {
    _7029 = ((int)((_938)->size(0)) - (int)1);
  }
  int _939 = _7029;
  int _940 = _ptr__938[_939];
  int _941 = (int)((_938)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _942 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_941)));
  _checked_ptr_1<int> _ptr__942(_942 ? _942->raw() : nullptr,_942 ? _942->size(0) : 0);
  _ptr__942[(_941 - (int)1)] = (int)1;
  int _7031 = (int)1;
  int _7032 = _941;
  for (int _943 = _7031; _943 < _7032; ++_943)
  {
    {
      _ptr__942[((_941 - _943) - (int)1)] = safe_mul( _ptr__942[(_941 - _943)],_ptr__938[(_941 - _943)] );
    }
  }
  int _944 = _ptr__938[(int)0];
  int _7033 = (int)1;
  int _7034 = (int)((_938)->size(0));
  for (int _945 = _7033; _945 < _7034; ++_945)
  {
    {
      _944 *= _ptr__938[_945];
    }
  }
  int _946 = (int)1;
  int _7035 = (int)0;
  int _7036 = _939;
  for (int _947 = _7035; _947 < _7036; ++_947)
  {
    {
      _946 *= _ptr__938[_947];
    }
  }
  int _948 = (int)1;
  int _7037 = safe_add( _939,(int)1 );
  int _7038 = _941;
  for (int _949 = _7037; _949 < _7038; ++_949)
  {
    {
      _948 *= _ptr__938[_949];
    }
  }
  int _950 = safe_mul( _946,_948 );
  if ((((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InQCone) && (_940 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_940 < (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_940 != (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_940 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_940 != (int)3)) || ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_940 < (int)2))))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));
    }
  }
  {}
  int _951 = natvarmap_alloc(_944);
  int _952 = natconemap_alloc(_950);
  ((*natvarmap_type)(_951)) = safe_add( _952,(int)6 );
  std::shared_ptr< monty::ndarray< int,1 > > _953 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_951))));
  _checked_ptr_1<int> _ptr__953(_953 ? _953->raw() : nullptr,_953 ? _953->size(0) : 0);
  natvarmap->get(_951,_953,(int)0);
  int _7039 = (int)0;
  int _7040 = _944;
  for (int _954 = _7039; _954 < _7040; ++_954)
  {
    {
      ((*natvarmap_idx)(_ptr__953[_954])) = _951;
    }
  }
  task_var_putboundlist_fr(_953);
  if (mosek::fusion::p_ConeDomain::_get_impl(_937)->int_flag)
  {
    {
      task_var_putintlist(_953);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _955 = _953;
  _checked_ptr_1<int> _ptr__955(_955 ? _955->raw() : nullptr,_955 ? _955->size(0) : 0);
  if ((_939 < ((int)((_938)->size(0)) - (int)1)))
  {
    {
      _955 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_953)->size(0)))));
      _ptr__955.update(_955 ? _955->raw() : nullptr, _955 ? _955->size(0) : 0);
      int _956 = (int)0;
      int _7041 = (int)0;
      int _7042 = _946;
      for (int _957 = _7041; _957 < _7042; ++_957)
      {
        {
          int _7043 = (int)0;
          int _7044 = _948;
          for (int _958 = _7043; _958 < _7044; ++_958)
          {
            {
              int _7045 = (int)0;
              int _7046 = _940;
              for (int _959 = _7045; _959 < _7046; ++_959)
              {
                {
                  _ptr__955[_956] = _ptr__953[safe_add( safe_mul( safe_add( safe_mul( _957,_940 ),_959 ),_948 ),_958 )];
                  ++ _956;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _960 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_950)));
  _checked_ptr_1<int> _ptr__960(_960 ? _960->raw() : nullptr,_960 ? _960->size(0) : 0);
  natconemap->get(_952,_960,(int)0);
  ((*natconemap_dim)(_952)) = _940;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_960,_940,_950,_955);
    }
  }
  else
  {
    {
      if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
      {
        {
          task_put_rquadcones(_960,_940,_950,_955);
        }
      }
      else
      {
        {
          if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPExpCone))
          {
            {
              task_put_pexpcones(_960,_940,_950,_955);
            }
          }
          else
          {
            {
              if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPPowCone))
              {
                {
                  std::vector<double> _7047;
                  for (int _961 = (int)0, _7048 = _950; _961 < _7048 ; ++_961)
                  {
                    _7047.push_back(mosek::fusion::p_ConeDomain::_get_impl(_937)->alpha);
                  }
                  auto _7049 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7047.size()),_7047.begin(),_7047.end()));
                  task_put_ppowcones(_960,_940,_950,_955,_7049);
                }
              }
              else
              {
                {
                  if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDExpCone))
                  {
                    {
                      task_put_dexpcones(_960,_940,_950,_955);
                    }
                  }
                  else
                  {
                    {
                      if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDPowCone))
                      {
                        {
                          std::vector<double> _7050;
                          for (int _962 = (int)0, _7051 = _950; _962 < _7051 ; ++_962)
                          {
                            _7050.push_back(mosek::fusion::p_ConeDomain::_get_impl(_937)->alpha);
                          }
                          auto _7052 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7050.size()),_7050.begin(),_7050.end()));
                          task_put_dpowcones(_960,_940,_950,_955,_7052);
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _7053 = (int)0;
  int _7054 = (int)((_960)->size(0));
  for (int _963 = _7053; _963 < _7054; ++_963)
  {
    {
      task_cone_name(_ptr__960[_963],::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__960[_963])->toString());
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _964 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_935,_951,_938,_953);
  ((*vars)(_951)) = (_964).as<::mosek::fusion::ModelVariable>();
  if (((int)((_935).size()) > (int)0))
  {
    {
      var_map->setItem(_935,_951);
    }
  }
  {}
  return (_964).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _965,std::shared_ptr< monty::ndarray< int,1 > > _966,monty::rc_ptr< ::mosek::fusion::LinearDomain > _967){
  _checked_ptr_1<int> _ptr__966(_966 ? _966->raw() : nullptr, _966 ? _966->size(0) : 0);
  if ((((int)((_965).size()) > (int)0) && hasVariable(_965)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_965)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7055;
  bool _7056 = (NULL != _966.get());
  if (_7056)
  {
    _7055 = _966;
  }
  else
  {
    _7055 = mosek::fusion::p_LinearDomain::_get_impl(_967)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _968 = _7055;
  _checked_ptr_1<int> _ptr__968(_968 ? _968->raw() : nullptr,_968 ? _968->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_967)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinearDomain::_get_impl(_967)->shape,_968))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _968.get()))
  {
    {
      _968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__968.update(_968 ? _968->raw() : nullptr, _968 ? _968->size(0) : 0);
    }
  }
  {}
  int _969 = (int)((_968)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _970 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_969)));
  _checked_ptr_1<int> _ptr__970(_970 ? _970->raw() : nullptr,_970 ? _970->size(0) : 0);
  if ((_969 > (int)0))
  {
    {
      _ptr__970[(_969 - (int)1)] = (int)1;
      int _7057 = (int)1;
      int _7058 = _969;
      for (int _971 = _7057; _971 < _7058; ++_971)
      {
        {
          _ptr__970[((_969 - _971) - (int)1)] = safe_mul( _ptr__970[(_969 - _971)],_ptr__968[(_969 - _971)] );
        }
      }
    }
  }
  {}
  int _972 = (int)1;
  int _7059 = (int)0;
  int _7060 = (int)((_968)->size(0));
  for (int _973 = _7059; _973 < _7060; ++_973)
  {
    {
      _972 *= _ptr__968[_973];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _974 = nullptr;
  _checked_ptr_1<long long> _ptr__974(_974 ? _974->raw() : nullptr,_974 ? _974->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _975 = nullptr;
  _checked_ptr_1<int> _ptr__975(_975 ? _975->raw() : nullptr,_975 ? _975->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_967)->empty)
  {
    {
      _974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
      _ptr__974.update(_974 ? _974->raw() : nullptr, _974 ? _974->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity)->size(1)) != _969))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int _976 = (int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity)->size(0));
      _974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_976)));
      _ptr__974.update(_974 ? _974->raw() : nullptr, _974 ? _974->size(0) : 0);
      {
        bool _977 = false;
        std::shared_ptr< monty::ndarray< int,2 > > _978 = mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity;
        int _7061 = (int)0;
        int _7062 = _976;
        for (int _979 = _7061; _979 < _7062; ++_979)
        {
          {
            int _7063 = (int)0;
            int _7064 = (int)((_978)->size(1));
            for (int _980 = _7063; _980 < _7064; ++_980)
            {
              {
                _977 = (_977 || ((((*_978)(_979,_980)) < (int)0) || (((*_978)(_979,_980)) >= _ptr__968[_980])));
              }
            }
            if ((!_977))
            {
              {
                long long _981 = (int)0;
                int _7065 = (int)0;
                int _7066 = (int)((_978)->size(1));
                for (int _982 = _7065; _982 < _7066; ++_982)
                {
                  {
                    _981 += safe_mul( _ptr__970[_982],((*_978)(_979,_982)) );
                  }
                }
                _ptr__974[_979] = _981;
              }
            }
            {}
          }
        }
        if (_977)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int,2 > > _983 = mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity;
      int _984 = (int)0;
      int _7067 = (int)0;
      int _7068 = _969;
      for (int _985 = _7067; _985 < _7068; ++_985)
      {
        {
          if ((_984 < _ptr__968[_985]))
          {
            {
              _984 = _ptr__968[_985];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _986 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_976)));
      _checked_ptr_1<int> _ptr__986(_986 ? _986->raw() : nullptr,_986 ? _986->size(0) : 0);
      int _7069 = (int)0;
      int _7070 = _976;
      for (int _987 = _7069; _987 < _7070; ++_987)
      {
        {
          _ptr__986[_987] = _987;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_976)));
      _checked_ptr_1<int> _ptr__988(_988 ? _988->raw() : nullptr,_988 ? _988->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _989 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _984,(int)1 ))));
      _checked_ptr_1<int> _ptr__989(_989 ? _989->raw() : nullptr,_989 ? _989->size(0) : 0);
      int _7071 = (int)0;
      int _7072 = _969;
      for (int _990 = _7071; _990 < _7072; ++_990)
      {
        {
          {
            int _991 = ((_969 - _990) - (int)1);
            int _7073 = (int)0;
            int _7074 = safe_add( _ptr__968[_991],(int)1 );
            for (int _992 = _7073; _992 < _7074; ++_992)
            {
              {
                _ptr__989[_992] = (int)0;
              }
            }
            int _7075 = (int)0;
            int _7076 = _976;
            for (int _993 = _7075; _993 < _7076; ++_993)
            {
              {
                ++ _ptr__989[safe_add( ((*_983)(_993,_991)),(int)1 )];
              }
            }
            int _7077 = (int)0;
            int _7078 = _ptr__968[_991];
            for (int _994 = _7077; _994 < _7078; ++_994)
            {
              {
                _ptr__989[safe_add( _994,(int)1 )] += _ptr__989[_994];
              }
            }
            int _7079 = (int)0;
            int _7080 = _976;
            for (int _995 = _7079; _995 < _7080; ++_995)
            {
              {
                int _996 = _ptr__986[_995];
                _ptr__988[_ptr__989[((*_983)(_996,_991))]] = _996;
                ++ _ptr__989[((*_983)(_996,_991))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _997 = _986;
          _checked_ptr_1<int> _ptr__997(_997 ? _997->raw() : nullptr,_997 ? _997->size(0) : 0);
          _986 = _988;
          _ptr__986.update(_986 ? _986->raw() : nullptr, _986 ? _986->size(0) : 0);
          _988 = _997;
          _ptr__988.update(_988 ? _988->raw() : nullptr, _988 ? _988->size(0) : 0);
        }
      }
      int _7081 = (int)0;
      int _7082 = _976;
      for (int _998 = _7081; _998 < _7082; ++_998)
      {
        {
          int _999 = _ptr__986[_998];
          long long _1000 = (int)0;
          int _7083 = (int)0;
          int _7084 = _969;
          for (int _1001 = _7083; _1001 < _7084; ++_1001)
          {
            {
              _1000 += safe_mul( _ptr__970[_1001],((*_983)(_999,_1001)) );
            }
          }
          _ptr__974[_998] = _1000;
        }
      }
    }
  }
  {}
  int _7085;
  bool _7086 = (NULL != _974.get());
  if (_7086)
  {
    _7085 = (int)((_974)->size(0));
  }
  else
  {
    _7085 = _972;
  }
  int _1002 = _7085;
  std::shared_ptr< monty::ndarray< double,1 > > _1003 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1002)));
  _checked_ptr_1<double> _ptr__1003(_1003 ? _1003->raw() : nullptr,_1003 ? _1003->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd)->size(0)) == (int)1))
      {
        {
          int _7087 = (int)0;
          int _7088 = _1002;
          for (int _1004 = _7087; _1004 < _7088; ++_1004)
          {
            {
              _ptr__1003[_1004] = ((*mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd)->size(0)) == _1002))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd,(int)0,_1003,(int)0,_1002);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  int _1005 = natvarmap_alloc(_1002);
  std::shared_ptr< monty::ndarray< int,1 > > _1006 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1005))));
  _checked_ptr_1<int> _ptr__1006(_1006 ? _1006->raw() : nullptr,_1006 ? _1006->size(0) : 0);
  natvarmap->get(_1005,_1006,(int)0);
  int _7089 = (int)0;
  int _7090 = _1002;
  for (int _1007 = _7089; _1007 < _7090; ++_1007)
  {
    {
      ((*natvarmap_idx)(_ptr__1006[_1007])) = _1005;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1006);
      ((*natvarmap_type)(_1005)) = (int)1;
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1006,_1003);
      ((*natvarmap_type)(_1005)) = (int)3;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1006,_1003);
      ((*natvarmap_type)(_1005)) = (int)2;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1006,_1003);
      ((*natvarmap_type)(_1005)) = (int)5;
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1008 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_965,(long long)(_1005),_968,_974,_1006);
  if (mosek::fusion::p_LinearDomain::_get_impl(_967)->cardinal_flag)
  {
    {
      task_var_putintlist(_1006);
    }
  }
  {}
  ((*vars)(_1005)) = (_1008).as<::mosek::fusion::ModelVariable>();
  if (((int)((_965).size()) > (int)0))
  {
    {
      var_map->setItem(_965,_1005);
    }
  }
  {}
  return (_1008).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1009,std::shared_ptr< monty::ndarray< int,1 > > _1010,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1011){
  _checked_ptr_1<int> _ptr__1010(_1010 ? _1010->raw() : nullptr, _1010 ? _1010->size(0) : 0);
  if ((((int)((_1009).size()) > (int)0) && hasVariable(_1009)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1009)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7091;
  bool _7092 = (NULL != _1010.get());
  if (_7092)
  {
    _7091 = _1010;
  }
  else
  {
    _7091 = mosek::fusion::p_LinPSDDomain::_get_impl(_1011)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1012 = _7091;
  _checked_ptr_1<int> _ptr__1012(_1012 ? _1012->raw() : nullptr,_1012 ? _1012->size(0) : 0);
  if ((NULL == _1012.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  else if((!::mosek::fusion::p_Set::match(mosek::fusion::p_LinPSDDomain::_get_impl(_1011)->shape,_1012)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  int _1013 = (int)((_1012)->size(0));
  int _1014 = mosek::fusion::p_LinPSDDomain::_get_impl(_1011)->conedim;
  if (((_1014 < (int)0) || (_1014 >= _1013)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone direction dimension"));
    }
  }
  {}
  int _1015 = _ptr__1012[_1014];
  int _1016 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1015 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1016,safe_add( _1016,(int)1 ) ) / (int)2) != _1015))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1017 = (int)1;
  int _1018 = _ptr__1012[_1014];
  int _1019 = (int)1;
  int _7093 = (int)0;
  int _7094 = _1014;
  for (int _1020 = _7093; _1020 < _7094; ++_1020)
  {
    {
      _1019 *= _ptr__1012[_1020];
    }
  }
  int _7095 = safe_add( _1014,(int)1 );
  int _7096 = _1013;
  for (int _1021 = _7095; _1021 < _7096; ++_1021)
  {
    {
      _1017 *= _ptr__1012[_1021];
    }
  }
  int _1022 = safe_mul( _1019,_1017 );
  int _1023 = safe_mul( _1022,_1015 );
  int _1024 = natbarvarmap_alloc(_1022,_1016);
  std::shared_ptr< monty::ndarray< int,1 > > _1025 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1023)));
  _checked_ptr_1<int> _ptr__1025(_1025 ? _1025->raw() : nullptr,_1025 ? _1025->size(0) : 0);
  natbarvarmap_get(_1024,_1025);
  std::shared_ptr< monty::ndarray< long long,1 > > _1026 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1022,_1018 ))));
  _checked_ptr_1<long long> _ptr__1026(_1026 ? _1026->raw() : nullptr,_1026 ? _1026->size(0) : 0);
  {
    int _1027 = (int)0;
    int _7097 = (int)0;
    int _7098 = _1019;
    for (int _1028 = _7097; _1028 < _7098; ++_1028)
    {
      {
        int _7099 = (int)0;
        int _7100 = _1018;
        for (int _1029 = _7099; _1029 < _7100; ++_1029)
        {
          {
            int _7101 = (int)0;
            int _7102 = safe_add( _1029,(int)1 );
            for (int _1030 = _7101; _1030 < _7102; ++_1030)
            {
              {
                int _7103 = (int)0;
                int _7104 = _1017;
                for (int _1031 = _7103; _1031 < _7104; ++_1031)
                {
                  {
                    _ptr__1026[_1027] = safe_add( ((*natbarvar_ptr)(safe_add( safe_mul( _1028,_1017 ),_1031 ))),safe_add( (safe_mul( _1029,((safe_mul( (int)2,_1016 ) - _1029) - (int)1) ) / (int)2),_1030 ) );
                    ++ _1027;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1032 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::Model::t(_pubthis),_1009,_1024,_1012,_1014,_1026);
  ((*barvars)(_1024)) = (_1032).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1009).size()) > (int)0))
  {
    {
      var_map->setItem(_1009,(-safe_add( _1024,(int)1 )));
    }
  }
  {}
  return (_1032).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1033,std::shared_ptr< monty::ndarray< int,1 > > _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035){
  _checked_ptr_1<int> _ptr__1034(_1034 ? _1034->raw() : nullptr, _1034 ? _1034->size(0) : 0);
  if ((((int)((_1033).size()) > (int)0) && hasVariable(_1033)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1033)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1036 = _1034;
  _checked_ptr_1<int> _ptr__1036(_1036 ? _1036->raw() : nullptr,_1036 ? _1036->size(0) : 0);
  if ((NULL == _1036.get()))
  {
    {
      _1036 = mosek::fusion::p_PSDDomain::_get_impl(_1035)->shape;
      _ptr__1036.update(_1036 ? _1036->raw() : nullptr, _1036 ? _1036->size(0) : 0);
    }
  }
  {}
  if ((NULL == _1036.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  {}
  int _1037 = mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim1;
  int _1038 = mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim2;
  int _1039 = (int)((_1036)->size(0));
  int _1040 = _ptr__1036[_1037];
  if ((_1037 > _1038))
  {
    {
      int _1041 = _1037;
      _1037 = _1038;
      _1038 = _1041;
    }
  }
  {}
  if (((_1037 == _1038) || ((_1037 < (int)0) || (_1038 >= _1039))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1036[_1037] != _ptr__1036[_1038]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int _1042 = (int)1;
  int _7105 = (int)0;
  int _7106 = _1037;
  for (int _1043 = _7105; _1043 < _7106; ++_1043)
  {
    {
      _1042 *= _ptr__1036[_1043];
    }
  }
  int _7107 = safe_add( _1037,(int)1 );
  int _7108 = _1038;
  for (int _1044 = _7107; _1044 < _7108; ++_1044)
  {
    {
      _1042 *= _ptr__1036[_1044];
    }
  }
  int _7109 = safe_add( _1038,(int)1 );
  int _7110 = _1039;
  for (int _1045 = _7109; _1045 < _7110; ++_1045)
  {
    {
      _1042 *= _ptr__1036[_1045];
    }
  }
  int _1046 = (safe_mul( safe_mul( _1042,_1040 ),safe_add( _1040,(int)1 ) ) / (int)2);
  int _1047 = natbarvarmap_alloc(_1042,_1040);
  std::shared_ptr< monty::ndarray< long long,1 > > _1048 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1046)));
  _checked_ptr_1<long long> _ptr__1048(_1048 ? _1048->raw() : nullptr,_1048 ? _1048->size(0) : 0);
  natbarvar_get(_1047,_1048);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1049 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1033,_1047,_1036,mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim2,_1048);
  ((*barvars)(_1047)) = (_1049).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1033).size()) > (int)0))
  {
    {
      var_map->setItem(_1033,(-safe_add( _1047,(int)1 )));
    }
  }
  {}
  return (_1049).as<::mosek::fusion::SymmetricVariable>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1050,monty::rc_ptr< ::mosek::fusion::Expression > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052){
  if ((((int)((_1050).size()) > (int)0) && hasConstraint(_1050)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1050)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1052)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1053 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1051)).as<::mosek::fusion::Expression>());
  _1053->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1054 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1054(_1054 ? _1054->raw() : nullptr,_1054 ? _1054->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1055 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1055(_1055 ? _1055->raw() : nullptr,_1055 ? _1055->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1056 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1056(_1056 ? _1056->raw() : nullptr,_1056 ? _1056->size(0) : 0);
  int _1057 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1058 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1059 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1060 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1061 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1062 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1063 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1064 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1065 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1052)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1052)->shape)->size(0)) != _1057))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int _7111 = (int)0;
          int _7112 = _1057;
          for (int _1066 = _7111; _1066 < _7112; ++_1066)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1052)->shape)(_1066)) != _ptr__1054[safe_add( _1058,_1066 )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int _1067 = (int)1;
  int _7113 = (int)0;
  int _7114 = _1057;
  for (int _1068 = _7113; _1068 < _7114; ++_1068)
  {
    {
      _1067 *= _ptr__1054[safe_add( _1058,_1068 )];
    }
  }
  int _1069 = natconmap_alloc(_1067);
  std::shared_ptr< monty::ndarray< int,1 > > _1070 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1067)));
  _checked_ptr_1<int> _ptr__1070(_1070 ? _1070->raw() : nullptr,_1070 ? _1070->size(0) : 0);
  natconmap->get(_1069,_1070,(int)0);
  int _7115 = (int)0;
  int _7116 = _1067;
  for (int _1071 = _7115; _1071 < _7116; ++_1071)
  {
    {
      ((*natconmap_idx)(_ptr__1070[_1071])) = _1069;
      ((*natconmap_slackidx)(_ptr__1070[_1071])) = (int)0;
    }
  }
  ((*natconmap_type)(_1069)) = (int)4;
  putarows(_1070,rs,_1059,_1060,_1062,_1063,_1065,_1064,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1072 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1067)));
  _checked_ptr_1<double> _ptr__1072(_1072 ? _1072->raw() : nullptr,_1072 ? _1072->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1073 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1067)));
  _checked_ptr_1<double> _ptr__1073(_1073 ? _1073->raw() : nullptr,_1073 ? _1073->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1074 = natconmap_efix;
  _checked_ptr_1<double> _ptr__1074(_1074 ? _1074->raw() : nullptr,_1074 ? _1074->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1075 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->lb;
  _checked_ptr_1<double> _ptr__1075(_1075 ? _1075->raw() : nullptr,_1075 ? _1075->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1076 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->ub;
  _checked_ptr_1<double> _ptr__1076(_1076 ? _1076->raw() : nullptr,_1076 ? _1076->size(0) : 0);
  bool _1077 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->empty;
  bool _1078 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->scalable;
  std::shared_ptr< monty::ndarray< int,2 > > _1079 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->sparsity;
  {
    int _7117 = (int)0;
    int _7118 = _1059;
    for (int _1080 = _7117; _1080 < _7118; ++_1080)
    {
      {
        _ptr__1074[_ptr__1070[_1080]] = _ptr__1056[safe_add( _1064,_1080 )];
      }
    }
    if (_1078)
    {
      {
        int _7119 = (int)0;
        int _7120 = _1067;
        for (int _1081 = _7119; _1081 < _7120; ++_1081)
        {
          {
            _ptr__1072[_1081] = _ptr__1075[(int)0];
            _ptr__1073[_1081] = _ptr__1076[(int)0];
          }
        }
      }
    }
    else if(_1077)
    {
      {
      }
    }
    else if((NULL != _1079.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1082 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1057)));
        _checked_ptr_1<int> _ptr__1082(_1082 ? _1082->raw() : nullptr,_1082 ? _1082->size(0) : 0);
        _ptr__1082[(_1057 - (int)1)] = (int)1;
        int _7121 = (int)1;
        int _7122 = _1057;
        for (int _1083 = _7121; _1083 < _7122; ++_1083)
        {
          {
            _ptr__1082[((_1057 - _1083) - (int)1)] = safe_mul( _ptr__1082[(_1057 - _1083)],_ptr__1054[(safe_add( _1058,_1057 ) - _1083)] );
          }
        }
        int _7123 = (int)0;
        int _7124 = (int)((_1075)->size(0));
        for (int _1084 = _7123; _1084 < _7124; ++_1084)
        {
          {
            int _1085 = (int)0;
            int _7125 = (int)0;
            int _7126 = _1057;
            for (int _1086 = _7125; _1086 < _7126; ++_1086)
            {
              {
                _1085 += safe_mul( _ptr__1082[_1086],((*_1079)(_1084,_1086)) );
              }
            }
            _ptr__1072[_1085] = _ptr__1075[_1084];
            _ptr__1073[_1085] = _ptr__1076[_1084];
          }
        }
      }
    }
    else
    {
      {
        int _7127 = (int)0;
        int _7128 = _1067;
        for (int _1087 = _7127; _1087 < _7128; ++_1087)
        {
          {
            _ptr__1072[_1087] = _ptr__1075[_1087];
            _ptr__1073[_1087] = _ptr__1076[_1087];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1070,_1072,_1073);
  std::vector<int> _7129;
  for (int _1089 = (int)0, _7130 = _1057; _1089 < _7130 ; ++_1089)
  {
    _7129.push_back(_ptr__1054[safe_add( _1058,_1089 )]);
  }
  auto _7131 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7129.size()),_7129.begin(),_7129.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1088 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1050,_7131,_1070);
  ((*cons)(_1069)) = (_1088).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1050).size()) > (int)0))
  {
    {
      con_map->setItem(_1050,_1069);
    }
  }
  {}
  return (_1088).as<::mosek::fusion::Constraint>();
}
void mosek::fusion::p_Model::update_bfix(std::shared_ptr< monty::ndarray< int,1 > > _1090,std::shared_ptr< monty::ndarray< double,1 > > _1091){
  _checked_ptr_1<int> _ptr__1090(_1090 ? _1090->raw() : nullptr, _1090 ? _1090->size(0) : 0);
  _checked_ptr_1<double> _ptr__1091(_1091 ? _1091->raw() : nullptr, _1091 ? _1091->size(0) : 0);
  std::vector<int> _7132;
  for (int _1092 = (int)0, _7133 = (int)((_1090)->size(0)); _1092 < _7133 ; ++_1092)
  {
    _7132.push_back((int)0);
  }
  auto _7134 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7132.size()),_7132.begin(),_7132.end()));
  task_putaijlist(_1090,_7134,_1091,(long long)((int)((_1090)->size(0))));
}
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int,1 > > _1093,monty::rc_ptr< ::mosek::fusion::WorkStack > _1094,int _1095,int _1096,int _1097,int _1098,int _1099,int _1100,std::shared_ptr< monty::ndarray< int,1 > > _1101){
  _checked_ptr_1<int> _ptr__1093(_1093 ? _1093->raw() : nullptr, _1093 ? _1093->size(0) : 0);
  _checked_ptr_1<int> _ptr__1101(_1101 ? _1101->raw() : nullptr, _1101 ? _1101->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1102 = mosek::fusion::p_WorkStack::_get_impl(_1094)->i32;
  _checked_ptr_1<int> _ptr__1102(_1102 ? _1102->raw() : nullptr,_1102 ? _1102->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1103 = mosek::fusion::p_WorkStack::_get_impl(_1094)->i64;
  _checked_ptr_1<long long> _ptr__1103(_1103 ? _1103->raw() : nullptr,_1103 ? _1103->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1104 = mosek::fusion::p_WorkStack::_get_impl(_1094)->f64;
  _checked_ptr_1<double> _ptr__1104(_1104 ? _1104->raw() : nullptr,_1104 ? _1104->size(0) : 0);
  int _1105 = (int)0;
  int _1106 = (int)0;
  int _1107 = (int)0;
  int _7135 = (int)0;
  int _7136 = _1095;
  for (int _1108 = _7135; _1108 < _7136; ++_1108)
  {
    {
      int _1109 = _ptr__1102[safe_add( _1097,_1108 )];
      int _1110 = _ptr__1102[safe_add( safe_add( _1097,_1108 ),(int)1 )];
      int _1111 = _1109;
      while ( ((_1111 < _1110) && (_ptr__1103[safe_add( _1098,_1111 )] < (int)0)) )
      {
        {
          int _1112 = ((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1098,_1111 )],(int)1 ))));
          int _1113 = _1111;
          ++ _1111;
          while ( ((_1111 < _1110) && ((_ptr__1103[safe_add( _1098,_1111 )] < (int)0) && (_1112 == ((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1098,_1111 )],(int)1 ))))))) )
          {
            {
              ++ _1111;
            }
          }
          ++ _1106;
        }
      }
      _1107 += (_1111 - _1109);
      _1105 += (_1110 - _1111);
    }
  }
  _1105 += _1095;
  if ((NULL != _1101.get()))
  {
    {
      _1105 += _1095;
    }
  }
  {}
  int _1114 = (int)((_1093)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1115 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1114,(int)1 ))));
  _checked_ptr_1<long long> _ptr__1115(_1115 ? _1115->raw() : nullptr,_1115 ? _1115->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1116 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1105)));
  _checked_ptr_1<int> _ptr__1116(_1116 ? _1116->raw() : nullptr,_1116 ? _1116->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1117 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1105)));
  _checked_ptr_1<double> _ptr__1117(_1117 ? _1117->raw() : nullptr,_1117 ? _1117->size(0) : 0);
  if ((NULL != _1101.get()))
  {
    {
      int _1118 = (int)0;
      int _7137 = (int)0;
      int _7138 = _1095;
      for (int _1119 = _7137; _1119 < _7138; ++_1119)
      {
        {
          int _1120 = (int)0;
          _ptr__1116[safe_add( _1118,_1120 )] = bfixidx;
          _ptr__1117[safe_add( _1118,_1120 )] = _ptr__1104[safe_add( _1100,_1119 )];
          ++ _1120;
          int _7139 = _ptr__1102[safe_add( _1097,_1119 )];
          int _7140 = _ptr__1102[safe_add( safe_add( _1097,_1119 ),(int)1 )];
          for (int _1121 = _7139; _1121 < _7140; ++_1121)
          {
            {
              if ((_ptr__1103[safe_add( _1098,_1121 )] > (int)0))
              {
                {
                  _ptr__1116[safe_add( _1118,_1120 )] = (int)(_ptr__1103[safe_add( _1098,_1121 )] - (int)1);
                  _ptr__1117[safe_add( _1118,_1120 )] = _ptr__1104[safe_add( _1099,_1121 )];
                  ++ _1120;
                }
              }
              {}
            }
          }
          _ptr__1116[safe_add( _1118,_1120 )] = _ptr__1101[_1119];
          _ptr__1117[safe_add( _1118,_1120 )] = (-1.0);
          ++ _1120;
          _ptr__1115[safe_add( _1119,(int)1 )] = safe_add( _ptr__1115[_1119],_1120 );
          _1118 += _1120;
        }
      }
    }
  }
  else
  {
    {
      int _1122 = (int)0;
      int _7141 = (int)0;
      int _7142 = _1095;
      for (int _1123 = _7141; _1123 < _7142; ++_1123)
      {
        {
          int _1124 = (int)0;
          _ptr__1116[safe_add( _1122,_1124 )] = bfixidx;
          _ptr__1117[safe_add( _1122,_1124 )] = _ptr__1104[safe_add( _1100,_1123 )];
          ++ _1124;
          int _7143 = _ptr__1102[safe_add( _1097,_1123 )];
          int _7144 = _ptr__1102[safe_add( safe_add( _1097,_1123 ),(int)1 )];
          for (int _1125 = _7143; _1125 < _7144; ++_1125)
          {
            {
              if ((_ptr__1103[safe_add( _1098,_1125 )] > (int)0))
              {
                {
                  _ptr__1116[safe_add( _1122,_1124 )] = (int)(_ptr__1103[safe_add( _1098,_1125 )] - (int)1);
                  _ptr__1117[safe_add( _1122,_1124 )] = _ptr__1104[safe_add( _1099,_1125 )];
                  ++ _1124;
                }
              }
              {}
            }
          }
          _ptr__1115[safe_add( _1123,(int)1 )] = safe_add( _ptr__1115[_1123],_1124 );
          _1122 += _1124;
        }
      }
    }
  }
  task_putarowlist(_1093,_1115,_1116,_1117);
  if ((_1106 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1126 = _1093;
      _checked_ptr_1<int> _ptr__1126(_1126 ? _1126->raw() : nullptr,_1126 ? _1126->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1127 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1114,(int)1 ))));
      _checked_ptr_1<long long> _ptr__1127(_1127 ? _1127->raw() : nullptr,_1127 ? _1127->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1128 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1106)));
      _checked_ptr_1<int> _ptr__1128(_1128 ? _1128->raw() : nullptr,_1128 ? _1128->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1129 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1106)));
      _checked_ptr_1<int> _ptr__1129(_1129 ? _1129->raw() : nullptr,_1129 ? _1129->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1130 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1106)));
      _checked_ptr_1<long long> _ptr__1130(_1130 ? _1130->raw() : nullptr,_1130 ? _1130->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1131 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1107)));
      _checked_ptr_1<int> _ptr__1131(_1131 ? _1131->raw() : nullptr,_1131 ? _1131->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1132 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1107)));
      _checked_ptr_1<int> _ptr__1132(_1132 ? _1132->raw() : nullptr,_1132 ? _1132->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1133 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1107)));
      _checked_ptr_1<double> _ptr__1133(_1133 ? _1133->raw() : nullptr,_1133 ? _1133->size(0) : 0);
      int _1134 = (int)0;
      int _1135 = (int)0;
      int _7145 = (int)0;
      int _7146 = _1114;
      for (int _1136 = _7145; _1136 < _7146; ++_1136)
      {
        {
          int _1137 = _ptr__1102[safe_add( _1097,_1136 )];
          int _1138 = _ptr__1102[safe_add( safe_add( _1097,_1136 ),(int)1 )];
          while ( ((_1137 < _1138) && (_ptr__1103[safe_add( _1098,_1137 )] < (int)0)) )
          {
            {
              int _1139 = _1137;
              int _1140 = ((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1098,_1137 )],(int)1 ))));
              while ( ((_1137 < _1138) && ((_ptr__1103[safe_add( _1098,_1137 )] < (int)0) && (((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1098,_1137 )],(int)1 )))) == _1140))) )
              {
                {
                  _ptr__1131[_1135] = ((*natbarvar_i)((-safe_add( _ptr__1103[safe_add( _1098,_1137 )],(int)1 ))));
                  _ptr__1132[_1135] = ((*natbarvar_j)((-safe_add( _ptr__1103[safe_add( _1098,_1137 )],(int)1 ))));
                  if ((_ptr__1131[_1135] == _ptr__1132[_1135]))
                  {
                    {
                      _ptr__1133[_1135] = _ptr__1104[safe_add( _1099,_1137 )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1133[_1135] = (0.5 * _ptr__1104[safe_add( _1099,_1137 )]);
                    }
                  }
                  ++ _1135;
                  ++ _1137;
                }
              }
              _ptr__1128[_1134] = _1140;
              _ptr__1129[_1134] = ((*natbarvar_dim)(_1140));
              _ptr__1130[_1134] = (_1137 - _1139);
              ++ _1134;
            }
          }
          _1137 = _1138;
          _ptr__1127[safe_add( _1136,(int)1 )] = _1134;
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1141 = task_appendsymmatlist(_1129,_1130,_1131,_1132,_1133);
      _checked_ptr_1<long long> _ptr__1141(_1141 ? _1141->raw() : nullptr,_1141 ? _1141->size(0) : 0);
      task_putbararowlist(_1126,_1127,_1128,_1141);
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1142,monty::rc_ptr< ::mosek::fusion::Expression > _1143,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1144){
  std::shared_ptr< monty::ndarray< int,1 > > _1145 = _1143->getShape();
  _checked_ptr_1<int> _ptr__1145(_1145 ? _1145->raw() : nullptr,_1145 ? _1145->size(0) : 0);
  if (((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1144)->shape.get()) && (!::mosek::fusion::p_Set::match(_1145,mosek::fusion::p_PSDDomain::_get_impl(_1144)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  bool _1146;
  int _1147;
  int _1148;
  if (mosek::fusion::p_PSDDomain::_get_impl(_1144)->axisIsSet)
  {
    {
      _1146 = (mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim2);
      int _7147;
      bool _7148 = _1146;
      if (_7148)
      {
        _7147 = mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim1;
      }
      else
      {
        _7147 = mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim2;
      }
      _1148 = _7147;
      int _7149;
      bool _7150 = _1146;
      if (_7150)
      {
        _7149 = mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim2;
      }
      else
      {
        _7149 = mosek::fusion::p_PSDDomain::_get_impl(_1144)->conedim1;
      }
      _1147 = _7149;
    }
  }
  else
  {
    {
      _1146 = true;
      _1148 = ((int)((_1145)->size(0)) - (int)2);
      _1147 = ((int)((_1145)->size(0)) - (int)1);
    }
  }
  if (((_1147 >= (int)((_1145)->size(0))) || (_ptr__1145[_1148] != _ptr__1145[_1147])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Expression > _7151;
  bool _7152 = (mosek::fusion::p_PSDDomain::_get_impl(_1144)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_7152)
  {
    _7151 = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1148,_1147,_1143).as<::mosek::fusion::Expression>();
  }
  else
  {
    _7151 = _1143;
  }
  monty::rc_ptr< ::mosek::fusion::ExprCompress > _1149 = ::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1148,_1147,_7151)).as<::mosek::fusion::Expression>());
  _1149->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1150 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1150(_1150 ? _1150->raw() : nullptr,_1150 ? _1150->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1151 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1151(_1151 ? _1151->raw() : nullptr,_1151 ? _1151->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1152 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1152(_1152 ? _1152->raw() : nullptr,_1152 ? _1152->size(0) : 0);
  int _1153 = rs->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _1154 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1153)));
  _checked_ptr_1<int> _ptr__1154(_1154 ? _1154->raw() : nullptr,_1154 ? _1154->size(0) : 0);
  rs->popi32(_1153,_1154,(int)0);
  int _1155 = rs->popi32();
  int _1156 = rs->popi32();
  bool _1157 = (rs->popi32() != (int)0);
  int _1158 = rs->popi32(safe_add( _1155,(int)1 ));
  int _7153;
  bool _7154 = _1157;
  if (_7154)
  {
    _7153 = rs->popi64(_1155);
  }
  else
  {
    _7153 = (-(int)99999);
  }
  int _1159 = _7153;
  int _1160 = rs->popi64(_1156);
  int _1161 = rs->popf64(_1155);
  int _1162 = rs->popf64(_1156);
  int _1163 = _ptr__1154[_1147];
  int _1164 = (safe_mul( _1163,safe_add( _1163,(int)1 ) ) / (int)2);
  int _7155 = (int)0;
  int _7156 = _1153;
  for (int _1165 = _7155; _1165 < _7156; ++_1165)
  {
    {
      if (((_1165 != _1148) && (_1165 != _1147)))
      {
        {
          _1164 *= _ptr__1154[_1165];
        }
      }
      {}
    }
  }
  int _1166 = natconmap_alloc(_1164);
  std::shared_ptr< monty::ndarray< int,1 > > _1167 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1164)));
  _checked_ptr_1<int> _ptr__1167(_1167 ? _1167->raw() : nullptr,_1167 ? _1167->size(0) : 0);
  natconmap->get(_1166,_1167,(int)0);
  putarows(_1167,rs,_1155,_1156,_1158,_1160,_1162,_1161,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< int,1 > > _1168 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__1168(_1168 ? _1168->raw() : nullptr,_1168 ? _1168->size(0) : 0);
  int _7157 = (int)0;
  int _7158 = _1148;
  for (int _1169 = _7157; _1169 < _7158; ++_1169)
  {
    {
      _ptr__1168[(int)0] *= _ptr__1154[_1169];
    }
  }
  _ptr__1168[(int)1] = _ptr__1154[_1148];
  int _7159 = safe_add( _1148,(int)1 );
  int _7160 = _1147;
  for (int _1170 = _7159; _1170 < _7160; ++_1170)
  {
    {
      _ptr__1168[(int)2] *= _ptr__1154[_1170];
    }
  }
  _ptr__1168[(int)3] = _ptr__1154[_1147];
  int _7161 = safe_add( _1147,(int)1 );
  int _7162 = _1153;
  for (int _1171 = _7161; _1171 < _7162; ++_1171)
  {
    {
      _ptr__1168[(int)4] *= _ptr__1154[_1171];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1172 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__1172(_1172 ? _1172->raw() : nullptr,_1172 ? _1172->size(0) : 0);
  _ptr__1172[(int)4] = (int)1;
  int _7163 = (int)1;
  int _7164 = (int)5;
  for (int _1173 = _7163; _1173 < _7164; ++_1173)
  {
    {
      _ptr__1172[(((int)5 - _1173) - (int)1)] = safe_mul( _ptr__1172[((int)5 - _1173)],_ptr__1168[((int)5 - _1173)] );
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1174 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1164)));
  _checked_ptr_1<double> _ptr__1174(_1174 ? _1174->raw() : nullptr,_1174 ? _1174->size(0) : 0);
  if ((_1159 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Unexpected case!"));
    }
  }
  else
  {
    {
      int _7165 = (int)0;
      int _7166 = _1155;
      for (int _1175 = _7165; _1175 < _7166; ++_1175)
      {
        {
          ((*natconmap_efix)(_ptr__1167[_1175])) = _ptr__1152[safe_add( _1161,_1175 )];
          ((*natconmap_lb)(_ptr__1167[_1175])) = (int)0;
          ((*natconmap_ub)(_ptr__1167[_1175])) = (int)0;
          _ptr__1174[_1175] = 0.0;
        }
      }
    }
  }
  task_con_putboundlist_fx(_1167,_1174);
  int _1176 = safe_mul( safe_mul( _ptr__1168[(int)0],_ptr__1168[(int)2] ),_ptr__1168[(int)4] );
  int _1177 = _ptr__1168[(int)1];
  int _1178 = natbarvarmap_alloc(_1176,_1177);
  std::shared_ptr< monty::ndarray< int,1 > > _1179 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1176)));
  _checked_ptr_1<int> _ptr__1179(_1179 ? _1179->raw() : nullptr,_1179 ? _1179->size(0) : 0);
  natbarvarmap_get(_1178,_1179);
  std::vector<int> _7167;
  for (int _1181 = (int)0, _7168 = (safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2); _1181 < _7168 ; ++_1181)
  {
    _7167.push_back(_1177);
  }
  auto _7169 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7167.size()),_7167.begin(),_7167.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1180 = _7169;
  _checked_ptr_1<int> _ptr__1180(_1180 ? _1180->raw() : nullptr,_1180 ? _1180->size(0) : 0);
  std::vector<long long> _7170;
  for (int _1183 = (int)0, _7171 = (safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2); _1183 < _7171 ; ++_1183)
  {
    _7170.push_back((int)1);
  }
  auto _7172 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7170.size()),_7170.begin(),_7170.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1182 = _7172;
  _checked_ptr_1<long long> _ptr__1182(_1182 ? _1182->raw() : nullptr,_1182 ? _1182->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1184 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1184(_1184 ? _1184->raw() : nullptr,_1184 ? _1184->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1185 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1185(_1185 ? _1185->raw() : nullptr,_1185 ? _1185->size(0) : 0);
  std::vector<double> _7173;
  for (int _1187 = (int)0, _7174 = (safe_mul( _1177,safe_add( _1177,(int)1 ) ) / (int)2); _1187 < _7174 ; ++_1187)
  {
    _7173.push_back((-0.5));
  }
  auto _7175 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7173.size()),_7173.begin(),_7173.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1186 = _7175;
  _checked_ptr_1<double> _ptr__1186(_1186 ? _1186->raw() : nullptr,_1186 ? _1186->size(0) : 0);
  int _7176 = (int)1;
  int _7177 = safe_add( _1177,(int)1 );
  for (int _1188 = _7176; _1188 < _7177; ++_1188)
  {
    {
      _ptr__1186[((safe_mul( _1188,safe_add( _1188,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  {
    int _1189 = (int)0;
    int _7178 = (int)0;
    int _7179 = _1177;
    for (int _1190 = _7178; _1190 < _7179; ++_1190)
    {
      {
        int _7180 = (int)0;
        int _7181 = safe_add( _1190,(int)1 );
        for (int _1191 = _7180; _1191 < _7181; ++_1191)
        {
          {
            _ptr__1184[_1189] = _1190;
            _ptr__1185[_1189] = _1191;
            ++ _1189;
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1192 = task_appendsymmatlist(_1180,_1182,_1184,_1185,_1186);
  _checked_ptr_1<long long> _ptr__1192(_1192 ? _1192->raw() : nullptr,_1192 ? _1192->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1193 = _1167;
  _checked_ptr_1<int> _ptr__1193(_1193 ? _1193->raw() : nullptr,_1193 ? _1193->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1194 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1164)));
  _checked_ptr_1<int> _ptr__1194(_1194 ? _1194->raw() : nullptr,_1194 ? _1194->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1195 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1164)));
  _checked_ptr_1<long long> _ptr__1195(_1195 ? _1195->raw() : nullptr,_1195 ? _1195->size(0) : 0);
  {
    int _1196 = (int)0;
    if (_1146)
    {
      {
        int _7182 = (int)0;
        int _7183 = _ptr__1168[(int)0];
        for (int _1197 = _7182; _1197 < _7183; ++_1197)
        {
          {
            int _7184 = (int)0;
            int _7185 = _ptr__1168[(int)1];
            for (int _1198 = _7184; _1198 < _7185; ++_1198)
            {
              {
                int _7186 = (int)0;
                int _7187 = _ptr__1168[(int)2];
                for (int _1199 = _7186; _1199 < _7187; ++_1199)
                {
                  {
                    int _7188 = (int)0;
                    int _7189 = safe_add( _1198,(int)1 );
                    for (int _1200 = _7188; _1200 < _7189; ++_1200)
                    {
                      {
                        int _7190 = (int)0;
                        int _7191 = _ptr__1168[(int)4];
                        for (int _1201 = _7190; _1201 < _7191; ++_1201)
                        {
                          {
                            _ptr__1195[_1196] = _ptr__1192[safe_add( (safe_mul( _1198,safe_add( _1198,(int)1 ) ) / (int)2),_1200 )];
                            _ptr__1194[_1196] = _ptr__1179[safe_add( safe_mul( safe_add( safe_mul( _1197,_ptr__1168[(int)2] ),_1199 ),_ptr__1168[(int)4] ),_1201 )];
                            ((*natconmap_slackidx)(_ptr__1167[_1196])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1194[_1196])),(safe_mul( _1198,safe_add( _1198,(int)1 ) ) / (int)2) ),_1200 )) - (int)1);
                            ++ _1196;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _7192 = (int)0;
        int _7193 = _ptr__1168[(int)0];
        for (int _1202 = _7192; _1202 < _7193; ++_1202)
        {
          {
            int _7194 = (int)0;
            int _7195 = _ptr__1168[(int)1];
            for (int _1203 = _7194; _1203 < _7195; ++_1203)
            {
              {
                int _7196 = (int)0;
                int _7197 = _ptr__1168[(int)2];
                for (int _1204 = _7196; _1204 < _7197; ++_1204)
                {
                  {
                    int _7198 = _1203;
                    int _7199 = _ptr__1168[(int)1];
                    for (int _1205 = _7198; _1205 < _7199; ++_1205)
                    {
                      {
                        int _7200 = (int)0;
                        int _7201 = _ptr__1168[(int)4];
                        for (int _1206 = _7200; _1206 < _7201; ++_1206)
                        {
                          {
                            _ptr__1195[_1196] = _ptr__1192[safe_add( (safe_mul( _1205,safe_add( _1205,(int)1 ) ) / (int)2),_1203 )];
                            _ptr__1194[_1196] = _ptr__1179[safe_add( safe_mul( safe_add( safe_mul( _1202,_ptr__1168[(int)2] ),_1204 ),_ptr__1168[(int)4] ),_1206 )];
                            ((*natconmap_slackidx)(_ptr__1167[_1196])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1194[_1196])),(safe_mul( _1205,safe_add( _1205,(int)1 ) ) / (int)2) ),_1203 )) - (int)1);
                            ++ _1196;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  task_putbaraijlist(_1193,_1194,_1195);
  ((*natconmap_type)(_1166)) = (-safe_add( _1178,(int)1 ));
  std::vector<long long> _7202;
  for (int _1208 = (int)0, _7203 = _1164; _1208 < _7203 ; ++_1208)
  {
    _7202.push_back(((*natconmap_slackidx)(_ptr__1167[_1208])));
  }
  auto _7204 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7202.size()),_7202.begin(),_7202.end()));
  monty::rc_ptr< ::mosek::fusion::PSDConstraint > _1207 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::Model::t(_pubthis),_1142,_1166,_1154,_1148,_1147,_7204,_1167);
  ((*cons)(_1166)) = (_1207).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1142).size()) > (int)0))
  {
    {
      con_map->setItem(_1142,_1166);
    }
  }
  {}
  return (_1207).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1209,monty::rc_ptr< ::mosek::fusion::Expression > _1210,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1211){
  if ((((int)((_1209).size()) > (int)0) && hasConstraint(_1209)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1209)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1209).size()) > (int)0) && hasConstraint(_1209)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1209)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1212 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1210)).as<::mosek::fusion::Expression>());
  _1212->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1213 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1213(_1213 ? _1213->raw() : nullptr,_1213 ? _1213->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1214 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1214(_1214 ? _1214->raw() : nullptr,_1214 ? _1214->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1215 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1215(_1215 ? _1215->raw() : nullptr,_1215 ? _1215->size(0) : 0);
  int _1216 = rs->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _1217 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1216)));
  _checked_ptr_1<int> _ptr__1217(_1217 ? _1217->raw() : nullptr,_1217 ? _1217->size(0) : 0);
  rs->popi32(_1216,_1217,(int)0);
  int _1218 = rs->popi32();
  int _1219 = rs->popi32();
  bool _1220 = (rs->popi32() != (int)0);
  int _1221 = rs->popi32(safe_add( _1218,(int)1 ));
  int _1222 = rs->popi64(_1219);
  int _1223 = rs->popf64(_1218);
  int _1224 = rs->popf64(_1219);
  if (((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1211)->shape.get()) && (!::mosek::fusion::p_Set::match(_1217,mosek::fusion::p_LinPSDDomain::_get_impl(_1211)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1225 = (int)1;
  int _7205 = (int)0;
  int _7206 = _1216;
  for (int _1226 = _7205; _1226 < _7206; ++_1226)
  {
    {
      _1225 *= _ptr__1217[_1226];
    }
  }
  int _1227 = mosek::fusion::p_LinPSDDomain::_get_impl(_1211)->conedim;
  int _1228 = _ptr__1217[_1227];
  int _1229 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1228 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1229,safe_add( _1229,(int)1 ) ) / (int)2) != _1228))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1230 = (int)1;
  int _7207 = (int)0;
  int _7208 = _1227;
  for (int _1231 = _7207; _1231 < _7208; ++_1231)
  {
    {
      _1230 *= _ptr__1217[_1231];
    }
  }
  int _1232 = (int)1;
  int _7209 = safe_add( _1227,(int)1 );
  int _7210 = _1216;
  for (int _1233 = _7209; _1233 < _7210; ++_1233)
  {
    {
      _1232 *= _ptr__1217[_1233];
    }
  }
  int _1234 = safe_mul( _1230,_1232 );
  int _1235 = natconmap_alloc(_1225);
  std::shared_ptr< monty::ndarray< int,1 > > _1236 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1225)));
  _checked_ptr_1<int> _ptr__1236(_1236 ? _1236->raw() : nullptr,_1236 ? _1236->size(0) : 0);
  natconmap->get(_1235,_1236,(int)0);
  putarows(_1236,rs,_1218,_1219,_1221,_1222,_1224,_1223,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  int _1237 = natbarvarmap_alloc(_1234,_1229);
  std::shared_ptr< monty::ndarray< int,1 > > _1238 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1234)));
  _checked_ptr_1<int> _ptr__1238(_1238 ? _1238->raw() : nullptr,_1238 ? _1238->size(0) : 0);
  natbarvarmap_get(_1237,_1238);
  ((*barvars)(_1237)) = nullptr;
  int _1239 = safe_mul( safe_mul( _1228,_1230 ),_1232 );
  std::vector<int> _7211;
  for (int _1241 = (int)0, _7212 = _1228; _1241 < _7212 ; ++_1241)
  {
    _7211.push_back(_1241);
  }
  auto _7213 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7211.size()),_7211.begin(),_7211.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1240 = _7213;
  _checked_ptr_1<int> _ptr__1240(_1240 ? _1240->raw() : nullptr,_1240 ? _1240->size(0) : 0);
  std::vector<long long> _7214;
  for (int _1243 = (int)0, _7215 = _1228; _1243 < _7215 ; ++_1243)
  {
    _7214.push_back((int)1);
  }
  auto _7216 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7214.size()),_7214.begin(),_7214.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1242 = _7216;
  _checked_ptr_1<long long> _ptr__1242(_1242 ? _1242->raw() : nullptr,_1242 ? _1242->size(0) : 0);
  std::vector<double> _7217;
  for (int _1245 = (int)0, _7218 = _1228; _1245 < _7218 ; ++_1245)
  {
    _7217.push_back((-0.5));
  }
  auto _7219 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7217.size()),_7217.begin(),_7217.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1244 = _7219;
  _checked_ptr_1<double> _ptr__1244(_1244 ? _1244->raw() : nullptr,_1244 ? _1244->size(0) : 0);
  int _7220 = (int)1;
  int _7221 = safe_add( _1228,(int)1 );
  for (int _1246 = _7220; _1246 < _7221; ++_1246)
  {
    {
      _ptr__1244[((safe_mul( _1246,safe_add( _1246,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1247 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1228)));
  _checked_ptr_1<int> _ptr__1247(_1247 ? _1247->raw() : nullptr,_1247 ? _1247->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1248 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1228)));
  _checked_ptr_1<int> _ptr__1248(_1248 ? _1248->raw() : nullptr,_1248 ? _1248->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1249 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1239)));
  _checked_ptr_1<int> _ptr__1249(_1249 ? _1249->raw() : nullptr,_1249 ? _1249->size(0) : 0);
  {
    int _1250 = (int)0;
    int _7222 = (int)0;
    int _7223 = _1230;
    for (int _1251 = _7222; _1251 < _7223; ++_1251)
    {
      {
        int _7224 = (int)0;
        int _7225 = _1229;
        for (int _1252 = _7224; _1252 < _7225; ++_1252)
        {
          {
            int _7226 = (int)0;
            int _7227 = safe_add( _1252,(int)1 );
            for (int _1253 = _7226; _1253 < _7227; ++_1253)
            {
              {
                int _7228 = (int)0;
                int _7229 = _1232;
                for (int _1254 = _7228; _1254 < _7229; ++_1254)
                {
                  {
                    _ptr__1249[_1250] = safe_add( safe_mul( _1251,_1232 ),_1254 );
                    _ptr__1247[_1250] = _1252;
                    _ptr__1248[_1250] = _1253;
                    ++ _1250;
                  }
                }
              }
            }
          }
        }
      }
    }
    ((*natconmap_type)(_1235)) = (-safe_add( _1237,(int)1 ));
    int _7230 = (int)0;
    int _7231 = _1225;
    for (int _1255 = _7230; _1255 < _7231; ++_1255)
    {
      {
        ((*natconmap_blockid)(_ptr__1236[_1255])) = _1235;
        ((*natconmap_idx)(_ptr__1236[_1255])) = _1255;
        ((*natconmap_efix)(_ptr__1236[_1255])) = _ptr__1215[safe_add( _1223,_1255 )];
        ((*natconmap_lb)(_ptr__1236[_1255])) = (int)0;
        ((*natconmap_ub)(_ptr__1236[_1255])) = (int)0;
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1256 = task_appendsymmatlist(_1240,_1242,_1247,_1248,_1244);
  _checked_ptr_1<long long> _ptr__1256(_1256 ? _1256->raw() : nullptr,_1256 ? _1256->size(0) : 0);
  task_putbaraijlist(_1236,_1249,_1256);
  std::vector<double> _7232;
  for (int _1258 = (int)0, _7233 = _1225; _1258 < _7233 ; ++_1258)
  {
    _7232.push_back(0.0);
  }
  auto _7234 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7232.size()),_7232.begin(),_7232.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1257 = _7234;
  _checked_ptr_1<double> _ptr__1257(_1257 ? _1257->raw() : nullptr,_1257 ? _1257->size(0) : 0);
  task_con_putboundlist_fx(_1236,_1257);
  std::vector<long long> _7235;
  for (int _1260 = (int)0, _7236 = _1225; _1260 < _7236 ; ++_1260)
  {
    _7235.push_back(((*natconmap_slackidx)(_ptr__1236[_1260])));
  }
  auto _7237 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7235.size()),_7235.begin(),_7235.end()));
  monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _1259 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::Model::t(_pubthis),_1209,_1235,_1217,_1227,_1236,_7237);
  ((*cons)(_1235)) = (_1259).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1209).size()) > (int)0))
  {
    {
      con_map->setItem(_1209,_1235);
    }
  }
  {}
  return (_1259).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1261,monty::rc_ptr< ::mosek::fusion::Expression > _1262,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1263){
  if ((((int)((_1261).size()) > (int)0) && hasConstraint(_1261)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1261)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1261).size()) > (int)0) && hasConstraint(_1261)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1261)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1263)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1264 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1262)).as<::mosek::fusion::Expression>());
  _1264->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1265 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1265(_1265 ? _1265->raw() : nullptr,_1265 ? _1265->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1266 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1266(_1266 ? _1266->raw() : nullptr,_1266 ? _1266->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1267 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1267(_1267 ? _1267->raw() : nullptr,_1267 ? _1267->size(0) : 0);
  int _1268 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1269 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1270 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1271 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1272 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1273 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1274 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1275 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1276 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  std::vector<int> _7238;
  for (int _1278 = (int)0, _7239 = _1268; _1278 < _7239 ; ++_1278)
  {
    _7238.push_back(_ptr__1265[safe_add( _1269,_1278 )]);
  }
  auto _7240 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7238.size()),_7238.begin(),_7238.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1277 = _7240;
  _checked_ptr_1<int> _ptr__1277(_1277 ? _1277->raw() : nullptr,_1277 ? _1277->size(0) : 0);
  if (((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1263)->shape.get()) && (!::mosek::fusion::p_Set::match(_1277,mosek::fusion::p_ConeDomain::_get_impl(_1263)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _7241;
  bool _7242 = _1263->axisIsSet();
  if (_7242)
  {
    _7241 = _1263->getAxis();
  }
  else
  {
    _7241 = (_1268 - (int)1);
  }
  int _1279 = _7241;
  int _1280 = _ptr__1277[_1279];
  int _1281 = (int)1;
  int _1282 = (int)1;
  int _1283 = (int)1;
  {
    int _7243 = (int)0;
    int _7244 = _1268;
    for (int _1284 = _7243; _1284 < _7244; ++_1284)
    {
      {
        _1283 *= _ptr__1277[_1284];
      }
    }
    int _7245 = (int)0;
    int _7246 = _1279;
    for (int _1285 = _7245; _1285 < _7246; ++_1285)
    {
      {
        _1282 *= _ptr__1277[_1285];
      }
    }
    int _7247 = safe_add( _1279,(int)1 );
    int _7248 = _1268;
    for (int _1286 = _7247; _1286 < _7248; ++_1286)
    {
      {
        _1281 *= _ptr__1277[_1286];
      }
    }
  }
  int _1287 = safe_mul( _1282,_1281 );
  if (((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InQCone) && (_1280 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1280 < (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1280 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1280 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1280 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1280 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1280)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
    }
  }
  {}
  int _1288 = natvarmap_alloc(_1283);
  std::shared_ptr< monty::ndarray< int,1 > > _1289 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1283)));
  _checked_ptr_1<int> _ptr__1289(_1289 ? _1289->raw() : nullptr,_1289 ? _1289->size(0) : 0);
  natvarmap->get(_1288,_1289,(int)0);
  int _1290 = natconemap_alloc(_1287);
  int _7249 = (int)0;
  int _7250 = _1283;
  for (int _1291 = _7249; _1291 < _7250; ++_1291)
  {
    {
      ((*natvarmap_idx)(_ptr__1289[_1291])) = _1288;
    }
  }
  task_var_putboundlist_fr(_1289);
  std::shared_ptr< monty::ndarray< int,1 > > _7251;
  bool _7252 = (_1279 < ((int)((_1277)->size(0)) - (int)1));
  if (_7252)
  {
    _7251 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1289)->size(0)))));
  }
  else
  {
    _7251 = _1289;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1292 = _7251;
  _checked_ptr_1<int> _ptr__1292(_1292 ? _1292->raw() : nullptr,_1292 ? _1292->size(0) : 0);
  if ((_1279 < ((int)((_1277)->size(0)) - (int)1)))
  {
    {
      int _1293 = (int)0;
      int _7253 = (int)0;
      int _7254 = _1282;
      for (int _1294 = _7253; _1294 < _7254; ++_1294)
      {
        {
          int _7255 = (int)0;
          int _7256 = _1281;
          for (int _1295 = _7255; _1295 < _7256; ++_1295)
          {
            {
              int _7257 = (int)0;
              int _7258 = _1280;
              for (int _1296 = _7257; _1296 < _7258; ++_1296)
              {
                {
                  _ptr__1292[_1293] = _ptr__1289[safe_add( safe_mul( safe_add( safe_mul( _1294,_1280 ),_1296 ),_1281 ),_1295 )];
                  ++ _1293;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1297 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1287)));
  _checked_ptr_1<int> _ptr__1297(_1297 ? _1297->raw() : nullptr,_1297 ? _1297->size(0) : 0);
  natconemap->get(_1290,_1297,(int)0);
  ((*natconemap_dim)(_1290)) = _1280;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1297,_1280,_1287,_1292);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      task_put_rquadcones(_1297,_1280,_1287,_1292);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      task_put_pexpcones(_1297,_1280,_1287,_1292);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      std::vector<double> _7259;
      for (int _1298 = (int)0, _7260 = _1287; _1298 < _7260 ; ++_1298)
      {
        _7259.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1263)->alpha);
      }
      auto _7261 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7259.size()),_7259.begin(),_7259.end()));
      task_put_ppowcones(_1297,_1280,_1287,_1292,_7261);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      task_put_dexpcones(_1297,_1280,_1287,_1292);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1263)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      std::vector<double> _7262;
      for (int _1299 = (int)0, _7263 = _1287; _1299 < _7263 ; ++_1299)
      {
        _7262.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1263)->alpha);
      }
      auto _7264 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7262.size()),_7262.begin(),_7262.end()));
      task_put_dpowcones(_1297,_1280,_1287,_1292,_7264);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  ((*vars)(_1288)) = nullptr;
  std::shared_ptr< monty::ndarray< double,1 > > _1300 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1283)));
  _checked_ptr_1<double> _ptr__1300(_1300 ? _1300->raw() : nullptr,_1300 ? _1300->size(0) : 0);
  int _1301 = natconmap_alloc(_1283);
  std::shared_ptr< monty::ndarray< int,1 > > _1302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1283)));
  _checked_ptr_1<int> _ptr__1302(_1302 ? _1302->raw() : nullptr,_1302 ? _1302->size(0) : 0);
  natconmap->get(_1301,_1302,(int)0);
  ((*natconmap_type)(_1301)) = safe_add( _1288,(int)6 );
  {
    int _7265 = (int)0;
    int _7266 = _1283;
    for (int _1303 = _7265; _1303 < _7266; ++_1303)
    {
      {
        ((*natconmap_efix)(_ptr__1302[_1303])) = _ptr__1267[safe_add( _1275,_1303 )];
      }
    }
    int _7267 = (int)0;
    int _7268 = _1283;
    for (int _1304 = _7267; _1304 < _7268; ++_1304)
    {
      {
        ((*natconmap_lb)(_ptr__1302[_1304])) = (int)0;
      }
    }
    int _7269 = (int)0;
    int _7270 = _1283;
    for (int _1305 = _7269; _1305 < _7270; ++_1305)
    {
      {
        ((*natconmap_ub)(_ptr__1302[_1305])) = (int)0;
      }
    }
    int _7271 = (int)0;
    int _7272 = _1283;
    for (int _1306 = _7271; _1306 < _7272; ++_1306)
    {
      {
        ((*natconmap_slackidx)(_ptr__1302[_1306])) = safe_add( _ptr__1289[_1306],(int)1 );
      }
    }
    int _7273 = (int)0;
    int _7274 = _1283;
    for (int _1307 = _7273; _1307 < _7274; ++_1307)
    {
      {
        ((*natconmap_blockid)(_ptr__1302[_1307])) = _1301;
      }
    }
    int _7275 = (int)0;
    int _7276 = _1283;
    for (int _1308 = _7275; _1308 < _7276; ++_1308)
    {
      {
        ((*natconmap_idx)(_ptr__1302[_1308])) = _1308;
      }
    }
  }
  task_con_putboundlist_fx(_1302,_1300);
  putarows(_1302,rs,_1270,_1271,_1273,_1274,_1276,_1275,_1289);
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1309 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1261,_1263,_1277,_1301,_1302,_1289);
  ((*cons)(_1301)) = (_1309).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1261).size()) > (int)0))
  {
    {
      con_map->setItem(_1261,_1301);
    }
  }
  {}
  return (_1309).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1310,monty::rc_ptr< ::mosek::fusion::Expression > _1311,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1312){
  if ((((int)((_1310).size()) > (int)0) && hasConstraint(_1310)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1310)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1312)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1313 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1311)).as<::mosek::fusion::Expression>());
  _1313->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1314 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1314(_1314 ? _1314->raw() : nullptr,_1314 ? _1314->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1315 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1315(_1315 ? _1315->raw() : nullptr,_1315 ? _1315->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1316 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1316(_1316 ? _1316->raw() : nullptr,_1316 ? _1316->size(0) : 0);
  int _1317 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1318 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1319 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1320 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1321 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1322 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1323 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1324 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1325 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  std::vector<int> _7277;
  for (int _1327 = (int)0, _7278 = _1317; _1327 < _7278 ; ++_1327)
  {
    _7277.push_back(_ptr__1314[safe_add( _1318,_1327 )]);
  }
  auto _7279 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7277.size()),_7277.begin(),_7277.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1326 = _7279;
  _checked_ptr_1<int> _ptr__1326(_1326 ? _1326->raw() : nullptr,_1326 ? _1326->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1312)->shape.get()) && (!::mosek::fusion::p_Set::match(_1326,mosek::fusion::p_LinearDomain::_get_impl(_1312)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1328 = (int)1;
  int _7280 = (int)0;
  int _7281 = _1317;
  for (int _1329 = _7280; _1329 < _7281; ++_1329)
  {
    {
      _1328 *= _ptr__1326[_1329];
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1330;
  _checked_ptr_1<double> _ptr__1330(_1330 ? _1330->raw() : nullptr,_1330 ? _1330->size(0) : 0);
  int _1331 = natconmap_alloc(_1328);
  std::shared_ptr< monty::ndarray< int,1 > > _1332 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1328)));
  _checked_ptr_1<int> _ptr__1332(_1332 ? _1332->raw() : nullptr,_1332 ? _1332->size(0) : 0);
  natconmap->get(_1331,_1332,(int)0);
  putarows(_1332,rs,_1319,_1320,_1322,_1323,_1325,_1324,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  {
    std::shared_ptr< monty::ndarray< int,2 > > _1333 = mosek::fusion::p_LinearDomain::_get_impl(_1312)->sparsity;
    bool _1334 = mosek::fusion::p_LinearDomain::_get_impl(_1312)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1335 = mosek::fusion::p_LinearDomain::_get_impl(_1312)->bnd;
    _checked_ptr_1<double> _ptr__1335(_1335 ? _1335->raw() : nullptr,_1335 ? _1335->size(0) : 0);
    bool _1336 = mosek::fusion::p_LinearDomain::_get_impl(_1312)->scalable;
    std::shared_ptr< monty::ndarray< double,1 > > _1337 = natconmap_efix;
    _checked_ptr_1<double> _ptr__1337(_1337 ? _1337->raw() : nullptr,_1337 ? _1337->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _1338 = natconmap_lb;
    _checked_ptr_1<double> _ptr__1338(_1338 ? _1338->raw() : nullptr,_1338 ? _1338->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _1339 = natconmap_ub;
    _checked_ptr_1<double> _ptr__1339(_1339 ? _1339->raw() : nullptr,_1339 ? _1339->size(0) : 0);
    {
      int _7282 = (int)0;
      int _7283 = _1319;
      for (int _1340 = _7282; _1340 < _7283; ++_1340)
      {
        {
          _ptr__1337[_ptr__1332[_1340]] = _ptr__1316[safe_add( _1324,_1340 )];
        }
      }
      if ((NULL == _1335.get()))
      {
        {
          int _7284 = (int)0;
          int _7285 = _1319;
          for (int _1341 = _7284; _1341 < _7285; ++_1341)
          {
            {
              _ptr__1338[_ptr__1332[_1341]] = (int)0;
              _ptr__1339[_ptr__1332[_1341]] = (int)0;
            }
          }
        }
      }
      else if(_1336)
      {
        {
          int _7286 = (int)0;
          int _7287 = _1319;
          for (int _1342 = _7286; _1342 < _7287; ++_1342)
          {
            {
              _ptr__1338[_ptr__1332[_1342]] = _ptr__1335[(int)0];
              _ptr__1339[_ptr__1332[_1342]] = _ptr__1335[(int)0];
            }
          }
        }
      }
      else if((NULL != _1333.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1343 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1317)));
          _checked_ptr_1<int> _ptr__1343(_1343 ? _1343->raw() : nullptr,_1343 ? _1343->size(0) : 0);
          _ptr__1343[(_1317 - (int)1)] = (int)1;
          int _7288 = (int)1;
          int _7289 = _1317;
          for (int _1344 = _7288; _1344 < _7289; ++_1344)
          {
            {
              _ptr__1343[((_1317 - _1344) - (int)1)] = safe_mul( _ptr__1343[(_1317 - _1344)],_ptr__1326[(_1317 - _1344)] );
            }
          }
          int _7290 = (int)0;
          int _7291 = (int)((_1333)->size(0));
          for (int _1345 = _7290; _1345 < _7291; ++_1345)
          {
            {
              int _1346 = (int)0;
              int _7292 = (int)0;
              int _7293 = _1317;
              for (int _1347 = _7292; _1347 < _7293; ++_1347)
              {
                {
                  _1346 += safe_mul( _ptr__1343[_1347],((*_1333)(_1345,_1347)) );
                }
              }
              _ptr__1338[_ptr__1332[_1346]] = _ptr__1335[_1345];
              _ptr__1339[_ptr__1332[_1346]] = _ptr__1335[_1345];
            }
          }
        }
      }
      else if(_1334)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1348 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1317)));
          _checked_ptr_1<int> _ptr__1348(_1348 ? _1348->raw() : nullptr,_1348 ? _1348->size(0) : 0);
          _ptr__1348[(_1317 - (int)1)] = (int)1;
          int _7294 = (int)1;
          int _7295 = _1317;
          for (int _1349 = _7294; _1349 < _7295; ++_1349)
          {
            {
              _ptr__1348[((_1317 - _1349) - (int)1)] = safe_mul( _ptr__1348[(_1317 - _1349)],_ptr__1326[(_1317 - _1349)] );
            }
          }
          int _7296 = (int)0;
          int _7297 = (int)((_1333)->size(0));
          for (int _1350 = _7296; _1350 < _7297; ++_1350)
          {
            {
              int _1351 = (int)0;
              int _7298 = (int)0;
              int _7299 = _1317;
              for (int _1352 = _7298; _1352 < _7299; ++_1352)
              {
                {
                  _1351 += safe_mul( _ptr__1348[_1352],((*_1333)(_1350,_1352)) );
                }
              }
              _ptr__1338[_ptr__1332[_1351]] = (int)0;
              _ptr__1339[_ptr__1332[_1351]] = (int)0;
            }
          }
        }
      }
      else
      {
        {
          int _7300 = (int)0;
          int _7301 = _1319;
          for (int _1353 = _7300; _1353 < _7301; ++_1353)
          {
            {
              _ptr__1338[_ptr__1332[_1353]] = _ptr__1335[_1353];
              _ptr__1339[_ptr__1332[_1353]] = _ptr__1335[_1353];
            }
          }
        }
      }
    }
    std::vector<double> _7302;
    for (int _1354 = (int)0, _7303 = (int)((_1332)->size(0)); _1354 < _7303 ; ++_1354)
    {
      _7302.push_back(_ptr__1338[_ptr__1332[_1354]]);
    }
    auto _7304 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7302.size()),_7302.begin(),_7302.end()));
    _1330 = _7304;
    _ptr__1330.update(_1330 ? _1330->raw() : nullptr, _1330 ? _1330->size(0) : 0);
  }
  int _7305 = (int)0;
  int _7306 = _1328;
  for (int _1355 = _7305; _1355 < _7306; ++_1355)
  {
    {
      ((*natconmap_idx)(_ptr__1332[_1355])) = _1331;
      ((*natconmap_slackidx)(_ptr__1332[_1355])) = (int)0;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1312)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      ((*natconmap_type)(_1331)) = (int)1;
      task_con_putboundlist_fr(_1332);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1312)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      ((*natconmap_type)(_1331)) = (int)3;
      task_con_putboundlist_up(_1332,_1330);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1312)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      ((*natconmap_type)(_1331)) = (int)2;
      task_con_putboundlist_lo(_1332,_1330);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1312)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      ((*natconmap_type)(_1331)) = (int)5;
      task_con_putboundlist_fx(_1332,_1330);
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1356 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1310,_1331,_1326,_1332);
  ((*cons)(_1331)) = (_1356).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1310).size()) > (int)0))
  {
    {
      con_map->setItem(_1310,_1331);
    }
  }
  {}
  return (_1356).as<::mosek::fusion::Constraint>();
}
std::string mosek::fusion::Model::getVersion  ( ) { return mosek::fusion::p_Model::getVersion(); }std::string mosek::fusion::p_Model::getVersion(){
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
bool mosek::fusion::Model :: hasConstraint(const std::string & _1357) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1357); }bool mosek::fusion::p_Model::hasConstraint(const std::string & _1357){
  return con_map->hasItem(_1357);
}
bool mosek::fusion::Model :: hasVariable(const std::string & _1358) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1358); }bool mosek::fusion::p_Model::hasVariable(const std::string & _1358){
  return var_map->hasItem(_1358);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int _1359) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1359); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int _1359) { return __mosek_2fusion_2Model__getConstraint(_1359); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int _1359){
  return (((*cons)(_1359))).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1360) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1360); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1360) { return __mosek_2fusion_2Model__getConstraint(_1360); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1360){
  monty::rc_ptr< ::mosek::fusion::ModelConstraint > _7307;
  bool _7308 = con_map->hasItem(_1360);
  if (_7308)
  {
    _7307 = ((*cons)(con_map->getItem(_1360)));
  }
  else
  {
    _7307 = nullptr;
  }
  return (_7307).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int _1361) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1361); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int _1361) { return __mosek_2fusion_2Model__getVariable(_1361); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int _1361){
  return (((*vars)(_1361))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1362) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1362); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1362) { return __mosek_2fusion_2Model__getVariable(_1362); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1362){
  if (var_map->hasItem(_1362))
  {
    {
      int _1363 = var_map->getItem(_1362);
      if ((_1363 < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1363,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1363))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName(){
  return model_name;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone(){
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
void mosek::fusion::p_Model::destroy(){xs.reset();ws.reset();rs.reset();con_map.reset();cons.reset();natconmap_type.reset();natconmap_ub.reset();natconmap_lb.reset();natconmap_efix.reset();natconmap_idx.reset();natconmap_slackidx.reset();natconmap_blockid.reset();natconmap.reset();initsol_xx_flag.reset();initsol_xx.reset();var_map.reset();barvars.reset();natbarvarmap_ptr.reset();natbarvarmap_num.reset();natbarvar_dim.reset();natbarvar_ptr.reset();natbarvar_j.reset();natbarvar_i.reset();natbarvar_idx.reset();natvarmap_type.reset();natconemap_dim.reset();natconemap.reset();vars.reset();natvarmap_idx.reset();natvarmap_blockid.reset();natvarmap.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1364,    std::shared_ptr< monty::ndarray< int,1 > > _1365,    std::shared_ptr< monty::ndarray< long long,1 > > _1366,    std::shared_ptr< monty::ndarray< long long,1 > > _1367){ return new mosek::fusion::SliceVariable(_1364,_1365,_1366,_1367); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1364,    std::shared_ptr< monty::ndarray< int,1 > > _1365,    std::shared_ptr< monty::ndarray< long long,1 > > _1366,    std::shared_ptr< monty::ndarray< long long,1 > > _1367) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1364,_1365,_1366,_1367); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1364,    std::shared_ptr< monty::ndarray< int,1 > > _1365,    std::shared_ptr< monty::ndarray< long long,1 > > _1366,    std::shared_ptr< monty::ndarray< long long,1 > > _1367){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1365(_1365 ? _1365->raw() : nullptr, _1365 ? _1365->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1366(_1366 ? _1366->raw() : nullptr, _1366 ? _1366->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1367(_1367 ? _1367->raw() : nullptr, _1367 ? _1367->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1364,_1365,_1366,_1367);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _1367;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _1366;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _1365;
  }
}void mosek::fusion::p_SliceVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1368,    monty::rc_ptr< ::mosek::fusion::Model > _1369){ return new mosek::fusion::SymRangedVariable(_1368,_1369); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1368,    monty::rc_ptr< ::mosek::fusion::Model > _1369) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1368,_1369); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1368,    monty::rc_ptr< ::mosek::fusion::Model > _1369){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1368,_1369);
    names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->names_flushed;
    name = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->name;
    sparsity = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->sparsity;
    nativeidxs = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->nativeidxs;
    dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1368)->dim;
  }
}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1370,    const std::string &  _1371,    long long _1372,    int _1373,    std::shared_ptr< monty::ndarray< long long,1 > > _1374,    std::shared_ptr< monty::ndarray< int,1 > > _1375){ return new mosek::fusion::SymRangedVariable(_1370,_1371,_1372,_1373,_1374,_1375); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1370,    const std::string &  _1371,    long long _1372,    int _1373,    std::shared_ptr< monty::ndarray< long long,1 > > _1374,    std::shared_ptr< monty::ndarray< int,1 > > _1375) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1370,_1371,_1372,_1373,_1374,_1375); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1370,    const std::string &  _1371,    long long _1372,    int _1373,    std::shared_ptr< monty::ndarray< long long,1 > > _1374,    std::shared_ptr< monty::ndarray< int,1 > > _1375){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1374(_1374 ? _1374->raw() : nullptr, _1374 ? _1374->size(0) : 0);
    _checked_ptr_1<int> _ptr__1375(_1375 ? _1375->raw() : nullptr, _1375 ? _1375->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1370,_1371,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1373),(int)(_1373)}),_1372,::mosek::fusion::p_SymRangedVariable::mirror_sp(_1373,_1374),::mosek::fusion::p_SymRangedVariable::mirror_idxs(_1373,_1374,_1375));
    names_flushed = false;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->name = _1371;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->nativeidxs = _1375;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->sparsity = _1374;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->dim = _1373;
  }
}void mosek::fusion::p_SymRangedVariable::dual_u(int _1376,std::shared_ptr< monty::ndarray< double,1 > > _1377){
  _checked_ptr_1<double> _ptr__1377(_1377 ? _1377->raw() : nullptr, _1377 ? _1377->size(0) : 0);
  dual_lu(_1376,_1377,false);
}
void mosek::fusion::p_SymRangedVariable::dual_l(int _1378,std::shared_ptr< monty::ndarray< double,1 > > _1379){
  _checked_ptr_1<double> _ptr__1379(_1379 ? _1379->raw() : nullptr, _1379 ? _1379->size(0) : 0);
  dual_lu(_1378,_1379,true);
}
void mosek::fusion::p_SymRangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1380 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _7309 = (int)0;
          int _7310 = (int)((nativeidxs)->size(0));
          for (int _1381 = _7309; _1381 < _7310; ++_1381)
          {
            {
              std::string _7311;
              bool _7312 = ((int)((name).size()) == (int)0);
              if (_7312)
              {
                _7311 = std::string ("");
              }
              else
              {
                _7311 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1381 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1381 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1380.get())->varname(((*nativeidxs)(_1381)),_7311);
            }
          }
        }
      }
      else
      {
        {
          int _7313 = (int)0;
          int _7314 = (int)((sparsity)->size(0));
          for (int _1382 = _7313; _1382 < _7314; ++_1382)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1380.get())->varname(((*nativeidxs)(_1382)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1382)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1382)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::__mosek_2fusion_2SymRangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1383){
  return (::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(::mosek::fusion::SymRangedVariable::t(_pubthis),_1383)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_idxs(int _1384,std::shared_ptr< monty::ndarray< long long,1 > > _1385,std::shared_ptr< monty::ndarray< int,1 > > _1386){
  _checked_ptr_1<long long> _ptr__1385(_1385 ? _1385->raw() : nullptr, _1385 ? _1385->size(0) : 0);
  _checked_ptr_1<int> _ptr__1386(_1386 ? _1386->raw() : nullptr, _1386 ? _1386->size(0) : 0);
  if ((NULL == _1385.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1387 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1384,_1384 ))));
      _checked_ptr_1<long long> _ptr__1387(_1387 ? _1387->raw() : nullptr,_1387 ? _1387->size(0) : 0);
      int _1388 = (int)0;
      {
        int _7315 = (int)0;
        int _7316 = _1384;
        for (int _1389 = _7315; _1389 < _7316; ++_1389)
        {
          {
            _ptr__1387[safe_add( safe_mul( _1389,_1384 ),_1389 )] = safe_add( _ptr__1386[_1388],(int)1 );
            ++ _1388;
            int _7317 = safe_add( _1389,(int)1 );
            int _7318 = _1384;
            for (int _1390 = _7317; _1390 < _7318; ++_1390)
            {
              {
                _ptr__1387[safe_add( safe_mul( _1389,_1384 ),_1390 )] = safe_add( _ptr__1386[_1388],(int)1 );
                _ptr__1387[safe_add( safe_mul( _1390,_1384 ),_1389 )] = safe_add( _ptr__1386[_1388],(int)1 );
                ++ _1388;
              }
            }
          }
        }
      }
      return _1387;
    }
  }
  else
  {
    {
      int _1391 = (int)0;
      {
        int _7319 = (int)0;
        int _7320 = (int)((_1385)->size(0));
        for (int _1392 = _7319; _1392 < _7320; ++_1392)
        {
          {
            int _7321;
            bool _7322 = ((_ptr__1385[_1392] % safe_add( _1384,(int)1 )) == (int)0);
            if (_7322)
            {
              _7321 = (int)1;
            }
            else
            {
              _7321 = (int)2;
            }
            _1391 += _7321;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1393 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1391)));
      _checked_ptr_1<long long> _ptr__1393(_1393 ? _1393->raw() : nullptr,_1393 ? _1393->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1394 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1391)));
      _checked_ptr_1<long long> _ptr__1394(_1394 ? _1394->raw() : nullptr,_1394 ? _1394->size(0) : 0);
      {
        int _1395 = (int)0;
        int _7323 = (int)0;
        int _7324 = (int)((_1385)->size(0));
        for (int _1396 = _7323; _1396 < _7324; ++_1396)
        {
          {
            long long _1397 = (_ptr__1385[_1396] / _1384);
            long long _1398 = (_ptr__1385[_1396] % _1384);
            _ptr__1393[_1395] = _ptr__1385[_1396];
            _ptr__1394[_1395] = safe_add( _ptr__1386[_1396],(int)1 );
            ++ _1395;
            if ((_1397 != _1398))
            {
              {
                _ptr__1393[_1395] = safe_add( safe_mul( _1398,_1384 ),_1397 );
                _ptr__1394[_1395] = safe_add( _ptr__1386[_1396],(int)1 );
                ++ _1395;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7325;
      for (int _1400 = (int)0, _7326 = _1391; _1400 < _7326 ; ++_1400)
      {
        _7325.push_back(_1400);
      }
      auto _7327 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7325.size()),_7325.begin(),_7325.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1399 = _7327;
      _checked_ptr_1<long long> _ptr__1399(_1399 ? _1399->raw() : nullptr,_1399 ? _1399->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1399,_1393,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1391));
      std::vector<long long> _7328;
      for (int _1401 = (int)0, _7329 = _1391; _1401 < _7329 ; ++_1401)
      {
        _7328.push_back(_ptr__1394[_ptr__1399[_1401]]);
      }
      auto _7330 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7328.size()),_7328.begin(),_7328.end()));
      return _7330;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_sp(int _1402,std::shared_ptr< monty::ndarray< long long,1 > > _1403){
  _checked_ptr_1<long long> _ptr__1403(_1403 ? _1403->raw() : nullptr, _1403 ? _1403->size(0) : 0);
  if ((NULL == _1403.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1404 = (int)0;
      {
        int _7331 = (int)0;
        int _7332 = (int)((_1403)->size(0));
        for (int _1405 = _7331; _1405 < _7332; ++_1405)
        {
          {
            int _7333;
            bool _7334 = ((_ptr__1403[_1405] % safe_add( _1402,(int)1 )) == (int)0);
            if (_7334)
            {
              _7333 = (int)1;
            }
            else
            {
              _7333 = (int)2;
            }
            _1404 += _7333;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1406 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1404)));
      _checked_ptr_1<long long> _ptr__1406(_1406 ? _1406->raw() : nullptr,_1406 ? _1406->size(0) : 0);
      {
        int _1407 = (int)0;
        int _7335 = (int)0;
        int _7336 = (int)((_1403)->size(0));
        for (int _1408 = _7335; _1408 < _7336; ++_1408)
        {
          {
            long long _1409 = (_ptr__1403[_1408] / _1402);
            long long _1410 = (_ptr__1403[_1408] % _1402);
            _ptr__1406[_1407] = _ptr__1403[_1408];
            ++ _1407;
            if ((_1409 != _1410))
            {
              {
                _ptr__1406[_1407] = safe_add( safe_mul( _1410,_1402 ),_1409 );
                ++ _1407;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7337;
      for (int _1412 = (int)0, _7338 = _1404; _1412 < _7338 ; ++_1412)
      {
        _7337.push_back(_1412);
      }
      auto _7339 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7337.size()),_7337.begin(),_7337.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1411 = _7339;
      _checked_ptr_1<long long> _ptr__1411(_1411 ? _1411->raw() : nullptr,_1411 ? _1411->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1411,_1406,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1404));
      std::vector<long long> _7340;
      for (int _1413 = (int)0, _7341 = _1404; _1413 < _7341 ; ++_1413)
      {
        _7340.push_back(_ptr__1406[_ptr__1411[_1413]]);
      }
      auto _7342 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7340.size()),_7340.begin(),_7340.end()));
      return _7342;
    }
  }
}
void mosek::fusion::p_SymRangedVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1414,    monty::rc_ptr< ::mosek::fusion::Model > _1415){ return new mosek::fusion::RangedVariable(_1414,_1415); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1414,    monty::rc_ptr< ::mosek::fusion::Model > _1415) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1414,_1415); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1414,    monty::rc_ptr< ::mosek::fusion::Model > _1415){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1414,_1415);
    name = mosek::fusion::p_RangedVariable::_get_impl(_1414)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_1414)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_1414)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1414)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_1414)->shape;
  }
}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1416,    const std::string &  _1417,    long long _1418,    std::shared_ptr< monty::ndarray< int,1 > > _1419,    std::shared_ptr< monty::ndarray< long long,1 > > _1420,    std::shared_ptr< monty::ndarray< int,1 > > _1421){ return new mosek::fusion::RangedVariable(_1416,_1417,_1418,_1419,_1420,_1421); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1416,    const std::string &  _1417,    long long _1418,    std::shared_ptr< monty::ndarray< int,1 > > _1419,    std::shared_ptr< monty::ndarray< long long,1 > > _1420,    std::shared_ptr< monty::ndarray< int,1 > > _1421) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1416,_1417,_1418,_1419,_1420,_1421); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1416,    const std::string &  _1417,    long long _1418,    std::shared_ptr< monty::ndarray< int,1 > > _1419,    std::shared_ptr< monty::ndarray< long long,1 > > _1420,    std::shared_ptr< monty::ndarray< int,1 > > _1421){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1419(_1419 ? _1419->raw() : nullptr, _1419 ? _1419->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1420(_1420 ? _1420->raw() : nullptr, _1420 ? _1420->size(0) : 0);
    _checked_ptr_1<int> _ptr__1421(_1421 ? _1421->raw() : nullptr, _1421 ? _1421->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1416,_1417,_1419,_1418,_1420,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_1421));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _1421;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _1420;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _1417;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _1419;
    names_flushed = false;
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(long long _1422,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1423) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_1422,_1423); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(long long _1422,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1423) { return __mosek_2fusion_2RangedVariable__elementDesc(_1422,_1423); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(long long _1422,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1423){
  _pubthis->elementName(_1422,_1423);
  _1423->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _1423;
}
void mosek::fusion::p_RangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1424 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1425 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1425->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1425->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _7343 = (int)1;
          int _7344 = _pubthis->getND();
          for (int _1426 = _7343; _1426 < _7344; ++_1426)
          {
            {
              _1425->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1426);
            }
          }
        }
      }
      {}
      _1425->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      mosek::fusion::p_Model::_get_impl(_1424.get())->varnames(nativeidxs,_1425->toString(),_pubthis->getShape(),sparsity);
      names_flushed = true;
    }
  }
  {}
}
void mosek::fusion::p_RangedVariable::dual_u(int _1427,std::shared_ptr< monty::ndarray< double,1 > > _1428){
  _checked_ptr_1<double> _ptr__1428(_1428 ? _1428->raw() : nullptr, _1428 ? _1428->size(0) : 0);
  dual_lu(_1427,_1428,false);
}
void mosek::fusion::p_RangedVariable::dual_l(int _1429,std::shared_ptr< monty::ndarray< double,1 > > _1430){
  _checked_ptr_1<double> _ptr__1430(_1430 ? _1430->raw() : nullptr, _1430 ? _1430->size(0) : 0);
  dual_lu(_1429,_1430,true);
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1431){
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_1431)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1432){
  _checked_ptr_1<int> _ptr__1432(_1432 ? _1432->raw() : nullptr, _1432 ? _1432->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1433 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1432)->size(0)))));
  _checked_ptr_1<long long> _ptr__1433(_1433 ? _1433->raw() : nullptr,_1433 ? _1433->size(0) : 0);
  int _7345 = (int)0;
  int _7346 = (int)((_1432)->size(0));
  for (int _1434 = _7345; _1434 < _7346; ++_1434)
  {
    {
      _ptr__1433[_1434] = safe_add( _ptr__1432[_1434],(int)1 );
    }
  }
  return _1433;
}
void mosek::fusion::p_RangedVariable::destroy(){shape.reset();nativeidxs.reset();sparsity.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1435,    monty::rc_ptr< ::mosek::fusion::Model > _1436){ return new mosek::fusion::LinearPSDVariable(_1435,_1436); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1435,    monty::rc_ptr< ::mosek::fusion::Model > _1436) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1435,_1436); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1435,    monty::rc_ptr< ::mosek::fusion::Model > _1436){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1435,_1436);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_1435)->nativeidxs;
  }
}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1437,    const std::string &  _1438,    int _1439,    std::shared_ptr< monty::ndarray< int,1 > > _1440,    int _1441,    std::shared_ptr< monty::ndarray< long long,1 > > _1442){ return new mosek::fusion::LinearPSDVariable(_1437,_1438,_1439,_1440,_1441,_1442); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1437,    const std::string &  _1438,    int _1439,    std::shared_ptr< monty::ndarray< int,1 > > _1440,    int _1441,    std::shared_ptr< monty::ndarray< long long,1 > > _1442) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1437,_1438,_1439,_1440,_1441,_1442); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1437,    const std::string &  _1438,    int _1439,    std::shared_ptr< monty::ndarray< int,1 > > _1440,    int _1441,    std::shared_ptr< monty::ndarray< long long,1 > > _1442){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1440(_1440 ? _1440->raw() : nullptr, _1440 ? _1440->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1442(_1442 ? _1442->raw() : nullptr, _1442 ? _1442->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1437,_1438,_1440,_1439,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_1442));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _1438;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _1441;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _1439;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _1440;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _1442;
  }
}void mosek::fusion::p_LinearPSDVariable::flushNames(){
}
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1443 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1443->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1443->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1443->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7347 = (int)1;
  int _7348 = (int)((shape)->size(0));
  for (int _1444 = _7347; _1444 < _7348; ++_1444)
  {
    {
      _1443->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1444)));
    }
  }
  _1443->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1443->toString();
}
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1445) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_1445); }void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1445){
  _checked_ptr_1<long long> _ptr__1445(_1445 ? _1445->raw() : nullptr, _1445 ? _1445->size(0) : 0);
}
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1446) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_1446); }void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1446){
  _checked_ptr_1<long long> _ptr__1446(_1446 ? _1446->raw() : nullptr, _1446 ? _1446->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1447){
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_1447)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< long long,1 > > _1448){
  _checked_ptr_1<long long> _ptr__1448(_1448 ? _1448->raw() : nullptr, _1448 ? _1448->size(0) : 0);
  std::vector<long long> _7349;
  for (int _1449 = (int)0, _7350 = (int)((_1448)->size(0)); _1449 < _7350 ; ++_1449)
  {
    _7349.push_back((-safe_add( _ptr__1448[_1449],(int)1 )));
  }
  auto _7351 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7349.size()),_7349.begin(),_7349.end()));
  return _7351;
}
void mosek::fusion::p_LinearPSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1450,    monty::rc_ptr< ::mosek::fusion::Model > _1451){ return new mosek::fusion::PSDVariable(_1450,_1451); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1450,    monty::rc_ptr< ::mosek::fusion::Model > _1451) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1450,_1451); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1450,    monty::rc_ptr< ::mosek::fusion::Model > _1451){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1450,_1451);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_1450)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_1450)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_1450)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_1450)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_1450)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_1450)->conedim2;
  }
}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1452,    const std::string &  _1453,    int _1454,    std::shared_ptr< monty::ndarray< int,1 > > _1455,    int _1456,    int _1457,    std::shared_ptr< monty::ndarray< long long,1 > > _1458){ return new mosek::fusion::PSDVariable(_1452,_1453,_1454,_1455,_1456,_1457,_1458); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1452,    const std::string &  _1453,    int _1454,    std::shared_ptr< monty::ndarray< int,1 > > _1455,    int _1456,    int _1457,    std::shared_ptr< monty::ndarray< long long,1 > > _1458) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1452,_1453,_1454,_1455,_1456,_1457,_1458); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1452,    const std::string &  _1453,    int _1454,    std::shared_ptr< monty::ndarray< int,1 > > _1455,    int _1456,    int _1457,    std::shared_ptr< monty::ndarray< long long,1 > > _1458){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1455(_1455 ? _1455->raw() : nullptr, _1455 ? _1455->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1458(_1458 ? _1458->raw() : nullptr, _1458 ? _1458->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1452,_1453,_1455,_1454,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_1455,_1456,_1457,_1458));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _1454;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _1458;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _1453;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _1455;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _1456;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _1457;
  }
}void mosek::fusion::p_PSDVariable::flushNames(){
}
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1459 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1459->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1459->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1459->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7352 = (int)1;
  int _7353 = (int)((shape)->size(0));
  for (int _1460 = _7352; _1460 < _7353; ++_1460)
  {
    {
      _1459->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1460)));
    }
  }
  _1459->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1459->toString();
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(long long _1461,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1462) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_1461,_1462); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(long long _1461,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1462) { return __mosek_2fusion_2PSDVariable__elementDesc(_1461,_1462); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(long long _1461,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1462){
  _pubthis->elementName(_1461,_1462);
  _1462->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _1462;
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1463){
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_1463)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int,1 > > _1464,int _1465,int _1466,std::shared_ptr< monty::ndarray< long long,1 > > _1467){
  _checked_ptr_1<int> _ptr__1464(_1464 ? _1464->raw() : nullptr, _1464 ? _1464->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1467(_1467 ? _1467->raw() : nullptr, _1467 ? _1467->size(0) : 0);
  int _1468 = (int)((_1464)->size(0));
  bool _1469 = (_1465 < _1466);
  int _7354;
  bool _7355 = _1469;
  if (_7355)
  {
    _7354 = _1465;
  }
  else
  {
    _7354 = _1466;
  }
  int _1470 = _7354;
  int _7356;
  bool _7357 = (!_1469);
  if (_7357)
  {
    _7356 = _1465;
  }
  else
  {
    _7356 = _1466;
  }
  int _1471 = _7356;
  int _1472 = (int)1;
  int _7358 = (int)0;
  int _7359 = _1470;
  for (int _1473 = _7358; _1473 < _7359; ++_1473)
  {
    {
      _1472 *= _ptr__1464[_1473];
    }
  }
  int _1474 = _ptr__1464[_1470];
  int _1475 = (int)1;
  int _7360 = safe_add( _1470,(int)1 );
  int _7361 = _1471;
  for (int _1476 = _7360; _1476 < _7361; ++_1476)
  {
    {
      _1475 *= _ptr__1464[_1476];
    }
  }
  int _1477 = _ptr__1464[_1471];
  int _1478 = (int)1;
  int _7362 = safe_add( _1471,(int)1 );
  int _7363 = _1468;
  for (int _1479 = _7362; _1479 < _7363; ++_1479)
  {
    {
      _1478 *= _ptr__1464[_1479];
    }
  }
  int _1480 = safe_mul( safe_mul( safe_mul( safe_mul( _1472,_1474 ),_1475 ),_1477 ),_1478 );
  std::shared_ptr< monty::ndarray< long long,1 > > _1481 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1480)));
  _checked_ptr_1<long long> _ptr__1481(_1481 ? _1481->raw() : nullptr,_1481 ? _1481->size(0) : 0);
  int _1482 = _1478;
  int _1483 = safe_mul( _1482,_1477 );
  int _1484 = safe_mul( _1483,_1475 );
  int _1485 = safe_mul( _1484,_1484 );
  {
    int _1486 = (int)0;
    int _7364 = (int)0;
    int _7365 = _1472;
    for (int _1487 = _7364; _1487 < _7365; ++_1487)
    {
      {
        int _7366 = (int)0;
        int _7367 = _1477;
        for (int _1488 = _7366; _1488 < _7367; ++_1488)
        {
          {
            int _7368 = (int)0;
            int _7369 = _1475;
            for (int _1489 = _7368; _1489 < _7369; ++_1489)
            {
              {
                int _7370 = _1488;
                int _7371 = _1474;
                for (int _1490 = _7370; _1490 < _7371; ++_1490)
                {
                  {
                    int _7372 = (int)0;
                    int _7373 = _1478;
                    for (int _1491 = _7372; _1491 < _7373; ++_1491)
                    {
                      {
                        _ptr__1481[safe_add( safe_add( safe_add( safe_add( safe_mul( _1487,_1485 ),safe_mul( _1490,_1484 ) ),safe_mul( _1489,_1483 ) ),safe_mul( _1488,_1482 ) ),_1491 )] = (-safe_add( _ptr__1467[_1486],(int)1 ));
                        _ptr__1481[safe_add( safe_add( safe_add( safe_add( safe_mul( _1487,_1485 ),safe_mul( _1488,_1484 ) ),safe_mul( _1489,_1483 ) ),safe_mul( _1490,_1482 ) ),_1491 )] = (-safe_add( _ptr__1467[_1486],(int)1 ));
                        ++ _1486;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _1481;
}
void mosek::fusion::p_PSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1492,    monty::rc_ptr< ::mosek::fusion::Model > _1493){ return new mosek::fusion::SymLinearVariable(_1492,_1493); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1492,    monty::rc_ptr< ::mosek::fusion::Model > _1493) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1492,_1493); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1492,    monty::rc_ptr< ::mosek::fusion::Model > _1493){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1492,_1493);
    names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->names_flushed;
    name = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->name;
    sparsity = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->sparsity;
    nativeidxs = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->nativeidxs;
    dim = mosek::fusion::p_SymLinearVariable::_get_impl(_1492)->dim;
  }
}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1494,    const std::string &  _1495,    long long _1496,    int _1497,    std::shared_ptr< monty::ndarray< long long,1 > > _1498,    std::shared_ptr< monty::ndarray< int,1 > > _1499){ return new mosek::fusion::SymLinearVariable(_1494,_1495,_1496,_1497,_1498,_1499); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1494,    const std::string &  _1495,    long long _1496,    int _1497,    std::shared_ptr< monty::ndarray< long long,1 > > _1498,    std::shared_ptr< monty::ndarray< int,1 > > _1499) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1494,_1495,_1496,_1497,_1498,_1499); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1494,    const std::string &  _1495,    long long _1496,    int _1497,    std::shared_ptr< monty::ndarray< long long,1 > > _1498,    std::shared_ptr< monty::ndarray< int,1 > > _1499){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1498(_1498 ? _1498->raw() : nullptr, _1498 ? _1498->size(0) : 0);
    _checked_ptr_1<int> _ptr__1499(_1499 ? _1499->raw() : nullptr, _1499 ? _1499->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1494,_1495,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1497),(int)(_1497)}),_1496,::mosek::fusion::p_SymLinearVariable::mirror_sp(_1497,_1498),::mosek::fusion::p_SymLinearVariable::mirror_idxs(_1497,_1498,_1499));
    names_flushed = false;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->name = _1495;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->nativeidxs = _1499;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->sparsity = _1498;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->dim = _1497;
  }
}void mosek::fusion::p_SymLinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1500 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _7374 = (int)0;
          int _7375 = (int)((nativeidxs)->size(0));
          for (int _1501 = _7374; _1501 < _7375; ++_1501)
          {
            {
              std::string _7376;
              bool _7377 = ((int)((name).size()) == (int)0);
              if (_7377)
              {
                _7376 = std::string ("");
              }
              else
              {
                _7376 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1501 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1501 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1500.get())->varname(((*nativeidxs)(_1501)),_7376);
            }
          }
        }
      }
      else
      {
        {
          int _7378 = (int)0;
          int _7379 = (int)((sparsity)->size(0));
          for (int _1502 = _7378; _1502 < _7379; ++_1502)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1500.get())->varname(((*nativeidxs)(_1502)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1502)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1502)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::__mosek_2fusion_2SymLinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1503){
  return (::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(::mosek::fusion::SymLinearVariable::t(_pubthis),_1503)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_idxs(int _1504,std::shared_ptr< monty::ndarray< long long,1 > > _1505,std::shared_ptr< monty::ndarray< int,1 > > _1506){
  _checked_ptr_1<long long> _ptr__1505(_1505 ? _1505->raw() : nullptr, _1505 ? _1505->size(0) : 0);
  _checked_ptr_1<int> _ptr__1506(_1506 ? _1506->raw() : nullptr, _1506 ? _1506->size(0) : 0);
  if ((NULL == _1505.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1507 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1504,_1504 ))));
      _checked_ptr_1<long long> _ptr__1507(_1507 ? _1507->raw() : nullptr,_1507 ? _1507->size(0) : 0);
      int _1508 = (int)0;
      {
        int _7380 = (int)0;
        int _7381 = _1504;
        for (int _1509 = _7380; _1509 < _7381; ++_1509)
        {
          {
            _ptr__1507[safe_add( safe_mul( _1509,_1504 ),_1509 )] = safe_add( _ptr__1506[_1508],(int)1 );
            ++ _1508;
            int _7382 = safe_add( _1509,(int)1 );
            int _7383 = _1504;
            for (int _1510 = _7382; _1510 < _7383; ++_1510)
            {
              {
                _ptr__1507[safe_add( safe_mul( _1509,_1504 ),_1510 )] = safe_add( _ptr__1506[_1508],(int)1 );
                _ptr__1507[safe_add( safe_mul( _1510,_1504 ),_1509 )] = safe_add( _ptr__1506[_1508],(int)1 );
                ++ _1508;
              }
            }
          }
        }
      }
      return _1507;
    }
  }
  else
  {
    {
      int _1511 = (int)0;
      {
        int _7384 = (int)0;
        int _7385 = (int)((_1505)->size(0));
        for (int _1512 = _7384; _1512 < _7385; ++_1512)
        {
          {
            int _7386;
            bool _7387 = ((_ptr__1505[_1512] % safe_add( _1504,(int)1 )) == (int)0);
            if (_7387)
            {
              _7386 = (int)1;
            }
            else
            {
              _7386 = (int)2;
            }
            _1511 += _7386;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1513 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1511)));
      _checked_ptr_1<long long> _ptr__1513(_1513 ? _1513->raw() : nullptr,_1513 ? _1513->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1514 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1511)));
      _checked_ptr_1<long long> _ptr__1514(_1514 ? _1514->raw() : nullptr,_1514 ? _1514->size(0) : 0);
      {
        int _1515 = (int)0;
        int _7388 = (int)0;
        int _7389 = (int)((_1505)->size(0));
        for (int _1516 = _7388; _1516 < _7389; ++_1516)
        {
          {
            long long _1517 = (_ptr__1505[_1516] / _1504);
            long long _1518 = (_ptr__1505[_1516] % _1504);
            _ptr__1513[_1515] = _ptr__1505[_1516];
            _ptr__1514[_1515] = safe_add( _ptr__1506[_1516],(int)1 );
            ++ _1515;
            if ((_1517 != _1518))
            {
              {
                _ptr__1513[_1515] = safe_add( safe_mul( _1518,_1504 ),_1517 );
                _ptr__1514[_1515] = safe_add( _ptr__1506[_1516],(int)1 );
                ++ _1515;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7390;
      for (int _1520 = (int)0, _7391 = _1511; _1520 < _7391 ; ++_1520)
      {
        _7390.push_back(_1520);
      }
      auto _7392 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7390.size()),_7390.begin(),_7390.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1519 = _7392;
      _checked_ptr_1<long long> _ptr__1519(_1519 ? _1519->raw() : nullptr,_1519 ? _1519->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1519,_1513,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1511));
      std::vector<long long> _7393;
      for (int _1521 = (int)0, _7394 = _1511; _1521 < _7394 ; ++_1521)
      {
        _7393.push_back(_ptr__1514[_ptr__1519[_1521]]);
      }
      auto _7395 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7393.size()),_7393.begin(),_7393.end()));
      return _7395;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_sp(int _1522,std::shared_ptr< monty::ndarray< long long,1 > > _1523){
  _checked_ptr_1<long long> _ptr__1523(_1523 ? _1523->raw() : nullptr, _1523 ? _1523->size(0) : 0);
  if ((NULL == _1523.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1524 = (int)0;
      {
        int _7396 = (int)0;
        int _7397 = (int)((_1523)->size(0));
        for (int _1525 = _7396; _1525 < _7397; ++_1525)
        {
          {
            int _7398;
            bool _7399 = ((_ptr__1523[_1525] % safe_add( _1522,(int)1 )) == (int)0);
            if (_7399)
            {
              _7398 = (int)1;
            }
            else
            {
              _7398 = (int)2;
            }
            _1524 += _7398;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1526 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1524)));
      _checked_ptr_1<long long> _ptr__1526(_1526 ? _1526->raw() : nullptr,_1526 ? _1526->size(0) : 0);
      {
        int _1527 = (int)0;
        int _7400 = (int)0;
        int _7401 = (int)((_1523)->size(0));
        for (int _1528 = _7400; _1528 < _7401; ++_1528)
        {
          {
            long long _1529 = (_ptr__1523[_1528] / _1522);
            long long _1530 = (_ptr__1523[_1528] % _1522);
            _ptr__1526[_1527] = _ptr__1523[_1528];
            ++ _1527;
            if ((_1529 != _1530))
            {
              {
                _ptr__1526[_1527] = safe_add( safe_mul( _1530,_1522 ),_1529 );
                ++ _1527;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7402;
      for (int _1532 = (int)0, _7403 = _1524; _1532 < _7403 ; ++_1532)
      {
        _7402.push_back(_1532);
      }
      auto _7404 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7402.size()),_7402.begin(),_7402.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1531 = _7404;
      _checked_ptr_1<long long> _ptr__1531(_1531 ? _1531->raw() : nullptr,_1531 ? _1531->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1531,_1526,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1524));
      std::vector<long long> _7405;
      for (int _1533 = (int)0, _7406 = _1524; _1533 < _7406 ; ++_1533)
      {
        _7405.push_back(_ptr__1526[_ptr__1531[_1533]]);
      }
      auto _7407 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7405.size()),_7405.begin(),_7405.end()));
      return _7407;
    }
  }
}
void mosek::fusion::p_SymLinearVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1534,    monty::rc_ptr< ::mosek::fusion::Model > _1535){ return new mosek::fusion::LinearVariable(_1534,_1535); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1534,    monty::rc_ptr< ::mosek::fusion::Model > _1535) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1534,_1535); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1534,    monty::rc_ptr< ::mosek::fusion::Model > _1535){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1534,_1535);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_1534)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_1534)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_1534)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_1534)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_1534)->name;
  }
}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1536,    const std::string &  _1537,    long long _1538,    std::shared_ptr< monty::ndarray< int,1 > > _1539,    std::shared_ptr< monty::ndarray< long long,1 > > _1540,    std::shared_ptr< monty::ndarray< int,1 > > _1541){ return new mosek::fusion::LinearVariable(_1536,_1537,_1538,_1539,_1540,_1541); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1536,    const std::string &  _1537,    long long _1538,    std::shared_ptr< monty::ndarray< int,1 > > _1539,    std::shared_ptr< monty::ndarray< long long,1 > > _1540,    std::shared_ptr< monty::ndarray< int,1 > > _1541) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1536,_1537,_1538,_1539,_1540,_1541); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1536,    const std::string &  _1537,    long long _1538,    std::shared_ptr< monty::ndarray< int,1 > > _1539,    std::shared_ptr< monty::ndarray< long long,1 > > _1540,    std::shared_ptr< monty::ndarray< int,1 > > _1541){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1539(_1539 ? _1539->raw() : nullptr, _1539 ? _1539->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1540(_1540 ? _1540->raw() : nullptr, _1540 ? _1540->size(0) : 0);
    _checked_ptr_1<int> _ptr__1541(_1541 ? _1541->raw() : nullptr, _1541 ? _1541->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1536,_1537,_1539,_1538,_1540,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_1541));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _1537;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _1541;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _1540;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _1539;
  }
}std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1542 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1542->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1542->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _7408 = (int)1;
      int _7409 = (int)((shape)->size(0));
      for (int _1543 = _7408; _1543 < _7409; ++_1543)
      {
        {
          _1542->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1543)));
        }
      }
    }
  }
  {}
  _1542->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1542->toString();
}
void mosek::fusion::p_LinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1544 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1545 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1545->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1545->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _7410 = (int)1;
          int _7411 = _pubthis->getND();
          for (int _1546 = _7410; _1546 < _7411; ++_1546)
          {
            {
              _1545->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1546);
            }
          }
        }
      }
      {}
      _1545->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _7412;
      bool _7413 = (_pubthis->getND() > (int)0);
      if (_7413)
      {
        _7412 = _pubthis->getShape();
      }
      else
      {
        _7412 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
      }
      mosek::fusion::p_Model::_get_impl(_1544.get())->varnames(nativeidxs,_1545->toString(),_7412,sparsity);
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1547){
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_1547)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1548){
  _checked_ptr_1<int> _ptr__1548(_1548 ? _1548->raw() : nullptr, _1548 ? _1548->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1549 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1548)->size(0)))));
  _checked_ptr_1<long long> _ptr__1549(_1549 ? _1549->raw() : nullptr,_1549 ? _1549->size(0) : 0);
  int _7414 = (int)0;
  int _7415 = (int)((_1548)->size(0));
  for (int _1550 = _7414; _1550 < _7415; ++_1550)
  {
    {
      _ptr__1549[_1550] = safe_add( _ptr__1548[_1550],(int)1 );
    }
  }
  return _1549;
}
void mosek::fusion::p_LinearVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1551,    monty::rc_ptr< ::mosek::fusion::Model > _1552){ return new mosek::fusion::ConicVariable(_1551,_1552); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1551,    monty::rc_ptr< ::mosek::fusion::Model > _1552) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1551,_1552); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1551,    monty::rc_ptr< ::mosek::fusion::Model > _1552){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1551,_1552);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_1551)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1551)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_1551)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1551)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_1551)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_1551)->name;
  }
}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1553,    const std::string &  _1554,    int _1555,    std::shared_ptr< monty::ndarray< int,1 > > _1556,    std::shared_ptr< monty::ndarray< int,1 > > _1557){ return new mosek::fusion::ConicVariable(_1553,_1554,_1555,_1556,_1557); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1553,    const std::string &  _1554,    int _1555,    std::shared_ptr< monty::ndarray< int,1 > > _1556,    std::shared_ptr< monty::ndarray< int,1 > > _1557) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1553,_1554,_1555,_1556,_1557); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1553,    const std::string &  _1554,    int _1555,    std::shared_ptr< monty::ndarray< int,1 > > _1556,    std::shared_ptr< monty::ndarray< int,1 > > _1557){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1556(_1556 ? _1556->raw() : nullptr, _1556 ? _1556->size(0) : 0);
    _checked_ptr_1<int> _ptr__1557(_1557 ? _1557->raw() : nullptr, _1557 ? _1557->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1553,_1554,_1556,_1555,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_1557));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _1554;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _1555;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _1556;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _1557;
  }
}std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1558 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _1558->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7416 = (int)1;
  int _7417 = (int)((shape)->size(0));
  for (int _1559 = _7416; _1559 < _7417; ++_1559)
  {
    {
      _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1559)));
    }
  }
  _1558->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _1558->toString();
}
void mosek::fusion::p_ConicVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1560 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1561 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1561->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
      int _7418 = (int)1;
      int _7419 = _pubthis->getND();
      for (int _1562 = _7418; _1562 < _7419; ++_1562)
      {
        {
          _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1562);
        }
      }
      _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _7420;
      bool _7421 = (_pubthis->getND() > (int)0);
      if (_7421)
      {
        _7420 = _pubthis->getShape();
      }
      else
      {
        _7420 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      }
      mosek::fusion::p_Model::_get_impl(_1560.get())->varnames(nativeidxs,_1561->toString(),_7420,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1563){
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_1563)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1564){
  _checked_ptr_1<int> _ptr__1564(_1564 ? _1564->raw() : nullptr, _1564 ? _1564->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1565 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1564)->size(0)))));
  _checked_ptr_1<long long> _ptr__1565(_1565 ? _1565->raw() : nullptr,_1565 ? _1565->size(0) : 0);
  int _7422 = (int)0;
  int _7423 = (int)((_1564)->size(0));
  for (int _1566 = _7422; _1566 < _7423; ++_1566)
  {
    {
      _ptr__1565[_1566] = safe_add( _ptr__1564[_1566],(int)1 );
    }
  }
  return _1565;
}
void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _1567,    monty::rc_ptr< ::mosek::fusion::Model > _1568){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1567,_1568);
    name = mosek::fusion::p_ModelVariable::_get_impl(_1567)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_1567)->varid;
    nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_1567)->nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_1567)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_1567)->sparsity;
  }
}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1569,    const std::string &  _1570,    std::shared_ptr< monty::ndarray< int,1 > > _1571,    long long _1572,    std::shared_ptr< monty::ndarray< long long,1 > > _1573,    std::shared_ptr< monty::ndarray< long long,1 > > _1574){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1571(_1571 ? _1571->raw() : nullptr, _1571 ? _1571->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1573(_1573 ? _1573->raw() : nullptr, _1573 ? _1573->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1574(_1574 ? _1574->raw() : nullptr, _1574 ? _1574->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1569,_1571,_1573,_1574);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _1570;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _1572;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _1571;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _1573;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->nativeidxs = _1574;
  }
}void mosek::fusion::ModelVariable :: elementName(long long _1575,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1576) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_1575,_1576); }void mosek::fusion::p_ModelVariable::elementName(long long _1575,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1576){
  std::string _7424;
  bool _7425 = ((int)((name).size()) == (int)0);
  if (_7425)
  {
    _7424 = std::string ("_");
  }
  else
  {
    _7424 = name;
  }
  _1576->__mosek_2fusion_2Utils_2StringBuffer__a(_7424)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_1575))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
void mosek::fusion::p_ModelVariable::destroy(){sparsity.reset();shape.reset();nativeidxs.reset();}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1578){ return new mosek::fusion::NilVariable(_1578); }mosek::fusion::NilVariable::NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1578) :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_1578); }void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _1578){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1578(_1578 ? _1578->raw() : nullptr, _1578 ? _1578->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_1578),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))));
    std::vector<int> _7426;
    for (int _1579 = (int)0, _7427 = (int)((_1578)->size(0)); _1579 < _7427 ; ++_1579)
    {
      _7426.push_back(_ptr__1578[_1579]);
    }
    auto _7428 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7426.size()),_7426.begin(),_7426.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _7428;
  }
}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)}));
  }
}void mosek::fusion::p_NilVariable::flushNames(){
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(long long _1580,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1581) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_1580,_1581); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(long long _1580,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1581) { return __mosek_2fusion_2NilVariable__elementDesc(_1580,_1581); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(long long _1580,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1581){
  return _1581;
}
void mosek::fusion::NilVariable :: elementName(long long _1582,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1583) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_1582,_1583); }void mosek::fusion::p_NilVariable::elementName(long long _1582,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1583){
}
int mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_NilVariable::numInst(){
  return (int)0;
}
int mosek::fusion::NilVariable :: inst(int _1584,std::shared_ptr< monty::ndarray< long long,1 > > _1585,std::shared_ptr< monty::ndarray< long long,1 > > _1586) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1584,_1585,_1586); }int mosek::fusion::p_NilVariable::inst(int _1584,std::shared_ptr< monty::ndarray< long long,1 > > _1585,std::shared_ptr< monty::ndarray< long long,1 > > _1586){
  _checked_ptr_1<long long> _ptr__1585(_1585 ? _1585->raw() : nullptr, _1585 ? _1585->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1586(_1586 ? _1586->raw() : nullptr, _1586 ? _1586->size(0) : 0);
  return (int)0;
}
void mosek::fusion::NilVariable :: inst(int _1587,std::shared_ptr< monty::ndarray< long long,1 > > _1588) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1587,_1588); }void mosek::fusion::p_NilVariable::inst(int _1587,std::shared_ptr< monty::ndarray< long long,1 > > _1588){
  _checked_ptr_1<long long> _ptr__1588(_1588 ? _1588->raw() : nullptr, _1588 ? _1588->size(0) : 0);
}
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1589,bool _1590) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_1589,_1590); }void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1589,bool _1590){
  _checked_ptr_1<double> _ptr__1589(_1589 ? _1589->raw() : nullptr, _1589 ? _1589->size(0) : 0);
}
void mosek::fusion::NilVariable :: values(int _1591,std::shared_ptr< monty::ndarray< double,1 > > _1592,bool _1593) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_1591,_1592,_1593); }void mosek::fusion::p_NilVariable::values(int _1591,std::shared_ptr< monty::ndarray< double,1 > > _1592,bool _1593){
  _checked_ptr_1<double> _ptr__1592(_1592 ? _1592->raw() : nullptr, _1592 ? _1592->size(0) : 0);
}
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_NilVariable::make_continuous(){
}
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_NilVariable::make_integer(){
}
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString(){
  return std::string ("NilVariable");
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1594) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1594); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1594) { return __mosek_2fusion_2NilVariable__index(_1594); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1594) { return __mosek_2fusion_2NilVariable__index(_1594); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1594) { return __mosek_2fusion_2NilVariable__index(_1594); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1594){
  _checked_ptr_1<int> _ptr__1594(_1594 ? _1594->raw() : nullptr, _1594 ? _1594->size(0) : 0);
  std::vector<int> _7429;
  for (int _1595 = (int)0, _7430 = (int)((shape)->size(0)); _1595 < _7430 ; ++_1595)
  {
    _7429.push_back((int)1);
  }
  auto _7431 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7429.size()),_7429.begin(),_7429.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7431)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int _1596) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1596); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _1596) { return __mosek_2fusion_2NilVariable__index(_1596); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int _1596) { return __mosek_2fusion_2NilVariable__index(_1596); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(int _1596) { return __mosek_2fusion_2NilVariable__index(_1596); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int _1596){
  std::vector<int> _7432;
  for (int _1597 = (int)0, _7433 = (int)((shape)->size(0)); _1597 < _7433 ; ++_1597)
  {
    _7432.push_back((int)1);
  }
  auto _7434 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7432.size()),_7432.begin(),_7432.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7434)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1598,_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599) { return __mosek_2fusion_2NilVariable__slice(_1598,_1599); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599) { return __mosek_2fusion_2NilVariable__slice(_1598,_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599) { return __mosek_2fusion_2NilVariable__slice(_1598,_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1598,std::shared_ptr< monty::ndarray< int,1 > > _1599){
  _checked_ptr_1<int> _ptr__1598(_1598 ? _1598->raw() : nullptr, _1598 ? _1598->size(0) : 0);
  _checked_ptr_1<int> _ptr__1599(_1599 ? _1599->raw() : nullptr, _1599 ? _1599->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_1598)->size(0))) || ((int)((shape)->size(0)) != (int)((_1599)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int _7435 = (int)0;
  int _7436 = (int)((_1598)->size(0));
  for (int _1600 = _7435; _1600 < _7436; ++_1600)
  {
    {
      if (((_ptr__1599[_1600] > _ptr__1598[_1600]) || ((_ptr__1598[_1600] < (int)0) || (_ptr__1599[_1600] >= ((*shape)(_1600))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _7437;
  for (int _1601 = (int)0, _7438 = (int)((shape)->size(0)); _1601 < _7438 ; ++_1601)
  {
    _7437.push_back((_ptr__1599[_1601] - _ptr__1598[_1601]));
  }
  auto _7439 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7437.size()),_7437.begin(),_7437.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7439)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int _1602,int _1603) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1602,_1603); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int _1602,int _1603) { return __mosek_2fusion_2NilVariable__slice(_1602,_1603); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int _1602,int _1603) { return __mosek_2fusion_2NilVariable__slice(_1602,_1603); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(int _1602,int _1603) { return __mosek_2fusion_2NilVariable__slice(_1602,_1603); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int _1602,int _1603){
  if (((_1603 > _1602) || ((_1602 < (int)0) || (_1603 > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_1603 - _1602))}))).as<::mosek::fusion::Variable>();
    }
  }
}
void mosek::fusion::p_NilVariable::destroy(){shape.reset();}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _1604,    monty::rc_ptr< ::mosek::fusion::Model > _1605){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _1605;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_1604)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_1604)->sparsity;
    nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_1604)->nativeidxs;
  }
}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1606,    std::shared_ptr< monty::ndarray< int,1 > > _1607,    std::shared_ptr< monty::ndarray< long long,1 > > _1608,    std::shared_ptr< monty::ndarray< long long,1 > > _1609){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1607(_1607 ? _1607->raw() : nullptr, _1607 ? _1607->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1608(_1608 ? _1608->raw() : nullptr, _1608 ? _1608->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1609(_1609 ? _1609->raw() : nullptr, _1609 ? _1609->size(0) : 0);
    model = _1606;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _1607;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _1608;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs = _1609;
  }
}std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1610 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1610->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1610->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _7440 = (int)1;
      int _7441 = (int)((shape)->size(0));
      for (int _1611 = _7440; _1611 < _7441; ++_1611)
      {
        {
          _1610->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1611)));
        }
      }
    }
  }
  {}
  _1610->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1610->toString();
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__eval() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable::eval() { return __mosek_2fusion_2BaseVariable__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable::__mosek_2fusion_2Expression__eval() { return __mosek_2fusion_2BaseVariable__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__eval(){
  return _pubthis->__mosek_2fusion_2BaseVariable__asExpr()->__mosek_2fusion_2Expression__eval();
}
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1612,monty::rc_ptr< ::mosek::fusion::WorkStack > _1613,monty::rc_ptr< ::mosek::fusion::WorkStack > _1614) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_1612,_1613,_1614); }void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1612,monty::rc_ptr< ::mosek::fusion::WorkStack > _1613,monty::rc_ptr< ::mosek::fusion::WorkStack > _1614){
  int _1615 = (int)((nativeidxs)->size(0));
  int _1616 = _1615;
  int _1617 = (int)((shape)->size(0));
  bool _1618 = (NULL != sparsity.get());
  _1612->alloc_expr(_1617,_1616,_1615,_1618);
  int _1619 = mosek::fusion::p_WorkStack::_get_impl(_1612)->ptr_base;
  int _1620 = mosek::fusion::p_WorkStack::_get_impl(_1612)->nidxs_base;
  int _1621 = mosek::fusion::p_WorkStack::_get_impl(_1612)->sp_base;
  int _1622 = mosek::fusion::p_WorkStack::_get_impl(_1612)->cof_base;
  int _1623 = mosek::fusion::p_WorkStack::_get_impl(_1612)->bfix_base;
  int _1624 = mosek::fusion::p_WorkStack::_get_impl(_1612)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _1625 = mosek::fusion::p_WorkStack::_get_impl(_1612)->i32;
  _checked_ptr_1<int> _ptr__1625(_1625 ? _1625->raw() : nullptr,_1625 ? _1625->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1626 = mosek::fusion::p_WorkStack::_get_impl(_1612)->i64;
  _checked_ptr_1<long long> _ptr__1626(_1626 ? _1626->raw() : nullptr,_1626 ? _1626->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1627 = mosek::fusion::p_WorkStack::_get_impl(_1612)->f64;
  _checked_ptr_1<double> _ptr__1627(_1627 ? _1627->raw() : nullptr,_1627 ? _1627->size(0) : 0);
  int _7442 = (int)0;
  int _7443 = _1617;
  for (int _1628 = _7442; _1628 < _7443; ++_1628)
  {
    {
      _ptr__1625[safe_add( _1624,_1628 )] = ((*shape)(_1628));
    }
  }
  {
    int _7444 = (int)0;
    int _7445 = safe_add( _1615,(int)1 );
    for (int _1629 = _7444; _1629 < _7445; ++_1629)
    {
      {
        _ptr__1625[safe_add( _1619,_1629 )] = _1629;
      }
    }
    int _7446 = (int)0;
    int _7447 = _1615;
    for (int _1630 = _7446; _1630 < _7447; ++_1630)
    {
      {
        _ptr__1626[safe_add( _1620,_1630 )] = ((*nativeidxs)(_1630));
      }
    }
    if (_1618)
    {
      {
        int _7448 = (int)0;
        int _7449 = _1615;
        for (int _1631 = _7448; _1631 < _7449; ++_1631)
        {
          {
            _ptr__1626[safe_add( _1621,_1631 )] = ((*sparsity)(_1631));
          }
        }
      }
    }
    {}
    int _7450 = (int)0;
    int _7451 = _1615;
    for (int _1632 = _7450; _1632 < _7451; ++_1632)
    {
      {
        _ptr__1627[safe_add( _1622,_1632 )] = 1.0;
      }
    }
    int _7452 = (int)0;
    int _7453 = _1615;
    for (int _1633 = _7452; _1633 < _7453; ++_1633)
    {
      {
        _ptr__1627[safe_add( _1623,_1633 )] = 0.0;
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1634,int _1635,int _1636) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1634,_1635,_1636); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1634,int _1635,int _1636) { return __mosek_2fusion_2BaseVariable__reshape(_1634,_1635,_1636); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1634,int _1635,int _1636) { return __mosek_2fusion_2BaseVariable__reshape(_1634,_1635,_1636); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1634,int _1635,int _1636){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1634),(int)(_1635),(int)(_1636)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1637,int _1638) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1637,_1638); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1637,int _1638) { return __mosek_2fusion_2BaseVariable__reshape(_1637,_1638); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1637,int _1638) { return __mosek_2fusion_2BaseVariable__reshape(_1637,_1638); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1637,int _1638){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1637),(int)(_1638)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1639) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1639); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1639) { return __mosek_2fusion_2BaseVariable__reshape(_1639); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1639) { return __mosek_2fusion_2BaseVariable__reshape(_1639); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1639){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1639)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1640) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1640); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _1640) { return __mosek_2fusion_2BaseVariable__reshape(_1640); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1640) { return __mosek_2fusion_2BaseVariable__reshape(_1640); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1640){
  _checked_ptr_1<int> _ptr__1640(_1640 ? _1640->raw() : nullptr, _1640 ? _1640->size(0) : 0);
  long long _1641 = (int)1;
  int _7454 = (int)0;
  int _7455 = (int)((_1640)->size(0));
  for (int _1642 = _7454; _1642 < _7455; ++_1642)
  {
    {
      if ((_ptr__1640[_1642] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _1641 *= _ptr__1640[_1642];
    }
  }
  if ((_1641 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int> _7456;
  for (int _1643 = (int)0, _7457 = (int)((_1640)->size(0)); _1643 < _7457 ; ++_1643)
  {
    _7456.push_back(_ptr__1640[_1643]);
  }
  auto _7458 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7456.size()),_7456.begin(),_7456.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_7458,sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
}
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _1644) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_1644); }void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _1644){
  _checked_ptr_1<double> _ptr__1644(_1644 ? _1644->raw() : nullptr, _1644 ? _1644->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_1644)->size(0)) != (int)((nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,nativeidxs,_1644);
    }
  }
  else
  {
    {
      if (((int)((_1644)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _7459;
      for (int _1646 = (int)0, _7460 = (int)((nativeidxs)->size(0)); _1646 < _7460 ; ++_1646)
      {
        _7459.push_back(_ptr__1644[((*sparsity)(_1646))]);
      }
      auto _7461 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7459.size()),_7459.begin(),_7459.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _1645 = _7461;
      _checked_ptr_1<double> _ptr__1645(_1645 ? _1645->raw() : nullptr,_1645 ? _1645->size(0) : 0);
      model->setVariableValues(true,nativeidxs,_1645);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel(){
  return model;
}
int mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }int mosek::fusion::p_BaseVariable::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseVariable :: getDim(int _1647) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_1647); }int mosek::fusion::p_BaseVariable::getDim(int _1647){
  return ((*shape)(_1647));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseVariable::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
long long mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseVariable::getSize(){
  long long _1648 = (long long)1;
  int _7462 = (int)0;
  int _7463 = (int)((shape)->size(0));
  for (int _1649 = _7462; _1649 < _7463; ++_1649)
  {
    {
      _1648 *= ((*shape)(_1649));
    }
  }
  return _1648;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _1650 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1650(_1650 ? _1650->raw() : nullptr,_1650 ? _1650->size(0) : 0);
  model->getVariableValues(false,nativeidxs,_1650,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1651 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__1651(_1651 ? _1651->raw() : nullptr,_1651 ? _1651->size(0) : 0);
      int _7464 = (int)0;
      int _7465 = (int)((nativeidxs)->size(0));
      for (int _1652 = _7464; _1652 < _7465; ++_1652)
      {
        {
          _ptr__1651[((*sparsity)(_1652))] = _ptr__1650[_1652];
        }
      }
      _1650 = _1651;
      _ptr__1650.update(_1650 ? _1650->raw() : nullptr, _1650 ? _1650->size(0) : 0);
    }
  }
  {}
  return _1650;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _1653 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1653(_1653 ? _1653->raw() : nullptr,_1653 ? _1653->size(0) : 0);
  model->getVariableValues(true,nativeidxs,_1653,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1654 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__1654(_1654 ? _1654->raw() : nullptr,_1654 ? _1654->size(0) : 0);
      int _7466 = (int)0;
      int _7467 = (int)((nativeidxs)->size(0));
      for (int _1655 = _7466; _1655 < _7467; ++_1655)
      {
        {
          _ptr__1654[((*sparsity)(_1655))] = _ptr__1653[_1655];
        }
      }
      _1653 = _1654;
      _ptr__1653.update(_1653 ? _1653->raw() : nullptr, _1653 ? _1653->size(0) : 0);
    }
  }
  {}
  return _1653;
}
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous(){
  _pubthis->make_continuous();
}
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger(){
  _pubthis->make_integer();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose(){
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(((*shape)((int)0)))}),sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1656 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      _checked_ptr_1<long long> _ptr__1656(_1656 ? _1656->raw() : nullptr,_1656 ? _1656->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _7468;
      bool _7469 = (NULL == sparsity.get());
      if (_7469)
      {
        _7468 = nullptr;
      }
      else
      {
        _7468 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1657 = _7468;
      _checked_ptr_1<long long> _ptr__1657(_1657 ? _1657->raw() : nullptr,_1657 ? _1657->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int _1658 = (int)0;
          int _7470 = (int)0;
          int _7471 = ((*shape)((int)1));
          for (int _1659 = _7470; _1659 < _7471; ++_1659)
          {
            {
              int _7472 = (int)0;
              int _7473 = ((*shape)((int)0));
              for (int _1660 = _7472; _1660 < _7473; ++_1660)
              {
                {
                  _ptr__1656[_1658] = ((*nativeidxs)(safe_add( safe_mul( _1660,((*shape)((int)1)) ),_1659 )));
                  ++ _1658;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1661 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int> _ptr__1661(_1661 ? _1661->raw() : nullptr,_1661 ? _1661->size(0) : 0);
          int _1662 = ((*shape)((int)0));
          int _1663 = ((*shape)((int)1));
          int _7474 = (int)0;
          int _7475 = (int)((sparsity)->size(0));
          for (int _1664 = _7474; _1664 < _7475; ++_1664)
          {
            {
              ++ _ptr__1661[safe_add( (((*sparsity)(_1664)) % _1663),(int)1 )];
            }
          }
          int _7476 = (int)0;
          int _7477 = _1663;
          for (int _1665 = _7476; _1665 < _7477; ++_1665)
          {
            {
              _ptr__1661[safe_add( _1665,(int)1 )] += _ptr__1661[_1665];
            }
          }
          int _7478 = (int)0;
          int _7479 = (int)((sparsity)->size(0));
          for (int _1666 = _7478; _1666 < _7479; ++_1666)
          {
            {
              long long _1667 = (((*sparsity)(_1666)) % _1663);
              _ptr__1656[_ptr__1661[_1667]] = ((*nativeidxs)(_1666));
              _ptr__1657[_ptr__1661[_1667]] = safe_add( (((*sparsity)(_1666)) / _1663),safe_mul( (((*sparsity)(_1666)) % _1663),_1662 ) );
              ++ _ptr__1661[_1667];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*shape)((int)1))),(int)(((*shape)((int)0)))}),_1657,_1656)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1668,int _1669,int _1670) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1668,_1669,_1670); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1668,int _1669,int _1670) { return __mosek_2fusion_2BaseVariable__index(_1668,_1669,_1670); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1668,int _1669,int _1670) { return __mosek_2fusion_2BaseVariable__index(_1668,_1669,_1670); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1668,int _1669,int _1670){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1668),(int)(_1669),(int)(_1670)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1671,int _1672) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1671,_1672); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1671,int _1672) { return __mosek_2fusion_2BaseVariable__index(_1671,_1672); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1671,int _1672) { return __mosek_2fusion_2BaseVariable__index(_1671,_1672); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1671,int _1672){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1671),(int)(_1672)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1673) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1673); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1673) { return __mosek_2fusion_2BaseVariable__index(_1673); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1673) { return __mosek_2fusion_2BaseVariable__index(_1673); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1673){
  _checked_ptr_1<int> _ptr__1673(_1673 ? _1673->raw() : nullptr, _1673 ? _1673->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _1674 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_1673)->size(0)))));
  int _7480 = (int)0;
  int _7481 = (int)((_1673)->size(0));
  for (int _1675 = _7480; _1675 < _7481; ++_1675)
  {
    {
      ((*_1674)((int)0,_1675)) = _ptr__1673[_1675];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1674)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1676) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1676); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1676) { return __mosek_2fusion_2BaseVariable__index(_1676); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1676) { return __mosek_2fusion_2BaseVariable__index(_1676); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1676){
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1676)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1677,std::shared_ptr< monty::ndarray< int,1 > > _1678,std::shared_ptr< monty::ndarray< int,1 > > _1679) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1677,_1678,_1679); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1677,std::shared_ptr< monty::ndarray< int,1 > > _1678,std::shared_ptr< monty::ndarray< int,1 > > _1679) { return __mosek_2fusion_2BaseVariable__pick(_1677,_1678,_1679); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1677,std::shared_ptr< monty::ndarray< int,1 > > _1678,std::shared_ptr< monty::ndarray< int,1 > > _1679) { return __mosek_2fusion_2BaseVariable__pick(_1677,_1678,_1679); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1677,std::shared_ptr< monty::ndarray< int,1 > > _1678,std::shared_ptr< monty::ndarray< int,1 > > _1679){
  _checked_ptr_1<int> _ptr__1677(_1677 ? _1677->raw() : nullptr, _1677 ? _1677->size(0) : 0);
  _checked_ptr_1<int> _ptr__1678(_1678 ? _1678->raw() : nullptr, _1678 ? _1678->size(0) : 0);
  _checked_ptr_1<int> _ptr__1679(_1679 ? _1679->raw() : nullptr, _1679 ? _1679->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_1677)->size(0)) != (int)((_1678)->size(0))) || ((int)((_1677)->size(0)) != (int)((_1679)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _1680 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_1677)->size(0)),(int)3)));
  int _7482 = (int)0;
  int _7483 = (int)((_1677)->size(0));
  for (int _1681 = _7482; _1681 < _7483; ++_1681)
  {
    {
      ((*_1680)(_1681,(int)0)) = _ptr__1677[_1681];
      ((*_1680)(_1681,(int)1)) = _ptr__1678[_1681];
      ((*_1680)(_1681,(int)2)) = _ptr__1679[_1681];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1680);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1682,_1683); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683) { return __mosek_2fusion_2BaseVariable__pick(_1682,_1683); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683) { return __mosek_2fusion_2BaseVariable__pick(_1682,_1683); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683){
  _checked_ptr_1<int> _ptr__1682(_1682 ? _1682->raw() : nullptr, _1682 ? _1682->size(0) : 0);
  _checked_ptr_1<int> _ptr__1683(_1683 ? _1683->raw() : nullptr, _1683 ? _1683->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_1682)->size(0)) != (int)((_1683)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _1684 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_1682)->size(0)),(int)2)));
  int _7484 = (int)0;
  int _7485 = (int)((_1682)->size(0));
  for (int _1685 = _7484; _1685 < _7485; ++_1685)
  {
    {
      ((*_1684)(_1685,(int)0)) = _ptr__1682[_1685];
      ((*_1684)(_1685,(int)1)) = _ptr__1683[_1685];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1684);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1686) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1686); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1686) { return __mosek_2fusion_2BaseVariable__pick(_1686); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1686) { return __mosek_2fusion_2BaseVariable__pick(_1686); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1686){
  if (((int)((shape)->size(0)) != (int)((_1686)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _1687 = false;
  int _7486 = (int)0;
  int _7487 = (int)((_1686)->size(0));
  for (int _1688 = _7486; _1688 < _7487; ++_1688)
  {
    {
      int _7488 = (int)0;
      int _7489 = (int)((_1686)->size(1));
      for (int _1689 = _7488; _1689 < _7489; ++_1689)
      {
        {
          if (((((*_1686)(_1688,_1689)) < (int)0) || (((*_1686)(_1688,_1689)) >= ((*shape)(_1689)))))
          {
            {
              _1687 = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_1687)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int _1690 = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1691 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1690)));
  _checked_ptr_1<long long> _ptr__1691(_1691 ? _1691->raw() : nullptr,_1691 ? _1691->size(0) : 0);
  _ptr__1691[(_1690 - (int)1)] = (int)1;
  int _7490 = (int)1;
  int _7491 = _1690;
  for (int _1692 = _7490; _1692 < _7491; ++_1692)
  {
    {
      _ptr__1691[((_1690 - _1692) - (int)1)] = safe_mul( _ptr__1691[(_1690 - _1692)],((*shape)((_1690 - _1692))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1693 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_1686)->size(0)))});
  _checked_ptr_1<int> _ptr__1693(_1693 ? _1693->raw() : nullptr,_1693 ? _1693->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1694;
  _checked_ptr_1<long long> _ptr__1694(_1694 ? _1694->raw() : nullptr,_1694 ? _1694->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1695 = nullptr;
  _checked_ptr_1<long long> _ptr__1695(_1695 ? _1695->raw() : nullptr,_1695 ? _1695->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _1694 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1686)->size(0)))));
      _ptr__1694.update(_1694 ? _1694->raw() : nullptr, _1694 ? _1694->size(0) : 0);
      {
        int _7492 = (int)0;
        int _7493 = (int)((_1686)->size(0));
        for (int _1696 = _7492; _1696 < _7493; ++_1696)
        {
          {
            long long _1697 = (long long)0;
            int _7494 = (int)0;
            int _7495 = _1690;
            for (int _1698 = _7494; _1698 < _7495; ++_1698)
            {
              {
                _1697 += safe_mul( _ptr__1691[_1698],((*_1686)(_1696,_1698)) );
              }
            }
            _ptr__1694[_1696] = ((*nativeidxs)(_1697));
          }
        }
      }
    }
  }
  else
  {
    {
      int _1699 = (int)0;
      int _7496 = (int)0;
      int _7497 = (int)((_1686)->size(0));
      for (int _1700 = _7496; _1700 < _7497; ++_1700)
      {
        {
          long long _1701 = (long long)0;
          int _7498 = (int)0;
          int _7499 = _1690;
          for (int _1702 = _7498; _1702 < _7499; ++_1702)
          {
            {
              _1701 += safe_mul( _ptr__1691[_1702],((*_1686)(_1700,_1702)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1701) >= (int)0))
          {
            {
              ++ _1699;
            }
          }
          {}
        }
      }
      _1694 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1699)));
      _ptr__1694.update(_1694 ? _1694->raw() : nullptr, _1694 ? _1694->size(0) : 0);
      _1695 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1699)));
      _ptr__1695.update(_1695 ? _1695->raw() : nullptr, _1695 ? _1695->size(0) : 0);
      {
        int _1703 = (int)0;
        int _7500 = (int)0;
        int _7501 = (int)((_1686)->size(0));
        for (int _1704 = _7500; _1704 < _7501; ++_1704)
        {
          {
            long long _1705 = (long long)0;
            int _7502 = (int)0;
            int _7503 = _1690;
            for (int _1706 = _7502; _1706 < _7503; ++_1706)
            {
              {
                _1705 += safe_mul( _ptr__1691[_1706],((*_1686)(_1704,_1706)) );
              }
            }
            int _1707 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1705);
            if ((_1707 >= (int)0))
            {
              {
                _ptr__1694[_1703] = ((*nativeidxs)(_1707));
                _ptr__1695[_1703] = _1704;
                ++ _1703;
              }
            }
            {}
          }
        }
      }
      if ((_1699 == (int)((_1686)->size(0))))
      {
        {
          _1695 = nullptr;
          _ptr__1695.update(_1695 ? _1695->raw() : nullptr, _1695 ? _1695->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1693,_1695,_1694)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1708) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1708); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1708) { return __mosek_2fusion_2BaseVariable__pick(_1708); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1708) { return __mosek_2fusion_2BaseVariable__pick(_1708); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1708){
  _checked_ptr_1<int> _ptr__1708(_1708 ? _1708->raw() : nullptr, _1708 ? _1708->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _1709 = false;
  int _7504 = (int)0;
  int _7505 = (int)((_1708)->size(0));
  for (int _1710 = _7504; _1710 < _7505; ++_1710)
  {
    {
      if (((_ptr__1708[_1710] < (int)0) || (_ptr__1708[_1710] >= ((*shape)((int)0)))))
      {
        {
          _1709 = true;
        }
      }
      {}
    }
  }
  if (_1709)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _1711;
  _checked_ptr_1<long long> _ptr__1711(_1711 ? _1711->raw() : nullptr,_1711 ? _1711->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1712 = nullptr;
  _checked_ptr_1<long long> _ptr__1712(_1712 ? _1712->raw() : nullptr,_1712 ? _1712->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<long long> _7506;
      for (int _1713 = (int)0, _7507 = (int)((_1708)->size(0)); _1713 < _7507 ; ++_1713)
      {
        _7506.push_back(((*nativeidxs)(_ptr__1708[_1713])));
      }
      auto _7508 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7506.size()),_7506.begin(),_7506.end()));
      _1711 = _7508;
      _ptr__1711.update(_1711 ? _1711->raw() : nullptr, _1711 ? _1711->size(0) : 0);
    }
  }
  else
  {
    {
      int _1714 = (int)0;
      int _7509 = (int)0;
      int _7510 = (int)((_1708)->size(0));
      for (int _1715 = _7509; _1715 < _7510; ++_1715)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__1708[_1715])) >= (int)0))
          {
            {
              ++ _1714;
            }
          }
          {}
        }
      }
      _1711 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1714)));
      _ptr__1711.update(_1711 ? _1711->raw() : nullptr, _1711 ? _1711->size(0) : 0);
      _1712 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1714)));
      _ptr__1712.update(_1712 ? _1712->raw() : nullptr, _1712 ? _1712->size(0) : 0);
      int _1716 = (int)0;
      int _7511 = (int)0;
      int _7512 = (int)((_1708)->size(0));
      for (int _1717 = _7511; _1717 < _7512; ++_1717)
      {
        {
          int _1718 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__1708[_1717]));
          if ((_1718 >= (int)0))
          {
            {
              _ptr__1712[_1716] = _1717;
              _ptr__1711[_1716] = ((*nativeidxs)(_1718));
              ++ _1716;
            }
          }
          {}
        }
      }
      if ((_1714 == (int)((_1708)->size(0))))
      {
        {
          _1712 = nullptr;
          _ptr__1712.update(_1712 ? _1712->raw() : nullptr, _1712 ? _1712->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_1708)->size(0)))}),_1712,_1711)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int _1719) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_1719); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int _1719) { return __mosek_2fusion_2BaseVariable__antidiag(_1719); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int _1719) { return __mosek_2fusion_2BaseVariable__antidiag(_1719); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int _1719){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_1719 >= ((*shape)((int)1))) || ((-_1719) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_1719 >= (int)0))
  {
    {
      int _7513;
      bool _7514 = (((*shape)((int)0)) < (((*shape)((int)1)) - _1719));
      if (_7514)
      {
        _7513 = ((*shape)((int)0));
      }
      else
      {
        _7513 = (((*shape)((int)1)) - _1719);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(((((*shape)((int)1)) - (int)1) - _1719))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7513);
    }
  }
  else
  {
    {
      int _7515;
      bool _7516 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_1719 ));
      if (_7516)
      {
        _7515 = ((*shape)((int)1));
      }
      else
      {
        _7515 = safe_add( ((*shape)((int)0)),_1719 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_1719)),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7515);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int _7517;
  bool _7518 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_7518)
  {
    _7517 = ((*shape)((int)0));
  }
  else
  {
    _7517 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7517);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int _1720) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_1720); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int _1720) { return __mosek_2fusion_2BaseVariable__diag(_1720); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int _1720) { return __mosek_2fusion_2BaseVariable__diag(_1720); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int _1720){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_1720 >= ((*shape)((int)1))) || ((-_1720) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_1720 >= (int)0))
  {
    {
      int _7519;
      bool _7520 = (((*shape)((int)0)) < (((*shape)((int)1)) - _1720));
      if (_7520)
      {
        _7519 = ((*shape)((int)0));
      }
      else
      {
        _7519 = (((*shape)((int)1)) - _1720);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(_1720)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7519);
    }
  }
  else
  {
    {
      int _7521;
      bool _7522 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_1720 ));
      if (_7522)
      {
        _7521 = ((*shape)((int)1));
      }
      else
      {
        _7521 = safe_add( ((*shape)((int)0)),_1720 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_1720)),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7521);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int _7523;
  bool _7524 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_7524)
  {
    _7523 = ((*shape)((int)0));
  }
  else
  {
    _7523 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7523);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > > _1721,std::shared_ptr< monty::ndarray< int,1 > > _1722,int _1723){
  _checked_ptr_1<int> _ptr__1721(_1721 ? _1721->raw() : nullptr, _1721 ? _1721->size(0) : 0);
  _checked_ptr_1<int> _ptr__1722(_1722 ? _1722->raw() : nullptr, _1722 ? _1722->size(0) : 0);
  int _1724 = (int)((shape)->size(0));
  if (((_1724 != (int)((_1721)->size(0))) || (_1724 != (int)((_1722)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int _7525 = (int)0;
  int _7526 = _1724;
  for (int _1725 = _7525; _1725 < _7526; ++_1725)
  {
    {
      if (((_ptr__1721[_1725] < (int)0) || (_ptr__1721[_1725] >= ((*shape)(_1725)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1726 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1724)));
  _checked_ptr_1<long long> _ptr__1726(_1726 ? _1726->raw() : nullptr,_1726 ? _1726->size(0) : 0);
  _ptr__1726[(_1724 - (int)1)] = (int)1;
  int _7527 = (int)1;
  int _7528 = _1724;
  for (int _1727 = _7527; _1727 < _7528; ++_1727)
  {
    {
      _ptr__1726[((_1724 - _1727) - (int)1)] = safe_mul( _ptr__1726[(_1724 - _1727)],((*shape)((_1724 - _1727))) );
    }
  }
  long long _1728 = (long long)0;
  int _7529 = (int)0;
  int _7530 = (int)((_1722)->size(0));
  for (int _1729 = _7529; _1729 < _7530; ++_1729)
  {
    {
      _1728 += safe_mul( _ptr__1721[_1729],_ptr__1726[_1729] );
    }
  }
  long long _1730 = (long long)0;
  int _7531 = (int)0;
  int _7532 = (int)((_1722)->size(0));
  for (int _1731 = _7531; _1731 < _7532; ++_1731)
  {
    {
      _1730 += safe_mul( _ptr__1722[_1731],_ptr__1726[_1731] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1732 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1723)));
      _checked_ptr_1<long long> _ptr__1732(_1732 ? _1732->raw() : nullptr,_1732 ? _1732->size(0) : 0);
      int _7533 = (int)0;
      int _7534 = _1723;
      for (int _1733 = _7533; _1733 < _7534; ++_1733)
      {
        {
          _ptr__1732[_1733] = ((*nativeidxs)(safe_add( _1728,safe_mul( _1730,_1733 ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1723)}),nullptr,_1732)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1734 = (int)0;
      int _7535 = (int)0;
      int _7536 = _1723;
      for (int _1735 = _7535; _1735 < _7536; ++_1735)
      {
        {
          long long _1736 = safe_add( _1728,safe_mul( _1730,_1735 ) );
          int _1737 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1736);
          if ((_1737 >= (int)0))
          {
            {
              ++ _1734;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1738 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1734)));
      _checked_ptr_1<long long> _ptr__1738(_1738 ? _1738->raw() : nullptr,_1738 ? _1738->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1739 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1734)));
      _checked_ptr_1<long long> _ptr__1739(_1739 ? _1739->raw() : nullptr,_1739 ? _1739->size(0) : 0);
      int _1740 = (int)0;
      int _7537 = (int)0;
      int _7538 = _1723;
      for (int _1741 = _7537; _1741 < _7538; ++_1741)
      {
        {
          _ptr__1738[_1741] = ((*nativeidxs)(safe_add( _1728,safe_mul( _1730,_1741 ) )));
          long long _1742 = safe_add( _1728,safe_mul( _1730,_1741 ) );
          int _1743 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1742);
          if ((_1743 >= (int)0))
          {
            {
              _ptr__1739[_1740] = _1741;
              _ptr__1738[_1740] = ((*nativeidxs)(_1743));
              ++ _1740;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1723)}),_1739,_1738)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1744,std::shared_ptr< monty::ndarray< int,1 > > _1745) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_1744,_1745); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1744,std::shared_ptr< monty::ndarray< int,1 > > _1745) { return __mosek_2fusion_2BaseVariable__slice(_1744,_1745); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1744,std::shared_ptr< monty::ndarray< int,1 > > _1745) { return __mosek_2fusion_2BaseVariable__slice(_1744,_1745); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1744,std::shared_ptr< monty::ndarray< int,1 > > _1745){
  _checked_ptr_1<int> _ptr__1744(_1744 ? _1744->raw() : nullptr, _1744 ? _1744->size(0) : 0);
  _checked_ptr_1<int> _ptr__1745(_1745 ? _1745->raw() : nullptr, _1745 ? _1745->size(0) : 0);
  if (((int)((_1744)->size(0)) != (int)((_1745)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_1744)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7539 = (int)0;
      int _7540 = (int)((shape)->size(0));
      for (int _1746 = _7539; _1746 < _7540; ++_1746)
      {
        {
          if (((_ptr__1744[_1746] < (int)0) || (_ptr__1745[_1746] > ((*shape)(_1746)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__1744[_1746] > _ptr__1745[_1746]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int _1747 = (int)((shape)->size(0));
      std::vector<int> _7541;
      for (int _1749 = (int)0, _7542 = _1747; _1749 < _7542 ; ++_1749)
      {
        _7541.push_back((_ptr__1745[_1749] - _ptr__1744[_1749]));
      }
      auto _7543 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7541.size()),_7541.begin(),_7541.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _1748 = _7543;
      _checked_ptr_1<int> _ptr__1748(_1748 ? _1748->raw() : nullptr,_1748 ? _1748->size(0) : 0);
      int _1750 = (int)1;
      int _7544 = (int)0;
      int _7545 = _1747;
      for (int _1751 = _7544; _1751 < _7545; ++_1751)
      {
        {
          _1750 *= (_ptr__1745[_1751] - _ptr__1744[_1751]);
        }
      }
      if ((_1750 == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int _1752 = (int)0;
          std::shared_ptr< monty::ndarray< int,1 > > _1753 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1747)));
          _checked_ptr_1<int> _ptr__1753(_1753 ? _1753->raw() : nullptr,_1753 ? _1753->size(0) : 0);
          int _7546 = (int)0;
          int _7547 = (int)((sparsity)->size(0));
          for (int _1754 = _7546; _1754 < _7547; ++_1754)
          {
            {
              long long _1755 = ((*sparsity)(_1754));
              int _7548 = (int)1;
              int _7549 = _1747;
              for (int _1756 = _7548; _1756 < _7549; ++_1756)
              {
                {
                  _ptr__1753[(_1747 - _1756)] = (int)(_1755 % ((*shape)((_1747 - _1756))));
                  _1755 /= ((*shape)((_1747 - _1756)));
                }
              }
              _ptr__1753[(int)0] = (int)_1755;
              int _1757 = (int)0;
              while ( ((_ptr__1753[_1757] >= _ptr__1744[_1757]) && (_ptr__1753[_1757] < _ptr__1745[_1757])) )
              {
                {
                  ++ _1757;
                }
              }
              if ((_1757 == _1747))
              {
                {
                  ++ _1752;
                }
              }
              {}
            }
          }
          int _1758 = (int)0;
          std::shared_ptr< monty::ndarray< long long,1 > > _1759 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1752)));
          _checked_ptr_1<long long> _ptr__1759(_1759 ? _1759->raw() : nullptr,_1759 ? _1759->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1760 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1752)));
          _checked_ptr_1<long long> _ptr__1760(_1760 ? _1760->raw() : nullptr,_1760 ? _1760->size(0) : 0);
          int _7550 = (int)0;
          int _7551 = (int)((sparsity)->size(0));
          for (int _1761 = _7550; _1761 < _7551; ++_1761)
          {
            {
              long long _1762 = ((*sparsity)(_1761));
              int _7552 = (int)1;
              int _7553 = _1747;
              for (int _1763 = _7552; _1763 < _7553; ++_1763)
              {
                {
                  _ptr__1753[(_1747 - _1763)] = (int)(_1762 % ((*shape)((_1747 - _1763))));
                  _1762 /= ((*shape)((_1747 - _1763)));
                }
              }
              _ptr__1753[(int)0] = (int)_1762;
              int _1764 = (int)0;
              while ( ((_ptr__1753[_1764] >= _ptr__1744[_1764]) && (_ptr__1753[_1764] < _ptr__1745[_1764])) )
              {
                {
                  ++ _1764;
                }
              }
              if ((_1764 == _1747))
              {
                {
                  _ptr__1759[_1758] = ((*nativeidxs)(_1761));
                  int _1765 = (int)0;
                  int _7554 = (int)0;
                  int _7555 = _1747;
                  for (int _1766 = _7554; _1766 < _7555; ++_1766)
                  {
                    {
                      _1765 = safe_add( safe_mul( _1765,_ptr__1748[_1766] ),(_ptr__1753[_1766] - _ptr__1744[_1766]) );
                    }
                  }
                  _ptr__1760[_1758] = _1765;
                  ++ _1758;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1748,_1760,_1759)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1767 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1750)));
          _checked_ptr_1<long long> _ptr__1767(_1767 ? _1767->raw() : nullptr,_1767 ? _1767->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _1768 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1747)));
            _checked_ptr_1<int> _ptr__1768(_1768 ? _1768->raw() : nullptr,_1768 ? _1768->size(0) : 0);
            _ptr__1768[(_1747 - (int)1)] = (int)1;
            int _7556 = (int)1;
            int _7557 = _1747;
            for (int _1769 = _7556; _1769 < _7557; ++_1769)
            {
              {
                _ptr__1768[((_1747 - _1769) - (int)1)] = safe_mul( _ptr__1768[(_1747 - _1769)],((*shape)((_1747 - _1769))) );
              }
            }
            int _1770 = (int)0;
            int _7558 = (int)0;
            int _7559 = _1747;
            for (int _1771 = _7558; _1771 < _7559; ++_1771)
            {
              {
                _1770 += safe_mul( _ptr__1744[_1771],_ptr__1768[_1771] );
              }
            }
            std::vector<int> _7560;
            for (int _1773 = (int)0, _7561 = _1747; _1773 < _7561 ; ++_1773)
            {
              _7560.push_back(_1770);
            }
            auto _7562 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7560.size()),_7560.begin(),_7560.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _1772 = _7562;
            _checked_ptr_1<int> _ptr__1772(_1772 ? _1772->raw() : nullptr,_1772 ? _1772->size(0) : 0);
            std::vector<int> _7563;
            for (int _1775 = (int)0, _7564 = _1747; _1775 < _7564 ; ++_1775)
            {
              _7563.push_back(_ptr__1744[_1775]);
            }
            auto _7565 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7563.size()),_7563.begin(),_7563.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _1774 = _7565;
            _checked_ptr_1<int> _ptr__1774(_1774 ? _1774->raw() : nullptr,_1774 ? _1774->size(0) : 0);
            int _7566 = (int)0;
            int _7567 = _1750;
            for (int _1776 = _7566; _1776 < _7567; ++_1776)
            {
              {
                _ptr__1767[_1776] = ((*nativeidxs)(_ptr__1772[(_1747 - (int)1)]));
                _ptr__1774[(_1747 - (int)1)] += (int)1;
                _ptr__1772[(_1747 - (int)1)] += _ptr__1768[(_1747 - (int)1)];
                if ((_ptr__1774[(_1747 - (int)1)] >= _ptr__1745[(_1747 - (int)1)]))
                {
                  {
                    int _1777 = (_1747 - (int)1);
                    while ( ((_1777 > (int)0) && (_ptr__1774[_1777] >= _ptr__1745[_1777])) )
                    {
                      {
                        _ptr__1774[_1777] = _ptr__1744[_1777];
                        _ptr__1774[(_1777 - (int)1)] += (int)1;
                        _ptr__1772[(_1777 - (int)1)] += _ptr__1768[(_1777 - (int)1)];
                        -- _1777;
                      }
                    }
                    int _7568 = safe_add( _1777,(int)1 );
                    int _7569 = _1747;
                    for (int _1778 = _7568; _1778 < _7569; ++_1778)
                    {
                      {
                        _ptr__1772[_1778] = _ptr__1772[_1777];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1748,nullptr,_1767)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int _1779,int _1780) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_1779,_1780); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int _1779,int _1780) { return __mosek_2fusion_2BaseVariable__slice(_1779,_1780); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int _1779,int _1780) { return __mosek_2fusion_2BaseVariable__slice(_1779,_1780); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int _1779,int _1780){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_1779 == (int)0) && (_1780 == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_1779 < (int)0) || (_1780 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_1779 > _1780))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_1779 == _1780))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int _1781 = (_1780 - _1779);
      int _1782 = (int)0;
      int _1783 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_1779));
      int _1784 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_1780));
      std::vector<long long> _7570;
      for (int _1785 = _1783, _7571 = _1784; _1785 < _7571 ; ++_1785)
      {
        _7570.push_back((((*sparsity)(_1785)) - _1779));
      }
      auto _7572 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7570.size()),_7570.begin(),_7570.end()));
      std::vector<long long> _7573;
      for (int _1786 = _1783, _7574 = _1784; _1786 < _7574 ; ++_1786)
      {
        _7573.push_back(((*nativeidxs)(_1786)));
      }
      auto _7575 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7573.size()),_7573.begin(),_7573.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1781)}),_7572,_7575)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1787 = (_1780 - _1779);
      std::shared_ptr< monty::ndarray< long long,1 > > _1788 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1787)));
      _checked_ptr_1<long long> _ptr__1788(_1788 ? _1788->raw() : nullptr,_1788 ? _1788->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(nativeidxs,_1779,_1788,(int)0,_1787);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1787)}),nullptr,_1788)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr(){
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
int mosek::fusion::BaseVariable :: inst(int _1789,std::shared_ptr< monty::ndarray< long long,1 > > _1790,int _1791,std::shared_ptr< monty::ndarray< long long,1 > > _1792) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_1789,_1790,_1791,_1792); }int mosek::fusion::p_BaseVariable::inst(int _1789,std::shared_ptr< monty::ndarray< long long,1 > > _1790,int _1791,std::shared_ptr< monty::ndarray< long long,1 > > _1792){
  _checked_ptr_1<long long> _ptr__1790(_1790 ? _1790->raw() : nullptr, _1790 ? _1790->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1792(_1792 ? _1792->raw() : nullptr, _1792 ? _1792->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1793 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs;
  _checked_ptr_1<long long> _ptr__1793(_1793 ? _1793->raw() : nullptr,_1793 ? _1793->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1794 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<long long> _ptr__1794(_1794 ? _1794->raw() : nullptr,_1794 ? _1794->size(0) : 0);
  if ((NULL == _1794.get()))
  {
    {
      int _7576 = (int)0;
      int _7577 = (int)((_1793)->size(0));
      for (int _1795 = _7576; _1795 < _7577; ++_1795)
      {
        {
          _ptr__1790[safe_add( _1795,_1789 )] = _1795;
          _ptr__1792[safe_add( _1795,_1791 )] = _ptr__1793[_1795];
        }
      }
    }
  }
  else
  {
    {
      int _7578 = (int)0;
      int _7579 = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int _1796 = _7578; _1796 < _7579; ++_1796)
      {
        {
          _ptr__1790[safe_add( _1789,_1796 )] = _ptr__1794[_1796];
          _ptr__1792[safe_add( _1796,_1791 )] = _ptr__1793[_1796];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
}
int mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_BaseVariable::numInst(){
  return (int)((nativeidxs)->size(0));
}
void mosek::fusion::BaseVariable :: inst(int _1797,std::shared_ptr< monty::ndarray< long long,1 > > _1798) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_1797,_1798); }void mosek::fusion::p_BaseVariable::inst(int _1797,std::shared_ptr< monty::ndarray< long long,1 > > _1798){
  _checked_ptr_1<long long> _ptr__1798(_1798 ? _1798->raw() : nullptr, _1798 ? _1798->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int _7580 = (int)0;
      int _7581 = (int)((nativeidxs)->size(0));
      for (int _1799 = _7580; _1799 < _7581; ++_1799)
      {
        {
          _ptr__1798[safe_add( _1797,_1799 )] = ((*nativeidxs)(_1799));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1800 = _pubthis->getShape();
      _checked_ptr_1<int> _ptr__1800(_1800 ? _1800->raw() : nullptr,_1800 ? _1800->size(0) : 0);
      int _1801 = (int)1;
      int _7582 = (int)0;
      int _7583 = (int)((_1800)->size(0));
      for (int _1802 = _7582; _1802 < _7583; ++_1802)
      {
        {
          _1801 *= _ptr__1800[_1802];
        }
      }
      int _7584 = (int)0;
      int _7585 = _1801;
      for (int _1803 = _7584; _1803 < _7585; ++_1803)
      {
        {
          _ptr__1798[safe_add( _1797,_1803 )] = (int)0;
        }
      }
      int _7586 = (int)0;
      int _7587 = (int)((sparsity)->size(0));
      for (int _1804 = _7586; _1804 < _7587; ++_1804)
      {
        {
          _ptr__1798[safe_add( _1797,((*sparsity)(_1804)) )] = ((*nativeidxs)(_1804));
        }
      }
    }
  }
}
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1805,bool _1806) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_1805,_1806); }void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1805,bool _1806){
  _checked_ptr_1<double> _ptr__1805(_1805 ? _1805->raw() : nullptr, _1805 ? _1805->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_1806,nativeidxs,_1805);
    }
  }
  else
  {
    {
      int _1807 = (int)1;
      int _7588 = (int)0;
      int _7589 = (int)((shape)->size(0));
      for (int _1808 = _7588; _1808 < _7589; ++_1808)
      {
        {
          _1807 *= ((*shape)(_1808));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1809 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1807)));
      _checked_ptr_1<long long> _ptr__1809(_1809 ? _1809->raw() : nullptr,_1809 ? _1809->size(0) : 0);
      int _7590 = (int)0;
      int _7591 = (int)((nativeidxs)->size(0));
      for (int _1810 = _7590; _1810 < _7591; ++_1810)
      {
        {
          _ptr__1809[((*sparsity)(_1810))] = ((*nativeidxs)(_1810));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_1806,_1809,_1805);
    }
  }
}
void mosek::fusion::p_BaseVariable::dual_lu(int _1811,std::shared_ptr< monty::ndarray< double,1 > > _1812,bool _1813){
  _checked_ptr_1<double> _ptr__1812(_1812 ? _1812->raw() : nullptr, _1812 ? _1812->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_1813,nativeidxs,_1812,_1811);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1814 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__1814(_1814 ? _1814->raw() : nullptr,_1814 ? _1814->size(0) : 0);
      int _7592 = (int)0;
      int _7593 = (int)((sparsity)->size(0));
      for (int _1815 = _7592; _1815 < _7593; ++_1815)
      {
        {
          _ptr__1814[((*sparsity)(_1815))] = ((*nativeidxs)(_1815));
        }
      }
      model->getVariableDuals(_1813,_1814,_1812,_1811);
    }
  }
}
void mosek::fusion::BaseVariable :: values(int _1816,std::shared_ptr< monty::ndarray< double,1 > > _1817,bool _1818) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_1816,_1817,_1818); }void mosek::fusion::p_BaseVariable::values(int _1816,std::shared_ptr< monty::ndarray< double,1 > > _1817,bool _1818){
  _checked_ptr_1<double> _ptr__1817(_1817 ? _1817->raw() : nullptr, _1817 ? _1817->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_1818,nativeidxs,_1817,_1816);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1819 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__1819(_1819 ? _1819->raw() : nullptr,_1819 ? _1819->size(0) : 0);
      int _7594 = (int)0;
      int _7595 = (int)((sparsity)->size(0));
      for (int _1820 = _7594; _1820 < _7595; ++_1820)
      {
        {
          _ptr__1819[((*sparsity)(_1820))] = ((*nativeidxs)(_1820));
        }
      }
      model->getVariableValues(_1818,_1819,_1817,_1816);
    }
  }
}
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_BaseVariable::make_continuous(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(nativeidxs);
}
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_BaseVariable::make_integer(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(nativeidxs);
}
void mosek::fusion::p_BaseVariable::destroy(){sparsity.reset();nativeidxs.reset();model.reset();shape.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1828,int _1829,int _1830) { return __mosek_2fusion_2Variable__reshape(_1828,_1829,_1830); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1831,int _1832) { return __mosek_2fusion_2Variable__reshape(_1831,_1832); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1833) { return __mosek_2fusion_2Variable__reshape(_1833); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _1834) { return __mosek_2fusion_2Variable__reshape(_1834); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1840,std::shared_ptr< monty::ndarray< int,1 > > _1841,std::shared_ptr< monty::ndarray< int,1 > > _1842) { return __mosek_2fusion_2Variable__pick(_1840,_1841,_1842); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1843,std::shared_ptr< monty::ndarray< int,1 > > _1844) { return __mosek_2fusion_2Variable__pick(_1843,_1844); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _1845) { return __mosek_2fusion_2Variable__pick(_1845); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1845) { return __mosek_2fusion_2Variable__pick(_1845); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _1846) { return __mosek_2fusion_2Variable__pick(_1846); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1846) { return __mosek_2fusion_2Variable__pick(_1846); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int _1847) { return __mosek_2fusion_2Variable__antidiag(_1847); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int _1848) { return __mosek_2fusion_2Variable__diag(_1848); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _1849) { return __mosek_2fusion_2Variable__index(_1849); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int,1 > > _1849) { return __mosek_2fusion_2Variable__index(_1849); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1850,int _1851,int _1852) { return __mosek_2fusion_2Variable__index(_1850,_1851,_1852); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1853,int _1854) { return __mosek_2fusion_2Variable__index(_1853,_1854); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int _1855) { return __mosek_2fusion_2Variable__index(_1855); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1855) { return __mosek_2fusion_2Variable__index(_1855); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _1856,std::shared_ptr< monty::ndarray< int,1 > > _1857) { return __mosek_2fusion_2Variable__slice(_1856,_1857); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1856,std::shared_ptr< monty::ndarray< int,1 > > _1857) { return __mosek_2fusion_2Variable__slice(_1856,_1857); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int _1858,int _1859) { return __mosek_2fusion_2Variable__slice(_1858,_1859); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int _1858,int _1859) { return __mosek_2fusion_2Variable__slice(_1858,_1859); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty  ( std::shared_ptr< monty::ndarray< int,1 > > _1860) { return mosek::fusion::p_Var::empty(_1860); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int,1 > > _1860){
  _checked_ptr_1<int> _ptr__1860(_1860 ? _1860->raw() : nullptr, _1860 ? _1860->size(0) : 0);
  int _7596 = (int)0;
  int _7597 = (int)((_1860)->size(0));
  for (int _1861 = _7596; _1861 < _7597; ++_1861)
  {
    {
      if ((_ptr__1860[_1861] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_1860)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _1862) { return mosek::fusion::p_Var::compress(_1862); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _1862){
  std::shared_ptr< monty::ndarray< int,1 > > _1863 = _1862->getShape();
  _checked_ptr_1<int> _ptr__1863(_1863 ? _1863->raw() : nullptr,_1863 ? _1863->size(0) : 0);
  int _1864 = (int)((_1863)->size(0));
  int _1865 = (int)0;
  int _7598 = (int)0;
  int _7599 = _1864;
  for (int _1866 = _7598; _1866 < _7599; ++_1866)
  {
    {
      if ((_ptr__1863[_1866] != (int)1))
      {
        {
          ++ _1865;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1865)));
  _checked_ptr_1<int> _ptr__1867(_1867 ? _1867->raw() : nullptr,_1867 ? _1867->size(0) : 0);
  {
    int _1868 = (int)0;
    int _7600 = (int)0;
    int _7601 = _1864;
    for (int _1869 = _7600; _1869 < _7601; ++_1869)
    {
      {
        if ((_ptr__1863[_1869] != (int)1))
        {
          {
            _ptr__1867[_1868] = _ptr__1863[_1869];
            ++ _1868;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_1862,_1867);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1870,    int _1871) { return mosek::fusion::p_Var::reshape(_1870,_1871); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1870,int _1871){
  return ::mosek::fusion::p_Var::reshape(_1870,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1871)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1872,    int _1873,    int _1874) { return mosek::fusion::p_Var::reshape(_1872,_1873,_1874); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1872,int _1873,int _1874){
  return ::mosek::fusion::p_Var::reshape(_1872,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1873),(int)(_1874)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _1875) { return mosek::fusion::p_Var::flatten(_1875); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _1875){
  return ::mosek::fusion::p_Var::reshape(_1875,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)::mosek::fusion::p_Set::size(_1875->getShape()))}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1876,    std::shared_ptr< monty::ndarray< int,1 > > _1877) { return mosek::fusion::p_Var::reshape(_1876,_1877); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1876,std::shared_ptr< monty::ndarray< int,1 > > _1877){
  _checked_ptr_1<int> _ptr__1877(_1877 ? _1877->raw() : nullptr, _1877 ? _1877->size(0) : 0);
  return _1876->__mosek_2fusion_2Variable__reshape(_1877);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _1878,std::shared_ptr< monty::ndarray< int,1 > > _1879){
  _checked_ptr_1<int> _ptr__1879(_1879 ? _1879->raw() : nullptr, _1879 ? _1879->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1880;
  _checked_ptr_1<long long> _ptr__1880(_1880 ? _1880->raw() : nullptr,_1880 ? _1880->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1881;
  _checked_ptr_1<long long> _ptr__1881(_1881 ? _1881->raw() : nullptr,_1881 ? _1881->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1882 = _1878->getShape();
  _checked_ptr_1<int> _ptr__1882(_1882 ? _1882->raw() : nullptr,_1882 ? _1882->size(0) : 0);
  int _1883 = (int)((_1882)->size(0));
  int _1884 = (int)1;
  int _7602 = (int)0;
  int _7603 = _1883;
  for (int _1885 = _7602; _1885 < _7603; ++_1885)
  {
    {
      _1884 *= _ptr__1882[_1885];
    }
  }
  int _1886 = _1878->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _1887 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1883)));
  _checked_ptr_1<long long> _ptr__1887(_1887 ? _1887->raw() : nullptr,_1887 ? _1887->size(0) : 0);
  _ptr__1887[(_1883 - (int)1)] = (int)1;
  int _7604 = (int)1;
  int _7605 = _1883;
  for (int _1888 = _7604; _1888 < _7605; ++_1888)
  {
    {
      _ptr__1887[((_1883 - _1888) - (int)1)] = safe_mul( _ptr__1887[(_1883 - _1888)],_ptr__1882[_ptr__1879[(_1883 - _1888)]] );
    }
  }
  if ((_1886 < _1884))
  {
    {
      _1880 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
      _1881 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _ptr__1881.update(_1881 ? _1881->raw() : nullptr, _1881 ? _1881->size(0) : 0);
      _1878->inst((int)0,_1880,(int)0,_1881);
    }
  }
  else
  {
    {
      _1880 = nullptr;
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
      _1881 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _ptr__1881.update(_1881 ? _1881->raw() : nullptr, _1881 ? _1881->size(0) : 0);
      _1878->inst((int)0,_1881);
    }
  }
  if ((NULL == _1880.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1889 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _checked_ptr_1<long long> _ptr__1889(_1889 ? _1889->raw() : nullptr,_1889 ? _1889->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1890 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1883)));
        _checked_ptr_1<int> _ptr__1890(_1890 ? _1890->raw() : nullptr,_1890 ? _1890->size(0) : 0);
        int _7606 = (int)0;
        int _7607 = _1886;
        for (int _1891 = _7606; _1891 < _7607; ++_1891)
        {
          {
            int _1892 = _1891;
            int _7608 = (int)0;
            int _7609 = _1883;
            for (int _1893 = _7608; _1893 < _7609; ++_1893)
            {
              {
                _ptr__1890[((_1883 - _1891) - (int)1)] = (_1892 % _ptr__1882[((_1883 - _1891) - (int)1)]);
                _1892 /= _ptr__1882[((_1883 - _1891) - (int)1)];
              }
            }
            int _1894 = (int)0;
            int _7610 = (int)0;
            int _7611 = _1883;
            for (int _1895 = _7610; _1895 < _7611; ++_1895)
            {
              {
                _1894 += (int)safe_mul( _ptr__1890[_ptr__1879[_1895]],_ptr__1887[_1895] );
              }
            }
            _ptr__1889[_1894] = _ptr__1881[_1891];
          }
        }
      }
      _1881 = _1889;
      _ptr__1881.update(_1881 ? _1881->raw() : nullptr, _1881 ? _1881->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1896 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1886)));
      _checked_ptr_1<long long> _ptr__1896(_1896 ? _1896->raw() : nullptr,_1896 ? _1896->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1897 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1883)));
        _checked_ptr_1<int> _ptr__1897(_1897 ? _1897->raw() : nullptr,_1897 ? _1897->size(0) : 0);
        int _7612 = (int)0;
        int _7613 = _1886;
        for (int _1898 = _7612; _1898 < _7613; ++_1898)
        {
          {
            int _1899 = _1898;
            int _7614 = (int)0;
            int _7615 = _1883;
            for (int _1900 = _7614; _1900 < _7615; ++_1900)
            {
              {
                _ptr__1897[((_1883 - _1898) - (int)1)] = (_1899 % _ptr__1882[((_1883 - _1898) - (int)1)]);
                _1899 /= _ptr__1882[((_1883 - _1898) - (int)1)];
              }
            }
            int _1901 = (int)0;
            int _7616 = (int)0;
            int _7617 = _1883;
            for (int _1902 = _7616; _1902 < _7617; ++_1902)
            {
              {
                _1901 += (int)safe_mul( _ptr__1897[_ptr__1879[_1902]],_ptr__1887[_1902] );
              }
            }
            _ptr__1896[_1898] = _1901;
          }
        }
      }
      std::vector<long long> _7618;
      for (int _1904 = (int)0, _7619 = _1886; _1904 < _7619 ; ++_1904)
      {
        _7618.push_back(_1904);
      }
      auto _7620 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7618.size()),_7618.begin(),_7618.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1903 = _7620;
      _checked_ptr_1<long long> _ptr__1903(_1903 ? _1903->raw() : nullptr,_1903 ? _1903->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1903,_1896,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1886));
      std::vector<long long> _7621;
      for (int _1905 = (int)0, _7622 = _1886; _1905 < _7622 ; ++_1905)
      {
        _7621.push_back(_ptr__1880[_ptr__1903[_1905]]);
      }
      auto _7623 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7621.size()),_7621.begin(),_7621.end()));
      _1880 = _7623;
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
      std::vector<long long> _7624;
      for (int _1906 = (int)0, _7625 = _1886; _1906 < _7625 ; ++_1906)
      {
        _7624.push_back(_ptr__1881[_ptr__1903[_1906]]);
      }
      auto _7626 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7624.size()),_7624.begin(),_7624.end()));
      _1881 = _7626;
      _ptr__1881.update(_1881 ? _1881->raw() : nullptr, _1881 ? _1881->size(0) : 0);
    }
  }
  std::vector<int> _7627;
  for (int _1907 = (int)0, _7628 = _1883; _1907 < _7628 ; ++_1907)
  {
    _7627.push_back(_ptr__1882[_ptr__1879[_1907]]);
  }
  auto _7629 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7627.size()),_7627.begin(),_7627.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1878->__mosek_2fusion_2Variable__getModel(),_7629,_1880,_1881)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1908,    int _1909) { return mosek::fusion::p_Var::hrepeat(_1908,_1909); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1908,int _1909){
  return ::mosek::fusion::p_Var::drepeat(_1908,(int)1,_1909);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1910,    int _1911) { return mosek::fusion::p_Var::vrepeat(_1910,_1911); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1910,int _1911){
  return ::mosek::fusion::p_Var::drepeat(_1910,(int)0,_1911);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1912,    int _1913) { return mosek::fusion::p_Var::repeat(_1912,_1913); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _1912,int _1913){
  return ::mosek::fusion::p_Var::drepeat(_1912,(int)0,_1913);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1914,    int _1915,    int _1916) { return mosek::fusion::p_Var::repeat(_1914,_1915,_1916); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _1914,int _1915,int _1916){
  return ::mosek::fusion::p_Var::drepeat(_1914,_1915,_1916);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1917,int _1918,int _1919){
  if ((_1919 < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_1919 == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_1919 == (int)1))
  {
    {
      return _1917;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _1920 = _1917->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int,1 > > _1921 = _1917->getShape();
      _checked_ptr_1<int> _ptr__1921(_1921 ? _1921->raw() : nullptr,_1921 ? _1921->size(0) : 0);
      int _1922 = (int)((_1921)->size(0));
      if (((_1918 < (int)0) || (_1918 > _1922)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      long long _1923 = ::mosek::fusion::p_Set::size(_1921);
      int _1924 = _1917->numInst();
      int _1925 = safe_mul( _1924,_1919 );
      int _1926 = (int)1;
      int _7630 = (int)0;
      int _7631 = _1918;
      for (int _1927 = _7630; _1927 < _7631; ++_1927)
      {
        {
          _1926 *= _ptr__1921[_1927];
        }
      }
      int _7632;
      bool _7633 = (_1918 < _1922);
      if (_7633)
      {
        _7632 = _ptr__1921[_1918];
      }
      else
      {
        _7632 = (int)1;
      }
      int _1928 = _7632;
      int _1929 = safe_mul( _1928,_1919 );
      int _1930 = (int)1;
      int _7634 = safe_add( _1918,(int)1 );
      int _7635 = _1922;
      for (int _1931 = _7634; _1931 < _7635; ++_1931)
      {
        {
          _1930 *= _ptr__1921[_1931];
        }
      }
      int _7636;
      bool _7637 = (_1918 < _1922);
      if (_7637)
      {
        _7636 = _1922;
      }
      else
      {
        _7636 = safe_add( _1918,(int)1 );
      }
      int _1932 = _7636;
      std::shared_ptr< monty::ndarray< int,1 > > _1933 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1932)));
      _checked_ptr_1<int> _ptr__1933(_1933 ? _1933->raw() : nullptr,_1933 ? _1933->size(0) : 0);
      int _7638 = (int)0;
      int _7639 = _1922;
      for (int _1934 = _7638; _1934 < _7639; ++_1934)
      {
        {
          _ptr__1933[_1934] = _ptr__1921[_1934];
        }
      }
      int _7640 = _1922;
      int _7641 = _1932;
      for (int _1935 = _7640; _1935 < _7641; ++_1935)
      {
        {
          _ptr__1933[_1935] = (int)1;
        }
      }
      _ptr__1933[_1918] = _1929;
      if ((_1924 < _1923))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1936 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1924)));
          _checked_ptr_1<long long> _ptr__1936(_1936 ? _1936->raw() : nullptr,_1936 ? _1936->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1937 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1924)));
          _checked_ptr_1<long long> _ptr__1937(_1937 ? _1937->raw() : nullptr,_1937 ? _1937->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1938 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1925)));
          _checked_ptr_1<long long> _ptr__1938(_1938 ? _1938->raw() : nullptr,_1938 ? _1938->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1939 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1925)));
          _checked_ptr_1<long long> _ptr__1939(_1939 ? _1939->raw() : nullptr,_1939 ? _1939->size(0) : 0);
          _1917->inst((int)0,_1937,(int)0,_1936);
          {
            int _1940 = safe_mul( _1929,_1930 );
            int _1941 = safe_mul( _1928,_1930 );
            int _1942 = _1930;
            if ((_1918 == (int)0))
            {
              {
                int _1943 = (int)0;
                int _7642 = (int)0;
                int _7643 = _1919;
                for (int _1944 = _7642; _1944 < _7643; ++_1944)
                {
                  {
                    int _7644 = (int)0;
                    int _7645 = _1924;
                    for (int _1945 = _7644; _1945 < _7645; ++_1945)
                    {
                      {
                        _ptr__1939[_1943] = safe_add( _ptr__1937[_1945],safe_mul( _1944,_1923 ) );
                        _ptr__1938[_1943] = _ptr__1936[_1945];
                        ++ _1943;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1920,_1933,_1939,_1938)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_1918 >= _1922))
            {
              {
                int _1946 = (int)0;
                int _7646 = (int)0;
                int _7647 = _1924;
                for (int _1947 = _7646; _1947 < _7647; ++_1947)
                {
                  {
                    int _7648 = (int)0;
                    int _7649 = _1919;
                    for (int _1948 = _7648; _1948 < _7649; ++_1948)
                    {
                      {
                        _ptr__1939[_1946] = safe_add( safe_mul( _ptr__1937[_1947],_1919 ),_1948 );
                        _ptr__1938[_1946] = _ptr__1936[_1947];
                        ++ _1946;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1920,_1933,_1939,_1938)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int _1949 = (int)0;
                int _7650 = (int)0;
                int _7651 = _1924;
                for (int _1950 = _7650; _1950 < _7651; ++_1950)
                {
                  {
                    long long _1951 = (_ptr__1937[_1950] / _1941);
                    long long _1952 = ((_ptr__1937[_1950] / _1942) % _1928);
                    long long _1953 = (_ptr__1937[_1950] % _1930);
                    int _7652 = (int)0;
                    int _7653 = _1919;
                    for (int _1954 = _7652; _1954 < _7653; ++_1954)
                    {
                      {
                        _ptr__1939[_1949] = safe_add( safe_add( safe_mul( _1951,_1940 ),safe_mul( safe_add( _1952,safe_mul( _1928,_1954 ) ),_1930 ) ),_1953 );
                        _ptr__1938[_1949] = _ptr__1936[_1950];
                        ++ _1949;
                      }
                    }
                  }
                }
                int _1955 = (int)1;
                int _7654 = (int)0;
                int _7655 = _1932;
                for (int _1956 = _7654; _1956 < _7655; ++_1956)
                {
                  {
                    if ((_1955 < _ptr__1933[_1956]))
                    {
                      {
                        _1955 = _ptr__1933[_1956];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int,1 > > _1957 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1925)));
                _checked_ptr_1<int> _ptr__1957(_1957 ? _1957->raw() : nullptr,_1957 ? _1957->size(0) : 0);
                std::shared_ptr< monty::ndarray< int,1 > > _1958 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1925)));
                _checked_ptr_1<int> _ptr__1958(_1958 ? _1958->raw() : nullptr,_1958 ? _1958->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int,1 > > _1959 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _1955,(int)1 ))));
                  _checked_ptr_1<int> _ptr__1959(_1959 ? _1959->raw() : nullptr,_1959 ? _1959->size(0) : 0);
                  std::shared_ptr< monty::ndarray< long long,1 > > _1960 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1932)));
                  _checked_ptr_1<long long> _ptr__1960(_1960 ? _1960->raw() : nullptr,_1960 ? _1960->size(0) : 0);
                  _ptr__1960[(_1932 - (int)1)] = (int)1;
                  int _7656 = (int)1;
                  int _7657 = _1932;
                  for (int _1961 = _7656; _1961 < _7657; ++_1961)
                  {
                    {
                      _ptr__1960[((_1932 - _1961) - (int)1)] = safe_mul( _ptr__1960[(_1932 - _1961)],_ptr__1933[(_1932 - _1961)] );
                    }
                  }
                  int _7658 = (int)0;
                  int _7659 = _1925;
                  for (int _1962 = _7658; _1962 < _7659; ++_1962)
                  {
                    {
                      _ptr__1957[_1962] = _1962;
                    }
                  }
                  int _7660 = (int)0;
                  int _7661 = _1932;
                  for (int _1963 = _7660; _1963 < _7661; ++_1963)
                  {
                    {
                      int _1964 = ((_1932 - _1963) - (int)1);
                      int _7662 = (int)0;
                      int _7663 = safe_add( _ptr__1933[_1964],(int)1 );
                      for (int _1965 = _7662; _1965 < _7663; ++_1965)
                      {
                        {
                          _ptr__1959[_1965] = (int)0;
                        }
                      }
                      int _7664 = (int)0;
                      int _7665 = _1925;
                      for (int _1966 = _7664; _1966 < _7665; ++_1966)
                      {
                        {
                          ++ _ptr__1959[safe_add( ((_ptr__1939[_1966] / _ptr__1960[_1964]) % _ptr__1933[_1964]),(int)1 )];
                        }
                      }
                      int _7666 = (int)0;
                      int _7667 = _ptr__1933[_1964];
                      for (int _1967 = _7666; _1967 < _7667; ++_1967)
                      {
                        {
                          _ptr__1959[safe_add( _1967,(int)1 )] += _ptr__1959[_1967];
                        }
                      }
                      int _7668 = (int)0;
                      int _7669 = _1925;
                      for (int _1968 = _7668; _1968 < _7669; ++_1968)
                      {
                        {
                          int _1969 = _ptr__1957[_1968];
                          long long _1970 = ((_ptr__1939[_1969] / _ptr__1960[_1964]) % _ptr__1933[_1964]);
                          _ptr__1958[_ptr__1959[_1970]] = _1969;
                          ++ _ptr__1959[_1970];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int,1 > > _1971 = _1957;
                      _checked_ptr_1<int> _ptr__1971(_1971 ? _1971->raw() : nullptr,_1971 ? _1971->size(0) : 0);
                      _1957 = _1958;
                      _ptr__1957.update(_1957 ? _1957->raw() : nullptr, _1957 ? _1957->size(0) : 0);
                      _1958 = _1971;
                      _ptr__1958.update(_1958 ? _1958->raw() : nullptr, _1958 ? _1958->size(0) : 0);
                    }
                  }
                }
                std::vector<long long> _7670;
                for (int _1972 = (int)0, _7671 = _1925; _1972 < _7671 ; ++_1972)
                {
                  _7670.push_back(_ptr__1939[_ptr__1957[_1972]]);
                }
                auto _7672 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7670.size()),_7670.begin(),_7670.end()));
                std::vector<long long> _7673;
                for (int _1973 = (int)0, _7674 = _1925; _1973 < _7674 ; ++_1973)
                {
                  _7673.push_back(_ptr__1938[_ptr__1957[_1973]]);
                }
                auto _7675 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7673.size()),_7673.begin(),_7673.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1920,_1933,_7672,_7675)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1924)));
          _checked_ptr_1<long long> _ptr__1974(_1974 ? _1974->raw() : nullptr,_1974 ? _1974->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1975 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1924,_1919 ))));
          _checked_ptr_1<long long> _ptr__1975(_1975 ? _1975->raw() : nullptr,_1975 ? _1975->size(0) : 0);
          _1917->inst((int)0,_1974);
          int _1976 = safe_mul( _1929,_1930 );
          int _1977 = _1930;
          int _1978 = (int)0;
          int _7676 = (int)0;
          int _7677 = _1926;
          for (int _1979 = _7676; _1979 < _7677; ++_1979)
          {
            {
              int _7678 = (int)0;
              int _7679 = _1928;
              for (int _1980 = _7678; _1980 < _7679; ++_1980)
              {
                {
                  int _7680 = (int)0;
                  int _7681 = _1930;
                  for (int _1981 = _7680; _1981 < _7681; ++_1981)
                  {
                    {
                      int _7682 = (int)0;
                      int _7683 = _1919;
                      for (int _1982 = _7682; _1982 < _7683; ++_1982)
                      {
                        {
                          _ptr__1975[safe_add( safe_add( safe_mul( _1979,_1976 ),safe_mul( safe_add( _1980,safe_mul( _1982,_1928 ) ),_1977 ) ),_1981 )] = _ptr__1974[_1978];
                        }
                      }
                      ++ _1978;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1920,_1933,nullptr,_1975)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _1983) { return mosek::fusion::p_Var::stack(_1983); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _1983){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _7684;
  for (int _1984 = (int)0, _7685 = (int)((_1983)->size(0)); _1984 < _7685 ; ++_1984)
  {
    _7684.push_back(::mosek::fusion::p_Var::dstack(((*_1983)(_1984)),(int)1));
  }
  auto _7686 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_7684.size()),_7684.begin(),_7684.end()));
  return ::mosek::fusion::p_Var::dstack(_7686,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1985,    monty::rc_ptr< ::mosek::fusion::Variable > _1986,    monty::rc_ptr< ::mosek::fusion::Variable > _1987) { return mosek::fusion::p_Var::vstack(_1985,_1986,_1987); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _1985,monty::rc_ptr< ::mosek::fusion::Variable > _1986,monty::rc_ptr< ::mosek::fusion::Variable > _1987){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1985.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1986.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1987.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1988,    monty::rc_ptr< ::mosek::fusion::Variable > _1989) { return mosek::fusion::p_Var::vstack(_1988,_1989); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _1988,monty::rc_ptr< ::mosek::fusion::Variable > _1989){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1988.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1989.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1990) { return mosek::fusion::p_Var::vstack(_1990); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1990){
  return ::mosek::fusion::p_Var::dstack(_1990,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1991,    monty::rc_ptr< ::mosek::fusion::Variable > _1992,    monty::rc_ptr< ::mosek::fusion::Variable > _1993) { return mosek::fusion::p_Var::hstack(_1991,_1992,_1993); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _1991,monty::rc_ptr< ::mosek::fusion::Variable > _1992,monty::rc_ptr< ::mosek::fusion::Variable > _1993){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1991.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1992.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1993.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1994,    monty::rc_ptr< ::mosek::fusion::Variable > _1995) { return mosek::fusion::p_Var::hstack(_1994,_1995); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _1994,monty::rc_ptr< ::mosek::fusion::Variable > _1995){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1994.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1995.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1996) { return mosek::fusion::p_Var::hstack(_1996); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1996){
  return ::mosek::fusion::p_Var::dstack(_1996,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1997,    monty::rc_ptr< ::mosek::fusion::Variable > _1998,    monty::rc_ptr< ::mosek::fusion::Variable > _1999,    int _2000) { return mosek::fusion::p_Var::stack(_1997,_1998,_1999,_2000); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _1997,monty::rc_ptr< ::mosek::fusion::Variable > _1998,monty::rc_ptr< ::mosek::fusion::Variable > _1999,int _2000){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1997.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1998.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1999.get())}),_2000);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2001,    monty::rc_ptr< ::mosek::fusion::Variable > _2002,    int _2003) { return mosek::fusion::p_Var::stack(_2001,_2002,_2003); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2001,monty::rc_ptr< ::mosek::fusion::Variable > _2002,int _2003){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2001.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2002.get())}),_2003);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2004,    int _2005) { return mosek::fusion::p_Var::stack(_2004,_2005); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2004,int _2005){
  int _2006 = _2005;
  int _7687 = (int)0;
  int _7688 = (int)((_2004)->size(0));
  for (int _2007 = _7687; _2007 < _7688; ++_2007)
  {
    {
      if ((_2006 < ((*_2004)(_2007))->getND()))
      {
        {
          _2006 = ((*_2004)(_2007))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2004,_2005);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote  ( monty::rc_ptr< ::mosek::fusion::Variable > _2008,    int _2009) { return mosek::fusion::p_Var::promote(_2008,_2009); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2008,int _2009){
  if ((_2009 > _2008->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2010 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2009)));
      _checked_ptr_1<int> _ptr__2010(_2010 ? _2010->raw() : nullptr,_2010 ? _2010->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2011 = _2008->getShape();
      _checked_ptr_1<int> _ptr__2011(_2011 ? _2011->raw() : nullptr,_2011 ? _2011->size(0) : 0);
      int _7689 = (int)0;
      int _7690 = (int)((_2011)->size(0));
      for (int _2012 = _7689; _2012 < _7690; ++_2012)
      {
        {
          _ptr__2010[_2012] = _ptr__2011[_2012];
        }
      }
      int _7691 = (int)((_2011)->size(0));
      int _7692 = _2009;
      for (int _2013 = _7691; _2013 < _7692; ++_2013)
      {
        {
          _ptr__2010[_2013] = (int)1;
        }
      }
      return _2008->__mosek_2fusion_2Variable__reshape(_2010);
    }
  }
  else
  {
    {
      return _2008;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2014,int _2015){
  if ((_2015 < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2016 = nullptr;
  {
    int _7693 = (int)0;
    int _7694 = (int)((_2014)->size(0));
    for (int _2017 = _7693; _2017 < _7694; ++_2017)
    {
      {
        if ((NULL == _2016.get()))
        {
          {
            _2016 = ((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel() != _2016)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2018 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _7695;
            bool _7696 = ((int)((mosek::fusion::p_Model::_get_impl(_2016.get())->getName()).size()) > (int)0);
            if (_7696)
            {
              _7695 = mosek::fusion::p_Model::_get_impl(_2016.get())->getName();
            }
            else
            {
              _7695 = std::string ("?");
            }
            std::string _2019 = _7695;
            std::string _7697;
            bool _7698 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_7698)
            {
              _7697 = mosek::fusion::p_Model::_get_impl(((*_2014)(_2017))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _7697 = std::string ("?");
            }
            std::string _2020 = _7697;
            _2018->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2019)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2020)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2018->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2014)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2014)->size(0)) == (int)1))
  {
    {
      return ((*_2014)((int)1));
    }
  }
  else
  {
    {
      int _2021 = (int)((_2014)->size(0));
      std::vector<int> _7699;
      for (int _2023 = (int)0, _7700 = _2021; _2023 < _7700 ; ++_2023)
      {
        _7699.push_back(((*_2014)(_2023))->numInst());
      }
      auto _7701 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7699.size()),_7699.begin(),_7699.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2022 = _7701;
      _checked_ptr_1<int> _ptr__2022(_2022 ? _2022->raw() : nullptr,_2022 ? _2022->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _7702;
      for (int _2025 = (int)0, _7703 = _2021; _2025 < _7703 ; ++_2025)
      {
        _7702.push_back(((*_2014)(_2025))->getShape());
      }
      auto _7704 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_7702.size()),_7702.begin(),_7702.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2024 = _7704;
      std::vector<int> _7705;
      for (int _2027 = (int)0, _7706 = _2021; _2027 < _7706 ; ++_2027)
      {
        _7705.push_back((int)((((*_2024)(_2027)))->size(0)));
      }
      auto _7707 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7705.size()),_7705.begin(),_7705.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2026 = _7707;
      _checked_ptr_1<int> _ptr__2026(_2026 ? _2026->raw() : nullptr,_2026 ? _2026->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2028 = ((*_2024)((int)0));
      _checked_ptr_1<int> _ptr__2028(_2028 ? _2028->raw() : nullptr,_2028 ? _2028->size(0) : 0);
      int _2029 = _ptr__2026[(int)0];
      int _2030 = (int)0;
      int _7708 = (int)0;
      int _7709 = _2021;
      for (int _2031 = _7708; _2031 < _7709; ++_2031)
      {
        {
          _2030 += _ptr__2022[_2031];
        }
      }
      int _2032 = safe_add( _2015,(int)1 );
      int _7710 = (int)0;
      int _7711 = _2021;
      for (int _2033 = _7710; _2033 < _7711; ++_2033)
      {
        {
          if ((_2032 < _ptr__2026[_2033]))
          {
            {
              _2032 = _ptr__2026[_2033];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2034 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2032)));
      _checked_ptr_1<int> _ptr__2034(_2034 ? _2034->raw() : nullptr,_2034 ? _2034->size(0) : 0);
      int _7712 = (int)0;
      int _7713 = _2029;
      for (int _2035 = _7712; _2035 < _7713; ++_2035)
      {
        {
          _ptr__2034[_2035] = _ptr__2028[_2035];
        }
      }
      int _7714 = _2029;
      int _7715 = _2032;
      for (int _2036 = _7714; _2036 < _7715; ++_2036)
      {
        {
          _ptr__2034[_2036] = (int)1;
        }
      }
      _ptr__2034[_2015] = (int)0;
      int _7716 = (int)0;
      int _7717 = _2021;
      for (int _2037 = _7716; _2037 < _7717; ++_2037)
      {
        {
          int _7718;
          bool _7719 = ((int)((((*_2024)(_2037)))->size(0)) > _2015);
          if (_7719)
          {
            _7718 = ((*((*_2024)(_2037)))(_2015));
          }
          else
          {
            _7718 = (int)1;
          }
          _ptr__2034[_2015] += _7718;
        }
      }
      int _7720 = (int)0;
      int _7721 = _2021;
      for (int _2038 = _7720; _2038 < _7721; ++_2038)
      {
        {
          int _7722 = (int)0;
          int _7723 = (int)((((*_2024)(_2038)))->size(0));
          for (int _2039 = _7722; _2039 < _7723; ++_2039)
          {
            {
              if (((_2039 != _2015) && (((*((*_2024)(_2038)))(_2039)) != _ptr__2034[_2039])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int _7724 = (int)((((*_2024)(_2038)))->size(0));
          int _7725 = _2032;
          for (int _2040 = _7724; _2040 < _7725; ++_2040)
          {
            {
              if (((_2040 != _2015) && ((int)1 != _ptr__2034[_2040])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2041 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2030)));
      _checked_ptr_1<long long> _ptr__2041(_2041 ? _2041->raw() : nullptr,_2041 ? _2041->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2042 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2030)));
      _checked_ptr_1<long long> _ptr__2042(_2042 ? _2042->raw() : nullptr,_2042 ? _2042->size(0) : 0);
      std::vector<int> _7726;
      for (int _2044 = (int)0, _7727 = (int)((_2014)->size(0)); _2044 < _7727 ; ++_2044)
      {
        int _7728;
        bool _7729 = (_2015 < (int)((((*_2024)(_2044)))->size(0)));
        if (_7729)
        {
          _7728 = ((*((*_2024)(_2044)))(_2015));
        }
        else
        {
          _7728 = (int)1;
        }
        _7726.push_back(_7728);
      }
      auto _7730 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7726.size()),_7726.begin(),_7726.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2043 = _7730;
      _checked_ptr_1<int> _ptr__2043(_2043 ? _2043->raw() : nullptr,_2043 ? _2043->size(0) : 0);
      int _2045 = (int)1;
      int _7731 = (int)0;
      int _7732 = _2015;
      for (int _2046 = _7731; _2046 < _7732; ++_2046)
      {
        {
          int _7733;
          bool _7734 = (_2046 < (int)((_2028)->size(0)));
          if (_7734)
          {
            _7733 = _ptr__2028[_2046];
          }
          else
          {
            _7733 = (int)1;
          }
          _2045 *= _7733;
        }
      }
      int _2047 = (int)0;
      int _7735 = (int)0;
      int _7736 = _2021;
      for (int _2048 = _7735; _2048 < _7736; ++_2048)
      {
        {
          _2047 += _ptr__2043[_2048];
        }
      }
      int _2049 = (int)1;
      int _7737 = safe_add( _2015,(int)1 );
      int _7738 = (int)((_2028)->size(0));
      for (int _2050 = _7737; _2050 < _7738; ++_2050)
      {
        {
          _2049 *= _ptr__2028[_2050];
        }
      }
      if ((_2045 == (int)1))
      {
        {
          int _2051 = (int)0;
          long long _2052 = (int)0;
          int _7739 = (int)0;
          int _7740 = _2021;
          for (int _2053 = _7739; _2053 < _7740; ++_2053)
          {
            {
              ((*_2014)(_2053))->inst(_2051,_2042,_2051,_2041);
              int _7741 = (int)0;
              int _7742 = _ptr__2022[_2053];
              for (int _2054 = _7741; _2054 < _7742; ++_2054)
              {
                {
                  _ptr__2042[_2051] += _2052;
                  ++ _2051;
                }
              }
              _2052 += ::mosek::fusion::p_Set::size(((*_2024)(_2053)));
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _7743;
          bool _7744 = (_2030 < safe_mul( safe_mul( _2045,_2047 ),_2049 ));
          if (_7744)
          {
            _7743 = _2042;
          }
          else
          {
            _7743 = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2016,_2034,_7743,_2041)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int _2055 = (int)0;
          int _7745 = (int)0;
          int _7746 = _2021;
          for (int _2056 = _7745; _2056 < _7746; ++_2056)
          {
            {
              _2055 += ((*_2014)(_2056))->inst(_2055,_2042,_2055,_2041);
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2057 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2030)));
          _checked_ptr_1<int> _ptr__2057(_2057 ? _2057->raw() : nullptr,_2057 ? _2057->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2058 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2030)));
          _checked_ptr_1<int> _ptr__2058(_2058 ? _2058->raw() : nullptr,_2058 ? _2058->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2059 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2021)));
          _checked_ptr_1<int> _ptr__2059(_2059 ? _2059->raw() : nullptr,_2059 ? _2059->size(0) : 0);
          int _7747 = (int)0;
          int _7748 = (_2021 - (int)1);
          for (int _2060 = _7747; _2060 < _7748; ++_2060)
          {
            {
              _ptr__2059[safe_add( _2060,(int)1 )] = safe_add( _ptr__2059[_2060],_ptr__2043[_2060] );
            }
          }
          int _7749 = (int)0;
          int _7750 = _2030;
          for (int _2061 = _7749; _2061 < _7750; ++_2061)
          {
            {
              _ptr__2057[_2061] = _2061;
            }
          }
          int _2062 = (int)0;
          int _7751 = (int)0;
          int _7752 = _2021;
          for (int _2063 = _7751; _2063 < _7752; ++_2063)
          {
            {
              int _7753 = (int)0;
              int _7754 = _ptr__2022[_2063];
              for (int _2064 = _7753; _2064 < _7754; ++_2064)
              {
                {
                  long long _2065 = (_ptr__2042[_2062] / safe_mul( _ptr__2043[_2063],_2049 ));
                  long long _2066 = ((_ptr__2042[_2062] / _2049) % _ptr__2043[_2063]);
                  long long _2067 = (_ptr__2042[_2062] % _2049);
                  _ptr__2042[_2062] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2065,_2047 ),_2066 ),_ptr__2059[_2063] ),_2049 ),_2067 );
                  ++ _2062;
                }
              }
            }
          }
          int _2068 = (int)1;
          int _7755 = (int)0;
          int _7756 = _2032;
          for (int _2069 = _7755; _2069 < _7756; ++_2069)
          {
            {
              int _7757;
              bool _7758 = (_2068 < _ptr__2034[_2069]);
              if (_7758)
              {
                _7757 = _ptr__2034[_2069];
              }
              else
              {
                _7757 = _2068;
              }
              _2068 = _7757;
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _2070 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2032)));
          _checked_ptr_1<long long> _ptr__2070(_2070 ? _2070->raw() : nullptr,_2070 ? _2070->size(0) : 0);
          _ptr__2070[(_2032 - (int)1)] = (int)1;
          int _7759 = (int)1;
          int _7760 = _2032;
          for (int _2071 = _7759; _2071 < _7760; ++_2071)
          {
            {
              _ptr__2070[((_2032 - _2071) - (int)1)] = safe_mul( _ptr__2070[(_2032 - _2071)],_ptr__2034[(_2032 - _2071)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2072 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2068,(int)1 ))));
          _checked_ptr_1<int> _ptr__2072(_2072 ? _2072->raw() : nullptr,_2072 ? _2072->size(0) : 0);
          int _7761 = (int)0;
          int _7762 = _2032;
          for (int _2073 = _7761; _2073 < _7762; ++_2073)
          {
            {
              int _2074 = ((_2032 - _2073) - (int)1);
              int _7763 = (int)0;
              int _7764 = safe_add( _ptr__2034[_2074],(int)1 );
              for (int _2075 = _7763; _2075 < _7764; ++_2075)
              {
                {
                  _ptr__2072[_2075] = (int)0;
                }
              }
              int _7765 = (int)0;
              int _7766 = _2030;
              for (int _2076 = _7765; _2076 < _7766; ++_2076)
              {
                {
                  ++ _ptr__2072[safe_add( ((_ptr__2042[_2076] / _ptr__2070[_2074]) % _ptr__2034[_2074]),(int)1 )];
                }
              }
              int _7767 = (int)0;
              int _7768 = _ptr__2034[_2074];
              for (int _2077 = _7767; _2077 < _7768; ++_2077)
              {
                {
                  _ptr__2072[safe_add( _2077,(int)1 )] += _ptr__2072[_2077];
                }
              }
              int _7769 = (int)0;
              int _7770 = _2030;
              for (int _2078 = _7769; _2078 < _7770; ++_2078)
              {
                {
                  int _2079 = _ptr__2057[_2078];
                  long long _2080 = ((_ptr__2042[_2079] / _ptr__2070[_2074]) % _ptr__2034[_2074]);
                  _ptr__2058[_ptr__2072[_2080]] = _2079;
                  ++ _ptr__2072[_2080];
                }
              }
              std::shared_ptr< monty::ndarray< int,1 > > _2081 = _2057;
              _checked_ptr_1<int> _ptr__2081(_2081 ? _2081->raw() : nullptr,_2081 ? _2081->size(0) : 0);
              _2057 = _2058;
              _ptr__2057.update(_2057 ? _2057->raw() : nullptr, _2057 ? _2057->size(0) : 0);
              _2058 = _2081;
              _ptr__2058.update(_2058 ? _2058->raw() : nullptr, _2058 ? _2058->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _7771;
          bool _7772 = (_2030 < safe_mul( safe_mul( _2045,_2047 ),_2049 ));
          if (_7772)
          {
            std::vector<long long> _7773;
            for (int _2082 = (int)0, _7774 = _2030; _2082 < _7774 ; ++_2082)
            {
              _7773.push_back(_ptr__2042[_ptr__2057[_2082]]);
            }
            auto _7775 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7773.size()),_7773.begin(),_7773.end()));
            _7771 = _7775;
          }
          else
          {
            _7771 = nullptr;
          }
          std::vector<long long> _7776;
          for (int _2083 = (int)0, _7777 = _2030; _2083 < _7777 ; ++_2083)
          {
            _7776.push_back(_ptr__2041[_ptr__2057[_2083]]);
          }
          auto _7778 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7776.size()),_7776.begin(),_7776.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2016,_2034,_7771,_7778)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2084,    monty::rc_ptr< ::mosek::fusion::Model > _2085){ return new mosek::fusion::LinearPSDConstraint(_2084,_2085); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2084,    monty::rc_ptr< ::mosek::fusion::Model > _2085) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2084,_2085); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2084,    monty::rc_ptr< ::mosek::fusion::Model > _2085){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2084,_2085);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2084)->shape;
  }
}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2086,    const std::string &  _2087,    int _2088,    std::shared_ptr< monty::ndarray< int,1 > > _2089,    int _2090,    std::shared_ptr< monty::ndarray< int,1 > > _2091,    std::shared_ptr< monty::ndarray< long long,1 > > _2092){ return new mosek::fusion::LinearPSDConstraint(_2086,_2087,_2088,_2089,_2090,_2091,_2092); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2086,    const std::string &  _2087,    int _2088,    std::shared_ptr< monty::ndarray< int,1 > > _2089,    int _2090,    std::shared_ptr< monty::ndarray< int,1 > > _2091,    std::shared_ptr< monty::ndarray< long long,1 > > _2092) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2086,_2087,_2088,_2089,_2090,_2091,_2092); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2086,    const std::string &  _2087,    int _2088,    std::shared_ptr< monty::ndarray< int,1 > > _2089,    int _2090,    std::shared_ptr< monty::ndarray< int,1 > > _2091,    std::shared_ptr< monty::ndarray< long long,1 > > _2092){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2089(_2089 ? _2089->raw() : nullptr, _2089 ? _2089->size(0) : 0);
    _checked_ptr_1<int> _ptr__2091(_2091 ? _2091->raw() : nullptr, _2091 ? _2091->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2092(_2092 ? _2092->raw() : nullptr, _2092 ? _2092->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2086,_2087,_2089,_2091);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2088;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2092;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2091;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2090;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2089;
  }
}void mosek::fusion::p_LinearPSDConstraint::domainToString(long long _2093,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2094){
  std::shared_ptr< monty::ndarray< int,1 > > _2095 = ::mosek::fusion::p_Set::idxtokey(shape,_2093);
  _checked_ptr_1<int> _ptr__2095(_2095 ? _2095->raw() : nullptr,_2095 ? _2095->size(0) : 0);
  _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2095[(int)0]);
  int _7779 = (int)1;
  int _7780 = (int)((_2095)->size(0));
  for (int _2096 = _7779; _2096 < _7780; ++_2096)
  {
    {
      _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2095[_2096]);
    }
  }
  _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7781 = (int)1;
  int _7782 = (int)((_2095)->size(0));
  for (int _2097 = _7781; _2097 < _7782; ++_2097)
  {
    {
      _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2097)));
    }
  }
  _2094->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2098){
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2098)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearPSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2099,    monty::rc_ptr< ::mosek::fusion::Model > _2100){ return new mosek::fusion::PSDConstraint(_2099,_2100); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2099,    monty::rc_ptr< ::mosek::fusion::Model > _2100) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2099,_2100); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2099,    monty::rc_ptr< ::mosek::fusion::Model > _2100){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2099,_2100);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2099)->conedim1;
  }
}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2101,    const std::string &  _2102,    int _2103,    std::shared_ptr< monty::ndarray< int,1 > > _2104,    int _2105,    int _2106,    std::shared_ptr< monty::ndarray< long long,1 > > _2107,    std::shared_ptr< monty::ndarray< int,1 > > _2108){ return new mosek::fusion::PSDConstraint(_2101,_2102,_2103,_2104,_2105,_2106,_2107,_2108); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2101,    const std::string &  _2102,    int _2103,    std::shared_ptr< monty::ndarray< int,1 > > _2104,    int _2105,    int _2106,    std::shared_ptr< monty::ndarray< long long,1 > > _2107,    std::shared_ptr< monty::ndarray< int,1 > > _2108) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2101,_2102,_2103,_2104,_2105,_2106,_2107,_2108); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2101,    const std::string &  _2102,    int _2103,    std::shared_ptr< monty::ndarray< int,1 > > _2104,    int _2105,    int _2106,    std::shared_ptr< monty::ndarray< long long,1 > > _2107,    std::shared_ptr< monty::ndarray< int,1 > > _2108){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2104(_2104 ? _2104->raw() : nullptr, _2104 ? _2104->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2107(_2107 ? _2107->raw() : nullptr, _2107 ? _2107->size(0) : 0);
    _checked_ptr_1<int> _ptr__2108(_2108 ? _2108->raw() : nullptr, _2108 ? _2108->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2101,_2102,_2104,::mosek::fusion::p_PSDConstraint::computenidxs(_2104,_2105,_2106,_2108));
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2103;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2108;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2107;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2102;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2104;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2105;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2106;
    names_flushed = false;
  }
}std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2109){
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2109)).as<::mosek::fusion::ModelConstraint>();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int,1 > > _2110,int _2111,int _2112,std::shared_ptr< monty::ndarray< int,1 > > _2113){
  _checked_ptr_1<int> _ptr__2110(_2110 ? _2110->raw() : nullptr, _2110 ? _2110->size(0) : 0);
  _checked_ptr_1<int> _ptr__2113(_2113 ? _2113->raw() : nullptr, _2113 ? _2113->size(0) : 0);
  int _2114 = (int)((_2110)->size(0));
  bool _2115 = (_2111 < _2112);
  int _7783;
  bool _7784 = _2115;
  if (_7784)
  {
    _7783 = _2111;
  }
  else
  {
    _7783 = _2112;
  }
  int _2116 = _7783;
  int _7785;
  bool _7786 = _2115;
  if (_7786)
  {
    _7785 = _2112;
  }
  else
  {
    _7785 = _2111;
  }
  int _2117 = _7785;
  std::shared_ptr< monty::ndarray< int,1 > > _2118 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__2118(_2118 ? _2118->raw() : nullptr,_2118 ? _2118->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2119 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__2119(_2119 ? _2119->raw() : nullptr,_2119 ? _2119->size(0) : 0);
  int _2120 = (int)1;
  int _7787 = (int)0;
  int _7788 = (int)((_2110)->size(0));
  for (int _2121 = _7787; _2121 < _7788; ++_2121)
  {
    {
      _2120 *= _ptr__2110[_2121];
    }
  }
  int _7789 = (int)0;
  int _7790 = _2116;
  for (int _2122 = _7789; _2122 < _7790; ++_2122)
  {
    {
      _ptr__2118[(int)0] *= _ptr__2110[_2122];
    }
  }
  _ptr__2118[(int)1] = _ptr__2110[_2116];
  int _7791 = safe_add( _2116,(int)1 );
  int _7792 = _2117;
  for (int _2123 = _7791; _2123 < _7792; ++_2123)
  {
    {
      _ptr__2118[(int)2] *= _ptr__2110[_2123];
    }
  }
  _ptr__2118[(int)3] = _ptr__2110[_2117];
  int _7793 = safe_add( _2117,(int)1 );
  int _7794 = _2114;
  for (int _2124 = _7793; _2124 < _7794; ++_2124)
  {
    {
      _ptr__2118[(int)4] *= _ptr__2110[_2124];
    }
  }
  _ptr__2119[(int)4] = (int)1;
  int _7795 = (int)1;
  int _7796 = (int)5;
  for (int _2125 = _7795; _2125 < _7796; ++_2125)
  {
    {
      _ptr__2119[(((int)5 - _2125) - (int)1)] = safe_mul( _ptr__2119[((int)5 - _2125)],_ptr__2118[((int)5 - _2125)] );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2126 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2120)));
  _checked_ptr_1<int> _ptr__2126(_2126 ? _2126->raw() : nullptr,_2126 ? _2126->size(0) : 0);
  int _2127 = (int)0;
  if (_2115)
  {
    {
      int _7797 = (int)0;
      int _7798 = _ptr__2118[(int)0];
      for (int _2128 = _7797; _2128 < _7798; ++_2128)
      {
        {
          int _7799 = (int)0;
          int _7800 = _ptr__2118[(int)1];
          for (int _2129 = _7799; _2129 < _7800; ++_2129)
          {
            {
              int _7801 = (int)0;
              int _7802 = _ptr__2118[(int)2];
              for (int _2130 = _7801; _2130 < _7802; ++_2130)
              {
                {
                  int _7803 = _2129;
                  int _7804 = _ptr__2118[(int)1];
                  for (int _2131 = _7803; _2131 < _7804; ++_2131)
                  {
                    {
                      int _7805 = (int)0;
                      int _7806 = _ptr__2118[(int)4];
                      for (int _2132 = _7805; _2132 < _7806; ++_2132)
                      {
                        {
                          _ptr__2126[safe_add( safe_add( safe_add( safe_add( safe_mul( _2128,_ptr__2119[(int)0] ),safe_mul( _2129,_ptr__2119[(int)1] ) ),safe_mul( _2130,_ptr__2119[(int)2] ) ),safe_mul( _2131,_ptr__2119[(int)3] ) ),safe_mul( _2132,_ptr__2119[(int)4] ) )] = _ptr__2113[_2127];
                          _ptr__2126[safe_add( safe_add( safe_add( safe_add( safe_mul( _2128,_ptr__2119[(int)0] ),safe_mul( _2131,_ptr__2119[(int)1] ) ),safe_mul( _2130,_ptr__2119[(int)2] ) ),safe_mul( _2129,_ptr__2119[(int)3] ) ),safe_mul( _2132,_ptr__2119[(int)4] ) )] = _ptr__2113[_2127];
                          ++ _2127;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _7807 = (int)0;
      int _7808 = _ptr__2118[(int)0];
      for (int _2133 = _7807; _2133 < _7808; ++_2133)
      {
        {
          int _7809 = (int)0;
          int _7810 = _ptr__2118[(int)1];
          for (int _2134 = _7809; _2134 < _7810; ++_2134)
          {
            {
              int _7811 = (int)0;
              int _7812 = _ptr__2118[(int)2];
              for (int _2135 = _7811; _2135 < _7812; ++_2135)
              {
                {
                  int _7813 = (int)0;
                  int _7814 = safe_add( _2134,(int)1 );
                  for (int _2136 = _7813; _2136 < _7814; ++_2136)
                  {
                    {
                      int _7815 = (int)0;
                      int _7816 = _ptr__2118[(int)4];
                      for (int _2137 = _7815; _2137 < _7816; ++_2137)
                      {
                        {
                          _ptr__2126[safe_add( safe_add( safe_add( safe_add( safe_mul( _2133,_ptr__2119[(int)0] ),safe_mul( _2134,_ptr__2119[(int)1] ) ),safe_mul( _2135,_ptr__2119[(int)2] ) ),safe_mul( _2136,_ptr__2119[(int)3] ) ),safe_mul( _2137,_ptr__2119[(int)4] ) )] = _ptr__2113[_2127];
                          _ptr__2126[safe_add( safe_add( safe_add( safe_add( safe_mul( _2133,_ptr__2119[(int)0] ),safe_mul( _2136,_ptr__2119[(int)1] ) ),safe_mul( _2135,_ptr__2119[(int)2] ) ),safe_mul( _2134,_ptr__2119[(int)3] ) ),safe_mul( _2137,_ptr__2119[(int)4] ) )] = _ptr__2113[_2127];
                          ++ _2127;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2126;
}
void mosek::fusion::p_PSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barmatidx() { return _impl->barmatidx; }
void mosek::fusion::ConstraintCache::set_barmatidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmatidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConstraintCache::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConstraintCache::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
long long mosek::fusion::ConstraintCache::get_nbarnz() { return _impl->nbarnz; }
void mosek::fusion::ConstraintCache::set_nbarnz(long long _val) { _impl->nbarnz = _val; }
long long mosek::fusion::ConstraintCache::get_nunordered() { return _impl->nunordered; }
void mosek::fusion::ConstraintCache::set_nunordered(long long _val) { _impl->nunordered = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subi() { return _impl->buffer_subi; }
void mosek::fusion::ConstraintCache::set_buffer_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subj() { return _impl->buffer_subj; }
void mosek::fusion::ConstraintCache::set_buffer_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subj = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_buffer_cof() { return _impl->buffer_cof; }
void mosek::fusion::ConstraintCache::set_buffer_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->buffer_cof = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConstraintCache::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_cof() { return _impl->cof; }
void mosek::fusion::ConstraintCache::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subi() { return _impl->subi; }
void mosek::fusion::ConstraintCache::set_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subj() { return _impl->subj; }
void mosek::fusion::ConstraintCache::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
long long mosek::fusion::ConstraintCache::get_nnz() { return _impl->nnz; }
void mosek::fusion::ConstraintCache::set_nnz(long long _val) { _impl->nnz = _val; }
int mosek::fusion::ConstraintCache::get_nrows() { return _impl->nrows; }
void mosek::fusion::ConstraintCache::set_nrows(int _val) { _impl->nrows = _val; }
mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2138){ return new mosek::fusion::ConstraintCache(_2138); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2138) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2138); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2138){monty::rc_reserve __reserve_this(_pubthis);   {
    nrows = mosek::fusion::p_ConstraintCache::_get_impl(_2138)->nrows;
    nnz = mosek::fusion::p_ConstraintCache::_get_impl(_2138)->nnz;
    std::shared_ptr< monty::ndarray< int,1 > > _7817;
    bool _7818 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->subj.get());
    if (_7818)
    {
      _7817 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->subj);
    }
    else
    {
      _7817 = nullptr;
    }
    subj = _7817;
    std::shared_ptr< monty::ndarray< int,1 > > _7819;
    bool _7820 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->subi.get());
    if (_7820)
    {
      _7819 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->subi);
    }
    else
    {
      _7819 = nullptr;
    }
    subi = _7819;
    std::shared_ptr< monty::ndarray< double,1 > > _7821;
    bool _7822 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->cof.get());
    if (_7822)
    {
      _7821 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->cof);
    }
    else
    {
      _7821 = nullptr;
    }
    cof = _7821;
    std::shared_ptr< monty::ndarray< double,1 > > _7823;
    bool _7824 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->bfix.get());
    if (_7824)
    {
      _7823 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->bfix);
    }
    else
    {
      _7823 = nullptr;
    }
    bfix = _7823;
    std::shared_ptr< monty::ndarray< double,1 > > _7825;
    bool _7826 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_cof.get());
    if (_7826)
    {
      _7825 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_cof);
    }
    else
    {
      _7825 = nullptr;
    }
    buffer_cof = _7825;
    std::shared_ptr< monty::ndarray< int,1 > > _7827;
    bool _7828 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_subj.get());
    if (_7828)
    {
      _7827 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_subj);
    }
    else
    {
      _7827 = nullptr;
    }
    buffer_subj = _7827;
    std::shared_ptr< monty::ndarray< int,1 > > _7829;
    bool _7830 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_subi.get());
    if (_7830)
    {
      _7829 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->buffer_subi);
    }
    else
    {
      _7829 = nullptr;
    }
    buffer_subi = _7829;
    nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_2138)->nunordered;
    nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_2138)->nbarnz;
    std::shared_ptr< monty::ndarray< int,1 > > _7831;
    bool _7832 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barsubi.get());
    if (_7832)
    {
      _7831 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barsubi);
    }
    else
    {
      _7831 = nullptr;
    }
    barsubi = _7831;
    std::shared_ptr< monty::ndarray< int,1 > > _7833;
    bool _7834 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barsubj.get());
    if (_7834)
    {
      _7833 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barsubj);
    }
    else
    {
      _7833 = nullptr;
    }
    barsubj = _7833;
    std::shared_ptr< monty::ndarray< int,1 > > _7835;
    bool _7836 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barmatidx.get());
    if (_7836)
    {
      _7835 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2138)->barmatidx);
    }
    else
    {
      _7835 = nullptr;
    }
    barmatidx = _7835;
  }
}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2139,    std::shared_ptr< monty::ndarray< double,1 > > _2140,    std::shared_ptr< monty::ndarray< int,1 > > _2141,    std::shared_ptr< monty::ndarray< double,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144,    std::shared_ptr< monty::ndarray< int,1 > > _2145){ return new mosek::fusion::ConstraintCache(_2139,_2140,_2141,_2142,_2143,_2144,_2145); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2139,    std::shared_ptr< monty::ndarray< double,1 > > _2140,    std::shared_ptr< monty::ndarray< int,1 > > _2141,    std::shared_ptr< monty::ndarray< double,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144,    std::shared_ptr< monty::ndarray< int,1 > > _2145) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2139,_2140,_2141,_2142,_2143,_2144,_2145); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _2139,    std::shared_ptr< monty::ndarray< double,1 > > _2140,    std::shared_ptr< monty::ndarray< int,1 > > _2141,    std::shared_ptr< monty::ndarray< double,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144,    std::shared_ptr< monty::ndarray< int,1 > > _2145){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2139(_2139 ? _2139->raw() : nullptr, _2139 ? _2139->size(0) : 0);
    _checked_ptr_1<double> _ptr__2140(_2140 ? _2140->raw() : nullptr, _2140 ? _2140->size(0) : 0);
    _checked_ptr_1<int> _ptr__2141(_2141 ? _2141->raw() : nullptr, _2141 ? _2141->size(0) : 0);
    _checked_ptr_1<double> _ptr__2142(_2142 ? _2142->raw() : nullptr, _2142 ? _2142->size(0) : 0);
    _checked_ptr_1<int> _ptr__2143(_2143 ? _2143->raw() : nullptr, _2143 ? _2143->size(0) : 0);
    _checked_ptr_1<int> _ptr__2144(_2144 ? _2144->raw() : nullptr, _2144 ? _2144->size(0) : 0);
    _checked_ptr_1<int> _ptr__2145(_2145 ? _2145->raw() : nullptr, _2145 ? _2145->size(0) : 0);
    nrows = ((int)((_2139)->size(0)) - (int)1);
    nnz = _ptr__2139[((int)((_2139)->size(0)) - (int)1)];
    subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)));
    if ((NULL != _2142.get()))
    {
      {
        bfix = _2142;
      }
    }
    else
    {
      {
        bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)));
      }
    }
    if (((NULL != _2143.get()) && ((NULL != _2144.get()) && (NULL != _2145.get()))))
    {
      {
        nbarnz = (int)((_2143)->size(0));
        if ((nbarnz > (int)((_2144)->size(0))))
        {
          {
            nbarnz = (int)((_2144)->size(0));
          }
        }
        {}
        if ((nbarnz > (int)((_2145)->size(0))))
        {
          {
            nbarnz = (int)((_2145)->size(0));
          }
        }
        {}
        barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        ::mosek::fusion::Utils::Tools::arraycopy(_2143,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2144,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2145,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
      }
    }
    else
    {
      {
        nbarnz = (int)0;
        barsubi = nullptr;
        barsubj = nullptr;
        barmatidx = nullptr;
      }
    }
    ::mosek::fusion::Utils::Tools::arraycopy(_2141,(long long)0,subj,(long long)0,nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_2140,(long long)0,cof,(long long)0,nnz);
    int _7837 = (int)0;
    int _7838 = nrows;
    for (int _2146 = _7837; _2146 < _7838; ++_2146)
    {
      {
        long long _7839 = _ptr__2139[_2146];
        long long _7840 = _ptr__2139[safe_add( _2146,(int)1 )];
        for (long long _2147 = _7839; _2147 < _7840; ++_2147)
        {
          {
            ((*subi)(_2147)) = _2146;
          }
        }
      }
    }
    buffer_cof = nullptr;
    buffer_subj = nullptr;
    buffer_subi = nullptr;
    nunordered = (long long)0;
  }
}void mosek::fusion::p_ConstraintCache::unchecked_add_fx(std::shared_ptr< monty::ndarray< double,1 > > _2148){
  _checked_ptr_1<double> _ptr__2148(_2148 ? _2148->raw() : nullptr, _2148 ? _2148->size(0) : 0);
  int _7841 = (int)0;
  int _7842 = nrows;
  for (int _2149 = _7841; _2149 < _7842; ++_2149)
  {
    {
      ((*bfix)(_2149)) = (((*bfix)(_2149)) + _ptr__2148[_2149]);
    }
  }
}
long long mosek::fusion::p_ConstraintCache::order_barentries(){
  std::vector<long long> _7843;
  for (long long _2151 = (long long)0, _7844 = nbarnz; _2151 < _7844 ; ++_2151)
  {
    _7843.push_back(_2151);
  }
  auto _7845 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7843.size()),_7843.begin(),_7843.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _2150 = _7845;
  _checked_ptr_1<long long> _ptr__2150(_2150 ? _2150->raw() : nullptr,_2150 ? _2150->size(0) : 0);
  if ((!::mosek::fusion::p_Sort::issorted(_2150,barsubi,barsubj,(long long)((int)0),nbarnz,false)))
  {
    {
      ::mosek::fusion::p_Sort::argsort(_2150,barsubi,barsubj,(long long)((int)0),nbarnz,false);
      std::shared_ptr< monty::ndarray< int,1 > > _2152 = barsubi;
      _checked_ptr_1<int> _ptr__2152(_2152 ? _2152->raw() : nullptr,_2152 ? _2152->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2153 = barsubj;
      _checked_ptr_1<int> _ptr__2153(_2153 ? _2153->raw() : nullptr,_2153 ? _2153->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2154 = barmatidx;
      _checked_ptr_1<int> _ptr__2154(_2154 ? _2154->raw() : nullptr,_2154 ? _2154->size(0) : 0);
      std::vector<int> _7846;
      for (long long _2155 = (int)0, _7847 = nbarnz; _2155 < _7847 ; ++_2155)
      {
        _7846.push_back(_ptr__2152[_ptr__2150[_2155]]);
      }
      auto _7848 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7846.size()),_7846.begin(),_7846.end()));
      barsubi = _7848;
      std::vector<int> _7849;
      for (long long _2156 = (int)0, _7850 = nbarnz; _2156 < _7850 ; ++_2156)
      {
        _7849.push_back(_ptr__2153[_ptr__2150[_2156]]);
      }
      auto _7851 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7849.size()),_7849.begin(),_7849.end()));
      barsubj = _7851;
      std::vector<int> _7852;
      for (long long _2157 = (int)0, _7853 = nbarnz; _2157 < _7853 ; ++_2157)
      {
        _7852.push_back(_ptr__2154[_ptr__2150[_2157]]);
      }
      auto _7854 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7852.size()),_7852.begin(),_7852.end()));
      barmatidx = _7854;
    }
  }
  {}
  return nbarnz;
}
void mosek::fusion::p_ConstraintCache::add_bar(std::shared_ptr< monty::ndarray< int,1 > > _2158,std::shared_ptr< monty::ndarray< int,1 > > _2159,std::shared_ptr< monty::ndarray< int,1 > > _2160){
  _checked_ptr_1<int> _ptr__2158(_2158 ? _2158->raw() : nullptr, _2158 ? _2158->size(0) : 0);
  _checked_ptr_1<int> _ptr__2159(_2159 ? _2159->raw() : nullptr, _2159 ? _2159->size(0) : 0);
  _checked_ptr_1<int> _ptr__2160(_2160 ? _2160->raw() : nullptr, _2160 ? _2160->size(0) : 0);
  if ((NULL != _2158.get()))
  {
    {
      int _2161 = (int)((_2158)->size(0));
      if (((int)((_2158)->size(0)) <= safe_add( nbarnz,_2161 )))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2162 = barsubi;
          _checked_ptr_1<int> _ptr__2162(_2162 ? _2162->raw() : nullptr,_2162 ? _2162->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2163 = barsubj;
          _checked_ptr_1<int> _ptr__2163(_2163 ? _2163->raw() : nullptr,_2163 ? _2163->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2164 = barmatidx;
          _checked_ptr_1<int> _ptr__2164(_2164 ? _2164->raw() : nullptr,_2164 ? _2164->size(0) : 0);
          long long _7855;
          bool _7856 = (safe_mul( (int)2,nbarnz ) > safe_add( nbarnz,_2161 ));
          if (_7856)
          {
            _7855 = safe_mul( (int)2,nbarnz );
          }
          else
          {
            _7855 = safe_add( nbarnz,safe_mul( _2161,(int)2 ) );
          }
          long long _2165 = _7855;
          barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2165)));
          barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2165)));
          barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2165)));
          if ((nbarnz > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_2162,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2163,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2164,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
            }
          }
          {}
        }
      }
      {}
      ::mosek::fusion::Utils::Tools::arraycopy(_2158,(long long)((int)0),barsubi,nbarnz,(long long)(_2161));
      ::mosek::fusion::Utils::Tools::arraycopy(_2159,(long long)((int)0),barsubj,nbarnz,(long long)(_2161));
      ::mosek::fusion::Utils::Tools::arraycopy(_2160,(long long)((int)0),barmatidx,nbarnz,(long long)(_2161));
      nbarnz += _2161;
    }
  }
  {}
}
void mosek::fusion::p_ConstraintCache::unchecked_add_l(std::shared_ptr< monty::ndarray< long long,1 > > _2166,std::shared_ptr< monty::ndarray< int,1 > > _2167,std::shared_ptr< monty::ndarray< double,1 > > _2168,std::shared_ptr< monty::ndarray< double,1 > > _2169){
  _checked_ptr_1<long long> _ptr__2166(_2166 ? _2166->raw() : nullptr, _2166 ? _2166->size(0) : 0);
  _checked_ptr_1<int> _ptr__2167(_2167 ? _2167->raw() : nullptr, _2167 ? _2167->size(0) : 0);
  _checked_ptr_1<double> _ptr__2168(_2168 ? _2168->raw() : nullptr, _2168 ? _2168->size(0) : 0);
  _checked_ptr_1<double> _ptr__2169(_2169 ? _2169->raw() : nullptr, _2169 ? _2169->size(0) : 0);
  long long _2170 = safe_add( nunordered,_ptr__2166[nrows] );
  long long _2171 = _ptr__2166[nrows];
  std::shared_ptr< monty::ndarray< int,1 > > _2172;
  _checked_ptr_1<int> _ptr__2172(_2172 ? _2172->raw() : nullptr,_2172 ? _2172->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2173;
  _checked_ptr_1<int> _ptr__2173(_2173 ? _2173->raw() : nullptr,_2173 ? _2173->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2174;
  _checked_ptr_1<double> _ptr__2174(_2174 ? _2174->raw() : nullptr,_2174 ? _2174->size(0) : 0);
  if (((NULL == buffer_cof.get()) || ((int)((buffer_cof)->size(0)) < _2170)))
  {
    {
      _2172 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2170)));
      _ptr__2172.update(_2172 ? _2172->raw() : nullptr, _2172 ? _2172->size(0) : 0);
      _2173 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2170)));
      _ptr__2173.update(_2173 ? _2173->raw() : nullptr, _2173 ? _2173->size(0) : 0);
      _2174 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2170)));
      _ptr__2174.update(_2174 ? _2174->raw() : nullptr, _2174 ? _2174->size(0) : 0);
      if ((NULL != buffer_cof.get()))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_2172,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_2173,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_2174,(long long)0,nunordered);
        }
      }
      {}
    }
  }
  else
  {
    {
      _2172 = buffer_subi;
      _ptr__2172.update(_2172 ? _2172->raw() : nullptr, _2172 ? _2172->size(0) : 0);
      _2173 = buffer_subj;
      _ptr__2173.update(_2173 ? _2173->raw() : nullptr, _2173 ? _2173->size(0) : 0);
      _2174 = buffer_cof;
      _ptr__2174.update(_2174 ? _2174->raw() : nullptr, _2174 ? _2174->size(0) : 0);
    }
  }
  int _7857 = (int)0;
  int _7858 = nrows;
  for (int _2175 = _7857; _2175 < _7858; ++_2175)
  {
    {
      long long _7859 = _ptr__2166[_2175];
      long long _7860 = _ptr__2166[safe_add( _2175,(int)1 )];
      for (long long _2176 = _7859; _2176 < _7860; ++_2176)
      {
        {
          _ptr__2172[safe_add( nunordered,_2176 )] = _2175;
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_2167,(long long)0,_2173,nunordered,_2171);
  ::mosek::fusion::Utils::Tools::arraycopy(_2168,(long long)0,_2174,nunordered,_2171);
  buffer_subi = _2172;
  buffer_subj = _2173;
  buffer_cof = _2174;
  if ((NULL != _2169.get()))
  {
    {
      int _7861 = (int)0;
      int _7862 = nrows;
      for (int _2177 = _7861; _2177 < _7862; ++_2177)
      {
        {
          ((*bfix)(_2177)) = (((*bfix)(_2177)) + _ptr__2169[_2177]);
        }
      }
    }
  }
  {}
  nunordered = _2170;
}
void mosek::fusion::ConstraintCache :: add(std::shared_ptr< monty::ndarray< long long,1 > > _2178,std::shared_ptr< monty::ndarray< int,1 > > _2179,std::shared_ptr< monty::ndarray< double,1 > > _2180,std::shared_ptr< monty::ndarray< double,1 > > _2181) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_2178,_2179,_2180,_2181); }void mosek::fusion::p_ConstraintCache::add(std::shared_ptr< monty::ndarray< long long,1 > > _2178,std::shared_ptr< monty::ndarray< int,1 > > _2179,std::shared_ptr< monty::ndarray< double,1 > > _2180,std::shared_ptr< monty::ndarray< double,1 > > _2181){
  _checked_ptr_1<long long> _ptr__2178(_2178 ? _2178->raw() : nullptr, _2178 ? _2178->size(0) : 0);
  _checked_ptr_1<int> _ptr__2179(_2179 ? _2179->raw() : nullptr, _2179 ? _2179->size(0) : 0);
  _checked_ptr_1<double> _ptr__2180(_2180 ? _2180->raw() : nullptr, _2180 ? _2180->size(0) : 0);
  _checked_ptr_1<double> _ptr__2181(_2181 ? _2181->raw() : nullptr, _2181 ? _2181->size(0) : 0);
  if ((((int)((_2178)->size(0)) != safe_add( nrows,(int)1 )) || ((NULL != _2181.get()) && ((int)((_2181)->size(0)) != nrows))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));
    }
  }
  {}
  unchecked_add_l(_2178,_2179,_2180,_2181);
}
long long mosek::fusion::ConstraintCache :: flush(std::shared_ptr< monty::ndarray< int,1 > > _2182,std::shared_ptr< monty::ndarray< int,1 > > _2183,std::shared_ptr< monty::ndarray< double,1 > > _2184,std::shared_ptr< monty::ndarray< double,1 > > _2185) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_2182,_2183,_2184,_2185); }long long mosek::fusion::p_ConstraintCache::flush(std::shared_ptr< monty::ndarray< int,1 > > _2182,std::shared_ptr< monty::ndarray< int,1 > > _2183,std::shared_ptr< monty::ndarray< double,1 > > _2184,std::shared_ptr< monty::ndarray< double,1 > > _2185){
  _checked_ptr_1<int> _ptr__2182(_2182 ? _2182->raw() : nullptr, _2182 ? _2182->size(0) : 0);
  _checked_ptr_1<int> _ptr__2183(_2183 ? _2183->raw() : nullptr, _2183 ? _2183->size(0) : 0);
  _checked_ptr_1<double> _ptr__2184(_2184 ? _2184->raw() : nullptr, _2184 ? _2184->size(0) : 0);
  _checked_ptr_1<double> _ptr__2185(_2185 ? _2185->raw() : nullptr, _2185 ? _2185->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2186 = nullptr;
  _checked_ptr_1<long long> _ptr__2186(_2186 ? _2186->raw() : nullptr,_2186 ? _2186->size(0) : 0);
  if (((NULL != bfix.get()) && (NULL != _2185.get())))
  {
    {
      int _7863 = (int)0;
      int _7864 = nrows;
      for (int _2187 = _7863; _2187 < _7864; ++_2187)
      {
        {
          _ptr__2185[_2187] = ((*bfix)(_2187));
        }
      }
    }
  }
  {}
  if ((nunordered == (long long)0))
  {
    {
      return (long long)0;
    }
  }
  {}
  bool _2188 = false;
  {
    int _2189 = (int)1;
    while ( ((_2189 < nunordered) && ((((*buffer_subi)((_2189 - (int)1))) < ((*buffer_subi)(_2189))) || ((((*buffer_subi)((_2189 - (int)1))) == ((*buffer_subi)(_2189))) && (((*buffer_subj)((_2189 - (int)1))) <= ((*buffer_subj)(_2189)))))) )
    {
      {
        ++ _2189;
      }
    }
    _2188 = (_2189 == nunordered);
  }
  if ((!_2188))
  {
    {
      std::vector<long long> _7865;
      for (long long _2190 = (int)0, _7866 = nunordered; _2190 < _7866 ; ++_2190)
      {
        _7865.push_back(_2190);
      }
      auto _7867 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7865.size()),_7865.begin(),_7865.end()));
      _2186 = _7867;
      _ptr__2186.update(_2186 ? _2186->raw() : nullptr, _2186 ? _2186->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2186,buffer_subi,buffer_subj,(long long)0,nunordered);
    }
  }
  {}
  long long _2191 = nnz;
  std::shared_ptr< monty::ndarray< int,1 > > _2192 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2191 ))));
  _checked_ptr_1<int> _ptr__2192(_2192 ? _2192->raw() : nullptr,_2192 ? _2192->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2193 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2191 ))));
  _checked_ptr_1<int> _ptr__2193(_2193 ? _2193->raw() : nullptr,_2193 ? _2193->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2194 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( nunordered,_2191 ))));
  _checked_ptr_1<double> _ptr__2194(_2194 ? _2194->raw() : nullptr,_2194 ? _2194->size(0) : 0);
  long long _2195 = (long long)0;
  if (_2188)
  {
    {
      long long _2196 = (long long)0;
      int _2197 = (int)0;
      long long _2198 = nunordered;
      long long _2199 = _2191;
      int _2200 = (int)0;
      int _2201 = (int)0;
      while ( ((_2201 < _2199) && (_2200 < _2198)) )
      {
        {
          if (((((*subi)(_2201)) < ((*buffer_subi)(_2200))) || ((((*subi)(_2201)) == ((*buffer_subi)(_2200))) && (((*subj)(_2201)) < ((*buffer_subj)(_2200))))))
          {
            {
              _ptr__2192[_2197] = ((*subi)(_2201));
              _ptr__2193[_2197] = ((*subj)(_2201));
              _ptr__2194[_2197] = ((*cof)(_2201));
              ++ _2201;
              ++ _2197;
            }
          }
          else if(((((*subi)(_2201)) > ((*buffer_subi)(_2200))) || ((((*subi)(_2201)) == ((*buffer_subi)(_2200))) && (((*subj)(_2201)) > ((*buffer_subj)(_2200))))))
          {
            {
              _ptr__2192[_2197] = ((*buffer_subi)(_2200));
              _ptr__2193[_2197] = ((*buffer_subj)(_2200));
              _ptr__2194[_2197] = ((*buffer_cof)(_2200));
              _ptr__2182[_2195] = _ptr__2192[_2197];
              _ptr__2183[_2195] = _ptr__2193[_2197];
              _ptr__2184[_2195] = _ptr__2194[_2197];
              ++ _2195;
              ++ _2200;
              ++ _2197;
            }
          }
          else
          {
            {
              _ptr__2192[_2197] = ((*subi)(_2201));
              _ptr__2193[_2197] = ((*subj)(_2201));
              _ptr__2194[_2197] = ((*cof)(_2201));
              while ( ((_2201 < (int)((subi)->size(0))) && ((_2200 < (int)((buffer_subi)->size(0))) && ((((*subi)(_2201)) == ((*buffer_subi)(_2200))) && (((*subj)(_2201)) == ((*buffer_subj)(_2200)))))) )
              {
                {
                  _ptr__2194[_2197] = (_ptr__2194[_2197] + ((*buffer_cof)(_2200)));
                  ++ _2200;
                }
              }
              _ptr__2182[_2195] = _ptr__2192[_2197];
              _ptr__2183[_2195] = _ptr__2193[_2197];
              _ptr__2184[_2195] = _ptr__2194[_2197];
              ++ _2195;
              ++ _2201;
              ++ _2197;
            }
          }
        }
      }
      while ( (_2201 < _2199) )
      {
        {
          _ptr__2192[_2197] = ((*subi)(_2201));
          _ptr__2193[_2197] = ((*subj)(_2201));
          _ptr__2194[_2197] = ((*cof)(_2201));
          ++ _2201;
          ++ _2197;
        }
      }
      while ( (_2200 < _2198) )
      {
        {
          _ptr__2192[_2197] = ((*buffer_subi)(_2200));
          _ptr__2193[_2197] = ((*buffer_subj)(_2200));
          _ptr__2194[_2197] = ((*buffer_cof)(_2200));
          _ptr__2182[_2195] = _ptr__2192[_2197];
          _ptr__2183[_2195] = _ptr__2193[_2197];
          _ptr__2184[_2195] = _ptr__2194[_2197];
          ++ _2195;
          ++ _2200;
          ++ _2197;
        }
      }
      nnz = _2197;
    }
  }
  else
  {
    {
      long long _2202 = (long long)0;
      int _2203 = (int)0;
      long long _2204 = nunordered;
      long long _2205 = _2191;
      int _2206 = (int)0;
      int _2207 = (int)0;
      while ( ((_2207 < _2205) && (_2206 < _2204)) )
      {
        {
          if (((((*subi)(_2207)) < ((*buffer_subi)(_ptr__2186[_2206]))) || ((((*subi)(_2207)) == ((*buffer_subi)(_ptr__2186[_2206]))) && (((*subj)(_2207)) < ((*buffer_subj)(_ptr__2186[_2206]))))))
          {
            {
              _ptr__2192[_2203] = ((*subi)(_2207));
              _ptr__2193[_2203] = ((*subj)(_2207));
              _ptr__2194[_2203] = ((*cof)(_2207));
              ++ _2207;
              ++ _2203;
            }
          }
          else if(((((*subi)(_2207)) > ((*buffer_subi)(_ptr__2186[_2206]))) || ((((*subi)(_2207)) == ((*buffer_subi)(_ptr__2186[_2206]))) && (((*subj)(_2207)) > ((*buffer_subj)(_ptr__2186[_2206]))))))
          {
            {
              _ptr__2192[_2203] = ((*buffer_subi)(_ptr__2186[_2206]));
              _ptr__2193[_2203] = ((*buffer_subj)(_ptr__2186[_2206]));
              _ptr__2194[_2203] = ((*buffer_cof)(_ptr__2186[_2206]));
              _ptr__2182[_2195] = _ptr__2192[_2203];
              _ptr__2183[_2195] = _ptr__2193[_2203];
              _ptr__2184[_2195] = _ptr__2194[_2203];
              ++ _2195;
              ++ _2206;
              ++ _2203;
            }
          }
          else
          {
            {
              _ptr__2192[_2203] = ((*subi)(_2207));
              _ptr__2193[_2203] = ((*subj)(_2207));
              _ptr__2194[_2203] = ((*cof)(_2207));
              while ( ((((*subi)(_2207)) == ((*buffer_subi)(_ptr__2186[_2206]))) && (((*subj)(_2207)) == ((*buffer_subj)(_ptr__2186[_2206])))) )
              {
                {
                  _ptr__2194[_2203] = (_ptr__2194[_2203] + ((*buffer_cof)(_ptr__2186[_2206])));
                  ++ _2206;
                }
              }
              _ptr__2182[_2195] = _ptr__2192[_2203];
              _ptr__2183[_2195] = _ptr__2193[_2203];
              _ptr__2184[_2195] = _ptr__2194[_2203];
              ++ _2195;
              ++ _2207;
              ++ _2203;
            }
          }
        }
      }
      nnz = _2203;
    }
  }
  subi = _2192;
  subj = _2193;
  cof = _2194;
  nunordered = (long long)0;
  return _2195;
}
long long mosek::fusion::ConstraintCache :: numUnsorted() { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted(){
  return nunordered;
}
monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::__mosek_2fusion_2ConstraintCache__clone(){
  return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(::mosek::fusion::ConstraintCache::t(_pubthis));
}
void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209,    std::shared_ptr< monty::ndarray< int,1 > > _2210){ return new mosek::fusion::SliceConstraint(_2208,_2209,_2210); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209,    std::shared_ptr< monty::ndarray< int,1 > > _2210) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2208,_2209,_2210); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209,    std::shared_ptr< monty::ndarray< int,1 > > _2210){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2209(_2209 ? _2209->raw() : nullptr, _2209 ? _2209->size(0) : 0);
    _checked_ptr_1<int> _ptr__2210(_2210 ? _2210->raw() : nullptr, _2210 ? _2210->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2208,_2209,_2210);
  }
}std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_SliceConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2211 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2211->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2211->toString();
}
void mosek::fusion::p_SliceConstraint::destroy(){}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2212,    monty::rc_ptr< ::mosek::fusion::Model > _2213){ return new mosek::fusion::RangedConstraint(_2212,_2213); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2212,    monty::rc_ptr< ::mosek::fusion::Model > _2213) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2212,_2213); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2212,    monty::rc_ptr< ::mosek::fusion::Model > _2213){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2212,_2213);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2212)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2212)->nativeidxs;
  }
}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2214,    const std::string &  _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216,    std::shared_ptr< monty::ndarray< int,1 > > _2217){ return new mosek::fusion::RangedConstraint(_2214,_2215,_2216,_2217); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2214,    const std::string &  _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216,    std::shared_ptr< monty::ndarray< int,1 > > _2217) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2214,_2215,_2216,_2217); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2214,    const std::string &  _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216,    std::shared_ptr< monty::ndarray< int,1 > > _2217){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2216(_2216 ? _2216->raw() : nullptr, _2216 ? _2216->size(0) : 0);
    _checked_ptr_1<int> _ptr__2217(_2217 ? _2217->raw() : nullptr, _2217 ? _2217->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2214,_2215,_2216,_2217);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2216;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2217;
  }
}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2218){
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2218)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_RangedConstraint::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2219,    monty::rc_ptr< ::mosek::fusion::Model > _2220){ return new mosek::fusion::ConicConstraint(_2219,_2220); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2219,    monty::rc_ptr< ::mosek::fusion::Model > _2220) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2219,_2220); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2219,    monty::rc_ptr< ::mosek::fusion::Model > _2220){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2219,_2220);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->nativeidxs;
    nativeslack = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->nativeslack;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2219)->names_flushed;
  }
}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2221,    const std::string &  _2222,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2223,    std::shared_ptr< monty::ndarray< int,1 > > _2224,    int _2225,    std::shared_ptr< monty::ndarray< int,1 > > _2226,    std::shared_ptr< monty::ndarray< int,1 > > _2227){ return new mosek::fusion::ConicConstraint(_2221,_2222,_2223,_2224,_2225,_2226,_2227); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2221,    const std::string &  _2222,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2223,    std::shared_ptr< monty::ndarray< int,1 > > _2224,    int _2225,    std::shared_ptr< monty::ndarray< int,1 > > _2226,    std::shared_ptr< monty::ndarray< int,1 > > _2227) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2221,_2222,_2223,_2224,_2225,_2226,_2227); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2221,    const std::string &  _2222,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2223,    std::shared_ptr< monty::ndarray< int,1 > > _2224,    int _2225,    std::shared_ptr< monty::ndarray< int,1 > > _2226,    std::shared_ptr< monty::ndarray< int,1 > > _2227){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2224(_2224 ? _2224->raw() : nullptr, _2224 ? _2224->size(0) : 0);
    _checked_ptr_1<int> _ptr__2226(_2226 ? _2226->raw() : nullptr, _2226 ? _2226->size(0) : 0);
    _checked_ptr_1<int> _ptr__2227(_2227 ? _2227->raw() : nullptr, _2227 ? _2227->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2221,_2222,_2224,_2226);
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2223;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2224;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2222;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2226;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeslack = _2227;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2225;
    names_flushed = false;
  }
}void mosek::fusion::p_ConicConstraint::flushNames(){
  ::mosek::fusion::p_ModelConstraint::flushNames();
  int _2228 = (int)((nativeslack)->size(0));
  monty::rc_ptr< ::mosek::fusion::Model > _2229 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          int _7868 = (int)0;
          int _7869 = _2228;
          for (int _2230 = _7868; _2230 < _7869; ++_2230)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2229.get())->task_var_name(((*nativeslack)(_2230)),std::string (""));
            }
          }
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2231 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          int _7870 = (int)0;
          int _7871 = _2228;
          for (int _2232 = _7870; _2232 < _7871; ++_2232)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2229.get())->task_var_name(((*nativeslack)(_2232)),_2231->__mosek_2fusion_2Utils_2StringBuffer__clear()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,(long long)(_2232)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("].coneslack"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2233 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2233->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2233->toString();
}
void mosek::fusion::p_ConicConstraint::domainToString(long long _2234,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2235){
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2236){
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2236)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_ConicConstraint::destroy(){nativeslack.reset();nativeidxs.reset();shape.reset();dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2237,    monty::rc_ptr< ::mosek::fusion::Model > _2238){ return new mosek::fusion::LinearConstraint(_2237,_2238); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2237,    monty::rc_ptr< ::mosek::fusion::Model > _2238) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2237,_2238); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2237,    monty::rc_ptr< ::mosek::fusion::Model > _2238){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2237,_2238);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2237)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2237)->name;
  }
}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2239,    const std::string &  _2240,    int _2241,    std::shared_ptr< monty::ndarray< int,1 > > _2242,    std::shared_ptr< monty::ndarray< int,1 > > _2243){ return new mosek::fusion::LinearConstraint(_2239,_2240,_2241,_2242,_2243); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2239,    const std::string &  _2240,    int _2241,    std::shared_ptr< monty::ndarray< int,1 > > _2242,    std::shared_ptr< monty::ndarray< int,1 > > _2243) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2239,_2240,_2241,_2242,_2243); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2239,    const std::string &  _2240,    int _2241,    std::shared_ptr< monty::ndarray< int,1 > > _2242,    std::shared_ptr< monty::ndarray< int,1 > > _2243){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2242(_2242 ? _2242->raw() : nullptr, _2242 ? _2242->size(0) : 0);
    _checked_ptr_1<int> _ptr__2243(_2243 ? _2243->raw() : nullptr, _2243 ? _2243->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2239,_2240,_2242,_2243);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2241;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2240;
  }
}std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2244 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2244->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2244->toString();
}
void mosek::fusion::p_LinearConstraint::domainToString(long long _2245,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2246){
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2247){
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2247)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearConstraint::destroy(){}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2248,    monty::rc_ptr< ::mosek::fusion::Model > _2249){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2248,_2249);
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2248)->name;
    names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_2248)->names_flushed;
    nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2248)->nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2248)->shape;
  }
}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2250,    const std::string &  _2251,    std::shared_ptr< monty::ndarray< int,1 > > _2252,    std::shared_ptr< monty::ndarray< int,1 > > _2253){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2252(_2252 ? _2252->raw() : nullptr, _2252 ? _2252->size(0) : 0);
    _checked_ptr_1<int> _ptr__2253(_2253 ? _2253->raw() : nullptr, _2253 ? _2253->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2250,_2252,_2253);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2251;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->nativeidxs = _2253;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2252;
  }
}std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2254 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2254->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2254->toString();
}
void mosek::fusion::p_ModelConstraint::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _2255 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if ((!names_flushed))
  {
    {
      if ((_pubthis->getSize() == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      else
      {
        {
          if (((int)((name).size()) == (int)0))
          {
            {
              mosek::fusion::p_Model::_get_impl(_2255.get())->connames(nativeidxs,std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_pubthis->getSize())}),std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
            }
          }
          else
          {
            {
              monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2256 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
              _2256->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
              if ((_pubthis->getND() > (int)0))
              {
                {
                  _2256->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
                  int _7872 = (int)1;
                  int _7873 = _pubthis->getND();
                  for (int _2257 = _7872; _2257 < _7873; ++_2257)
                  {
                    {
                      _2256->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2257);
                    }
                  }
                }
              }
              {}
              _2256->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
              std::shared_ptr< monty::ndarray< int,1 > > _7874;
              bool _7875 = (_pubthis->getND() > (int)0);
              if (_7875)
              {
                _7874 = _pubthis->getShape();
              }
              else
              {
                _7874 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
              }
              mosek::fusion::p_Model::_get_impl(_2255.get())->connames(nativeidxs,_2256->toString(),_7874,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
              names_flushed = true;
            }
          }
        }
      }
    }
  }
  {}
}
void mosek::fusion::p_ModelConstraint::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2259,    monty::rc_ptr< ::mosek::fusion::Model > _2260){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _2260;
    shape = mosek::fusion::p_Constraint::_get_impl(_2259)->shape;
    nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2259)->nativeidxs;
  }
}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2261,    std::shared_ptr< monty::ndarray< int,1 > > _2262,    std::shared_ptr< monty::ndarray< int,1 > > _2263){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2262(_2262 ? _2262->raw() : nullptr, _2262 ? _2262->size(0) : 0);
    _checked_ptr_1<int> _ptr__2263(_2263 ? _2263->raw() : nullptr, _2263 ? _2263->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2261;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2262;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->nativeidxs = _2263;
  }
}std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< long long,1 > > _2264,long long _2265,std::shared_ptr< monty::ndarray< std::string,1 > > _2266){
  _checked_ptr_1<long long> _ptr__2264(_2264 ? _2264->raw() : nullptr, _2264 ? _2264->size(0) : 0);
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2267 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2267(_2267 ? _2267->raw() : nullptr,_2267 ? _2267->size(0) : 0);
  values(false,(int)0,_2267);
  return _2267;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2268 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2268(_2268 ? _2268->raw() : nullptr,_2268 ? _2268->size(0) : 0);
  values(true,(int)0,_2268);
  return _2268;
}
void mosek::fusion::p_Constraint::values(bool _2269,int _2270,std::shared_ptr< monty::ndarray< double,1 > > _2271){
  _checked_ptr_1<double> _ptr__2271(_2271 ? _2271->raw() : nullptr, _2271 ? _2271->size(0) : 0);
  model->getConstraintValues(_2269,nativeidxs,_2271,_2270);
}
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2272) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2272); }void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2272){
  _checked_ptr_1<double> _ptr__2272(_2272 ? _2272->raw() : nullptr, _2272 ? _2272->size(0) : 0);
  mosek::fusion::p_Model::_get_impl(model.get())->update_bfix(nativeidxs,_2272);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2273) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2273); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2273){
  std::shared_ptr< monty::ndarray< int,1 > > _2274 = _2273->getShape();
  _checked_ptr_1<int> _ptr__2274(_2274 ? _2274->raw() : nullptr,_2274 ? _2274->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2274)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _7876 = (int)0;
  int _7877 = (int)((_2274)->size(0));
  for (int _2275 = _7876; _2275 < _7877; ++_2275)
  {
    {
      if ((_ptr__2274[_2275] != ((*shape)(_2275))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _7878 = (int)((_2274)->size(0));
  int _7879 = (int)((shape)->size(0));
  for (int _2276 = _7878; _2276 < _7879; ++_2276)
  {
    {
      if ((((*shape)(_2276)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2273);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2277,monty::rc_ptr< ::mosek::fusion::Variable > _2278,bool _2279) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2277,_2278,_2279); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2277,monty::rc_ptr< ::mosek::fusion::Variable > _2278,bool _2279){
  int _2280 = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int,1 > > _2281 = _2277->getShape();
  _checked_ptr_1<int> _ptr__2281(_2281 ? _2281->raw() : nullptr,_2281 ? _2281->size(0) : 0);
  if ((_2280 < (int)((_2281)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _7880 = (int)0;
  int _7881 = (int)((_2281)->size(0));
  for (int _2282 = _7880; _2282 < _7881; ++_2282)
  {
    {
      if ((_ptr__2281[_2282] != ((*shape)(_2282))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _7882 = (int)((_2281)->size(0));
  int _7883 = (int)((shape)->size(0));
  for (int _2283 = _7882; _2283 < _7883; ++_2283)
  {
    {
      if ((((*shape)(_2283)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _2284 = _2278->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2285 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2284)));
  _checked_ptr_1<long long> _ptr__2285(_2285 ? _2285->raw() : nullptr,_2285 ? _2285->size(0) : 0);
  if ((_2284 < _2278->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2286 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2284)));
      _checked_ptr_1<long long> _ptr__2286(_2286 ? _2286->raw() : nullptr,_2286 ? _2286->size(0) : 0);
      _2278->inst((int)0,_2286,(int)0,_2285);
    }
  }
  else
  {
    {
      _2278->inst((int)0,_2285);
    }
  }
  int _7884 = (int)0;
  int _7885 = _2284;
  for (int _2287 = _7884; _2287 < _7885; ++_2287)
  {
    {
      if ((_ptr__2285[_2287] < (int)0))
      {
        {
          throw ::mosek::fusion::UnimplementedError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2288;
  _checked_ptr_1<int> _ptr__2288(_2288 ? _2288->raw() : nullptr,_2288 ? _2288->size(0) : 0);
  {
    bool _2289 = true;
    int _7886 = (int)0;
    int _7887 = (_2284 - (int)1);
    for (int _2290 = _7886; _2290 < _7887; ++_2290)
    {
      {
        _2289 = (_2289 && (_ptr__2285[_2290] < _ptr__2285[safe_add( _2290,(int)1 )]));
      }
    }
    if (_2289)
    {
      {
        std::vector<int> _7888;
        for (int _2291 = (int)0, _7889 = _2284; _2291 < _7889 ; ++_2291)
        {
          _7888.push_back((int)(_ptr__2285[_2291] - (int)1));
        }
        auto _7890 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7888.size()),_7888.begin(),_7888.end()));
        _2288 = _7890;
        _ptr__2288.update(_2288 ? _2288->raw() : nullptr, _2288 ? _2288->size(0) : 0);
      }
    }
    else
    {
      {
        std::vector<long long> _7891;
        for (int _2293 = (int)0, _7892 = _2284; _2293 < _7892 ; ++_2293)
        {
          _7891.push_back(_2293);
        }
        auto _7893 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7891.size()),_7891.begin(),_7891.end()));
        std::shared_ptr< monty::ndarray< long long,1 > > _2292 = _7893;
        _checked_ptr_1<long long> _ptr__2292(_2292 ? _2292->raw() : nullptr,_2292 ? _2292->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2292,_2285,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2284));
        int _2294 = (int)1;
        int _7894 = (int)1;
        int _7895 = _2284;
        for (int _2295 = _7894; _2295 < _7895; ++_2295)
        {
          {
            if ((_ptr__2285[_ptr__2292[(_2295 - (int)1)]] < _ptr__2285[_ptr__2292[_2295]]))
            {
              {
                ++ _2294;
              }
            }
            {}
          }
        }
        _2288 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2294)));
        _ptr__2288.update(_2288 ? _2288->raw() : nullptr, _2288 ? _2288->size(0) : 0);
        int _2296 = (int)0;
        _ptr__2288[(int)0] = (int)(_ptr__2285[_ptr__2292[(int)0]] - (int)1);
        int _7896 = (int)1;
        int _7897 = _2284;
        for (int _2297 = _7896; _2297 < _7897; ++_2297)
        {
          {
            if ((_ptr__2285[(_2297 - (int)1)] < _ptr__2285[_2297]))
            {
              {
                _ptr__2288[_2296] = (int)(_ptr__2285[_ptr__2292[_2297]] - (int)1);
                ++ _2296;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2277,_2288,_2279);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2298,monty::rc_ptr< ::mosek::fusion::Variable > _2299) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2298,_2299); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2298,monty::rc_ptr< ::mosek::fusion::Variable > _2299){
  _pubthis->update(_2298,_2299,false);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model(){
  return model;
}
int mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd(){
  return (int)((shape)->size(0));
}
long long mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size(){
  long long _2300 = (int)1;
  int _7898 = (int)0;
  int _7899 = (int)((shape)->size(0));
  for (int _2301 = _7898; _2301 < _7899; ++_2301)
  {
    {
      _2300 *= ((*shape)(_2301));
    }
  }
  return _2300;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2302,    int _2303) { return mosek::fusion::p_Constraint::stack(_2302,_2303); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2302,int _2303){
  return ::mosek::fusion::p_Constraint::dstack(_2302,_2303);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2304,    monty::rc_ptr< ::mosek::fusion::Constraint > _2305,    monty::rc_ptr< ::mosek::fusion::Constraint > _2306,    int _2307) { return mosek::fusion::p_Constraint::stack(_2304,_2305,_2306,_2307); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2304,monty::rc_ptr< ::mosek::fusion::Constraint > _2305,monty::rc_ptr< ::mosek::fusion::Constraint > _2306,int _2307){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2304.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2305.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2306.get())}),_2307);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2308,    monty::rc_ptr< ::mosek::fusion::Constraint > _2309,    int _2310) { return mosek::fusion::p_Constraint::stack(_2308,_2309,_2310); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2308,monty::rc_ptr< ::mosek::fusion::Constraint > _2309,int _2310){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2308.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2309.get())}),_2310);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2311) { return mosek::fusion::p_Constraint::hstack(_2311); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2311){
  return ::mosek::fusion::p_Constraint::dstack(_2311,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2312) { return mosek::fusion::p_Constraint::vstack(_2312); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2312){
  return ::mosek::fusion::p_Constraint::dstack(_2312,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2313,    monty::rc_ptr< ::mosek::fusion::Constraint > _2314,    monty::rc_ptr< ::mosek::fusion::Constraint > _2315) { return mosek::fusion::p_Constraint::hstack(_2313,_2314,_2315); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2313,monty::rc_ptr< ::mosek::fusion::Constraint > _2314,monty::rc_ptr< ::mosek::fusion::Constraint > _2315){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2313.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2314.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2315.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2316,    monty::rc_ptr< ::mosek::fusion::Constraint > _2317,    monty::rc_ptr< ::mosek::fusion::Constraint > _2318) { return mosek::fusion::p_Constraint::vstack(_2316,_2317,_2318); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2316,monty::rc_ptr< ::mosek::fusion::Constraint > _2317,monty::rc_ptr< ::mosek::fusion::Constraint > _2318){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2316.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2317.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2318.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2319,    monty::rc_ptr< ::mosek::fusion::Constraint > _2320) { return mosek::fusion::p_Constraint::hstack(_2319,_2320); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2319,monty::rc_ptr< ::mosek::fusion::Constraint > _2320){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2319.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2320.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2321,    monty::rc_ptr< ::mosek::fusion::Constraint > _2322) { return mosek::fusion::p_Constraint::vstack(_2321,_2322); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2321,monty::rc_ptr< ::mosek::fusion::Constraint > _2322){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2321.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2322.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2323,int _2324){
  monty::rc_ptr< ::mosek::fusion::Model > _2325 = nullptr;
  {
    int _7900 = (int)0;
    int _7901 = (int)((_2323)->size(0));
    for (int _2326 = _7900; _2326 < _7901; ++_2326)
    {
      {
        if ((NULL == _2325.get()))
        {
          {
            _2325 = ((*_2323)(_2326))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2326)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2326)))->model != _2325)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2327 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _7902;
            bool _7903 = ((int)((mosek::fusion::p_Model::_get_impl(_2325.get())->getName()).size()) > (int)0);
            if (_7903)
            {
              _7902 = mosek::fusion::p_Model::_get_impl(_2325.get())->getName();
            }
            else
            {
              _7902 = std::string ("?");
            }
            std::string _2328 = _7902;
            std::string _7904;
            bool _7905 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2323)(_2326))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_7905)
            {
              _7904 = mosek::fusion::p_Model::_get_impl(((*_2323)(_2326))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _7904 = std::string ("?");
            }
            std::string _2329 = _7904;
            _2327->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2328)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2329)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2327->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2323)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2323)->size(0)) == (int)1))
  {
    {
      return ((*_2323)((int)1));
    }
  }
  else
  {
    {
      int _2330 = (int)((_2323)->size(0));
      int _2331 = (int)1;
      int _7906 = (int)0;
      int _7907 = _2330;
      for (int _2332 = _7906; _2332 < _7907; ++_2332)
      {
        {
          int _7908;
          bool _7909 = (((*_2323)(_2332))->getND() > _2331);
          if (_7909)
          {
            _7908 = ((*_2323)(_2332))->getND();
          }
          else
          {
            _7908 = _2331;
          }
          _2331 = _7908;
        }
      }
      if ((_2324 == _2331))
      {
        {
          ++ _2331;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,2 > > _2333 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2330,_2331)));
      int _7910 = (int)0;
      int _7911 = _2330;
      for (int _2334 = _7910; _2334 < _7911; ++_2334)
      {
        {
          int _7912 = (int)0;
          int _7913 = _2331;
          for (int _2335 = _7912; _2335 < _7913; ++_2335)
          {
            {
              ((*_2333)(_2334,_2335)) = (int)1;
            }
          }
        }
      }
      std::vector<int> _7914;
      for (int _2337 = (int)0, _7915 = _2330; _2337 < _7915 ; ++_2337)
      {
        _7914.push_back(((*_2323)(_2337))->getSize());
      }
      auto _7916 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7914.size()),_7914.begin(),_7914.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2336 = _7916;
      _checked_ptr_1<int> _ptr__2336(_2336 ? _2336->raw() : nullptr,_2336 ? _2336->size(0) : 0);
      int _2338 = (int)0;
      int _7917 = (int)0;
      int _7918 = _2330;
      for (int _2339 = _7917; _2339 < _7918; ++_2339)
      {
        {
          _2338 += _ptr__2336[_2339];
        }
      }
      int _7919 = (int)0;
      int _7920 = _2330;
      for (int _2340 = _7919; _2340 < _7920; ++_2340)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2341 = ((*_2323)(_2340))->getShape();
          _checked_ptr_1<int> _ptr__2341(_2341 ? _2341->raw() : nullptr,_2341 ? _2341->size(0) : 0);
          int _7921 = (int)0;
          int _7922 = (int)((_2341)->size(0));
          for (int _2342 = _7921; _2342 < _7922; ++_2342)
          {
            {
              ((*_2333)(_2340,_2342)) = _ptr__2341[_2342];
            }
          }
        }
      }
      if (((_2324 < (int)0) || (_2324 > _2331)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int _7923 = (int)0;
      int _7924 = _2324;
      for (int _2343 = _7923; _2343 < _7924; ++_2343)
      {
        {
          int _7925 = (int)1;
          int _7926 = _2330;
          for (int _2344 = _7925; _2344 < _7926; ++_2344)
          {
            {
              if ((((*_2333)((int)0,_2343)) != ((*_2333)(_2344,_2343))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int _7927 = safe_add( _2324,(int)1 );
      int _7928 = _2331;
      for (int _2345 = _7927; _2345 < _7928; ++_2345)
      {
        {
          int _7929 = (int)1;
          int _7930 = _2330;
          for (int _2346 = _7929; _2346 < _7930; ++_2346)
          {
            {
              if ((((*_2333)((int)0,_2345)) != ((*_2333)(_2346,_2345))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2347 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2338)));
      _checked_ptr_1<int> _ptr__2347(_2347 ? _2347->raw() : nullptr,_2347 ? _2347->size(0) : 0);
      std::vector<int> _7931;
      for (int _2349 = (int)0, _7932 = _2331; _2349 < _7932 ; ++_2349)
      {
        _7931.push_back(((*_2333)((int)0,_2349)));
      }
      auto _7933 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7931.size()),_7931.begin(),_7931.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2348 = _7933;
      _checked_ptr_1<int> _ptr__2348(_2348 ? _2348->raw() : nullptr,_2348 ? _2348->size(0) : 0);
      int _7934 = (int)0;
      int _7935 = _2331;
      for (int _2350 = _7934; _2350 < _7935; ++_2350)
      {
        {
          _ptr__2348[_2324] += ((*_2333)(_2350,_2324));
        }
      }
      {
        int _2351 = (int)((_2348)->size(0));
        std::shared_ptr< monty::ndarray< long long,1 > > _2352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( (int)((_2323)->size(0)),(int)1 ))));
        _checked_ptr_1<long long> _ptr__2352(_2352 ? _2352->raw() : nullptr,_2352 ? _2352->size(0) : 0);
        int _7936 = (int)0;
        int _7937 = (int)((_2323)->size(0));
        for (int _2353 = _7936; _2353 < _7937; ++_2353)
        {
          {
            _ptr__2352[safe_add( _2353,(int)1 )] = safe_add( _ptr__2352[_2353],((*_2333)(_2353,_2324)) );
          }
        }
        if ((_2324 == (int)0))
        {
          {
            int _2354 = (int)0;
            int _7938 = (int)0;
            int _7939 = _2330;
            for (int _2355 = _7938; _2355 < _7939; ++_2355)
            {
              {
                int _2356 = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2355)))->nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2355)))->nativeidxs,(int)0,_2347,_2354,_2356);
                _2354 += _2356;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _7940;
            for (int _2358 = (int)0, _7941 = _2330; _2358 < _7941 ; ++_2358)
            {
              _7940.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2358)))->nativeidxs);
            }
            auto _7942 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_7940.size()),_7940.begin(),_7940.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2357 = _7942;
            if ((_2324 < _2331))
            {
              {
                int _2359 = (int)1;
                int _7943 = (int)0;
                int _7944 = _2324;
                for (int _2360 = _7943; _2360 < _7944; ++_2360)
                {
                  {
                    _2359 *= _ptr__2348[_2360];
                  }
                }
                int _2361 = (int)1;
                int _7945 = safe_add( _2324,(int)1 );
                int _7946 = _2331;
                for (int _2362 = _7945; _2362 < _7946; ++_2362)
                {
                  {
                    _2361 *= _ptr__2348[_2362];
                  }
                }
                int _2363 = (int)0;
                int _7947 = (int)0;
                int _7948 = _2359;
                for (int _2364 = _7947; _2364 < _7948; ++_2364)
                {
                  {
                    int _7949 = (int)0;
                    int _7950 = _2330;
                    for (int _2365 = _7949; _2365 < _7950; ++_2365)
                    {
                      {
                        int _2366 = (int)0;
                        int _2367 = ((*_2333)(_2365,_2324));
                        int _7951 = (int)0;
                        int _7952 = _2367;
                        for (int _2368 = _7951; _2368 < _7952; ++_2368)
                        {
                          {
                            int _7953 = (int)0;
                            int _7954 = _2361;
                            for (int _2369 = _7953; _2369 < _7954; ++_2369)
                            {
                              {
                                _ptr__2347[_2363] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2323)(_2330)))->nativeidxs)(safe_add( safe_mul( safe_mul( _2364,_2361 ),_2367 ),_2366 )));
                                ++ _2363;
                                ++ _2366;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int _2370 = (int)1;
                int _7955 = (int)0;
                int _7956 = _2331;
                for (int _2371 = _7955; _2371 < _7956; ++_2371)
                {
                  {
                    _2370 *= _ptr__2348[_2371];
                  }
                }
                int _2372 = (int)0;
                int _7957 = (int)0;
                int _7958 = _2370;
                for (int _2373 = _7957; _2373 < _7958; ++_2373)
                {
                  {
                    int _7959 = (int)0;
                    int _7960 = _2330;
                    for (int _2374 = _7959; _2374 < _7960; ++_2374)
                    {
                      {
                        _ptr__2347[_2372] = ((*((*_2357)(_2374)))(_2373));
                        ++ _2372;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2325,_2348,_2347)).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2375) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2375); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2375) { return __mosek_2fusion_2Constraint__index(_2375); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2375){
  _checked_ptr_1<int> _ptr__2375(_2375 ? _2375->raw() : nullptr, _2375 ? _2375->size(0) : 0);
  if (((int)((_2375)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7961 = (int)0;
      int _7962 = (int)((shape)->size(0));
      for (int _2376 = _7961; _2376 < _7962; ++_2376)
      {
        {
          if (((_ptr__2375[_2376] < (int)0) || (_ptr__2375[_2376] > ((*shape)(_2376)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int _2377 = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< long long,1 > > _2378 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2377)));
      _checked_ptr_1<long long> _ptr__2378(_2378 ? _2378->raw() : nullptr,_2378 ? _2378->size(0) : 0);
      _ptr__2378[(_2377 - (int)1)] = (int)1;
      int _7963 = (int)1;
      int _7964 = _2377;
      for (int _2379 = _7963; _2379 < _7964; ++_2379)
      {
        {
          _ptr__2378[((_2377 - _2379) - (int)1)] = safe_mul( _ptr__2378[(_2377 - _2379)],((*shape)(_2379)) );
        }
      }
      int _2380 = (int)0;
      int _7965 = (int)0;
      int _7966 = _2377;
      for (int _2381 = _7965; _2381 < _7966; ++_2381)
      {
        {
          _2380 += (int)safe_mul( _ptr__2378[_2381],_ptr__2375[_2381] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2380)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int _2382) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2382); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int _2382) { return __mosek_2fusion_2Constraint__index(_2382); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int _2382){
  if ((((int)((shape)->size(0)) == (int)0) && (_2382 == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_2382 < (int)0) || (_2382 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2382)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2383,std::shared_ptr< monty::ndarray< int,1 > > _2384) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2383,_2384); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2383,std::shared_ptr< monty::ndarray< int,1 > > _2384) { return __mosek_2fusion_2Constraint__slice(_2383,_2384); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2383,std::shared_ptr< monty::ndarray< int,1 > > _2384){
  _checked_ptr_1<int> _ptr__2383(_2383 ? _2383->raw() : nullptr, _2383 ? _2383->size(0) : 0);
  _checked_ptr_1<int> _ptr__2384(_2384 ? _2384->raw() : nullptr, _2384 ? _2384->size(0) : 0);
  if (((int)((_2383)->size(0)) != (int)((_2384)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_2383)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7967 = (int)0;
      int _7968 = (int)((shape)->size(0));
      for (int _2385 = _7967; _2385 < _7968; ++_2385)
      {
        {
          if (((_ptr__2383[_2385] < (int)0) || (_ptr__2384[_2385] > ((*shape)(_2385)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__2383[_2385] > _ptr__2384[_2385]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int _2386 = (int)((shape)->size(0));
      std::vector<int> _7969;
      for (int _2388 = (int)0, _7970 = _2386; _2388 < _7970 ; ++_2388)
      {
        _7969.push_back((_ptr__2384[_2388] - _ptr__2383[_2388]));
      }
      auto _7971 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7969.size()),_7969.begin(),_7969.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2387 = _7971;
      _checked_ptr_1<int> _ptr__2387(_2387 ? _2387->raw() : nullptr,_2387 ? _2387->size(0) : 0);
      int _2389 = (int)1;
      int _7972 = (int)0;
      int _7973 = _2386;
      for (int _2390 = _7972; _2390 < _7973; ++_2390)
      {
        {
          _2389 *= (_ptr__2384[_2390] - _ptr__2383[_2390]);
        }
      }
      if ((_2389 == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_2387,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2391 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2389)));
          _checked_ptr_1<int> _ptr__2391(_2391 ? _2391->raw() : nullptr,_2391 ? _2391->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2392 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2386)));
            _checked_ptr_1<int> _ptr__2392(_2392 ? _2392->raw() : nullptr,_2392 ? _2392->size(0) : 0);
            _ptr__2392[(_2386 - (int)1)] = (int)1;
            int _7974 = (int)1;
            int _7975 = _2386;
            for (int _2393 = _7974; _2393 < _7975; ++_2393)
            {
              {
                _ptr__2392[((_2386 - _2393) - (int)1)] = safe_mul( _ptr__2392[(_2386 - _2393)],((*shape)((_2386 - _2393))) );
              }
            }
            int _2394 = (int)0;
            int _7976 = (int)0;
            int _7977 = _2386;
            for (int _2395 = _7976; _2395 < _7977; ++_2395)
            {
              {
                _2394 += safe_mul( _ptr__2383[_2395],_ptr__2392[_2395] );
              }
            }
            std::vector<int> _7978;
            for (int _2397 = (int)0, _7979 = _2386; _2397 < _7979 ; ++_2397)
            {
              _7978.push_back(_2394);
            }
            auto _7980 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7978.size()),_7978.begin(),_7978.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2396 = _7980;
            _checked_ptr_1<int> _ptr__2396(_2396 ? _2396->raw() : nullptr,_2396 ? _2396->size(0) : 0);
            std::vector<int> _7981;
            for (int _2399 = (int)0, _7982 = _2386; _2399 < _7982 ; ++_2399)
            {
              _7981.push_back(_ptr__2383[_2399]);
            }
            auto _7983 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7981.size()),_7981.begin(),_7981.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2398 = _7983;
            _checked_ptr_1<int> _ptr__2398(_2398 ? _2398->raw() : nullptr,_2398 ? _2398->size(0) : 0);
            int _7984 = (int)0;
            int _7985 = _2389;
            for (int _2400 = _7984; _2400 < _7985; ++_2400)
            {
              {
                _ptr__2391[_2400] = ((*nativeidxs)(_ptr__2396[(_2386 - (int)1)]));
                _ptr__2398[(_2386 - (int)1)] += (int)1;
                _ptr__2396[(_2386 - (int)1)] += _ptr__2392[(_2386 - (int)1)];
                if ((_ptr__2398[(_2386 - (int)1)] >= _ptr__2384[(_2386 - (int)1)]))
                {
                  {
                    int _2401 = (_2386 - (int)1);
                    while ( ((_2401 > (int)0) && (_ptr__2398[_2401] >= _ptr__2384[_2401])) )
                    {
                      {
                        _ptr__2398[_2401] = _ptr__2383[_2401];
                        _ptr__2398[(_2401 - (int)1)] += (int)1;
                        _ptr__2396[(_2401 - (int)1)] += _ptr__2392[(_2401 - (int)1)];
                        -- _2401;
                      }
                    }
                    int _7986 = safe_add( _2401,(int)1 );
                    int _7987 = _2386;
                    for (int _2402 = _7986; _2402 < _7987; ++_2402)
                    {
                      {
                        _ptr__2396[_2402] = _ptr__2396[_2401];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_2387,_2391)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int _2403,int _2404) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2403,_2404); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int _2403,int _2404) { return __mosek_2fusion_2Constraint__slice(_2403,_2404); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int _2403,int _2404){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2403 == (int)0) && (_2404 == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_2403 < (int)0) || (_2404 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2403 > _2404))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int> _7988;
      for (int _2405 = _2403, _7989 = _2404; _2405 < _7989 ; ++_2405)
      {
        _7988.push_back(((*nativeidxs)(_2405)));
      }
      auto _7990 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7988.size()),_7988.begin(),_7988.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_2404 - _2403))}),_7990)).as<::mosek::fusion::Constraint>();
    }
  }
}
int mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }int mosek::fusion::p_Constraint::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }int mosek::fusion::p_Constraint::getSize(){
  int _2406 = (int)1;
  int _7991 = (int)0;
  int _7992 = (int)((shape)->size(0));
  for (int _2407 = _7991; _2407 < _7992; ++_2407)
  {
    {
      _2406 *= ((*shape)(_2407));
    }
  }
  return _2406;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel(){
  return model;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getShape(){
  std::vector<int> _7993;
  for (int _2408 = (int)0, _7994 = (int)((shape)->size(0)); _2408 < _7994 ; ++_2408)
  {
    _7993.push_back(((*shape)(_2408)));
  }
  auto _7995 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7993.size()),_7993.begin(),_7993.end()));
  return _7995;
}
void mosek::fusion::p_Constraint::destroy(){nativeidxs.reset();shape.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::Set::size  ( std::shared_ptr< monty::ndarray< int,1 > > _2409) { return mosek::fusion::p_Set::size(_2409); }long long mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int,1 > > _2409){
  _checked_ptr_1<int> _ptr__2409(_2409 ? _2409->raw() : nullptr, _2409 ? _2409->size(0) : 0);
  long long _2410 = (long long)1;
  int _7996 = (int)0;
  int _7997 = (int)((_2409)->size(0));
  for (int _2411 = _7996; _2411 < _7997; ++_2411)
  {
    {
      _2410 *= _ptr__2409[_2411];
    }
  }
  return _2410;
}
bool mosek::fusion::Set::match  ( std::shared_ptr< monty::ndarray< int,1 > > _2412,    std::shared_ptr< monty::ndarray< int,1 > > _2413) { return mosek::fusion::p_Set::match(_2412,_2413); }bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int,1 > > _2412,std::shared_ptr< monty::ndarray< int,1 > > _2413){
  _checked_ptr_1<int> _ptr__2412(_2412 ? _2412->raw() : nullptr, _2412 ? _2412->size(0) : 0);
  _checked_ptr_1<int> _ptr__2413(_2413 ? _2413->raw() : nullptr, _2413 ? _2413->size(0) : 0);
  if (((int)((_2412)->size(0)) != (int)((_2413)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int _7998 = (int)0;
  int _7999 = (int)((_2412)->size(0));
  for (int _2414 = _7998; _2414 < _7999; ++_2414)
  {
    {
      if ((_ptr__2412[_2414] != _ptr__2413[_2414]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
long long mosek::fusion::Set::linearidx  ( std::shared_ptr< monty::ndarray< int,1 > > _2415,    std::shared_ptr< monty::ndarray< int,1 > > _2416) { return mosek::fusion::p_Set::linearidx(_2415,_2416); }long long mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int,1 > > _2415,std::shared_ptr< monty::ndarray< int,1 > > _2416){
  _checked_ptr_1<int> _ptr__2415(_2415 ? _2415->raw() : nullptr, _2415 ? _2415->size(0) : 0);
  _checked_ptr_1<int> _ptr__2416(_2416 ? _2416->raw() : nullptr, _2416 ? _2416->size(0) : 0);
  long long _2417 = _ptr__2416[(int)0];
  int _8000 = (int)1;
  int _8001 = (int)((_2416)->size(0));
  for (int _2418 = _8000; _2418 < _8001; ++_2418)
  {
    {
      _2417 = safe_add( safe_mul( _2417,_ptr__2415[_2418] ),_ptr__2416[_2418] );
    }
  }
  return _2417;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2419,    long long _2420) { return mosek::fusion::p_Set::idxtokey(_2419,_2420); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2419,long long _2420){
  _checked_ptr_1<int> _ptr__2419(_2419 ? _2419->raw() : nullptr, _2419 ? _2419->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2421 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2419)->size(0)))));
  _checked_ptr_1<int> _ptr__2421(_2421 ? _2421->raw() : nullptr,_2421 ? _2421->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_2419,_2420,_2421);
  return _2421;
}
void mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2422,    long long _2423,    std::shared_ptr< monty::ndarray< int,1 > > _2424) { mosek::fusion::p_Set::idxtokey(_2422,_2423,_2424); }void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2422,long long _2423,std::shared_ptr< monty::ndarray< int,1 > > _2424){
  _checked_ptr_1<int> _ptr__2422(_2422 ? _2422->raw() : nullptr, _2422 ? _2422->size(0) : 0);
  _checked_ptr_1<int> _ptr__2424(_2424 ? _2424->raw() : nullptr, _2424 ? _2424->size(0) : 0);
  int _2425 = (int)((_2422)->size(0));
  if ((_2425 > (int)0))
  {
    {
      long long _2426 = _2423;
      int _8002 = (int)0;
      int _8003 = (_2425 - (int)1);
      for (int _2427 = _8002; _2427 < _8003; ++_2427)
      {
        {
          _ptr__2424[((_2425 - _2427) - (int)1)] = (int)(_2426 % _ptr__2422[((_2425 - _2427) - (int)1)]);
          _2426 /= _ptr__2422[((_2425 - _2427) - (int)1)];
        }
      }
      _ptr__2424[(int)0] = (int)_2426;
    }
  }
  {}
}
std::string mosek::fusion::Set::indexToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2428,    long long _2429) { return mosek::fusion::p_Set::indexToString(_2428,_2429); }std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int,1 > > _2428,long long _2429){
  _checked_ptr_1<int> _ptr__2428(_2428 ? _2428->raw() : nullptr, _2428 ? _2428->size(0) : 0);
  int _2430 = (int)((_2428)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2431 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_2430 == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_2430 == (int)1))
  {
    {
      return _2431->__mosek_2fusion_2Utils_2StringBuffer__a(_2429)->toString();
    }
  }
  else
  {
    {
      long long _2432 = _2429;
      std::shared_ptr< monty::ndarray< int,1 > > _2433 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2430)));
      _checked_ptr_1<int> _ptr__2433(_2433 ? _2433->raw() : nullptr,_2433 ? _2433->size(0) : 0);
      int _8004 = (int)1;
      int _8005 = _2430;
      for (int _2434 = _8004; _2434 < _8005; ++_2434)
      {
        {
          _ptr__2433[(_2430 - _2434)] = (int)(_2432 % _ptr__2428[(_2430 - _2434)]);
          _2432 /= _ptr__2428[(_2430 - _2434)];
        }
      }
      _ptr__2433[(int)0] = (int)_2432;
      _2431->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2433[(int)0]);
      int _8006 = (int)1;
      int _8007 = _2430;
      for (int _2435 = _8006; _2435 < _8007; ++_2435)
      {
        {
          _2431->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2433[_2435]);
        }
      }
      return _2431->toString();
    }
  }
}
std::string mosek::fusion::Set::keyToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2436) { return mosek::fusion::p_Set::keyToString(_2436); }std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int,1 > > _2436){
  _checked_ptr_1<int> _ptr__2436(_2436 ? _2436->raw() : nullptr, _2436 ? _2436->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2437 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2437->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2436[(int)0]);
  int _8008 = (int)1;
  int _8009 = (int)((_2436)->size(0));
  for (int _2438 = _8008; _2438 < _8009; ++_2438)
  {
    {
      _2437->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2436[_2438]);
    }
  }
  return _2437->toString();
}
void mosek::fusion::Set::indexToKey  ( std::shared_ptr< monty::ndarray< int,1 > > _2439,    long long _2440,    std::shared_ptr< monty::ndarray< int,1 > > _2441) { mosek::fusion::p_Set::indexToKey(_2439,_2440,_2441); }void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int,1 > > _2439,long long _2440,std::shared_ptr< monty::ndarray< int,1 > > _2441){
  _checked_ptr_1<int> _ptr__2439(_2439 ? _2439->raw() : nullptr, _2439 ? _2439->size(0) : 0);
  _checked_ptr_1<int> _ptr__2441(_2441 ? _2441->raw() : nullptr, _2441 ? _2441->size(0) : 0);
  int _2442 = (int)((_2439)->size(0));
  if ((_2442 == (int)1))
  {
    {
      _ptr__2441[(int)0] = (int)_2440;
    }
  }
  else
  {
    {
      long long _2443 = _2440;
      int _8010 = (int)1;
      int _8011 = _2442;
      for (int _2444 = _8010; _2444 < _8011; ++_2444)
      {
        {
          _ptr__2441[(_2442 - _2444)] = (int)(_2443 % _ptr__2439[(_2442 - _2444)]);
          _2443 /= _ptr__2439[(_2442 - _2444)];
        }
      }
      _ptr__2441[(int)0] = (int)_2443;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::Set::strides  ( std::shared_ptr< monty::ndarray< int,1 > > _2445) { return mosek::fusion::p_Set::strides(_2445); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int,1 > > _2445){
  _checked_ptr_1<int> _ptr__2445(_2445 ? _2445->raw() : nullptr, _2445 ? _2445->size(0) : 0);
  int _2446 = (int)((_2445)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2447 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2446)));
  _checked_ptr_1<long long> _ptr__2447(_2447 ? _2447->raw() : nullptr,_2447 ? _2447->size(0) : 0);
  _ptr__2447[(_2446 - (int)1)] = (int)1;
  int _8012 = (int)1;
  int _8013 = _2446;
  for (int _2448 = _8012; _2448 < _8013; ++_2448)
  {
    {
      _ptr__2447[((_2446 - _2448) - (int)1)] = safe_mul( _ptr__2447[(_2446 - _2448)],_ptr__2445[(_2446 - _2448)] );
    }
  }
  return _2447;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2449,    std::shared_ptr< monty::ndarray< int,1 > > _2450) { return mosek::fusion::p_Set::make(_2449,_2450); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2449,std::shared_ptr< monty::ndarray< int,1 > > _2450){
  _checked_ptr_1<int> _ptr__2449(_2449 ? _2449->raw() : nullptr, _2449 ? _2449->size(0) : 0);
  _checked_ptr_1<int> _ptr__2450(_2450 ? _2450->raw() : nullptr, _2450 ? _2450->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2451 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((_2449)->size(0)),(int)((_2450)->size(0)) ))));
  _checked_ptr_1<int> _ptr__2451(_2451 ? _2451->raw() : nullptr,_2451 ? _2451->size(0) : 0);
  int _8014 = (int)0;
  int _8015 = (int)((_2449)->size(0));
  for (int _2452 = _8014; _2452 < _8015; ++_2452)
  {
    {
      _ptr__2451[_2452] = _ptr__2449[_2452];
    }
  }
  int _8016 = (int)0;
  int _8017 = (int)((_2450)->size(0));
  for (int _2453 = _8016; _2453 < _8017; ++_2453)
  {
    {
      _ptr__2451[safe_add( (int)((_2449)->size(0)),_2453 )] = _ptr__2450[_2453];
    }
  }
  return _2451;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2454) { return mosek::fusion::p_Set::make(_2454); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2454){
  _checked_ptr_1<int> _ptr__2454(_2454 ? _2454->raw() : nullptr, _2454 ? _2454->size(0) : 0);
  std::vector<int> _8018;
  for (int _2455 = (int)0, _8019 = (int)((_2454)->size(0)); _2455 < _8019 ; ++_2455)
  {
    _8018.push_back(_ptr__2454[_2455]);
  }
  auto _8020 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8018.size()),_8018.begin(),_8018.end()));
  return _8020;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2456,    int _2457,    int _2458) { return mosek::fusion::p_Set::make(_2456,_2457,_2458); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2456,int _2457,int _2458){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2456),(int)(_2457),(int)(_2458)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2459,    int _2460) { return mosek::fusion::p_Set::make(_2459,_2460); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2459,int _2460){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2459),(int)(_2460)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2461) { return mosek::fusion::p_Set::make(_2461); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2461){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2461)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::scalar(){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _2462) { return mosek::fusion::p_Set::make(_2462); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _2462){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2462)->size(0)))});
}
void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConeDomain::p_ConeDomain  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2463,    double _2464,    std::shared_ptr< monty::ndarray< int,1 > > _2465){ return new mosek::fusion::ConeDomain(_2463,_2464,_2465); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2463,    double _2464,    std::shared_ptr< monty::ndarray< int,1 > > _2465) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2463,_2464,_2465); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2463,    double _2464,    std::shared_ptr< monty::ndarray< int,1 > > _2465){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2465(_2465 ? _2465->raw() : nullptr, _2465 ? _2465->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _8021;
    bool _8022 = (NULL != _2465.get());
    if (_8022)
    {
      _8021 = ::mosek::fusion::p_Set::make(_2465);
    }
    else
    {
      _8021 = nullptr;
    }
    shape = _8021;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2464;
    key = _2463;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2464;
  }
}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2466,    std::shared_ptr< monty::ndarray< int,1 > > _2467){ return new mosek::fusion::ConeDomain(_2466,_2467); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2466,    std::shared_ptr< monty::ndarray< int,1 > > _2467) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2466,_2467); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2466,    std::shared_ptr< monty::ndarray< int,1 > > _2467){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2467(_2467 ? _2467->raw() : nullptr, _2467 ? _2467->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_2466,1.0,_2467);
  }
}bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2468){
  _checked_ptr_1<int> _ptr__2468(_2468 ? _2468->raw() : nullptr, _2468 ? _2468->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_2468,shape));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral(){
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }bool mosek::fusion::p_ConeDomain::axisIsSet(){
  return axisset;
}
int mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_ConeDomain::getAxis(){
  return axisidx;
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int _2469) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_2469); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int _2469) { return __mosek_2fusion_2ConeDomain__axis(_2469); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int _2469){
  axisidx = _2469;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
void mosek::fusion::p_ConeDomain::destroy(){shape.reset();}void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2470,    int _2471){ return new mosek::fusion::LinPSDDomain(_2470,_2471); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2470,    int _2471) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2470,_2471); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2470,    int _2471){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2470(_2470 ? _2470->raw() : nullptr, _2470 ? _2470->size(0) : 0);
    mosek::fusion::p_LinPSDDomain::_get_impl(::mosek::fusion::LinPSDDomain::t(_pubthis))->conedim = _2471;
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2470);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2472){ return new mosek::fusion::LinPSDDomain(_2472); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2472) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2472); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2472){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2472(_2472 ? _2472->raw() : nullptr, _2472 ? _2472->size(0) : 0);
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2472);
    conedim = ((int)((shape)->size(0)) - (int)1);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (){ return new mosek::fusion::LinPSDDomain(); }mosek::fusion::LinPSDDomain::LinPSDDomain  () :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinPSDDomain::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    conedim = (int)0;
    shape = nullptr;
  }
}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2473,    std::shared_ptr< monty::ndarray< int,1 > > _2474,    int _2475,    int _2476){ return new mosek::fusion::PSDDomain(_2473,_2474,_2475,_2476); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2473,    std::shared_ptr< monty::ndarray< int,1 > > _2474,    int _2475,    int _2476) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2473,_2474,_2475,_2476); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2473,    std::shared_ptr< monty::ndarray< int,1 > > _2474,    int _2475,    int _2476){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2474(_2474 ? _2474->raw() : nullptr, _2474 ? _2474->size(0) : 0);
    axisIsSet = true;
    shape = _2474;
    key = _2473;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2475;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2476;
    int _2477 = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _2475) && (((int)((shape)->size(0)) > _2476) && ((_2475 >= (int)0) && ((_2476 >= (int)0) && (_2475 != _2476)))))) && (((*shape)(_2475)) == ((*shape)(_2476)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479){ return new mosek::fusion::PSDDomain(_2478,_2479); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2478,_2479); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2479(_2479 ? _2479->raw() : nullptr, _2479 ? _2479->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_2478,_2479,((int)((_2479)->size(0)) - (int)2),((int)((_2479)->size(0)) - (int)1));
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2480){ return new mosek::fusion::PSDDomain(_2480); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2480) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2480); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2480){monty::rc_reserve __reserve_this(_pubthis);   {
    shape = nullptr;
    key = _2480;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
  }
}monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int _2481,int _2482) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_2481,_2482); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int _2481,int _2482) { return __mosek_2fusion_2PSDDomain__axis(_2481,_2482); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int _2481,int _2482){
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2481;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2482;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_2481 >= (int)0) && ((_2482 >= (int)0) && (_2481 != _2482))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _2481) && (((int)((shape)->size(0)) > _2482) && ((_2481 >= (int)0) && ((_2482 >= (int)0) && (_2481 != _2482)))))) && (((*shape)(_2481)) == ((*shape)(_2482))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2483){ return new mosek::fusion::SymmetricRangeDomain(_2483); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2483) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_2483); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2483){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_RangeDomain::_initialize(_2483);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _8023;
    bool _8024 = (NULL == shape.get());
    if (_8024)
    {
      _8023 = (int)0;
    }
    else
    {
      _8023 = ((*shape)((int)0));
    }
    dim = _8023;
  }
}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2484,    std::shared_ptr< monty::ndarray< double,1 > > _2485,    std::shared_ptr< monty::ndarray< double,1 > > _2486,    std::shared_ptr< monty::ndarray< int,1 > > _2487){ return new mosek::fusion::RangeDomain(_2484,_2485,_2486,_2487); }mosek::fusion::RangeDomain::RangeDomain  (bool _2484,    std::shared_ptr< monty::ndarray< double,1 > > _2485,    std::shared_ptr< monty::ndarray< double,1 > > _2486,    std::shared_ptr< monty::ndarray< int,1 > > _2487) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2484,_2485,_2486,_2487); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2484,    std::shared_ptr< monty::ndarray< double,1 > > _2485,    std::shared_ptr< monty::ndarray< double,1 > > _2486,    std::shared_ptr< monty::ndarray< int,1 > > _2487){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2485(_2485 ? _2485->raw() : nullptr, _2485 ? _2485->size(0) : 0);
    _checked_ptr_1<double> _ptr__2486(_2486 ? _2486->raw() : nullptr, _2486 ? _2486->size(0) : 0);
    _checked_ptr_1<int> _ptr__2487(_2487 ? _2487->raw() : nullptr, _2487 ? _2487->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2484,_2485,_2486,_2487,nullptr,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2488,    std::shared_ptr< monty::ndarray< double,1 > > _2489,    std::shared_ptr< monty::ndarray< double,1 > > _2490,    std::shared_ptr< monty::ndarray< int,1 > > _2491,    std::shared_ptr< monty::ndarray< int,2 > > _2492){ return new mosek::fusion::RangeDomain(_2488,_2489,_2490,_2491,_2492); }mosek::fusion::RangeDomain::RangeDomain  (bool _2488,    std::shared_ptr< monty::ndarray< double,1 > > _2489,    std::shared_ptr< monty::ndarray< double,1 > > _2490,    std::shared_ptr< monty::ndarray< int,1 > > _2491,    std::shared_ptr< monty::ndarray< int,2 > > _2492) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2488,_2489,_2490,_2491,_2492); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2488,    std::shared_ptr< monty::ndarray< double,1 > > _2489,    std::shared_ptr< monty::ndarray< double,1 > > _2490,    std::shared_ptr< monty::ndarray< int,1 > > _2491,    std::shared_ptr< monty::ndarray< int,2 > > _2492){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2489(_2489 ? _2489->raw() : nullptr, _2489 ? _2489->size(0) : 0);
    _checked_ptr_1<double> _ptr__2490(_2490 ? _2490->raw() : nullptr, _2490 ? _2490->size(0) : 0);
    _checked_ptr_1<int> _ptr__2491(_2491 ? _2491->raw() : nullptr, _2491 ? _2491->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2488,_2489,_2490,_2491,_2492,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496,    std::shared_ptr< monty::ndarray< int,2 > > _2497,    int _2498){ return new mosek::fusion::RangeDomain(_2493,_2494,_2495,_2496,_2497,_2498); }mosek::fusion::RangeDomain::RangeDomain  (bool _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496,    std::shared_ptr< monty::ndarray< int,2 > > _2497,    int _2498) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2493,_2494,_2495,_2496,_2497,_2498); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496,    std::shared_ptr< monty::ndarray< int,2 > > _2497,    int _2498){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2494(_2494 ? _2494->raw() : nullptr, _2494 ? _2494->size(0) : 0);
    _checked_ptr_1<double> _ptr__2495(_2495 ? _2495->raw() : nullptr, _2495 ? _2495->size(0) : 0);
    _checked_ptr_1<int> _ptr__2496(_2496 ? _2496->raw() : nullptr, _2496 ? _2496->size(0) : 0);
    cardinal_flag = false;
    shape = _2496;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _2493;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _2495;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _2494;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _2497;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2499){ return new mosek::fusion::RangeDomain(_2499); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2499) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2499); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2499){monty::rc_reserve __reserve_this(_pubthis);   {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_2499)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_2499)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_2499)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_2499)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_2499)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_2499)->lb;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_2499)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2500) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2500); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2500) { return __mosek_2fusion_2RangeDomain__sparse(_2500); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2500){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2500)->size(0)),(int)((_2500)->size(1)))));
  {
    int _2501 = (int)0;
    for(;(_2501 < (int)((_2500)->size(0)));++ _2501)
    {
      {
        {
          int _2502 = (int)0;
          for(;(_2502 < (int)((_2500)->size(1)));++ _2502)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2501,_2502)) = ((*_2500)(_2501,_2502));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2503) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2503); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2503) { return __mosek_2fusion_2RangeDomain__sparse(_2503); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2503){
  _checked_ptr_1<int> _ptr__2503(_2503 ? _2503->raw() : nullptr, _2503 ? _2503->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2503)->size(0)),(int)1)));
  int _8025 = (int)0;
  int _8026 = (int)((_2503)->size(0));
  for (int _2504 = _8025; _2504 < _8026; ++_2504)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2504,(int)0)) = _ptr__2503[_2504];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2505) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2505); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2505) { return __mosek_2fusion_2RangeDomain__withShape(_2505); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2505){
  _checked_ptr_1<int> _ptr__2505(_2505 ? _2505->raw() : nullptr, _2505 ? _2505->size(0) : 0);
  shape = _2505;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2506){
  _checked_ptr_1<int> _ptr__2506(_2506 ? _2506->raw() : nullptr, _2506 ? _2506->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_2506)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int _8027 = (int)0;
      int _8028 = (int)((shape)->size(0));
      for (int _2507 = _8027; _2507 < _8028; ++_2507)
      {
        {
          if ((((*shape)(_2507)) != _ptr__2506[_2507]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();sparsity.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2508){ return new mosek::fusion::SymmetricLinearDomain(_2508); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2508) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_2508); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2508){monty::rc_reserve __reserve_this(_pubthis);   {
    dom = _2508;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2508)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2508)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2508)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2508)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _8029;
    bool _8030 = (NULL == shape.get());
    if (_8030)
    {
      _8029 = (int)0;
    }
    else
    {
      _8029 = ((*shape)((int)0));
    }
    dim = _8029;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2509) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2509); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2509) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2509); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2509){
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2509)->size(0)),(int)((_2509)->size(1)))));
  {
    int _2510 = (int)0;
    for(;(_2510 < (int)((_2509)->size(0)));++ _2510)
    {
      {
        {
          int _2511 = (int)0;
          for(;(_2511 < (int)((_2509)->size(1)));++ _2511)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2510,_2511)) = ((*_2509)(_2510,_2511));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2512) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2512); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2512) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2512); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2512){
  _checked_ptr_1<int> _ptr__2512(_2512 ? _2512->raw() : nullptr, _2512 ? _2512->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2512)->size(0)),(int)1)));
  int _8031 = (int)0;
  int _8032 = (int)((_2512)->size(0));
  for (int _2513 = _8031; _2513 < _8032; ++_2513)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2513,(int)0)) = _ptr__2512[_2513];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2514){
  _checked_ptr_1<int> _ptr__2514(_2514 ? _2514->raw() : nullptr, _2514 ? _2514->size(0) : 0);
  int _8033 = (int)0;
  int _8034 = (int)((_2514)->size(0));
  for (int _2515 = _8033; _2515 < _8034; ++_2515)
  {
    {
      if ((_ptr__2514[_2515] == ((*shape)(_2515))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_SymmetricLinearDomain::destroy(){sparsity.reset();shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2516,    bool _2517,    std::shared_ptr< monty::ndarray< double,1 > > _2518,    std::shared_ptr< monty::ndarray< int,1 > > _2519){ return new mosek::fusion::LinearDomain(_2516,_2517,_2518,_2519); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2516,    bool _2517,    std::shared_ptr< monty::ndarray< double,1 > > _2518,    std::shared_ptr< monty::ndarray< int,1 > > _2519) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2516,_2517,_2518,_2519); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2516,    bool _2517,    std::shared_ptr< monty::ndarray< double,1 > > _2518,    std::shared_ptr< monty::ndarray< int,1 > > _2519){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2518(_2518 ? _2518->raw() : nullptr, _2518 ? _2518->size(0) : 0);
    _checked_ptr_1<int> _ptr__2519(_2519 ? _2519->raw() : nullptr, _2519 ? _2519->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_2516,_2517,_2518,_2519,nullptr,(int)1);
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2520,    bool _2521,    std::shared_ptr< monty::ndarray< double,1 > > _2522,    std::shared_ptr< monty::ndarray< int,1 > > _2523,    std::shared_ptr< monty::ndarray< int,2 > > _2524,    int _2525){ return new mosek::fusion::LinearDomain(_2520,_2521,_2522,_2523,_2524,_2525); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2520,    bool _2521,    std::shared_ptr< monty::ndarray< double,1 > > _2522,    std::shared_ptr< monty::ndarray< int,1 > > _2523,    std::shared_ptr< monty::ndarray< int,2 > > _2524,    int _2525) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2520,_2521,_2522,_2523,_2524,_2525); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2520,    bool _2521,    std::shared_ptr< monty::ndarray< double,1 > > _2522,    std::shared_ptr< monty::ndarray< int,1 > > _2523,    std::shared_ptr< monty::ndarray< int,2 > > _2524,    int _2525){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2522(_2522 ? _2522->raw() : nullptr, _2522 ? _2522->size(0) : 0);
    _checked_ptr_1<int> _ptr__2523(_2523 ? _2523->raw() : nullptr, _2523 ? _2523->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _2521;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _2523;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _2520;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _2522;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _2524;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2526){ return new mosek::fusion::LinearDomain(_2526); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2526) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2526); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2526){monty::rc_reserve __reserve_this(_pubthis);   {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_2526)->scalable;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2526)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2526)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_2526)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2526)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2526)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_2526)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2527) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2527); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2527) { return __mosek_2fusion_2LinearDomain__sparse(_2527); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2527){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2527)->size(0)),(int)((_2527)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int _2528 = (int)0;
    for(;(_2528 < (int)((_2527)->size(0)));++ _2528)
    {
      {
        {
          int _2529 = (int)0;
          for(;(_2529 < (int)((_2527)->size(1)));++ _2529)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2528,_2529)) = ((*_2527)(_2528,_2529));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2530) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2530); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2530) { return __mosek_2fusion_2LinearDomain__sparse(_2530); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2530){
  _checked_ptr_1<int> _ptr__2530(_2530 ? _2530->raw() : nullptr, _2530 ? _2530->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2530)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int _8035 = (int)0;
  int _8036 = (int)((_2530)->size(0));
  for (int _2531 = _8035; _2531 < _8036; ++_2531)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2531,(int)0)) = _ptr__2530[_2531];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2532) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2532); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2532) { return __mosek_2fusion_2LinearDomain__withShape(_2532); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2532){
  _checked_ptr_1<int> _ptr__2532(_2532 ? _2532->raw() : nullptr, _2532 ? _2532->size(0) : 0);
  shape = _2532;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2533){
  _checked_ptr_1<int> _ptr__2533(_2533 ? _2533->raw() : nullptr, _2533 ? _2533->size(0) : 0);
  if ((!scalable))
  {
    {
      int _8037 = (int)0;
      int _8038 = (int)((_2533)->size(0));
      for (int _2534 = _8037; _2534 < _8038; ++_2534)
      {
        {
          if ((_ptr__2533[_2534] == ((*shape)(_2534))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinearDomain::destroy(){sparsity.reset();bnd.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int,1 > > _2535){
  _checked_ptr_1<int> _ptr__2535(_2535 ? _2535->raw() : nullptr, _2535 ? _2535->size(0) : 0);
  long long _2536 = (long long)1;
  int _8039 = (int)0;
  int _8040 = (int)((_2535)->size(0));
  for (int _2537 = _8039; _2537 < _8040; ++_2537)
  {
    {
      _2536 *= _ptr__2535[_2537];
    }
  }
  return _2536;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(monty::rc_ptr< ::mosek::fusion::Matrix > _2538,monty::rc_ptr< ::mosek::fusion::Matrix > _2539){
  if (((mosek::fusion::p_Matrix::_get_impl(_2538)->dimi != mosek::fusion::p_Matrix::_get_impl(_2539)->dimi) || (mosek::fusion::p_Matrix::_get_impl(_2538)->dimj != mosek::fusion::p_Matrix::_get_impl(_2539)->dimj)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  if ((_2538->isSparse() && _2539->isSparse()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2540 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2538->numNonzeros())));
      _checked_ptr_1<int> _ptr__2540(_2540 ? _2540->raw() : nullptr,_2540 ? _2540->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2541 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2538->numNonzeros())));
      _checked_ptr_1<int> _ptr__2541(_2541 ? _2541->raw() : nullptr,_2541 ? _2541->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2542 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2538->numNonzeros())));
      _checked_ptr_1<double> _ptr__2542(_2542 ? _2542->raw() : nullptr,_2542 ? _2542->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2543 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2539->numNonzeros())));
      _checked_ptr_1<int> _ptr__2543(_2543 ? _2543->raw() : nullptr,_2543 ? _2543->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2544 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2539->numNonzeros())));
      _checked_ptr_1<int> _ptr__2544(_2544 ? _2544->raw() : nullptr,_2544 ? _2544->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2545 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2539->numNonzeros())));
      _checked_ptr_1<double> _ptr__2545(_2545 ? _2545->raw() : nullptr,_2545 ? _2545->size(0) : 0);
      _2538->getDataAsTriplets(_2540,_2541,_2542);
      _2539->getDataAsTriplets(_2543,_2544,_2545);
      long long _2546 = (int)0;
      {
        int _2547 = (int)0;
        int _2548 = (int)0;
        while ( ((_2548 < (int)((_2540)->size(0))) && (_2547 < (int)((_2543)->size(0)))) )
        {
          {
            if (((_ptr__2540[_2548] < _ptr__2543[_2547]) || ((_ptr__2540[_2548] == _ptr__2543[_2547]) && (_ptr__2541[_2548] < _ptr__2544[_2547]))))
            {
              {
                ++ _2546;
                ++ _2548;
              }
            }
            else
            {
              {
                if (((_ptr__2540[_2548] > _ptr__2543[_2547]) || ((_ptr__2540[_2548] == _ptr__2543[_2547]) && (_ptr__2541[_2548] > _ptr__2544[_2547]))))
                {
                  {
                    ++ _2546;
                    ++ _2547;
                  }
                }
                else
                {
                  {
                    ++ _2546;
                    ++ _2548;
                    ++ _2547;
                  }
                }
              }
            }
          }
        }
        _2546 += ((int)((_2540)->size(0)) - _2548);
        _2546 += ((int)((_2543)->size(0)) - _2547);
      }
      std::shared_ptr< monty::ndarray< int,2 > > _2549 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2546,(int)2)));
      std::shared_ptr< monty::ndarray< double,1 > > _2550 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2546)));
      _checked_ptr_1<double> _ptr__2550(_2550 ? _2550->raw() : nullptr,_2550 ? _2550->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2551 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2546)));
      _checked_ptr_1<double> _ptr__2551(_2551 ? _2551->raw() : nullptr,_2551 ? _2551->size(0) : 0);
      {
        int _2552 = (int)0;
        int _2553 = (int)0;
        int _2554 = (int)0;
        while ( ((_2554 < (int)((_2540)->size(0))) && (_2553 < (int)((_2543)->size(0)))) )
        {
          {
            if (((_ptr__2540[_2554] < _ptr__2543[_2553]) || ((_ptr__2540[_2554] == _ptr__2543[_2553]) && (_ptr__2541[_2554] < _ptr__2544[_2553]))))
            {
              {
                ((*_2549)(_2552,(int)0)) = _ptr__2540[_2554];
                ((*_2549)(_2552,(int)1)) = _ptr__2541[_2554];
                _ptr__2550[_2552] = _ptr__2542[_2554];
                _ptr__2551[_2552] = 0.0;
                ++ _2552;
                ++ _2554;
              }
            }
            else
            {
              {
                if (((_ptr__2540[_2554] > _ptr__2543[_2553]) || ((_ptr__2540[_2554] == _ptr__2543[_2553]) && (_ptr__2541[_2554] > _ptr__2544[_2553]))))
                {
                  {
                    ((*_2549)(_2552,(int)0)) = _ptr__2543[_2553];
                    ((*_2549)(_2552,(int)1)) = _ptr__2544[_2553];
                    _ptr__2550[_2552] = 0.0;
                    _ptr__2551[_2552] = _ptr__2545[_2553];
                    ++ _2552;
                    ++ _2553;
                  }
                }
                else
                {
                  {
                    ((*_2549)(_2552,(int)0)) = _ptr__2543[_2553];
                    ((*_2549)(_2552,(int)1)) = _ptr__2544[_2553];
                    _ptr__2550[_2552] = _ptr__2542[_2553];
                    _ptr__2551[_2552] = _ptr__2545[_2553];
                    ++ _2552;
                    ++ _2554;
                    ++ _2553;
                  }
                }
              }
            }
          }
        }
        while ( (_2554 < (int)((_2540)->size(0))) )
        {
          {
            ((*_2549)(_2552,(int)0)) = _ptr__2540[_2554];
            ((*_2549)(_2552,(int)1)) = _ptr__2541[_2554];
            _ptr__2550[_2552] = _ptr__2542[_2554];
            _ptr__2551[_2552] = 0.0;
            ++ _2552;
            ++ _2554;
          }
        }
        while ( (_2553 < (int)((_2543)->size(0))) )
        {
          {
            ((*_2549)(_2552,(int)0)) = _ptr__2543[_2553];
            ((*_2549)(_2552,(int)1)) = _ptr__2544[_2553];
            _ptr__2550[_2552] = 0.0;
            _ptr__2551[_2552] = _ptr__2545[_2553];
            ++ _2552;
            ++ _2553;
          }
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2550,_2551,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2538)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2538)->dimj)}),_2549,(int)1);
    }
  }
  else
  {
    {
      int _2555 = mosek::fusion::p_Matrix::_get_impl(_2538)->dimj;
      int _2556 = mosek::fusion::p_Matrix::_get_impl(_2538)->dimi;
      int _2557 = safe_mul( _2556,_2555 );
      std::shared_ptr< monty::ndarray< double,1 > > _2558;
      _checked_ptr_1<double> _ptr__2558(_2558 ? _2558->raw() : nullptr,_2558 ? _2558->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2559;
      _checked_ptr_1<double> _ptr__2559(_2559 ? _2559->raw() : nullptr,_2559 ? _2559->size(0) : 0);
      if (_2538->isSparse())
      {
        {
          _2558 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2557)));
          _ptr__2558.update(_2558 ? _2558->raw() : nullptr, _2558 ? _2558->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2560 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2538->numNonzeros())));
          _checked_ptr_1<int> _ptr__2560(_2560 ? _2560->raw() : nullptr,_2560 ? _2560->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2561 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2538->numNonzeros())));
          _checked_ptr_1<int> _ptr__2561(_2561 ? _2561->raw() : nullptr,_2561 ? _2561->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2562 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2538->numNonzeros())));
          _checked_ptr_1<double> _ptr__2562(_2562 ? _2562->raw() : nullptr,_2562 ? _2562->size(0) : 0);
          _2538->getDataAsTriplets(_2560,_2561,_2562);
          int _8041 = (int)0;
          int _8042 = (int)((_2560)->size(0));
          for (int _2563 = _8041; _2563 < _8042; ++_2563)
          {
            {
              _ptr__2558[safe_add( safe_mul( _ptr__2560[_2563],_2555 ),_ptr__2561[_2563] )] = _ptr__2562[_2563];
            }
          }
        }
      }
      else
      {
        {
          _2558 = _2538->getDataAsArray();
          _ptr__2558.update(_2558 ? _2558->raw() : nullptr, _2558 ? _2558->size(0) : 0);
        }
      }
      if (_2539->isSparse())
      {
        {
          _2559 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2557)));
          _ptr__2559.update(_2559 ? _2559->raw() : nullptr, _2559 ? _2559->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2564 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2539->numNonzeros())));
          _checked_ptr_1<int> _ptr__2564(_2564 ? _2564->raw() : nullptr,_2564 ? _2564->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2565 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2539->numNonzeros())));
          _checked_ptr_1<int> _ptr__2565(_2565 ? _2565->raw() : nullptr,_2565 ? _2565->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2566 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2539->numNonzeros())));
          _checked_ptr_1<double> _ptr__2566(_2566 ? _2566->raw() : nullptr,_2566 ? _2566->size(0) : 0);
          _2539->getDataAsTriplets(_2564,_2565,_2566);
          int _8043 = (int)0;
          int _8044 = (int)((_2564)->size(0));
          for (int _2567 = _8043; _2567 < _8044; ++_2567)
          {
            {
              _ptr__2559[safe_add( safe_mul( _ptr__2564[_2567],_2555 ),_ptr__2565[_2567] )] = _ptr__2566[_2567];
            }
          }
        }
      }
      else
      {
        {
          _2559 = _2539->getDataAsArray();
          _ptr__2559.update(_2559 ? _2559->raw() : nullptr, _2559 ? _2559->size(0) : 0);
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2558,_2559,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2538)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2538)->dimj)}),nullptr,(int)1);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(std::shared_ptr< monty::ndarray< double,2 > > _2568,std::shared_ptr< monty::ndarray< double,2 > > _2569){
  if ((((int)((_2568)->size(0)) != (int)((_2569)->size(0))) || ((int)((_2568)->size(1)) != (int)((_2569)->size(1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  int _2570 = (int)((_2568)->size(1));
  int _2571 = (int)((_2568)->size(0));
  int _2572 = safe_mul( _2571,_2570 );
  std::shared_ptr< monty::ndarray< double,1 > > _2573 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2572)));
  _checked_ptr_1<double> _ptr__2573(_2573 ? _2573->raw() : nullptr,_2573 ? _2573->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2574 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2572)));
  _checked_ptr_1<double> _ptr__2574(_2574 ? _2574->raw() : nullptr,_2574 ? _2574->size(0) : 0);
  int _2575 = (int)0;
  int _8045 = (int)0;
  int _8046 = _2571;
  for (int _2576 = _8045; _2576 < _8046; ++_2576)
  {
    {
      int _8047 = (int)0;
      int _8048 = _2570;
      for (int _2577 = _8047; _2577 < _8048; ++_2577)
      {
        {
          _ptr__2573[_2575] = ((*_2568)(_2576,_2577));
          _ptr__2574[_2575] = ((*_2569)(_2576,_2577));
          ++ _2575;
        }
      }
    }
  }
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2573,_2574,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2571),(int)(_2570)}),nullptr,(int)1);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _2578,monty::rc_ptr< ::mosek::fusion::Matrix > _2579){
  if (_2579->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2580 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2579->numNonzeros())));
      _checked_ptr_1<int> _ptr__2580(_2580 ? _2580->raw() : nullptr,_2580 ? _2580->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2581 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2579->numNonzeros())));
      _checked_ptr_1<int> _ptr__2581(_2581 ? _2581->raw() : nullptr,_2581 ? _2581->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2582 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2579->numNonzeros())));
      _checked_ptr_1<double> _ptr__2582(_2582 ? _2582->raw() : nullptr,_2582 ? _2582->size(0) : 0);
      _2579->getDataAsTriplets(_2580,_2581,_2582);
      std::shared_ptr< monty::ndarray< int,2 > > _2583 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2580)->size(0)),(int)2)));
      int _8049 = (int)0;
      int _8050 = (int)((_2580)->size(0));
      for (int _2584 = _8049; _2584 < _8050; ++_2584)
      {
        {
          ((*_2583)(_2584,(int)0)) = _ptr__2580[_2584];
          ((*_2583)(_2584,(int)1)) = _ptr__2581[_2584];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_2578,false,_2582,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2579)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2579)->dimj)}),_2583,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_2578,false,_2579->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2579)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2579)->dimj)}),nullptr,(int)1);
    }
  }
}
long long mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int,1 > > _2585){
  _checked_ptr_1<int> _ptr__2585(_2585 ? _2585->raw() : nullptr, _2585 ? _2585->size(0) : 0);
  long long _2586 = (int)1;
  int _8051 = (int)0;
  int _8052 = (int)((_2585)->size(0));
  for (int _2587 = _8051; _2587 < _8052; ++_2587)
  {
    {
      _2586 *= _ptr__2585[_2587];
    }
  }
  return _2586;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _2588,std::shared_ptr< monty::ndarray< double,1 > > _2589,std::shared_ptr< monty::ndarray< double,1 > > _2590,std::shared_ptr< monty::ndarray< int,2 > > _2591,std::shared_ptr< monty::ndarray< int,1 > > _2592){
  _checked_ptr_1<double> _ptr__2589(_2589 ? _2589->raw() : nullptr, _2589 ? _2589->size(0) : 0);
  _checked_ptr_1<double> _ptr__2590(_2590 ? _2590->raw() : nullptr, _2590 ? _2590->size(0) : 0);
  _checked_ptr_1<int> _ptr__2592(_2592 ? _2592->raw() : nullptr, _2592 ? _2592->size(0) : 0);
  if (((!_2588) && ((int)((_2589)->size(0)) != (int)((_2590)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _2591.get()) && ((int)((_2591)->size(0)) != (int)((_2589)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int _8053 = (int)0;
  int _8054 = (int)((_2590)->size(0));
  for (int _2593 = _8053; _2593 < _8054; ++_2593)
  {
    {
      if ((_ptr__2589[_2593] > _ptr__2590[_2593]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _2592.get()) && (::mosek::fusion::p_Domain::dimsize(_2592) != (int)((_2589)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_2588,_2589,_2590,_2592)->__mosek_2fusion_2RangeDomain__sparse(_2591);
}
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2594) { return mosek::fusion::p_Domain::symmetric(_2594); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2594){
  return _2594->__mosek_2fusion_2RangeDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2595) { return mosek::fusion::p_Domain::symmetric(_2595); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2595){
  return _2595->__mosek_2fusion_2LinearDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2596,    std::shared_ptr< monty::ndarray< int,2 > > _2597) { return mosek::fusion::p_Domain::sparse(_2596,_2597); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2596,std::shared_ptr< monty::ndarray< int,2 > > _2597){
  return _2596->__mosek_2fusion_2RangeDomain__sparse(_2597);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599) { return mosek::fusion::p_Domain::sparse(_2598,_2599); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2598,std::shared_ptr< monty::ndarray< int,1 > > _2599){
  _checked_ptr_1<int> _ptr__2599(_2599 ? _2599->raw() : nullptr, _2599 ? _2599->size(0) : 0);
  return _2598->__mosek_2fusion_2RangeDomain__sparse(_2599);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2600,    std::shared_ptr< monty::ndarray< int,2 > > _2601) { return mosek::fusion::p_Domain::sparse(_2600,_2601); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2600,std::shared_ptr< monty::ndarray< int,2 > > _2601){
  return _2600->__mosek_2fusion_2LinearDomain__sparse(_2601);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2602,    std::shared_ptr< monty::ndarray< int,1 > > _2603) { return mosek::fusion::p_Domain::sparse(_2602,_2603); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2602,std::shared_ptr< monty::ndarray< int,1 > > _2603){
  _checked_ptr_1<int> _ptr__2603(_2603 ? _2603->raw() : nullptr, _2603 ? _2603->size(0) : 0);
  return _2602->__mosek_2fusion_2LinearDomain__sparse(_2603);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2604) { return mosek::fusion::p_Domain::integral(_2604); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2604){
  return _2604->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2605) { return mosek::fusion::p_Domain::integral(_2605); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2605){
  return _2605->__mosek_2fusion_2LinearDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _2606) { return mosek::fusion::p_Domain::integral(_2606); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _2606){
  return _2606->__mosek_2fusion_2ConeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _2607,    int _2608) { return mosek::fusion::p_Domain::axis(_2607,_2608); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _2607,int _2608){
  return _2607->__mosek_2fusion_2ConeDomain__axis(_2608);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2609,    std::shared_ptr< monty::ndarray< int,1 > > _2610) { return mosek::fusion::p_Domain::inDPowerCone(_2609,_2610); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2609,std::shared_ptr< monty::ndarray< int,1 > > _2610){
  _checked_ptr_1<int> _ptr__2610(_2610 ? _2610->raw() : nullptr, _2610 ? _2610->size(0) : 0);
  std::vector<int> _8055;
  for (int _2611 = (int)0, _8056 = (int)((_2610)->size(0)); _2611 < _8056 ; ++_2611)
  {
    _8055.push_back(_ptr__2610[_2611]);
  }
  auto _8057 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8055.size()),_8055.begin(),_8055.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2609,_8057);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2612,    int _2613) { return mosek::fusion::p_Domain::inDPowerCone(_2612,_2613); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2612,int _2613){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2612,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2613),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2614) { return mosek::fusion::p_Domain::inDPowerCone(_2614); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2614){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2614,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2615,    std::shared_ptr< monty::ndarray< int,1 > > _2616) { return mosek::fusion::p_Domain::inPPowerCone(_2615,_2616); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2615,std::shared_ptr< monty::ndarray< int,1 > > _2616){
  _checked_ptr_1<int> _ptr__2616(_2616 ? _2616->raw() : nullptr, _2616 ? _2616->size(0) : 0);
  std::vector<int> _8058;
  for (int _2617 = (int)0, _8059 = (int)((_2616)->size(0)); _2617 < _8059 ; ++_2617)
  {
    _8058.push_back(_ptr__2616[_2617]);
  }
  auto _8060 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8058.size()),_8058.begin(),_8058.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2615,_8060);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2618,    int _2619) { return mosek::fusion::p_Domain::inPPowerCone(_2618,_2619); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2618,int _2619){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2618,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2619),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2620) { return mosek::fusion::p_Domain::inPPowerCone(_2620); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2620){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2620,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2621) { return mosek::fusion::p_Domain::inDExpCone(_2621); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int,1 > > _2621){
  _checked_ptr_1<int> _ptr__2621(_2621 ? _2621->raw() : nullptr, _2621 ? _2621->size(0) : 0);
  std::vector<int> _8061;
  for (int _2622 = (int)0, _8062 = (int)((_2621)->size(0)); _2622 < _8062 ; ++_2622)
  {
    _8061.push_back(_ptr__2621[_2622]);
  }
  auto _8063 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8061.size()),_8061.begin(),_8061.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_8063);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( int _2623) { return mosek::fusion::p_Domain::inDExpCone(_2623); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int _2623){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2623),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2624) { return mosek::fusion::p_Domain::inPExpCone(_2624); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int,1 > > _2624){
  _checked_ptr_1<int> _ptr__2624(_2624 ? _2624->raw() : nullptr, _2624 ? _2624->size(0) : 0);
  std::vector<int> _8064;
  for (int _2625 = (int)0, _8065 = (int)((_2624)->size(0)); _2625 < _8065 ; ++_2625)
  {
    _8064.push_back(_ptr__2624[_2625]);
  }
  auto _8066 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8064.size()),_8064.begin(),_8064.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_8066);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( int _2626) { return mosek::fusion::p_Domain::inPExpCone(_2626); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int _2626){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2626),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2627) { return mosek::fusion::p_Domain::inRotatedQCone(_2627); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int,1 > > _2627){
  _checked_ptr_1<int> _ptr__2627(_2627 ? _2627->raw() : nullptr, _2627 ? _2627->size(0) : 0);
  std::vector<int> _8067;
  for (int _2628 = (int)0, _8068 = (int)((_2627)->size(0)); _2628 < _8068 ; ++_2628)
  {
    _8067.push_back(_ptr__2627[_2628]);
  }
  auto _8069 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8067.size()),_8067.begin(),_8067.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,_8069);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _2629,    int _2630) { return mosek::fusion::p_Domain::inRotatedQCone(_2629,_2630); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _2629,int _2630){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2629),(int)(_2630)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _2631) { return mosek::fusion::p_Domain::inRotatedQCone(_2631); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _2631){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2631)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2632) { return mosek::fusion::p_Domain::inQCone(_2632); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int,1 > > _2632){
  _checked_ptr_1<int> _ptr__2632(_2632 ? _2632->raw() : nullptr, _2632 ? _2632->size(0) : 0);
  std::vector<int> _8070;
  for (int _2633 = (int)0, _8071 = (int)((_2632)->size(0)); _2633 < _8071 ; ++_2633)
  {
    _8070.push_back(_ptr__2632[_2633]);
  }
  auto _8072 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8070.size()),_8070.begin(),_8070.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,_8072);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _2634,    int _2635) { return mosek::fusion::p_Domain::inQCone(_2634,_2635); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _2634,int _2635){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2634),(int)(_2635)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _2636) { return mosek::fusion::p_Domain::inQCone(_2636); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _2636){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2636)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _2637,    int _2638) { return mosek::fusion::p_Domain::isLinPSD(_2637,_2638); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _2637,int _2638){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _2637,safe_add( _2637,(int)1 ) ) / (int)2),_2638));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _2639) { return mosek::fusion::p_Domain::isLinPSD(_2639); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _2639){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _2639,safe_add( _2639,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain();
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _2640,    int _2641) { return mosek::fusion::p_Domain::isTrilPSD(_2640,_2641); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _2640,int _2641){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2641),(int)(_2640),(int)(_2640)}),(int)1,(int)2);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _2642) { return mosek::fusion::p_Domain::isTrilPSD(_2642); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _2642){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2642),(int)(_2642)}),(int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _2643,    int _2644) { return mosek::fusion::p_Domain::inPSDCone(_2643,_2644); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _2643,int _2644){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2644),(int)(_2643),(int)(_2643)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _2645) { return mosek::fusion::p_Domain::inPSDCone(_2645); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _2645){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2645),(int)(_2645)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _2646) { return mosek::fusion::p_Domain::binary(_2646); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int,1 > > _2646){
  _checked_ptr_1<int> _ptr__2646(_2646 ? _2646->raw() : nullptr, _2646 ? _2646->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_2646)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _2647,    int _2648) { return mosek::fusion::p_Domain::binary(_2647,_2648); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _2647,int _2648){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2647),(int)(_2648)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _2649) { return mosek::fusion::p_Domain::binary(_2649); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _2649){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2649)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2650,    monty::rc_ptr< ::mosek::fusion::Matrix > _2651) { return mosek::fusion::p_Domain::inRange(_2650,_2651); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(monty::rc_ptr< ::mosek::fusion::Matrix > _2650,monty::rc_ptr< ::mosek::fusion::Matrix > _2651){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_2651,_2650);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,2 > > _2652,    std::shared_ptr< monty::ndarray< double,2 > > _2653) { return mosek::fusion::p_Domain::inRange(_2652,_2653); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,2 > > _2652,std::shared_ptr< monty::ndarray< double,2 > > _2653){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_2653,_2652);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2654,    std::shared_ptr< monty::ndarray< double,1 > > _2655,    std::shared_ptr< monty::ndarray< int,1 > > _2656) { return mosek::fusion::p_Domain::inRange(_2654,_2655,_2656); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2654,std::shared_ptr< monty::ndarray< double,1 > > _2655,std::shared_ptr< monty::ndarray< int,1 > > _2656){
  _checked_ptr_1<double> _ptr__2654(_2654 ? _2654->raw() : nullptr, _2654 ? _2654->size(0) : 0);
  _checked_ptr_1<double> _ptr__2655(_2655 ? _2655->raw() : nullptr, _2655 ? _2655->size(0) : 0);
  _checked_ptr_1<int> _ptr__2656(_2656 ? _2656->raw() : nullptr, _2656 ? _2656->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2654,_2655,_2656);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2657,    double _2658,    std::shared_ptr< monty::ndarray< int,1 > > _2659) { return mosek::fusion::p_Domain::inRange(_2657,_2658,_2659); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2657,double _2658,std::shared_ptr< monty::ndarray< int,1 > > _2659){
  _checked_ptr_1<double> _ptr__2657(_2657 ? _2657->raw() : nullptr, _2657 ? _2657->size(0) : 0);
  _checked_ptr_1<int> _ptr__2659(_2659 ? _2659->raw() : nullptr, _2659 ? _2659->size(0) : 0);
  std::vector<double> _8073;
  for (int _2660 = (int)0, _8074 = (int)((_2657)->size(0)); _2660 < _8074 ; ++_2660)
  {
    _8073.push_back(_2658);
  }
  auto _8075 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8073.size()),_8073.begin(),_8073.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2657,_8075,_2659);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2661,    std::shared_ptr< monty::ndarray< double,1 > > _2662,    std::shared_ptr< monty::ndarray< int,1 > > _2663) { return mosek::fusion::p_Domain::inRange(_2661,_2662,_2663); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2661,std::shared_ptr< monty::ndarray< double,1 > > _2662,std::shared_ptr< monty::ndarray< int,1 > > _2663){
  _checked_ptr_1<double> _ptr__2662(_2662 ? _2662->raw() : nullptr, _2662 ? _2662->size(0) : 0);
  _checked_ptr_1<int> _ptr__2663(_2663 ? _2663->raw() : nullptr, _2663 ? _2663->size(0) : 0);
  std::vector<double> _8076;
  for (int _2664 = (int)0, _8077 = (int)((_2662)->size(0)); _2664 < _8077 ; ++_2664)
  {
    _8076.push_back(_2661);
  }
  auto _8078 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8076.size()),_8076.begin(),_8076.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_8078,_2662,_2663);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2665,    double _2666,    std::shared_ptr< monty::ndarray< int,1 > > _2667) { return mosek::fusion::p_Domain::inRange(_2665,_2666,_2667); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2665,double _2666,std::shared_ptr< monty::ndarray< int,1 > > _2667){
  _checked_ptr_1<int> _ptr__2667(_2667 ? _2667->raw() : nullptr, _2667 ? _2667->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2665)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2666)}),_2667);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2668,    std::shared_ptr< monty::ndarray< double,1 > > _2669) { return mosek::fusion::p_Domain::inRange(_2668,_2669); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2668,std::shared_ptr< monty::ndarray< double,1 > > _2669){
  _checked_ptr_1<double> _ptr__2668(_2668 ? _2668->raw() : nullptr, _2668 ? _2668->size(0) : 0);
  _checked_ptr_1<double> _ptr__2669(_2669 ? _2669->raw() : nullptr, _2669 ? _2669->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2668,_2669,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2668)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2670,    double _2671) { return mosek::fusion::p_Domain::inRange(_2670,_2671); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2670,double _2671){
  _checked_ptr_1<double> _ptr__2670(_2670 ? _2670->raw() : nullptr, _2670 ? _2670->size(0) : 0);
  std::vector<double> _8079;
  for (int _2672 = (int)0, _8080 = (int)((_2670)->size(0)); _2672 < _8080 ; ++_2672)
  {
    _8079.push_back(_2671);
  }
  auto _8081 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8079.size()),_8079.begin(),_8079.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2670,_8081,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2670)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2673,    std::shared_ptr< monty::ndarray< double,1 > > _2674) { return mosek::fusion::p_Domain::inRange(_2673,_2674); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2673,std::shared_ptr< monty::ndarray< double,1 > > _2674){
  _checked_ptr_1<double> _ptr__2674(_2674 ? _2674->raw() : nullptr, _2674 ? _2674->size(0) : 0);
  std::vector<double> _8082;
  for (int _2675 = (int)0, _8083 = (int)((_2674)->size(0)); _2675 < _8083 ; ++_2675)
  {
    _8082.push_back(_2673);
  }
  auto _8084 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8082.size()),_8082.begin(),_8082.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_8084,_2674,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2674)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2676,    double _2677) { return mosek::fusion::p_Domain::inRange(_2676,_2677); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2676,double _2677){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2676)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2677)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2678) { return mosek::fusion::p_Domain::greaterThan(_2678); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _2678){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_2678);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2679,    std::shared_ptr< monty::ndarray< int,1 > > _2680) { return mosek::fusion::p_Domain::greaterThan(_2679,_2680); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _2679,std::shared_ptr< monty::ndarray< int,1 > > _2680){
  _checked_ptr_1<double> _ptr__2679(_2679 ? _2679->raw() : nullptr, _2679 ? _2679->size(0) : 0);
  _checked_ptr_1<int> _ptr__2680(_2680 ? _2680->raw() : nullptr, _2680 ? _2680->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2679),_2680);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _2681) { return mosek::fusion::p_Domain::greaterThan(_2681); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _2681){
  std::vector<double> _8085;
  for (int _2682 = (int)0, _8086 = (int)((_2681)->size(0)); _2682 < _8086 ; ++_2682)
  {
    for (int _2683 = (int)0, _8087 = (int)((_2681)->size(1)); _2683 < _8087 ; ++_2683)
    {
      _8085.push_back(((*_2681)(_2682,_2683)));
    }
  }
  auto _8088 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8085.size()),_8085.begin(),_8085.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_8088,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2681)->size(0))),(int)((int)((_2681)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2684) { return mosek::fusion::p_Domain::greaterThan(_2684); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _2684){
  _checked_ptr_1<double> _ptr__2684(_2684 ? _2684->raw() : nullptr, _2684 ? _2684->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2684),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2684)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2685,    std::shared_ptr< monty::ndarray< int,1 > > _2686) { return mosek::fusion::p_Domain::greaterThan(_2685,_2686); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2685,std::shared_ptr< monty::ndarray< int,1 > > _2686){
  _checked_ptr_1<int> _ptr__2686(_2686 ? _2686->raw() : nullptr, _2686 ? _2686->size(0) : 0);
  std::vector<double> _8089;
  for (long long _2687 = (int)0, _8090 = ::mosek::fusion::p_Domain::prod(_2686); _2687 < _8090 ; ++_2687)
  {
    _8089.push_back(_2685);
  }
  auto _8091 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8089.size()),_8089.begin(),_8089.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8091,_2686);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2688,    int _2689,    int _2690) { return mosek::fusion::p_Domain::greaterThan(_2688,_2689,_2690); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2688,int _2689,int _2690){
  std::vector<double> _8092;
  for (int _2691 = (int)0, _8093 = safe_mul( _2690,_2689 ); _2691 < _8093 ; ++_2691)
  {
    _8092.push_back(_2688);
  }
  auto _8094 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8092.size()),_8092.begin(),_8092.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8094,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2689),(int)(_2690)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2692,    int _2693) { return mosek::fusion::p_Domain::greaterThan(_2692,_2693); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2692,int _2693){
  std::vector<double> _8095;
  for (int _2694 = (int)0, _8096 = _2693; _2694 < _8096 ; ++_2694)
  {
    _8095.push_back(_2692);
  }
  auto _8097 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8095.size()),_8095.begin(),_8095.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8097,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2693)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2695) { return mosek::fusion::p_Domain::greaterThan(_2695); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2695){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2695)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2696) { return mosek::fusion::p_Domain::lessThan(_2696); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _2696){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_2696);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2697,    std::shared_ptr< monty::ndarray< int,1 > > _2698) { return mosek::fusion::p_Domain::lessThan(_2697,_2698); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _2697,std::shared_ptr< monty::ndarray< int,1 > > _2698){
  _checked_ptr_1<double> _ptr__2697(_2697 ? _2697->raw() : nullptr, _2697 ? _2697->size(0) : 0);
  _checked_ptr_1<int> _ptr__2698(_2698 ? _2698->raw() : nullptr, _2698 ? _2698->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2697),_2698);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _2699) { return mosek::fusion::p_Domain::lessThan(_2699); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _2699){
  std::vector<double> _8098;
  for (int _2700 = (int)0, _8099 = (int)((_2699)->size(0)); _2700 < _8099 ; ++_2700)
  {
    for (int _2701 = (int)0, _8100 = (int)((_2699)->size(1)); _2701 < _8100 ; ++_2701)
    {
      _8098.push_back(((*_2699)(_2700,_2701)));
    }
  }
  auto _8101 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8098.size()),_8098.begin(),_8098.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_8101,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2699)->size(0))),(int)((int)((_2699)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2702) { return mosek::fusion::p_Domain::lessThan(_2702); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _2702){
  _checked_ptr_1<double> _ptr__2702(_2702 ? _2702->raw() : nullptr, _2702 ? _2702->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2702),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2702)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2703,    std::shared_ptr< monty::ndarray< int,1 > > _2704) { return mosek::fusion::p_Domain::lessThan(_2703,_2704); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2703,std::shared_ptr< monty::ndarray< int,1 > > _2704){
  _checked_ptr_1<int> _ptr__2704(_2704 ? _2704->raw() : nullptr, _2704 ? _2704->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2703)}),_2704);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2705,    int _2706,    int _2707) { return mosek::fusion::p_Domain::lessThan(_2705,_2706,_2707); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2705,int _2706,int _2707){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2705)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2706),(int)(_2707)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2708,    int _2709) { return mosek::fusion::p_Domain::lessThan(_2708,_2709); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2708,int _2709){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2708)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2709)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2710) { return mosek::fusion::p_Domain::lessThan(_2710); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2710){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2710)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2711) { return mosek::fusion::p_Domain::equalsTo(_2711); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _2711){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_2711);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _2712,    std::shared_ptr< monty::ndarray< int,1 > > _2713) { return mosek::fusion::p_Domain::equalsTo(_2712,_2713); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _2712,std::shared_ptr< monty::ndarray< int,1 > > _2713){
  _checked_ptr_1<double> _ptr__2712(_2712 ? _2712->raw() : nullptr, _2712 ? _2712->size(0) : 0);
  _checked_ptr_1<int> _ptr__2713(_2713 ? _2713->raw() : nullptr, _2713 ? _2713->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_2712),_2713);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _2714) { return mosek::fusion::p_Domain::equalsTo(_2714); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _2714){
  std::vector<double> _8102;
  for (int _2715 = (int)0, _8103 = (int)((_2714)->size(0)); _2715 < _8103 ; ++_2715)
  {
    for (int _2716 = (int)0, _8104 = (int)((_2714)->size(1)); _2716 < _8104 ; ++_2716)
    {
      _8102.push_back(((*_2714)(_2715,_2716)));
    }
  }
  auto _8105 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8102.size()),_8102.begin(),_8102.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_8105,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2714)->size(0))),(int)((int)((_2714)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _2717) { return mosek::fusion::p_Domain::equalsTo(_2717); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _2717){
  _checked_ptr_1<double> _ptr__2717(_2717 ? _2717->raw() : nullptr, _2717 ? _2717->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_2717),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2717)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2718,    std::shared_ptr< monty::ndarray< int,1 > > _2719) { return mosek::fusion::p_Domain::equalsTo(_2718,_2719); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2718,std::shared_ptr< monty::ndarray< int,1 > > _2719){
  _checked_ptr_1<int> _ptr__2719(_2719 ? _2719->raw() : nullptr, _2719 ? _2719->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2718)}),_2719);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2720,    int _2721,    int _2722) { return mosek::fusion::p_Domain::equalsTo(_2720,_2721,_2722); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2720,int _2721,int _2722){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2720)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2721),(int)(_2722)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2723,    int _2724) { return mosek::fusion::p_Domain::equalsTo(_2723,_2724); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2723,int _2724){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2723)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2724)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2725) { return mosek::fusion::p_Domain::equalsTo(_2725); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2725){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2725)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _2726) { return mosek::fusion::p_Domain::unbounded(_2726); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int,1 > > _2726){
  _checked_ptr_1<int> _ptr__2726(_2726 ? _2726->raw() : nullptr, _2726 ? _2726->size(0) : 0);
  std::vector<int> _8106;
  for (int _2727 = (int)0, _8107 = (int)((_2726)->size(0)); _2727 < _8107 ; ++_2727)
  {
    _8106.push_back(_ptr__2726[_2727]);
  }
  auto _8108 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8106.size()),_8106.begin(),_8106.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_8108);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _2728,    int _2729) { return mosek::fusion::p_Domain::unbounded(_2728,_2729); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _2728,int _2729){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2728),(int)(_2729)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _2730) { return mosek::fusion::p_Domain::unbounded(_2730); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _2730){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2730)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprConst::p_ExprConst  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2731,    std::shared_ptr< monty::ndarray< long long,1 > > _2732,    std::shared_ptr< monty::ndarray< double,1 > > _2733){ return new mosek::fusion::ExprConst(_2731,_2732,_2733); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2731,    std::shared_ptr< monty::ndarray< long long,1 > > _2732,    std::shared_ptr< monty::ndarray< double,1 > > _2733) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_2731,_2732,_2733); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2731,    std::shared_ptr< monty::ndarray< long long,1 > > _2732,    std::shared_ptr< monty::ndarray< double,1 > > _2733){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2731(_2731 ? _2731->raw() : nullptr, _2731 ? _2731->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2732(_2732 ? _2732->raw() : nullptr, _2732 ? _2732->size(0) : 0);
    _checked_ptr_1<double> _ptr__2733(_2733 ? _2733->raw() : nullptr, _2733 ? _2733->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_2731);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_2733);
    std::shared_ptr< monty::ndarray< long long,1 > > _8109;
    bool _8110 = (NULL != _2732.get());
    if (_8110)
    {
      _8109 = ::mosek::fusion::Utils::Tools::arraycopy(_2732);
    }
    else
    {
      _8109 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _8109;
    ::mosek::fusion::p_ExprConst::validate(_2731,_2733,_2732);
  }
}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2734,    std::shared_ptr< monty::ndarray< long long,1 > > _2735,    double _2736){ return new mosek::fusion::ExprConst(_2734,_2735,_2736); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2734,    std::shared_ptr< monty::ndarray< long long,1 > > _2735,    double _2736) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_2734,_2735,_2736); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2734,    std::shared_ptr< monty::ndarray< long long,1 > > _2735,    double _2736){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2734(_2734 ? _2734->raw() : nullptr, _2734 ? _2734->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2735(_2735 ? _2735->raw() : nullptr, _2735 ? _2735->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_2734);
    long long _8111;
    bool _8112 = (NULL == _2735.get());
    if (_8112)
    {
      _8111 = ::mosek::fusion::p_Set::size(_2734);
    }
    else
    {
      _8111 = (int)((_2735)->size(0));
    }
    long long _2737 = _8111;
    std::vector<double> _8113;
    for (long long _2738 = (int)0, _8114 = _2737; _2738 < _8114 ; ++_2738)
    {
      _8113.push_back(_2736);
    }
    auto _8115 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8113.size()),_8113.begin(),_8113.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _8115;
    std::shared_ptr< monty::ndarray< long long,1 > > _8116;
    bool _8117 = (NULL != _2735.get());
    if (_8117)
    {
      _8116 = ::mosek::fusion::Utils::Tools::arraycopy(_2735);
    }
    else
    {
      _8116 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _8116;
    ::mosek::fusion::p_ExprConst::validate(_2734,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_2735);
  }
}void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2739,monty::rc_ptr< ::mosek::fusion::WorkStack > _2740,monty::rc_ptr< ::mosek::fusion::WorkStack > _2741) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_2739,_2740,_2741); }void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2739,monty::rc_ptr< ::mosek::fusion::WorkStack > _2740,monty::rc_ptr< ::mosek::fusion::WorkStack > _2741){
  std::shared_ptr< monty::ndarray< int,1 > > _2742 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__2742(_2742 ? _2742->raw() : nullptr,_2742 ? _2742->size(0) : 0);
  int _2743 = (int)((_2742)->size(0));
  int _2744 = (int)((bfix)->size(0));
  bool _2745 = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_2742)));
  _2739->alloc_expr(_2743,_2744,(int)0,_2745);
  int _2746 = mosek::fusion::p_WorkStack::_get_impl(_2739)->shape_base;
  int _2747 = mosek::fusion::p_WorkStack::_get_impl(_2739)->ptr_base;
  int _2748 = mosek::fusion::p_WorkStack::_get_impl(_2739)->sp_base;
  int _2749 = mosek::fusion::p_WorkStack::_get_impl(_2739)->nidxs_base;
  int _2750 = mosek::fusion::p_WorkStack::_get_impl(_2739)->bfix_base;
  int _2751 = mosek::fusion::p_WorkStack::_get_impl(_2739)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _2752 = mosek::fusion::p_WorkStack::_get_impl(_2739)->i32;
  _checked_ptr_1<int> _ptr__2752(_2752 ? _2752->raw() : nullptr,_2752 ? _2752->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2753 = mosek::fusion::p_WorkStack::_get_impl(_2739)->i64;
  _checked_ptr_1<long long> _ptr__2753(_2753 ? _2753->raw() : nullptr,_2753 ? _2753->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2754 = mosek::fusion::p_WorkStack::_get_impl(_2739)->f64;
  _checked_ptr_1<double> _ptr__2754(_2754 ? _2754->raw() : nullptr,_2754 ? _2754->size(0) : 0);
  int _8118 = (int)0;
  int _8119 = _2743;
  for (int _2755 = _8118; _2755 < _8119; ++_2755)
  {
    {
      _ptr__2752[safe_add( _2746,_2755 )] = _ptr__2742[_2755];
    }
  }
  if (_2745)
  {
    {
      int _8120 = (int)0;
      int _8121 = (int)((sparsity)->size(0));
      for (int _2756 = _8120; _2756 < _8121; ++_2756)
      {
        {
          _ptr__2753[safe_add( _2748,_2756 )] = ((*sparsity)(_2756));
        }
      }
    }
  }
  {}
  int _8122 = (int)0;
  int _8123 = _2744;
  for (int _2757 = _8122; _2757 < _8123; ++_2757)
  {
    {
      _ptr__2754[safe_add( _2750,_2757 )] = ((*bfix)(_2757));
    }
  }
  int _8124 = (int)0;
  int _8125 = safe_add( _2744,(int)1 );
  for (int _2758 = _8124; _2758 < _8125; ++_2758)
  {
    {
      _ptr__2752[safe_add( _2747,_2758 )] = (int)0;
    }
  }
}
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int,1 > > _2759,std::shared_ptr< monty::ndarray< double,1 > > _2760,std::shared_ptr< monty::ndarray< long long,1 > > _2761){
  _checked_ptr_1<int> _ptr__2759(_2759 ? _2759->raw() : nullptr, _2759 ? _2759->size(0) : 0);
  _checked_ptr_1<double> _ptr__2760(_2760 ? _2760->raw() : nullptr, _2760 ? _2760->size(0) : 0);
  _checked_ptr_1<long long> _ptr__2761(_2761 ? _2761->raw() : nullptr, _2761 ? _2761->size(0) : 0);
  long long _2762 = ::mosek::fusion::p_Set::size(_2759);
  if ((NULL != _2761.get()))
  {
    {
      if (((int)((_2761)->size(0)) != (int)((_2760)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _2763 = false;
      int _8126 = (int)0;
      int _8127 = (int)((_2761)->size(0));
      for (int _2764 = _8126; _2764 < _8127; ++_2764)
      {
        {
          if (((_ptr__2761[_2764] < (int)0) || (_ptr__2761[_2764] >= _2762)))
          {
            {
              _2763 = true;
            }
          }
          {}
        }
      }
      if (_2763)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_2760)->size(0)) != _2762))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprConst::toString(){
  return std::string ("ExprConst()");
}
void mosek::fusion::p_ExprConst::destroy(){sparsity.reset();bfix.reset();}void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPick::p_ExprPick  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2765,    std::shared_ptr< monty::ndarray< int,2 > > _2766){ return new mosek::fusion::ExprPick(_2765,_2766); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2765,    std::shared_ptr< monty::ndarray< int,2 > > _2766) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_2765,_2766); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2765,    std::shared_ptr< monty::ndarray< int,2 > > _2766){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2766)->size(0)))}));
    std::shared_ptr< monty::ndarray< int,1 > > _2767 = _2765->getShape();
    _checked_ptr_1<int> _ptr__2767(_2767 ? _2767->raw() : nullptr,_2767 ? _2767->size(0) : 0);
    int _2768 = (int)((_2767)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _2765;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_2766)->size(0)))));
    std::shared_ptr< monty::ndarray< long long,1 > > _2769 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<long long> _ptr__2769(_2769 ? _2769->raw() : nullptr,_2769 ? _2769->size(0) : 0);
    if (((int)((_2766)->size(1)) != _2768))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _2770 = false;
    int _8128 = (int)0;
    int _8129 = (int)((_2766)->size(0));
    for (int _2771 = _8128; _2771 < _8129; ++_2771)
    {
      {
        int _8130 = (int)0;
        int _8131 = _2768;
        for (int _2772 = _8130; _2772 < _8131; ++_2772)
        {
          {
            if (((((*_2766)(_2771,_2772)) < (int)0) || (((*_2766)(_2771,_2772)) >= _ptr__2767[_2772])))
            {
              {
                _2770 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_2770)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2773 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2768)));
      _checked_ptr_1<long long> _ptr__2773(_2773 ? _2773->raw() : nullptr,_2773 ? _2773->size(0) : 0);
      _ptr__2773[(_2768 - (int)1)] = (int)1;
      int _8132 = (int)1;
      int _8133 = _2768;
      for (int _2774 = _8132; _2774 < _8133; ++_2774)
      {
        {
          _ptr__2773[((_2768 - _2774) - (int)1)] = safe_mul( _ptr__2773[(_2768 - _2774)],_ptr__2767[(_2768 - _2774)] );
        }
      }
      int _8134 = (int)0;
      int _8135 = (int)((_2766)->size(0));
      for (int _2775 = _8134; _2775 < _8135; ++_2775)
      {
        {
          long long _2776 = (long long)0;
          int _8136 = (int)0;
          int _8137 = _2768;
          for (int _2777 = _8136; _2777 < _8137; ++_2777)
          {
            {
              _2776 += safe_mul( _ptr__2773[_2777],((*_2766)(_2775,_2777)) );
            }
          }
          _ptr__2769[_2775] = _2776;
        }
      }
    }
  }
}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2778,    std::shared_ptr< monty::ndarray< long long,1 > > _2779){ return new mosek::fusion::ExprPick(_2778,_2779); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2778,    std::shared_ptr< monty::ndarray< long long,1 > > _2779) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_2778,_2779); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2778,    std::shared_ptr< monty::ndarray< long long,1 > > _2779){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2779(_2779 ? _2779->raw() : nullptr, _2779 ? _2779->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2779)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _2778;
    std::shared_ptr< monty::ndarray< int,1 > > _2780 = _2778->getShape();
    _checked_ptr_1<int> _ptr__2780(_2780 ? _2780->raw() : nullptr,_2780 ? _2780->size(0) : 0);
    long long _2781 = ::mosek::fusion::p_Set::size(_2780);
    bool _2782 = false;
    int _8138 = (int)0;
    int _8139 = (int)((_2779)->size(0));
    for (int _2783 = _8138; _2783 < _8139; ++_2783)
    {
      {
        if (((_ptr__2779[_2783] < (int)0) || (_ptr__2779[_2783] >= _2781)))
        {
          {
            _2782 = true;
          }
        }
        {}
      }
    }
    if (_2782)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_2779);
  }
}void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2784,monty::rc_ptr< ::mosek::fusion::WorkStack > _2785,monty::rc_ptr< ::mosek::fusion::WorkStack > _2786) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_2784,_2785,_2786); }void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2784,monty::rc_ptr< ::mosek::fusion::WorkStack > _2785,monty::rc_ptr< ::mosek::fusion::WorkStack > _2786){
  expr->eval(_2785,_2784,_2786);
  _2785->pop_expr();
  int _2787 = mosek::fusion::p_WorkStack::_get_impl(_2785)->nd;
  int _2788 = mosek::fusion::p_WorkStack::_get_impl(_2785)->shape_base;
  int _2789 = mosek::fusion::p_WorkStack::_get_impl(_2785)->nelem;
  int _2790 = mosek::fusion::p_WorkStack::_get_impl(_2785)->nnz;
  bool _2791 = mosek::fusion::p_WorkStack::_get_impl(_2785)->hassp;
  int _2792 = mosek::fusion::p_WorkStack::_get_impl(_2785)->ptr_base;
  int _2793 = mosek::fusion::p_WorkStack::_get_impl(_2785)->sp_base;
  int _2794 = mosek::fusion::p_WorkStack::_get_impl(_2785)->nidxs_base;
  int _2795 = mosek::fusion::p_WorkStack::_get_impl(_2785)->bfix_base;
  int _2796 = mosek::fusion::p_WorkStack::_get_impl(_2785)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _2797 = mosek::fusion::p_WorkStack::_get_impl(_2785)->i32;
  _checked_ptr_1<int> _ptr__2797(_2797 ? _2797->raw() : nullptr,_2797 ? _2797->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2798 = mosek::fusion::p_WorkStack::_get_impl(_2785)->i64;
  _checked_ptr_1<long long> _ptr__2798(_2798 ? _2798->raw() : nullptr,_2798 ? _2798->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2799 = mosek::fusion::p_WorkStack::_get_impl(_2785)->f64;
  _checked_ptr_1<double> _ptr__2799(_2799 ? _2799->raw() : nullptr,_2799 ? _2799->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2800 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<long long> _ptr__2800(_2800 ? _2800->raw() : nullptr,_2800 ? _2800->size(0) : 0);
  if ((!_2791))
  {
    {
      int _2801 = (int)((_2800)->size(0));
      int _2802 = (int)1;
      int _2803 = (int)0;
      int _8140 = (int)0;
      int _8141 = (int)((_2800)->size(0));
      for (int _2804 = _8140; _2804 < _8141; ++_2804)
      {
        {
          _2803 += (_ptr__2797[safe_add( safe_add( _2792,_ptr__2800[_2804] ),(int)1 )] - _ptr__2797[safe_add( _2792,_ptr__2800[_2804] )]);
        }
      }
      _2784->alloc_expr(_2802,_2801,_2803,false);
      int _2805 = mosek::fusion::p_WorkStack::_get_impl(_2784)->cof_base;
      int _2806 = mosek::fusion::p_WorkStack::_get_impl(_2784)->bfix_base;
      int _2807 = mosek::fusion::p_WorkStack::_get_impl(_2784)->nidxs_base;
      int _2808 = mosek::fusion::p_WorkStack::_get_impl(_2784)->ptr_base;
      int _2809 = mosek::fusion::p_WorkStack::_get_impl(_2784)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2810 = mosek::fusion::p_WorkStack::_get_impl(_2784)->i32;
      _checked_ptr_1<int> _ptr__2810(_2810 ? _2810->raw() : nullptr,_2810 ? _2810->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2811 = mosek::fusion::p_WorkStack::_get_impl(_2784)->i64;
      _checked_ptr_1<long long> _ptr__2811(_2811 ? _2811->raw() : nullptr,_2811 ? _2811->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2812 = mosek::fusion::p_WorkStack::_get_impl(_2784)->f64;
      _checked_ptr_1<double> _ptr__2812(_2812 ? _2812->raw() : nullptr,_2812 ? _2812->size(0) : 0);
      _ptr__2810[_2809] = (int)((_2800)->size(0));
      int _2813 = (int)0;
      _ptr__2810[_2808] = (int)0;
      int _8142 = (int)0;
      int _8143 = (int)((_2800)->size(0));
      for (int _2814 = _8142; _2814 < _8143; ++_2814)
      {
        {
          int _8144 = _ptr__2797[safe_add( _2792,_ptr__2800[_2814] )];
          int _8145 = _ptr__2797[safe_add( safe_add( _2792,_ptr__2800[_2814] ),(int)1 )];
          for (int _2815 = _8144; _2815 < _8145; ++_2815)
          {
            {
              _ptr__2811[safe_add( _2807,_2813 )] = _ptr__2798[safe_add( _2794,_2815 )];
              _ptr__2812[safe_add( _2805,_2813 )] = _ptr__2799[safe_add( _2796,_2815 )];
              ++ _2813;
            }
          }
          _ptr__2812[safe_add( _2806,_2814 )] = _ptr__2799[safe_add( _2795,_ptr__2800[_2814] )];
          _ptr__2810[safe_add( safe_add( _2808,_2814 ),(int)1 )] = _2813;
        }
      }
    }
  }
  else
  {
    {
      int _2816 = (int)1;
      int _2817 = (int)((_2800)->size(0));
      int _2818 = (int)0;
      std::shared_ptr< monty::ndarray< long long,1 > > _2819 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<long long> _ptr__2819(_2819 ? _2819->raw() : nullptr,_2819 ? _2819->size(0) : 0);
      int _2820 = _2786->alloci32((int)((_2819)->size(0)));
      std::shared_ptr< monty::ndarray< int,1 > > _2821 = mosek::fusion::p_WorkStack::_get_impl(_2786)->i32;
      _checked_ptr_1<int> _ptr__2821(_2821 ? _2821->raw() : nullptr,_2821 ? _2821->size(0) : 0);
      int _8146 = (int)0;
      int _8147 = (int)((_2819)->size(0));
      for (int _2822 = _8146; _2822 < _8147; ++_2822)
      {
        {
          int _2823 = _2789;
          int _2824 = (int)0;
          while ( (_2824 < (_2823 - (int)1)) )
          {
            {
              int _2825 = (safe_add( safe_add( _2823,_2824 ),(int)1 ) / (int)2);
              if ((_ptr__2798[safe_add( _2793,_2825 )] >= _ptr__2819[_2822]))
              {
                {
                  _2823 = _2825;
                }
              }
              else
              {
                {
                  _2824 = _2825;
                }
              }
            }
          }
          ++ _2824;
          if (((_2824 < _2789) && (_ptr__2798[safe_add( _2793,_2824 )] == _ptr__2819[_2822])))
          {
            {
              _ptr__2821[safe_add( _2820,_2822 )] = _2824;
              _2818 += (_ptr__2797[safe_add( safe_add( _2792,_2824 ),(int)1 )] - _ptr__2797[safe_add( _2792,_2824 )]);
            }
          }
          else
          {
            {
              _ptr__2821[safe_add( _2820,_2822 )] = (-(int)1);
            }
          }
        }
      }
      _2784->alloc_expr(_2816,_2817,_2818,false);
      int _2826 = mosek::fusion::p_WorkStack::_get_impl(_2784)->ptr_base;
      int _2827 = mosek::fusion::p_WorkStack::_get_impl(_2784)->nidxs_base;
      int _2828 = mosek::fusion::p_WorkStack::_get_impl(_2784)->cof_base;
      int _2829 = mosek::fusion::p_WorkStack::_get_impl(_2784)->bfix_base;
      int _2830 = mosek::fusion::p_WorkStack::_get_impl(_2784)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2831 = mosek::fusion::p_WorkStack::_get_impl(_2784)->i32;
      _checked_ptr_1<int> _ptr__2831(_2831 ? _2831->raw() : nullptr,_2831 ? _2831->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2832 = mosek::fusion::p_WorkStack::_get_impl(_2784)->i64;
      _checked_ptr_1<long long> _ptr__2832(_2832 ? _2832->raw() : nullptr,_2832 ? _2832->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2833 = mosek::fusion::p_WorkStack::_get_impl(_2784)->f64;
      _checked_ptr_1<double> _ptr__2833(_2833 ? _2833->raw() : nullptr,_2833 ? _2833->size(0) : 0);
      _ptr__2831[_2830] = (int)((_2819)->size(0));
      _ptr__2831[_2826] = (int)0;
      int _2834 = (int)0;
      int _8148 = (int)0;
      int _8149 = (int)((_2819)->size(0));
      for (int _2835 = _8148; _2835 < _8149; ++_2835)
      {
        {
          if ((_ptr__2821[safe_add( _2820,_2835 )] >= (int)0))
          {
            {
              int _2836 = _ptr__2821[safe_add( _2820,_2835 )];
              int _8150 = _ptr__2797[safe_add( _2792,_2836 )];
              int _8151 = _ptr__2797[safe_add( safe_add( _2792,_2836 ),(int)1 )];
              for (int _2837 = _8150; _2837 < _8151; ++_2837)
              {
                {
                  _ptr__2832[safe_add( _2827,_2834 )] = _ptr__2798[safe_add( _2794,_2837 )];
                  _ptr__2833[safe_add( _2828,_2834 )] = _ptr__2799[safe_add( _2796,_2837 )];
                  ++ _2834;
                }
              }
              _ptr__2833[safe_add( _2829,_2835 )] = _ptr__2799[safe_add( _2795,_2836 )];
            }
          }
          else
          {
            {
              _ptr__2833[safe_add( _2829,_2835 )] = 0.0;
            }
          }
          _ptr__2831[safe_add( safe_add( _2826,_2835 ),(int)1 )] = _2834;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprPick::toString(){
  return std::string ("ExprPick()");
}
void mosek::fusion::p_ExprPick::destroy(){idxs.reset();expr.reset();}void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSlice::p_ExprSlice  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _2838,    std::shared_ptr< monty::ndarray< int,1 > > _2839,    std::shared_ptr< monty::ndarray< int,1 > > _2840){ return new mosek::fusion::ExprSlice(_2838,_2839,_2840); }mosek::fusion::ExprSlice::ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _2838,    std::shared_ptr< monty::ndarray< int,1 > > _2839,    std::shared_ptr< monty::ndarray< int,1 > > _2840) :    ExprSlice(new mosek::fusion::p_ExprSlice(this)){ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_2838,_2839,_2840); }void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2838,    std::shared_ptr< monty::ndarray< int,1 > > _2839,    std::shared_ptr< monty::ndarray< int,1 > > _2840){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2839(_2839 ? _2839->raw() : nullptr, _2839 ? _2839->size(0) : 0);
    _checked_ptr_1<int> _ptr__2840(_2840 ? _2840->raw() : nullptr, _2840 ? _2840->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_2838->getShape(),_2839,_2840));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _2838;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _2839;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _2840;
  }
}void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2841,monty::rc_ptr< ::mosek::fusion::WorkStack > _2842,monty::rc_ptr< ::mosek::fusion::WorkStack > _2843) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_2841,_2842,_2843); }void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2841,monty::rc_ptr< ::mosek::fusion::WorkStack > _2842,monty::rc_ptr< ::mosek::fusion::WorkStack > _2843){
  expr->eval(_2842,_2841,_2843);
  int _2844 = _2842->popi32();
  int _2845 = _2842->popi32(_2844);
  int _2846 = _2842->popi32();
  int _2847 = _2842->popi32();
  bool _2848 = (_2842->popi32() != (int)0);
  int _2849 = _2842->popi32(safe_add( _2846,(int)1 ));
  int _8152;
  bool _8153 = _2848;
  if (_8153)
  {
    _8152 = _2842->popi64(_2846);
  }
  else
  {
    _8152 = (-(int)1);
  }
  int _2850 = _8152;
  int _2851 = _2842->popi64(_2847);
  int _2852 = _2842->popf64(_2846);
  int _2853 = _2842->popf64(_2847);
  std::shared_ptr< monty::ndarray< int,1 > > _2854 = mosek::fusion::p_WorkStack::_get_impl(_2842)->i32;
  _checked_ptr_1<int> _ptr__2854(_2854 ? _2854->raw() : nullptr,_2854 ? _2854->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2855 = mosek::fusion::p_WorkStack::_get_impl(_2842)->i64;
  _checked_ptr_1<long long> _ptr__2855(_2855 ? _2855->raw() : nullptr,_2855 ? _2855->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2856 = mosek::fusion::p_WorkStack::_get_impl(_2842)->f64;
  _checked_ptr_1<double> _ptr__2856(_2856 ? _2856->raw() : nullptr,_2856 ? _2856->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2857 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2844)));
  _checked_ptr_1<long long> _ptr__2857(_2857 ? _2857->raw() : nullptr,_2857 ? _2857->size(0) : 0);
  _ptr__2857[(_2844 - (int)1)] = (int)1;
  int _8154 = (int)1;
  int _8155 = _2844;
  for (int _2858 = _8154; _2858 < _8155; ++_2858)
  {
    {
      _ptr__2857[((_2844 - _2858) - (int)1)] = safe_mul( _ptr__2857[(_2844 - _2858)],_ptr__2854[(safe_add( _2845,_2844 ) - _2858)] );
    }
  }
  int _2859 = (int)0;
  int _2860 = (int)0;
  if (_2848)
  {
    {
      int _8156 = (int)0;
      int _8157 = _2846;
      for (int _2861 = _8156; _2861 < _8157; ++_2861)
      {
        {
          bool _2862 = true;
          int _8158 = (int)0;
          int _8159 = _2844;
          for (int _2863 = _8158; _2863 < _8159; ++_2863)
          {
            {
              long long _2864 = ((_ptr__2855[safe_add( _2850,_2861 )] / _ptr__2857[_2863]) % _ptr__2854[safe_add( _2845,_2863 )]);
              _2862 = (_2862 && ((_2864 >= ((*first)(_2863))) && (_2864 < ((*last)(_2863)))));
            }
          }
          if (_2862)
          {
            {
              _2860 += (_ptr__2854[safe_add( safe_add( _2849,_2861 ),(int)1 )] - _ptr__2854[safe_add( _2849,_2861 )]);
              ++ _2859;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _2859 = (int)1;
      int _8160 = (int)0;
      int _8161 = _2844;
      for (int _2865 = _8160; _2865 < _8161; ++_2865)
      {
        {
          _2859 *= (((*last)(_2865)) - ((*first)(_2865)));
        }
      }
      int _8162 = (int)0;
      int _8163 = _2846;
      for (int _2866 = _8162; _2866 < _8163; ++_2866)
      {
        {
          bool _2867 = true;
          int _8164 = (int)0;
          int _8165 = _2844;
          for (int _2868 = _8164; _2868 < _8165; ++_2868)
          {
            {
              long long _2869 = ((_2866 / _ptr__2857[_2868]) % _ptr__2854[safe_add( _2845,_2868 )]);
              _2867 = (_2867 && ((_2869 >= ((*first)(_2868))) && (_2869 < ((*last)(_2868)))));
            }
          }
          if (_2867)
          {
            {
              _2860 += (_ptr__2854[safe_add( safe_add( _2849,_2866 ),(int)1 )] - _ptr__2854[safe_add( _2849,_2866 )]);
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _8166;
  for (int _2871 = (int)0, _8167 = _2844; _2871 < _8167 ; ++_2871)
  {
    _8166.push_back((((*last)(_2871)) - ((*first)(_2871))));
  }
  auto _8168 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8166.size()),_8166.begin(),_8166.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _2870 = _8168;
  _checked_ptr_1<int> _ptr__2870(_2870 ? _2870->raw() : nullptr,_2870 ? _2870->size(0) : 0);
  int _2872 = _2841->allocf64(_2860);
  int _2873 = _2841->allocf64(_2859);
  int _2874 = _2841->alloci64(_2860);
  int _8169;
  bool _8170 = _2848;
  if (_8170)
  {
    _8169 = _2841->alloci64(_2859);
  }
  else
  {
    _8169 = (-(int)1);
  }
  int _2875 = _8169;
  int _2876 = _2841->alloci32(safe_add( _2859,(int)1 ));
  int _8171;
  bool _8172 = _2848;
  if (_8172)
  {
    _8171 = (int)1;
  }
  else
  {
    _8171 = (int)0;
  }
  _2841->pushi32(_8171);
  _2841->pushi32(_2860);
  _2841->pushi32(_2859);
  int _8173 = (int)0;
  int _8174 = _2844;
  for (int _2877 = _8173; _2877 < _8174; ++_2877)
  {
    {
      _2841->pushi32(_ptr__2870[_2877]);
    }
  }
  _2841->pushi32(_2844);
  std::shared_ptr< monty::ndarray< int,1 > > _2878 = mosek::fusion::p_WorkStack::_get_impl(_2841)->i32;
  _checked_ptr_1<int> _ptr__2878(_2878 ? _2878->raw() : nullptr,_2878 ? _2878->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2879 = mosek::fusion::p_WorkStack::_get_impl(_2841)->i64;
  _checked_ptr_1<long long> _ptr__2879(_2879 ? _2879->raw() : nullptr,_2879 ? _2879->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2880 = mosek::fusion::p_WorkStack::_get_impl(_2841)->f64;
  _checked_ptr_1<double> _ptr__2880(_2880 ? _2880->raw() : nullptr,_2880 ? _2880->size(0) : 0);
  _ptr__2878[_2876] = (int)0;
  std::shared_ptr< monty::ndarray< long long,1 > > _2881 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2844)));
  _checked_ptr_1<long long> _ptr__2881(_2881 ? _2881->raw() : nullptr,_2881 ? _2881->size(0) : 0);
  _ptr__2881[(_2844 - (int)1)] = (int)1;
  int _8175 = (int)1;
  int _8176 = _2844;
  for (int _2882 = _8175; _2882 < _8176; ++_2882)
  {
    {
      _ptr__2881[((_2844 - _2882) - (int)1)] = safe_mul( _ptr__2881[(_2844 - _2882)],_ptr__2870[(_2844 - _2882)] );
    }
  }
  int _2883 = (int)0;
  int _2884 = (int)0;
  if (_2848)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2885 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2844)));
      _checked_ptr_1<int> _ptr__2885(_2885 ? _2885->raw() : nullptr,_2885 ? _2885->size(0) : 0);
      int _8177 = (int)0;
      int _8178 = _2846;
      for (int _2886 = _8177; _2886 < _8178; ++_2886)
      {
        {
          bool _2887 = true;
          int _8179 = (int)0;
          int _8180 = _2844;
          for (int _2888 = _8179; _2888 < _8180; ++_2888)
          {
            {
              _ptr__2885[_2888] = (int)((_ptr__2855[safe_add( _2850,_2886 )] / _ptr__2857[_2888]) % _ptr__2854[safe_add( _2845,_2888 )]);
              _2887 = (_2887 && ((_ptr__2885[_2888] >= ((*first)(_2888))) && (_ptr__2885[_2888] < ((*last)(_2888)))));
            }
          }
          if (_2887)
          {
            {
              int _8181 = _ptr__2854[safe_add( _2849,_2886 )];
              int _8182 = _ptr__2854[safe_add( safe_add( _2849,_2886 ),(int)1 )];
              for (int _2889 = _8181; _2889 < _8182; ++_2889)
              {
                {
                  _ptr__2879[safe_add( _2874,_2884 )] = _ptr__2855[safe_add( _2851,_2889 )];
                  _ptr__2880[safe_add( _2872,_2884 )] = _ptr__2856[safe_add( _2853,_2889 )];
                  ++ _2884;
                }
              }
              long long _2890 = (long long)0;
              int _8183 = (int)0;
              int _8184 = _2844;
              for (int _2891 = _8183; _2891 < _8184; ++_2891)
              {
                {
                  _2890 += safe_mul( _ptr__2881[_2891],(_ptr__2885[_2891] - ((*first)(_2891))) );
                }
              }
              _ptr__2879[safe_add( _2875,_2883 )] = _2890;
              _ptr__2880[safe_add( _2873,_2883 )] = _ptr__2856[safe_add( _2852,_2886 )];
              _ptr__2878[safe_add( safe_add( _2876,_2883 ),(int)1 )] = _2884;
              ++ _2883;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _8185 = (int)0;
      int _8186 = _2846;
      for (int _2892 = _8185; _2892 < _8186; ++_2892)
      {
        {
          bool _2893 = true;
          int _8187 = (int)0;
          int _8188 = _2844;
          for (int _2894 = _8187; _2894 < _8188; ++_2894)
          {
            {
              long long _2895 = ((_2892 / _ptr__2857[_2894]) % _ptr__2854[safe_add( _2845,_2894 )]);
              _2893 = (_2893 && ((_2895 >= ((*first)(_2894))) && (_2895 < ((*last)(_2894)))));
            }
          }
          if (_2893)
          {
            {
              int _8189 = _ptr__2854[safe_add( _2849,_2892 )];
              int _8190 = _ptr__2854[safe_add( safe_add( _2849,_2892 ),(int)1 )];
              for (int _2896 = _8189; _2896 < _8190; ++_2896)
              {
                {
                  _ptr__2879[safe_add( _2874,_2884 )] = _ptr__2855[safe_add( _2851,_2896 )];
                  _ptr__2880[safe_add( _2872,_2884 )] = _ptr__2856[safe_add( _2853,_2896 )];
                  ++ _2884;
                }
              }
              _ptr__2880[safe_add( _2873,_2883 )] = _ptr__2856[safe_add( _2852,_2892 )];
              _ptr__2878[safe_add( safe_add( _2876,_2883 ),(int)1 )] = _2884;
              ++ _2883;
            }
          }
          {}
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int,1 > > _2897,std::shared_ptr< monty::ndarray< int,1 > > _2898,std::shared_ptr< monty::ndarray< int,1 > > _2899){
  _checked_ptr_1<int> _ptr__2897(_2897 ? _2897->raw() : nullptr, _2897 ? _2897->size(0) : 0);
  _checked_ptr_1<int> _ptr__2898(_2898 ? _2898->raw() : nullptr, _2898 ? _2898->size(0) : 0);
  _checked_ptr_1<int> _ptr__2899(_2899 ? _2899->raw() : nullptr, _2899 ? _2899->size(0) : 0);
  if ((((int)((_2897)->size(0)) != (int)((_2898)->size(0))) || ((int)((_2897)->size(0)) != (int)((_2899)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int _8191 = (int)0;
  int _8192 = (int)((_2897)->size(0));
  for (int _2900 = _8191; _2900 < _8192; ++_2900)
  {
    {
      if (((_ptr__2898[_2900] < (int)0) || ((_ptr__2899[_2900] < _ptr__2898[_2900]) || (_ptr__2899[_2900] > _ptr__2897[_2900]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _8193;
  for (int _2901 = (int)0, _8194 = (int)((_2897)->size(0)); _2901 < _8194 ; ++_2901)
  {
    _8193.push_back((_ptr__2899[_2901] - _ptr__2898[_2901]));
  }
  auto _8195 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8193.size()),_8193.begin(),_8193.end()));
  return _8195;
}
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSlice::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2902 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int _8196 = (int)1;
  int _8197 = (int)((first)->size(0));
  for (int _2903 = _8196; _2903 < _8197; ++_2903)
  {
    {
      _2902->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_2903)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_2903)));
    }
  }
  _2902->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2902->toString();
}
void mosek::fusion::p_ExprSlice::destroy(){last.reset();first.reset();expr.reset();}void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2904,    monty::rc_ptr< ::mosek::fusion::Expression > _2905){ return new mosek::fusion::ExprPermuteDims(_2904,_2905); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2904,    monty::rc_ptr< ::mosek::fusion::Expression > _2905) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_2904,_2905); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2904,    monty::rc_ptr< ::mosek::fusion::Expression > _2905){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2904(_2904 ? _2904->raw() : nullptr, _2904 ? _2904->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_2904,_2905,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _2906 = _2905->getShape();
    _checked_ptr_1<int> _ptr__2906(_2906 ? _2906->raw() : nullptr,_2906 ? _2906->size(0) : 0);
    if (((int)((_2904)->size(0)) != (int)((_2906)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int> _8198;
    for (int _2908 = (int)0, _8199 = (int)((_2904)->size(0)); _2908 < _8199 ; ++_2908)
    {
      _8198.push_back((int)0);
    }
    auto _8200 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8198.size()),_8198.begin(),_8198.end()));
    std::shared_ptr< monty::ndarray< int,1 > > _2907 = _8200;
    _checked_ptr_1<int> _ptr__2907(_2907 ? _2907->raw() : nullptr,_2907 ? _2907->size(0) : 0);
    int _8201 = (int)0;
    int _8202 = (int)((_2907)->size(0));
    for (int _2909 = _8201; _2909 < _8202; ++_2909)
    {
      {
        if (((_ptr__2904[_2909] < (int)0) || (_ptr__2904[_2909] > (int)((_2906)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__2907[_ptr__2904[_2909]];
      }
    }
    int _8203 = (int)0;
    int _8204 = (int)((_2907)->size(0));
    for (int _2910 = _8203; _2910 < _8204; ++_2910)
    {
      {
        if (((_ptr__2907[_2910] < (int)1) || (_ptr__2907[_2910] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2911,    monty::rc_ptr< ::mosek::fusion::Expression > _2912,    int _2913){ return new mosek::fusion::ExprPermuteDims(_2911,_2912,_2913); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2911,    monty::rc_ptr< ::mosek::fusion::Expression > _2912,    int _2913) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_2911,_2912,_2913); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2911,    monty::rc_ptr< ::mosek::fusion::Expression > _2912,    int _2913){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2911(_2911 ? _2911->raw() : nullptr, _2911 ? _2911->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_2911,_2912->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _2912;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_2911);
  }
}void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2914,monty::rc_ptr< ::mosek::fusion::WorkStack > _2915,monty::rc_ptr< ::mosek::fusion::WorkStack > _2916) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_2914,_2915,_2916); }void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2914,monty::rc_ptr< ::mosek::fusion::WorkStack > _2915,monty::rc_ptr< ::mosek::fusion::WorkStack > _2916){
  expr->eval(_2915,_2914,_2916);
  int _2917 = _2915->popi32();
  int _2918 = _2915->popi32(_2917);
  std::shared_ptr< monty::ndarray< long long,1 > > _2919 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2917)));
  _checked_ptr_1<long long> _ptr__2919(_2919 ? _2919->raw() : nullptr,_2919 ? _2919->size(0) : 0);
  _ptr__2919[(_2917 - (int)1)] = (int)1;
  int _8205 = (int)1;
  int _8206 = _2917;
  for (int _2920 = _8205; _2920 < _8206; ++_2920)
  {
    {
      _ptr__2919[((_2917 - _2920) - (int)1)] = safe_mul( _ptr__2919[(_2917 - _2920)],((*mosek::fusion::p_WorkStack::_get_impl(_2915)->i32)((safe_add( _2918,_2917 ) - _2920))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2921 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2917)));
  _checked_ptr_1<int> _ptr__2921(_2921 ? _2921->raw() : nullptr,_2921 ? _2921->size(0) : 0);
  _ptr__2921[(_2917 - (int)1)] = (int)1;
  int _8207 = (int)1;
  int _8208 = _2917;
  for (int _2922 = _8207; _2922 < _8208; ++_2922)
  {
    {
      _ptr__2921[((_2917 - _2922) - (int)1)] = safe_mul( _ptr__2921[(_2917 - _2922)],((*mosek::fusion::p_WorkStack::_get_impl(_2915)->i32)(safe_add( _2918,((*dperm)((_2917 - _2922))) ))) );
    }
  }
  int _2923 = _2915->popi32();
  int _2924 = _2915->popi32();
  bool _2925 = (_2915->popi32() != (int)0);
  int _2926 = _2915->popi32(safe_add( _2923,(int)1 ));
  int _8209;
  bool _8210 = (!_2925);
  if (_8210)
  {
    _8209 = (-(int)1);
  }
  else
  {
    _8209 = _2915->popi64(_2923);
  }
  int _2927 = _8209;
  int _2928 = _2915->popi64(_2924);
  int _2929 = _2915->popf64(_2923);
  int _2930 = _2915->popf64(_2924);
  std::shared_ptr< monty::ndarray< int,1 > > _2931 = mosek::fusion::p_WorkStack::_get_impl(_2915)->i32;
  _checked_ptr_1<int> _ptr__2931(_2931 ? _2931->raw() : nullptr,_2931 ? _2931->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2932 = mosek::fusion::p_WorkStack::_get_impl(_2915)->i64;
  _checked_ptr_1<long long> _ptr__2932(_2932 ? _2932->raw() : nullptr,_2932 ? _2932->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2933 = mosek::fusion::p_WorkStack::_get_impl(_2915)->f64;
  _checked_ptr_1<double> _ptr__2933(_2933 ? _2933->raw() : nullptr,_2933 ? _2933->size(0) : 0);
  if (_2925)
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2934 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2923)));
      _checked_ptr_1<long long> _ptr__2934(_2934 ? _2934->raw() : nullptr,_2934 ? _2934->size(0) : 0);
      {
        int _8211 = (int)0;
        int _8212 = _2923;
        for (int _2935 = _8211; _2935 < _8212; ++_2935)
        {
          {
            long long _2936 = (long long)0;
            int _8213 = (int)0;
            int _8214 = _2917;
            for (int _2937 = _8213; _2937 < _8214; ++_2937)
            {
              {
                _2936 += safe_mul( ((_ptr__2932[safe_add( _2927,_2935 )] / _ptr__2919[_2937]) % _ptr__2931[safe_add( _2918,_2937 )]),_ptr__2921[((*dperm)(_2937))] );
              }
            }
            _ptr__2934[_2935] = _2936;
          }
        }
      }
      std::vector<long long> _8215;
      for (int _2939 = (int)0, _8216 = _2923; _2939 < _8216 ; ++_2939)
      {
        _8215.push_back(_2939);
      }
      auto _8217 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8215.size()),_8215.begin(),_8215.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _2938 = _8217;
      _checked_ptr_1<long long> _ptr__2938(_2938 ? _2938->raw() : nullptr,_2938 ? _2938->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2938,_2934,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2923));
      int _2940 = _2914->alloci32(safe_add( _2923,(int)1 ));
      int _2941 = _2914->alloci64(_2924);
      int _2942 = _2914->alloci64(_2923);
      int _2943 = _2914->allocf64(_2924);
      int _2944 = _2914->allocf64(_2923);
      _2914->pushi32((int)1);
      _2914->pushi32(_2924);
      _2914->pushi32(_2923);
      int _8218 = (int)0;
      int _8219 = _2917;
      for (int _2945 = _8218; _2945 < _8219; ++_2945)
      {
        {
          _2914->pushi32(_ptr__2931[safe_add( _2918,((*dperm)(_2945)) )]);
        }
      }
      _2914->pushi32(_2917);
      std::shared_ptr< monty::ndarray< int,1 > > _2946 = mosek::fusion::p_WorkStack::_get_impl(_2914)->i32;
      _checked_ptr_1<int> _ptr__2946(_2946 ? _2946->raw() : nullptr,_2946 ? _2946->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2947 = mosek::fusion::p_WorkStack::_get_impl(_2914)->i64;
      _checked_ptr_1<long long> _ptr__2947(_2947 ? _2947->raw() : nullptr,_2947 ? _2947->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2948 = mosek::fusion::p_WorkStack::_get_impl(_2914)->f64;
      _checked_ptr_1<double> _ptr__2948(_2948 ? _2948->raw() : nullptr,_2948 ? _2948->size(0) : 0);
      _ptr__2946[_2940] = (int)0;
      int _2949 = (int)0;
      int _2950 = (int)0;
      int _8220 = (int)0;
      int _8221 = _2923;
      for (int _2951 = _8220; _2951 < _8221; ++_2951)
      {
        {
          long long _2952 = _ptr__2938[_2951];
          int _8222 = _ptr__2931[safe_add( _2926,_2952 )];
          int _8223 = _ptr__2931[safe_add( safe_add( _2926,_2952 ),(int)1 )];
          for (int _2953 = _8222; _2953 < _8223; ++_2953)
          {
            {
              _ptr__2947[safe_add( _2941,_2950 )] = _ptr__2932[safe_add( _2928,_2953 )];
              _ptr__2948[safe_add( _2943,_2950 )] = _ptr__2933[safe_add( _2930,_2953 )];
              ++ _2950;
            }
          }
          _ptr__2947[safe_add( _2942,_2951 )] = _ptr__2934[_2952];
          _ptr__2948[safe_add( _2944,_2951 )] = _ptr__2933[safe_add( _2929,_2952 )];
          ++ _2949;
          _ptr__2946[safe_add( safe_add( _2940,_2951 ),(int)1 )] = _2950;
        }
      }
    }
  }
  else
  {
    {
      int _2954 = _2914->alloci32(safe_add( _2923,(int)1 ));
      int _2955 = _2914->alloci64(_2924);
      int _2956 = _2914->allocf64(_2924);
      int _2957 = _2914->allocf64(_2923);
      _2914->pushi32((int)0);
      _2914->pushi32(_2924);
      _2914->pushi32(_2923);
      int _8224 = (int)0;
      int _8225 = _2917;
      for (int _2958 = _8224; _2958 < _8225; ++_2958)
      {
        {
          _2914->pushi32(_ptr__2931[safe_add( _2918,((*dperm)(_2958)) )]);
        }
      }
      _2914->pushi32(_2917);
      std::shared_ptr< monty::ndarray< int,1 > > _2959 = mosek::fusion::p_WorkStack::_get_impl(_2914)->i32;
      _checked_ptr_1<int> _ptr__2959(_2959 ? _2959->raw() : nullptr,_2959 ? _2959->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2960 = mosek::fusion::p_WorkStack::_get_impl(_2914)->i64;
      _checked_ptr_1<long long> _ptr__2960(_2960 ? _2960->raw() : nullptr,_2960 ? _2960->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2961 = mosek::fusion::p_WorkStack::_get_impl(_2914)->f64;
      _checked_ptr_1<double> _ptr__2961(_2961 ? _2961->raw() : nullptr,_2961 ? _2961->size(0) : 0);
      _ptr__2959[_2954] = (int)0;
      int _2962 = (int)0;
      int _2963 = (int)0;
      int _8226 = (int)0;
      int _8227 = _2923;
      for (int _2964 = _8226; _2964 < _8227; ++_2964)
      {
        {
          long long _2965 = (long long)0;
          int _8228 = (int)0;
          int _8229 = _2917;
          for (int _2966 = _8228; _2966 < _8229; ++_2966)
          {
            {
              _2965 += safe_mul( ((_2964 / _ptr__2919[((*dperm)(_2966))]) % _ptr__2931[safe_add( _2918,((*dperm)(_2966)) )]),_ptr__2921[_2966] );
            }
          }
          int _8230 = _ptr__2931[safe_add( _2926,_2965 )];
          int _8231 = _ptr__2931[safe_add( safe_add( _2926,_2965 ),(int)1 )];
          for (int _2967 = _8230; _2967 < _8231; ++_2967)
          {
            {
              _ptr__2960[safe_add( _2955,_2963 )] = _ptr__2932[safe_add( _2928,_2967 )];
              _ptr__2961[safe_add( _2956,_2963 )] = _ptr__2933[safe_add( _2930,_2967 )];
              ++ _2963;
            }
          }
          _ptr__2961[safe_add( _2957,_2962 )] = _ptr__2933[safe_add( _2929,_2965 )];
          ++ _2962;
          _ptr__2959[safe_add( _2954,_2962 )] = _2963;
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int,1 > > _2968,std::shared_ptr< monty::ndarray< int,1 > > _2969){
  _checked_ptr_1<int> _ptr__2968(_2968 ? _2968->raw() : nullptr, _2968 ? _2968->size(0) : 0);
  _checked_ptr_1<int> _ptr__2969(_2969 ? _2969->raw() : nullptr, _2969 ? _2969->size(0) : 0);
  std::vector<int> _8232;
  for (int _2970 = (int)0, _8233 = (int)((_2968)->size(0)); _2970 < _8233 ; ++_2970)
  {
    _8232.push_back(_ptr__2969[_ptr__2968[_2970]]);
  }
  auto _8234 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8232.size()),_8232.begin(),_8232.end()));
  return _8234;
}
void mosek::fusion::p_ExprPermuteDims::destroy(){dperm.reset();expr.reset();}void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprTranspose::p_ExprTranspose  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _2971){ return new mosek::fusion::ExprTranspose(_2971); }mosek::fusion::ExprTranspose::ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _2971) :    ExprTranspose(new mosek::fusion::p_ExprTranspose(this)){ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_2971); }void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2971){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_2971->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _2971;
  }
}void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2972,monty::rc_ptr< ::mosek::fusion::WorkStack > _2973,monty::rc_ptr< ::mosek::fusion::WorkStack > _2974) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_2972,_2973,_2974); }void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2972,monty::rc_ptr< ::mosek::fusion::WorkStack > _2973,monty::rc_ptr< ::mosek::fusion::WorkStack > _2974){
  expr->eval(_2973,_2972,_2974);
  _2973->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_2973)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int _2975 = mosek::fusion::p_WorkStack::_get_impl(_2973)->shape_base;
      int _2976 = mosek::fusion::p_WorkStack::_get_impl(_2973)->nelem;
      int _2977 = mosek::fusion::p_WorkStack::_get_impl(_2973)->nnz;
      bool _2978 = mosek::fusion::p_WorkStack::_get_impl(_2973)->hassp;
      int _2979 = mosek::fusion::p_WorkStack::_get_impl(_2973)->ptr_base;
      int _2980 = mosek::fusion::p_WorkStack::_get_impl(_2973)->sp_base;
      int _2981 = mosek::fusion::p_WorkStack::_get_impl(_2973)->nidxs_base;
      int _2982 = mosek::fusion::p_WorkStack::_get_impl(_2973)->bfix_base;
      int _2983 = mosek::fusion::p_WorkStack::_get_impl(_2973)->cof_base;
      int _2984 = ((*mosek::fusion::p_WorkStack::_get_impl(_2973)->i32)(_2975));
      int _2985 = ((*mosek::fusion::p_WorkStack::_get_impl(_2973)->i32)(safe_add( _2975,(int)1 )));
      std::shared_ptr< monty::ndarray< int,1 > > _2986 = mosek::fusion::p_WorkStack::_get_impl(_2973)->i32;
      _checked_ptr_1<int> _ptr__2986(_2986 ? _2986->raw() : nullptr,_2986 ? _2986->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2987 = mosek::fusion::p_WorkStack::_get_impl(_2973)->i64;
      _checked_ptr_1<long long> _ptr__2987(_2987 ? _2987->raw() : nullptr,_2987 ? _2987->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2988 = mosek::fusion::p_WorkStack::_get_impl(_2973)->f64;
      _checked_ptr_1<double> _ptr__2988(_2988 ? _2988->raw() : nullptr,_2988 ? _2988->size(0) : 0);
      _2972->alloc_expr((int)2,_2976,_2977,_2978);
      int _2989 = mosek::fusion::p_WorkStack::_get_impl(_2972)->ptr_base;
      int _2990 = mosek::fusion::p_WorkStack::_get_impl(_2972)->nidxs_base;
      int _2991 = mosek::fusion::p_WorkStack::_get_impl(_2972)->sp_base;
      int _2992 = mosek::fusion::p_WorkStack::_get_impl(_2972)->cof_base;
      int _2993 = mosek::fusion::p_WorkStack::_get_impl(_2972)->bfix_base;
      int _2994 = mosek::fusion::p_WorkStack::_get_impl(_2972)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2995 = mosek::fusion::p_WorkStack::_get_impl(_2972)->i32;
      _checked_ptr_1<int> _ptr__2995(_2995 ? _2995->raw() : nullptr,_2995 ? _2995->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2996 = mosek::fusion::p_WorkStack::_get_impl(_2972)->i64;
      _checked_ptr_1<long long> _ptr__2996(_2996 ? _2996->raw() : nullptr,_2996 ? _2996->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2997 = mosek::fusion::p_WorkStack::_get_impl(_2972)->f64;
      _checked_ptr_1<double> _ptr__2997(_2997 ? _2997->raw() : nullptr,_2997 ? _2997->size(0) : 0);
      _ptr__2995[_2994] = _2985;
      _ptr__2995[safe_add( _2994,(int)1 )] = _2984;
      if (_2978)
      {
        {
          int _2998 = _2974->alloci32(_2976);
          int _2999 = _2974->alloci32(safe_add( _2985,(int)1 ));
          std::shared_ptr< monty::ndarray< int,1 > > _3000 = mosek::fusion::p_WorkStack::_get_impl(_2974)->i32;
          _checked_ptr_1<int> _ptr__3000(_3000 ? _3000->raw() : nullptr,_3000 ? _3000->size(0) : 0);
          {
            int _8235 = (int)0;
            int _8236 = safe_add( _2985,(int)1 );
            for (int _3001 = _8235; _3001 < _8236; ++_3001)
            {
              {
                _ptr__3000[safe_add( _2999,_3001 )] = (int)0;
              }
            }
            int _8237 = (int)0;
            int _8238 = _2976;
            for (int _3002 = _8237; _3002 < _8238; ++_3002)
            {
              {
                ++ _ptr__3000[safe_add( safe_add( _2999,(_ptr__2987[safe_add( _2980,_3002 )] % _2985) ),(int)1 )];
              }
            }
            int _8239 = (int)0;
            int _8240 = _2985;
            for (int _3003 = _8239; _3003 < _8240; ++_3003)
            {
              {
                _ptr__3000[safe_add( safe_add( _2999,_3003 ),(int)1 )] += _ptr__3000[safe_add( _2999,_3003 )];
              }
            }
            int _8241 = (int)0;
            int _8242 = _2976;
            for (int _3004 = _8241; _3004 < _8242; ++_3004)
            {
              {
                long long _3005 = (_ptr__2987[safe_add( _2980,_3004 )] % _2985);
                _ptr__3000[safe_add( _2998,_ptr__3000[safe_add( _2999,_3005 )] )] = _3004;
                ++ _ptr__3000[safe_add( _2999,_3005 )];
              }
            }
            _ptr__2995[_2989] = (int)0;
            int _3006 = (int)0;
            int _8243 = (int)0;
            int _8244 = _2976;
            for (int _3007 = _8243; _3007 < _8244; ++_3007)
            {
              {
                int _3008 = _ptr__3000[safe_add( _2998,_3007 )];
                int _8245 = _ptr__2986[safe_add( _2979,_3008 )];
                int _8246 = _ptr__2986[safe_add( safe_add( _2979,_3008 ),(int)1 )];
                for (int _3009 = _8245; _3009 < _8246; ++_3009)
                {
                  {
                    _ptr__2996[safe_add( _2990,_3006 )] = _ptr__2987[safe_add( _2981,_3009 )];
                    _ptr__2997[safe_add( _2992,_3006 )] = _ptr__2988[safe_add( _2983,_3009 )];
                    ++ _3006;
                  }
                }
                long long _3010 = (_ptr__2987[safe_add( _2980,_3008 )] / _2985);
                long long _3011 = (_ptr__2987[safe_add( _2980,_3008 )] % _2985);
                _ptr__2995[safe_add( safe_add( _2989,_3007 ),(int)1 )] = _3006;
                _ptr__2996[safe_add( _2991,_3007 )] = safe_add( safe_mul( _3011,_2984 ),_3010 );
                _ptr__2997[safe_add( _2993,_3007 )] = _ptr__2988[safe_add( _2982,_3008 )];
              }
            }
          }
        }
      }
      else
      {
        {
          _ptr__2995[_2989] = (int)0;
          int _3012 = (int)0;
          int _3013 = (int)0;
          int _8247 = (int)0;
          int _8248 = _2985;
          for (int _3014 = _8247; _3014 < _8248; ++_3014)
          {
            {
              int _8249 = (int)0;
              int _8250 = _2984;
              for (int _3015 = _8249; _3015 < _8250; ++_3015)
              {
                {
                  int _3016 = safe_add( safe_mul( _3015,_2985 ),_3014 );
                  int _8251 = _ptr__2986[safe_add( _2979,_3016 )];
                  int _8252 = _ptr__2986[safe_add( safe_add( _2979,_3016 ),(int)1 )];
                  for (int _3017 = _8251; _3017 < _8252; ++_3017)
                  {
                    {
                      _ptr__2996[safe_add( _2990,_3012 )] = _ptr__2987[safe_add( _2981,_3017 )];
                      _ptr__2997[safe_add( _2992,_3012 )] = _ptr__2988[safe_add( _2983,_3017 )];
                      ++ _3012;
                    }
                  }
                  _ptr__2997[safe_add( _2993,_3013 )] = _ptr__2988[safe_add( _2982,_3016 )];
                  _ptr__2995[safe_add( safe_add( _2989,_3013 ),(int)1 )] = _3012;
                  ++ _3013;
                }
              }
            }
          }
        }
      }
      _2974->clear();
    }
  }
}
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprTranspose::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int,1 > > _3018){
  _checked_ptr_1<int> _ptr__3018(_3018 ? _3018->raw() : nullptr, _3018 ? _3018->size(0) : 0);
  if (((int)((_3018)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__3018[(int)1]),(int)(_ptr__3018[(int)0])});
    }
  }
}
void mosek::fusion::p_ExprTranspose::destroy(){expr.reset();}void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprStack::p_ExprStack  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3019,    int _3020){ return new mosek::fusion::ExprStack(_3019,_3020); }mosek::fusion::ExprStack::ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3019,    int _3020) :    ExprStack(new mosek::fusion::p_ExprStack(this)){ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_3019,_3020); }void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3019,    int _3020){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_3019,_3020));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _8253;
    for (int _3021 = (int)0, _8254 = (int)((_3019)->size(0)); _3021 < _8254 ; ++_3021)
    {
      _8253.push_back(((*_3019)(_3021)));
    }
    auto _8255 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_8253.size()),_8253.begin(),_8253.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _8255;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _3020;
  }
}void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3022,monty::rc_ptr< ::mosek::fusion::WorkStack > _3023,monty::rc_ptr< ::mosek::fusion::WorkStack > _3024) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_3022,_3023,_3024); }void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3022,monty::rc_ptr< ::mosek::fusion::WorkStack > _3023,monty::rc_ptr< ::mosek::fusion::WorkStack > _3024){
  int _3025 = (int)((exprs)->size(0));
  if ((_3025 == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_3022,_3023,_3024);
    }
  }
  else
  {
    {
      int _8256 = (int)0;
      int _8257 = _3025;
      for (int _3026 = _8256; _3026 < _8257; ++_3026)
      {
        {
          ((*exprs)(((_3025 - _3026) - (int)1)))->eval(_3023,_3022,_3024);
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3027 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3027(_3027 ? _3027->raw() : nullptr,_3027 ? _3027->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3028 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3028(_3028 ? _3028->raw() : nullptr,_3028 ? _3028->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3029 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3029(_3029 ? _3029->raw() : nullptr,_3029 ? _3029->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3030 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3030(_3030 ? _3030->raw() : nullptr,_3030 ? _3030->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _3031 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_3025)));
      std::shared_ptr< monty::ndarray< int,1 > > _3032 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3032(_3032 ? _3032->raw() : nullptr,_3032 ? _3032->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3033 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3033(_3033 ? _3033->raw() : nullptr,_3033 ? _3033->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3034 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3034(_3034 ? _3034->raw() : nullptr,_3034 ? _3034->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3035 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3035(_3035 ? _3035->raw() : nullptr,_3035 ? _3035->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3036 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3036(_3036 ? _3036->raw() : nullptr,_3036 ? _3036->size(0) : 0);
      int _8258 = (int)0;
      int _8259 = _3025;
      for (int _3037 = _8258; _3037 < _8259; ++_3037)
      {
        {
          _3023->pop_expr();
          _ptr__3027[_3037] = mosek::fusion::p_WorkStack::_get_impl(_3023)->nd;
          _ptr__3028[_3037] = mosek::fusion::p_WorkStack::_get_impl(_3023)->shape_base;
          _ptr__3029[_3037] = mosek::fusion::p_WorkStack::_get_impl(_3023)->nelem;
          _ptr__3030[_3037] = mosek::fusion::p_WorkStack::_get_impl(_3023)->nnz;
          ((*_3031)(_3037)) = mosek::fusion::p_WorkStack::_get_impl(_3023)->hassp;
          _ptr__3032[_3037] = mosek::fusion::p_WorkStack::_get_impl(_3023)->ptr_base;
          _ptr__3034[_3037] = mosek::fusion::p_WorkStack::_get_impl(_3023)->sp_base;
          _ptr__3033[_3037] = mosek::fusion::p_WorkStack::_get_impl(_3023)->nidxs_base;
          _ptr__3036[_3037] = mosek::fusion::p_WorkStack::_get_impl(_3023)->bfix_base;
          _ptr__3035[_3037] = mosek::fusion::p_WorkStack::_get_impl(_3023)->cof_base;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3038 = mosek::fusion::p_WorkStack::_get_impl(_3023)->i32;
      _checked_ptr_1<int> _ptr__3038(_3038 ? _3038->raw() : nullptr,_3038 ? _3038->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3039 = mosek::fusion::p_WorkStack::_get_impl(_3023)->i64;
      _checked_ptr_1<long long> _ptr__3039(_3039 ? _3039->raw() : nullptr,_3039 ? _3039->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3040 = mosek::fusion::p_WorkStack::_get_impl(_3023)->f64;
      _checked_ptr_1<double> _ptr__3040(_3040 ? _3040->raw() : nullptr,_3040 ? _3040->size(0) : 0);
      int _3041 = _ptr__3027[(int)0];
      int _3042 = _ptr__3028[(int)0];
      bool _3043 = (!((*_3031)((int)0)));
      bool _3044 = false;
      int _8260 = (int)1;
      int _8261 = _3025;
      for (int _3045 = _8260; _3045 < _8261; ++_3045)
      {
        {
          {
            _3044 = (_3044 || ((dim != _3045) && (_ptr__3027[_3045] != _3041)));
            if ((!_3044))
            {
              {
                int _8262 = (int)0;
                int _8263 = dim;
                for (int _3046 = _8262; _3046 < _8263; ++_3046)
                {
                  {
                    _3044 = (_3044 || (_ptr__3038[safe_add( _3042,_3046 )] != _ptr__3038[safe_add( _ptr__3028[_3045],_3046 )]));
                  }
                }
              }
            }
            {}
            if ((!_3044))
            {
              {
                int _8264 = safe_add( dim,(int)1 );
                int _8265 = _3041;
                for (int _3047 = _8264; _3047 < _8265; ++_3047)
                {
                  {
                    _3044 = (_3044 || (_ptr__3038[safe_add( _3042,_3047 )] != _ptr__3038[safe_add( _ptr__3028[_3045],_3047 )]));
                  }
                }
              }
            }
            {}
          }
          _3043 = (_3043 && (!((*_3031)(_3045))));
        }
      }
      if (_3044)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int _3048 = (int)0;
      if ((dim < _3041))
      {
        {
          int _8266 = (int)0;
          int _8267 = _3025;
          for (int _3049 = _8266; _3049 < _8267; ++_3049)
          {
            {
              _3048 += _ptr__3038[safe_add( _ptr__3028[_3049],dim )];
            }
          }
        }
      }
      else
      {
        {
          _3048 = _3025;
        }
      }
      int _8268;
      bool _8269 = (dim < _3041);
      if (_8269)
      {
        _8268 = _3041;
      }
      else
      {
        _8268 = safe_add( _3041,(int)1 );
      }
      int _3050 = _8268;
      if ((_3050 != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Oops!!"));
        }
      }
      {}
      int _3051 = (int)0;
      int _3052 = (int)0;
      {
        int _8270 = (int)0;
        int _8271 = _3025;
        for (int _3053 = _8270; _3053 < _8271; ++_3053)
        {
          {
            _3052 += _ptr__3030[_3053];
          }
        }
        int _8272 = (int)0;
        int _8273 = _3025;
        for (int _3054 = _8272; _3054 < _8273; ++_3054)
        {
          {
            _3051 += _ptr__3029[_3054];
          }
        }
      }
      int _3055 = (int)1;
      int _8274 = (int)0;
      int _8275 = dim;
      for (int _3056 = _8274; _3056 < _8275; ++_3056)
      {
        {
          _3055 *= _ptr__3038[safe_add( _3042,_3056 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _8276;
      bool _8277 = (dim < _3041);
      if (_8277)
      {
        std::vector<int> _8278;
        for (int _3058 = (int)0, _8279 = _3025; _3058 < _8279 ; ++_3058)
        {
          _8278.push_back(_ptr__3038[safe_add( _ptr__3028[_3058],dim )]);
        }
        auto _8280 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8278.size()),_8278.begin(),_8278.end()));
        _8276 = _8280;
      }
      else
      {
        std::vector<int> _8281;
        for (int _3059 = (int)0, _8282 = _3025; _3059 < _8282 ; ++_3059)
        {
          _8281.push_back((int)1);
        }
        auto _8283 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8281.size()),_8281.begin(),_8281.end()));
        _8276 = _8283;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3057 = _8276;
      _checked_ptr_1<int> _ptr__3057(_3057 ? _3057->raw() : nullptr,_3057 ? _3057->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3060 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3025)));
      _checked_ptr_1<int> _ptr__3060(_3060 ? _3060->raw() : nullptr,_3060 ? _3060->size(0) : 0);
      _ptr__3060[(int)0] = (int)0;
      int _8284 = (int)1;
      int _8285 = _3025;
      for (int _3061 = _8284; _3061 < _8285; ++_3061)
      {
        {
          _ptr__3060[_3061] = safe_add( _ptr__3060[(_3061 - (int)1)],_ptr__3057[(_3061 - (int)1)] );
        }
      }
      int _3062 = (int)0;
      int _8286 = (int)0;
      int _8287 = _3025;
      for (int _3063 = _8286; _3063 < _8287; ++_3063)
      {
        {
          _3062 += _ptr__3057[_3063];
        }
      }
      int _3064 = (int)1;
      int _8288 = safe_add( dim,(int)1 );
      int _8289 = _3041;
      for (int _3065 = _8288; _3065 < _8289; ++_3065)
      {
        {
          _3064 *= _ptr__3038[safe_add( _3042,_3065 )];
        }
      }
      if (_3043)
      {
        {
          _3022->alloc_expr(_3050,_3051,_3052,false);
          int _3066 = mosek::fusion::p_WorkStack::_get_impl(_3022)->ptr_base;
          int _3067 = mosek::fusion::p_WorkStack::_get_impl(_3022)->shape_base;
          int _3068 = mosek::fusion::p_WorkStack::_get_impl(_3022)->nidxs_base;
          int _3069 = mosek::fusion::p_WorkStack::_get_impl(_3022)->cof_base;
          int _3070 = mosek::fusion::p_WorkStack::_get_impl(_3022)->bfix_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3071 = mosek::fusion::p_WorkStack::_get_impl(_3022)->i32;
          _checked_ptr_1<int> _ptr__3071(_3071 ? _3071->raw() : nullptr,_3071 ? _3071->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3072 = mosek::fusion::p_WorkStack::_get_impl(_3022)->i64;
          _checked_ptr_1<long long> _ptr__3072(_3072 ? _3072->raw() : nullptr,_3072 ? _3072->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3073 = mosek::fusion::p_WorkStack::_get_impl(_3022)->f64;
          _checked_ptr_1<double> _ptr__3073(_3073 ? _3073->raw() : nullptr,_3073 ? _3073->size(0) : 0);
          int _8290 = (int)0;
          int _8291 = _3041;
          for (int _3074 = _8290; _3074 < _8291; ++_3074)
          {
            {
              _ptr__3071[safe_add( _3067,_3074 )] = _ptr__3038[safe_add( _3042,_3074 )];
            }
          }
          _ptr__3071[safe_add( _3067,dim )] = _3048;
          {
            _ptr__3071[_3066] = (int)0;
            {
              int _3075 = (int)0;
              int _8292 = (int)0;
              int _8293 = _3025;
              for (int _3076 = _8292; _3076 < _8293; ++_3076)
              {
                {
                  int _3077 = _ptr__3032[_3076];
                  int _3078 = (int)0;
                  int _8294 = (int)0;
                  int _8295 = _3055;
                  for (int _3079 = _8294; _3079 < _8295; ++_3079)
                  {
                    {
                      int _8296 = (int)0;
                      int _8297 = _ptr__3057[_3076];
                      for (int _3080 = _8296; _3080 < _8297; ++_3080)
                      {
                        {
                          int _8298 = (int)0;
                          int _8299 = _3064;
                          for (int _3081 = _8298; _3081 < _8299; ++_3081)
                          {
                            {
                              int _3082 = safe_add( safe_add( _3081,safe_mul( safe_add( _3080,_3075 ),_3064 ) ),safe_mul( safe_mul( _3079,_3062 ),_3064 ) );
                              int _3083 = (_ptr__3038[safe_add( safe_add( _3077,_3078 ),(int)1 )] - _ptr__3038[safe_add( _3077,_3078 )]);
                              _ptr__3071[safe_add( safe_add( _3066,_3082 ),(int)1 )] = _3083;
                              _ptr__3073[safe_add( _3070,_3082 )] = _ptr__3040[safe_add( _ptr__3036[_3076],_3078 )];
                              ++ _3078;
                            }
                          }
                        }
                      }
                    }
                  }
                  _3075 += _ptr__3057[_3076];
                }
              }
              int _8300 = (int)0;
              int _8301 = _3051;
              for (int _3084 = _8300; _3084 < _8301; ++_3084)
              {
                {
                  _ptr__3071[safe_add( safe_add( _3066,_3084 ),(int)1 )] += _ptr__3071[safe_add( _3066,_3084 )];
                }
              }
            }
            {
              int _3085 = (int)0;
              int _8302 = (int)0;
              int _8303 = _3025;
              for (int _3086 = _8302; _3086 < _8303; ++_3086)
              {
                {
                  int _3087 = _ptr__3032[_3086];
                  int _3088 = (int)0;
                  int _8304 = (int)0;
                  int _8305 = _3055;
                  for (int _3089 = _8304; _3089 < _8305; ++_3089)
                  {
                    {
                      int _8306 = (int)0;
                      int _8307 = _ptr__3057[_3086];
                      for (int _3090 = _8306; _3090 < _8307; ++_3090)
                      {
                        {
                          int _8308 = (int)0;
                          int _8309 = _3064;
                          for (int _3091 = _8308; _3091 < _8309; ++_3091)
                          {
                            {
                              int _3092 = safe_add( safe_add( _3091,safe_mul( safe_add( _3090,_3085 ),_3064 ) ),safe_mul( safe_mul( _3089,_3062 ),_3064 ) );
                              int _3093 = _ptr__3038[safe_add( _3087,_3088 )];
                              int _3094 = (_ptr__3038[safe_add( safe_add( _3087,_3088 ),(int)1 )] - _3093);
                              int _8310 = (int)0;
                              int _8311 = _3094;
                              for (int _3095 = _8310; _3095 < _8311; ++_3095)
                              {
                                {
                                  _ptr__3072[safe_add( safe_add( _3068,_ptr__3071[safe_add( _3066,_3092 )] ),_3095 )] = _ptr__3039[safe_add( safe_add( _ptr__3033[_3086],_3093 ),_3095 )];
                                }
                              }
                              int _8312 = (int)0;
                              int _8313 = _3094;
                              for (int _3096 = _8312; _3096 < _8313; ++_3096)
                              {
                                {
                                  _ptr__3073[safe_add( safe_add( _3069,_ptr__3071[safe_add( _3066,_3092 )] ),_3096 )] = _ptr__3040[safe_add( safe_add( _ptr__3035[_3086],_3093 ),_3096 )];
                                }
                              }
                              ++ _3088;
                            }
                          }
                        }
                      }
                    }
                  }
                  _3085 += _ptr__3057[_3086];
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _3097 = (int)1;
          int _8314 = (int)0;
          int _8315 = dim;
          for (int _3098 = _8314; _3098 < _8315; ++_3098)
          {
            {
              _3097 *= _ptr__3038[safe_add( _3042,_3098 )];
            }
          }
          _3097 *= _3048;
          int _8316 = safe_add( dim,(int)1 );
          int _8317 = _3041;
          for (int _3099 = _8316; _3099 < _8317; ++_3099)
          {
            {
              _3097 *= _ptr__3038[safe_add( _3042,_3099 )];
            }
          }
          bool _3100 = (_3051 < _3097);
          _3022->alloc_expr(_3050,_3051,_3052,_3100);
          int _3101 = mosek::fusion::p_WorkStack::_get_impl(_3022)->ptr_base;
          int _3102 = mosek::fusion::p_WorkStack::_get_impl(_3022)->nidxs_base;
          int _8318;
          bool _8319 = _3100;
          if (_8319)
          {
            _8318 = mosek::fusion::p_WorkStack::_get_impl(_3022)->sp_base;
          }
          else
          {
            _8318 = _3022->alloci64(_3051);
          }
          int _3103 = _8318;
          int _3104 = mosek::fusion::p_WorkStack::_get_impl(_3022)->cof_base;
          int _3105 = mosek::fusion::p_WorkStack::_get_impl(_3022)->bfix_base;
          int _3106 = mosek::fusion::p_WorkStack::_get_impl(_3022)->shape_base;
          int _8320 = (int)0;
          int _8321 = _3041;
          for (int _3107 = _8320; _3107 < _8321; ++_3107)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_3022)->i32)(safe_add( _3106,_3107 ))) = _ptr__3038[safe_add( _3042,_3107 )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_3022)->i32)(safe_add( _3106,dim ))) = _3048;
          int _3108 = _3024->alloci32(safe_add( _3051,(int)1 ));
          int _3109 = _3024->alloci64(_3052);
          int _3110 = _3024->alloci64(_3051);
          int _3111 = _3024->allocf64(_3052);
          int _3112 = _3024->allocf64(_3051);
          std::shared_ptr< monty::ndarray< int,1 > > _3113 = mosek::fusion::p_WorkStack::_get_impl(_3022)->i32;
          _checked_ptr_1<int> _ptr__3113(_3113 ? _3113->raw() : nullptr,_3113 ? _3113->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3114 = mosek::fusion::p_WorkStack::_get_impl(_3022)->i64;
          _checked_ptr_1<long long> _ptr__3114(_3114 ? _3114->raw() : nullptr,_3114 ? _3114->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3115 = mosek::fusion::p_WorkStack::_get_impl(_3022)->f64;
          _checked_ptr_1<double> _ptr__3115(_3115 ? _3115->raw() : nullptr,_3115 ? _3115->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _3116 = mosek::fusion::p_WorkStack::_get_impl(_3024)->i32;
          _checked_ptr_1<int> _ptr__3116(_3116 ? _3116->raw() : nullptr,_3116 ? _3116->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3117 = mosek::fusion::p_WorkStack::_get_impl(_3024)->i64;
          _checked_ptr_1<long long> _ptr__3117(_3117 ? _3117->raw() : nullptr,_3117 ? _3117->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3118 = mosek::fusion::p_WorkStack::_get_impl(_3024)->f64;
          _checked_ptr_1<double> _ptr__3118(_3118 ? _3118->raw() : nullptr,_3118 ? _3118->size(0) : 0);
          {
            int _3119 = (int)0;
            int _3120 = (int)0;
            int _8322 = (int)0;
            int _8323 = _3025;
            for (int _3121 = _8322; _3121 < _8323; ++_3121)
            {
              {
                ::mosek::fusion::Utils::Tools::arraycopy(_3039,_ptr__3033[_3121],_3117,safe_add( _3109,_3120 ),_ptr__3030[_3121]);
                ::mosek::fusion::Utils::Tools::arraycopy(_3040,_ptr__3035[_3121],_3118,safe_add( _3111,_3120 ),_ptr__3030[_3121]);
                ::mosek::fusion::Utils::Tools::arraycopy(_3040,_ptr__3036[_3121],_3118,safe_add( _3112,_3119 ),_ptr__3029[_3121]);
                _3120 += _ptr__3030[_3121];
                _3119 += _ptr__3029[_3121];
              }
            }
          }
          {
            _ptr__3116[_3108] = (int)0;
            int _3122 = (int)0;
            int _3123 = (int)0;
            int _8324 = (int)0;
            int _8325 = _3025;
            for (int _3124 = _8324; _3124 < _8325; ++_3124)
            {
              {
                int _3125 = _ptr__3057[_3124];
                int _3126 = safe_mul( _3125,_3064 );
                int _3127 = _3064;
                if (((*_3031)(_3124)))
                {
                  {
                    int _8326 = (int)0;
                    int _8327 = _ptr__3029[_3124];
                    for (int _3128 = _8326; _3128 < _8327; ++_3128)
                    {
                      {
                        long long _3129 = (_ptr__3039[safe_add( _ptr__3034[_3124],_3128 )] / _3126);
                        long long _3130 = ((_ptr__3039[safe_add( _ptr__3034[_3124],_3128 )] / _3127) % _3125);
                        long long _3131 = (_ptr__3039[safe_add( _ptr__3034[_3124],_3128 )] % _3064);
                        _ptr__3117[safe_add( _3110,_3123 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _3129,_3048 ),_3130 ),_ptr__3060[_3124] ),_3064 ),_3131 );
                        _ptr__3116[safe_add( safe_add( _3108,_3123 ),(int)1 )] = safe_add( _3122,_ptr__3038[safe_add( safe_add( _ptr__3032[_3124],_3128 ),(int)1 )] );
                        ++ _3123;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _3132 = (int)0;
                    int _8328 = (int)0;
                    int _8329 = _3055;
                    for (int _3133 = _8328; _3133 < _8329; ++_3133)
                    {
                      {
                        int _8330 = (int)0;
                        int _8331 = _3125;
                        for (int _3134 = _8330; _3134 < _8331; ++_3134)
                        {
                          {
                            int _8332 = (int)0;
                            int _8333 = _3064;
                            for (int _3135 = _8332; _3135 < _8333; ++_3135)
                            {
                              {
                                _ptr__3117[safe_add( _3110,_3123 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _3133,_3048 ),_3134 ),_ptr__3060[_3124] ),_3064 ),_3135 );
                                _ptr__3116[safe_add( safe_add( _3108,_3123 ),(int)1 )] = safe_add( _3122,_ptr__3038[safe_add( safe_add( _ptr__3032[_3124],_3132 ),(int)1 )] );
                                ++ _3123;
                                ++ _3132;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _3122 += _ptr__3030[_3124];
              }
            }
          }
          if ((dim > (int)0))
          {
            {
              int _3136 = (int)0;
              int _8334 = (int)0;
              int _8335 = _3050;
              for (int _3137 = _8334; _3137 < _8335; ++_3137)
              {
                {
                  if ((_3136 < _ptr__3113[safe_add( _3106,_3137 )]))
                  {
                    {
                      _3136 = _ptr__3113[safe_add( _3106,_3137 )];
                    }
                  }
                  {}
                }
              }
              std::shared_ptr< monty::ndarray< long long,1 > > _3138 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3050)));
              _checked_ptr_1<long long> _ptr__3138(_3138 ? _3138->raw() : nullptr,_3138 ? _3138->size(0) : 0);
              _ptr__3138[(_3050 - (int)1)] = (int)1;
              int _8336 = (int)1;
              int _8337 = _3050;
              for (int _3139 = _8336; _3139 < _8337; ++_3139)
              {
                {
                  _ptr__3138[((_3050 - _3139) - (int)1)] = safe_mul( _ptr__3138[(_3050 - _3139)],_ptr__3113[(safe_add( _3106,_3050 ) - _3139)] );
                }
              }
              int _3140 = _3024->alloci32(_3051);
              int _3141 = _3024->alloci32(_3051);
              int _3142 = _3024->alloci32(safe_add( _3136,(int)1 ));
              std::shared_ptr< monty::ndarray< int,1 > > _3143 = mosek::fusion::p_WorkStack::_get_impl(_3024)->i32;
              _checked_ptr_1<int> _ptr__3143(_3143 ? _3143->raw() : nullptr,_3143 ? _3143->size(0) : 0);
              std::shared_ptr< monty::ndarray< long long,1 > > _3144 = mosek::fusion::p_WorkStack::_get_impl(_3024)->i64;
              _checked_ptr_1<long long> _ptr__3144(_3144 ? _3144->raw() : nullptr,_3144 ? _3144->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _3145 = mosek::fusion::p_WorkStack::_get_impl(_3024)->f64;
              _checked_ptr_1<double> _ptr__3145(_3145 ? _3145->raw() : nullptr,_3145 ? _3145->size(0) : 0);
              {
                int _8338 = (int)0;
                int _8339 = _3051;
                for (int _3146 = _8338; _3146 < _8339; ++_3146)
                {
                  {
                    _ptr__3143[safe_add( _3140,_3146 )] = _3146;
                  }
                }
                int _8340 = (int)0;
                int _8341 = _3050;
                for (int _3147 = _8340; _3147 < _8341; ++_3147)
                {
                  {
                    int _3148 = ((_3050 - _3147) - (int)1);
                    int _3149 = _ptr__3113[safe_add( _3106,_3148 )];
                    int _8342 = (int)0;
                    int _8343 = safe_add( _3149,(int)1 );
                    for (int _3150 = _8342; _3150 < _8343; ++_3150)
                    {
                      {
                        _ptr__3143[safe_add( _3142,_3150 )] = (int)0;
                      }
                    }
                    int _8344 = (int)0;
                    int _8345 = _3051;
                    for (int _3151 = _8344; _3151 < _8345; ++_3151)
                    {
                      {
                        int _3152 = _ptr__3143[safe_add( _3140,_3151 )];
                        long long _3153 = ((_ptr__3144[safe_add( _3110,_3152 )] / _ptr__3138[_3148]) % _3149);
                        ++ _ptr__3143[safe_add( safe_add( _3142,_3153 ),(int)1 )];
                      }
                    }
                    {
                      int _8346 = (int)0;
                      int _8347 = _3149;
                      for (int _3154 = _8346; _3154 < _8347; ++_3154)
                      {
                        {
                          _ptr__3143[safe_add( safe_add( _3142,_3154 ),(int)1 )] += _ptr__3143[safe_add( _3142,_3154 )];
                        }
                      }
                      int _8348 = (int)0;
                      int _8349 = _3051;
                      for (int _3155 = _8348; _3155 < _8349; ++_3155)
                      {
                        {
                          int _3156 = _ptr__3143[safe_add( _3140,_3155 )];
                          long long _3157 = ((_ptr__3144[safe_add( _3110,_3156 )] / _ptr__3138[_3148]) % _3149);
                          _ptr__3143[safe_add( _3141,_ptr__3143[safe_add( _3142,_3157 )] )] = _3156;
                          ++ _ptr__3143[safe_add( _3142,_3157 )];
                        }
                      }
                    }
                    int _3158 = _3140;
                    _3140 = _3141;
                    _3141 = _3158;
                  }
                }
                int _3159 = (int)0;
                _ptr__3113[_3101] = (int)0;
                int _8350 = (int)0;
                int _8351 = _3051;
                for (int _3160 = _8350; _3160 < _8351; ++_3160)
                {
                  {
                    int _3161 = _ptr__3143[safe_add( _3140,_3160 )];
                    int _3162 = _ptr__3143[safe_add( _3108,_3161 )];
                    int _3163 = _ptr__3143[safe_add( safe_add( _3108,_3161 ),(int)1 )];
                    int _3164 = (_3163 - _3162);
                    _ptr__3113[safe_add( safe_add( _3101,_3160 ),(int)1 )] = safe_add( _ptr__3113[safe_add( _3101,_3160 )],_3164 );
                    _ptr__3115[safe_add( _3105,_3160 )] = _ptr__3145[safe_add( _3112,_3161 )];
                    _ptr__3114[safe_add( _3103,_3160 )] = _ptr__3144[safe_add( _3110,_3161 )];
                    int _8352 = _3162;
                    int _8353 = _3163;
                    for (int _3165 = _8352; _3165 < _8353; ++_3165)
                    {
                      {
                        _ptr__3114[safe_add( _3102,_3159 )] = _ptr__3144[safe_add( _3109,_3165 )];
                        _ptr__3115[safe_add( _3104,_3159 )] = _ptr__3145[safe_add( _3111,_3165 )];
                        ++ _3159;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            {
              int _3166 = (int)0;
              _ptr__3113[_3101] = (int)0;
              int _8354 = (int)0;
              int _8355 = _3051;
              for (int _3167 = _8354; _3167 < _8355; ++_3167)
              {
                {
                  int _3168 = _ptr__3116[safe_add( _3108,_3167 )];
                  int _3169 = _ptr__3116[safe_add( safe_add( _3108,_3167 ),(int)1 )];
                  int _3170 = (_3169 - _3168);
                  _ptr__3113[safe_add( safe_add( _3101,_3167 ),(int)1 )] = safe_add( _ptr__3113[safe_add( _3101,_3167 )],_3170 );
                  _ptr__3115[safe_add( _3105,_3167 )] = _ptr__3118[safe_add( _3112,_3167 )];
                  _ptr__3114[safe_add( _3103,_3167 )] = _ptr__3117[safe_add( _3110,_3167 )];
                  int _8356 = _3168;
                  int _8357 = _3169;
                  for (int _3171 = _8356; _3171 < _8357; ++_3171)
                  {
                    {
                      _ptr__3114[safe_add( _3102,_3166 )] = _ptr__3117[safe_add( _3109,_3171 )];
                      _ptr__3115[safe_add( _3104,_3166 )] = _ptr__3118[safe_add( _3111,_3171 )];
                      ++ _3166;
                    }
                  }
                }
              }
            }
          }
          if ((!_3100))
          {
            {
              _3022->popi64(_3051);
            }
          }
          {}
          _3024->clear();
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3172,int _3173){
  if (((int)((_3172)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_3172)->size(0)) == (int)1))
  {
    {
      return ((*_3172)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _8358;
      for (int _3175 = (int)0, _8359 = (int)((_3172)->size(0)); _3175 < _8359 ; ++_3175)
      {
        _8358.push_back(((*_3172)(_3175))->getShape());
      }
      auto _8360 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_8358.size()),_8358.begin(),_8358.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _3174 = _8360;
      std::shared_ptr< monty::ndarray< int,1 > > _3176 = ((*_3174)((int)0));
      _checked_ptr_1<int> _ptr__3176(_3176 ? _3176->raw() : nullptr,_3176 ? _3176->size(0) : 0);
      int _3177 = (int)((_3176)->size(0));
      int _8361 = (int)1;
      int _8362 = (int)((_3174)->size(0));
      for (int _3178 = _8361; _3178 < _8362; ++_3178)
      {
        {
          if ((_3177 != (int)((((*_3174)(_3178)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int _8363 = (int)0;
          int _8364 = _3173;
          for (int _3179 = _8363; _3179 < _8364; ++_3179)
          {
            {
              if ((_ptr__3176[_3179] != ((*((*_3174)(_3178)))(_3179))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int _8365 = safe_add( _3173,(int)1 );
          int _8366 = _3177;
          for (int _3180 = _8365; _3180 < _8366; ++_3180)
          {
            {
              if ((_ptr__3176[_3180] != ((*((*_3174)(_3178)))(_3180))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_3173 == _3177))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _3181 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _3177,(int)1 ))));
          _checked_ptr_1<int> _ptr__3181(_3181 ? _3181->raw() : nullptr,_3181 ? _3181->size(0) : 0);
          int _8367 = (int)0;
          int _8368 = _3177;
          for (int _3182 = _8367; _3182 < _8368; ++_3182)
          {
            {
              _ptr__3181[_3182] = _ptr__3176[_3182];
            }
          }
          _ptr__3181[_3177] = (int)((_3174)->size(0));
          return _3181;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _3183 = _3176;
          _checked_ptr_1<int> _ptr__3183(_3183 ? _3183->raw() : nullptr,_3183 ? _3183->size(0) : 0);
          int _8369 = (int)1;
          int _8370 = (int)((_3174)->size(0));
          for (int _3184 = _8369; _3184 < _8370; ++_3184)
          {
            {
              _ptr__3183[_3173] += ((*((*_3174)(_3184)))(_3173));
            }
          }
          return _3183;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprStack::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3185 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int _8371 = (int)1;
  int _8372 = (int)((exprs)->size(0));
  for (int _3186 = _8371; _3186 < _8372; ++_3186)
  {
    {
      _3185->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_3186))->toString());
    }
  }
  _3185->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _3185->toString();
}
void mosek::fusion::p_ExprStack::destroy(){exprs.reset();}void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprInner::p_ExprInner  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3187,    std::shared_ptr< monty::ndarray< long long,1 > > _3188,    std::shared_ptr< monty::ndarray< double,1 > > _3189){ return new mosek::fusion::ExprInner(_3187,_3188,_3189); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3187,    std::shared_ptr< monty::ndarray< long long,1 > > _3188,    std::shared_ptr< monty::ndarray< double,1 > > _3189) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3187,_3188,_3189); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3187,    std::shared_ptr< monty::ndarray< long long,1 > > _3188,    std::shared_ptr< monty::ndarray< double,1 > > _3189){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__3188(_3188 ? _3188->raw() : nullptr, _3188 ? _3188->size(0) : 0);
    _checked_ptr_1<double> _ptr__3189(_3189 ? _3189->raw() : nullptr, _3189 ? _3189->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _3187;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _3188;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _3189;
    if (((int)((_3188)->size(0)) != (int)((_3189)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int,1 > > _3190 = _3187->getShape();
    _checked_ptr_1<int> _ptr__3190(_3190 ? _3190->raw() : nullptr,_3190 ? _3190->size(0) : 0);
    long long _3191 = ::mosek::fusion::p_Set::size(_3190);
    bool _3192 = false;
    bool _3193 = false;
    {
      int _8373 = (int)1;
      int _8374 = (int)((_3188)->size(0));
      for (int _3194 = _8373; _3194 < _8374; ++_3194)
      {
        {
          if ((_ptr__3188[_3194] <= _ptr__3188[(_3194 - (int)1)]))
          {
            {
              _3192 = true;
            }
          }
          {}
        }
      }
      if (((int)((_3188)->size(0)) > (int)0))
      {
        {
          if (((_ptr__3188[(int)0] < (int)0) || (_ptr__3188[((int)((_3188)->size(0)) - (int)1)] > _3191)))
          {
            {
              _3193 = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_3192)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_3193)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3195,    std::shared_ptr< monty::ndarray< double,1 > > _3196){ return new mosek::fusion::ExprInner(_3195,_3196); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3195,    std::shared_ptr< monty::ndarray< double,1 > > _3196) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3195,_3196); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3195,    std::shared_ptr< monty::ndarray< double,1 > > _3196){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3196(_3196 ? _3196->raw() : nullptr, _3196 ? _3196->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_3195,::mosek::fusion::p_ExprInner::range((int)((_3196)->size(0))),_3196);
    std::shared_ptr< monty::ndarray< int,1 > > _3197 = _3195->getShape();
    _checked_ptr_1<int> _ptr__3197(_3197 ? _3197->raw() : nullptr,_3197 ? _3197->size(0) : 0);
    if ((((int)((_3197)->size(0)) != (int)1) || (_ptr__3197[(int)0] != (int)((_3196)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3198,    std::shared_ptr< monty::ndarray< int,2 > > _3199,    std::shared_ptr< monty::ndarray< double,1 > > _3200){ return new mosek::fusion::ExprInner(_3198,_3199,_3200); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3198,    std::shared_ptr< monty::ndarray< int,2 > > _3199,    std::shared_ptr< monty::ndarray< double,1 > > _3200) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3198,_3199,_3200); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3198,    std::shared_ptr< monty::ndarray< int,2 > > _3199,    std::shared_ptr< monty::ndarray< double,1 > > _3200){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3200(_3200 ? _3200->raw() : nullptr, _3200 ? _3200->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_3198,::mosek::fusion::p_ExprInner::convert(_3198->getShape(),_3199),_3200);
  }
}void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3201,monty::rc_ptr< ::mosek::fusion::WorkStack > _3202,monty::rc_ptr< ::mosek::fusion::WorkStack > _3203) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_3201,_3202,_3203); }void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3201,monty::rc_ptr< ::mosek::fusion::WorkStack > _3202,monty::rc_ptr< ::mosek::fusion::WorkStack > _3203){
  expr->eval(_3202,_3201,_3203);
  int _3204 = _3202->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _3205 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3204)));
  _checked_ptr_1<int> _ptr__3205(_3205 ? _3205->raw() : nullptr,_3205 ? _3205->size(0) : 0);
  _3202->popi32(_3204,_3205,(int)0);
  int _3206 = _3202->popi32();
  int _3207 = _3202->popi32();
  bool _3208 = (_3202->popi32() != (int)0);
  int _3209 = _3202->popi32(safe_add( _3206,(int)1 ));
  int _8375;
  bool _8376 = _3208;
  if (_8376)
  {
    _8375 = _3202->popi64(_3206);
  }
  else
  {
    _8375 = (int)0;
  }
  int _3210 = _8375;
  int _3211 = _3202->popi64(_3207);
  int _3212 = _3202->popf64(_3206);
  int _3213 = _3202->popf64(_3207);
  std::shared_ptr< monty::ndarray< int,1 > > _3214 = mosek::fusion::p_WorkStack::_get_impl(_3202)->i32;
  _checked_ptr_1<int> _ptr__3214(_3214 ? _3214->raw() : nullptr,_3214 ? _3214->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3215 = mosek::fusion::p_WorkStack::_get_impl(_3202)->i64;
  _checked_ptr_1<long long> _ptr__3215(_3215 ? _3215->raw() : nullptr,_3215 ? _3215->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3216 = mosek::fusion::p_WorkStack::_get_impl(_3202)->f64;
  _checked_ptr_1<double> _ptr__3216(_3216 ? _3216->raw() : nullptr,_3216 ? _3216->size(0) : 0);
  int _3217 = (int)0;
  if (_3208)
  {
    {
      int _3218 = (int)0;
      int _3219 = (int)0;
      while ( ((_3219 < (int)((vsub)->size(0))) && (_3218 < _3206)) )
      {
        {
          if ((_ptr__3215[safe_add( _3210,_3218 )] < ((*vsub)(_3219))))
          {
            {
              ++ _3218;
            }
          }
          else if((_ptr__3215[safe_add( _3210,_3218 )] > ((*vsub)(_3219))))
          {
            {
              ++ _3219;
            }
          }
          else
          {
            {
              _3217 += (_ptr__3214[safe_add( safe_add( _3209,_3218 ),(int)1 )] - _ptr__3214[safe_add( _3209,_3218 )]);
              ++ _3219;
              ++ _3218;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _8377 = (int)0;
      int _8378 = (int)((vsub)->size(0));
      for (int _3220 = _8377; _3220 < _8378; ++_3220)
      {
        {
          _3217 += (_ptr__3214[safe_add( safe_add( _3209,((*vsub)(_3220)) ),(int)1 )] - _ptr__3214[safe_add( _3209,((*vsub)(_3220)) )]);
        }
      }
    }
  }
  int _3221 = _3201->alloci32((int)2);
  int _3222 = _3201->alloci64(_3217);
  int _3223 = _3201->allocf64(_3217);
  int _3224 = _3201->allocf64((int)1);
  _3201->pushi32((int)0);
  _3201->pushi32(_3217);
  _3201->pushi32((int)1);
  _3201->pushi32((int)0);
  std::shared_ptr< monty::ndarray< int,1 > > _3225 = mosek::fusion::p_WorkStack::_get_impl(_3201)->i32;
  _checked_ptr_1<int> _ptr__3225(_3225 ? _3225->raw() : nullptr,_3225 ? _3225->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3226 = mosek::fusion::p_WorkStack::_get_impl(_3201)->i64;
  _checked_ptr_1<long long> _ptr__3226(_3226 ? _3226->raw() : nullptr,_3226 ? _3226->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3227 = mosek::fusion::p_WorkStack::_get_impl(_3201)->f64;
  _checked_ptr_1<double> _ptr__3227(_3227 ? _3227->raw() : nullptr,_3227 ? _3227->size(0) : 0);
  _ptr__3225[_3221] = (int)0;
  _ptr__3225[safe_add( _3221,(int)1 )] = _3217;
  int _3228 = (int)0;
  double _3229 = 0.0;
  if (_3208)
  {
    {
      int _3230 = (int)0;
      int _3231 = (int)0;
      while ( ((_3231 < (int)((vsub)->size(0))) && (_3230 < _3206)) )
      {
        {
          if ((_ptr__3215[safe_add( _3210,_3230 )] < ((*vsub)(_3231))))
          {
            {
              ++ _3230;
            }
          }
          else if((_ptr__3215[safe_add( _3210,_3230 )] > ((*vsub)(_3231))))
          {
            {
              ++ _3231;
            }
          }
          else
          {
            {
              int _3232 = _ptr__3214[safe_add( _3209,_3230 )];
              int _3233 = _ptr__3214[safe_add( safe_add( _3209,_3230 ),(int)1 )];
              int _8379 = _3232;
              int _8380 = _3233;
              for (int _3234 = _8379; _3234 < _8380; ++_3234)
              {
                {
                  _ptr__3226[safe_add( _3222,_3228 )] = _ptr__3215[safe_add( _3211,_3234 )];
                  _ptr__3227[safe_add( _3223,_3228 )] = (((*vcof)(_3231)) * _ptr__3216[safe_add( _3213,_3234 )]);
                  ++ _3228;
                }
              }
              _3229 += (((*vcof)(_3231)) * _ptr__3216[safe_add( _3212,_3230 )]);
              ++ _3231;
              ++ _3230;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _8381 = (int)0;
      int _8382 = (int)((vsub)->size(0));
      for (int _3235 = _8381; _3235 < _8382; ++_3235)
      {
        {
          int _3236 = _ptr__3214[safe_add( _3209,((*vsub)(_3235)) )];
          int _3237 = _ptr__3214[safe_add( safe_add( _3209,((*vsub)(_3235)) ),(int)1 )];
          int _8383 = _3236;
          int _8384 = _3237;
          for (int _3238 = _8383; _3238 < _8384; ++_3238)
          {
            {
              _ptr__3226[safe_add( _3222,_3228 )] = _ptr__3215[safe_add( _3211,_3238 )];
              _ptr__3227[safe_add( _3223,_3228 )] = (((*vcof)(_3235)) * _ptr__3216[safe_add( _3213,_3238 )]);
              ++ _3228;
            }
          }
          _3229 += (((*vcof)(_3235)) * _ptr__3216[safe_add( _3212,((*vsub)(_3235)) )]);
        }
      }
    }
  }
  _ptr__3227[_3224] = _3229;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::range(int _3239){
  std::vector<long long> _8385;
  for (int _3240 = (int)0, _8386 = _3239; _3240 < _8386 ; ++_3240)
  {
    _8385.push_back(_3240);
  }
  auto _8387 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8385.size()),_8385.begin(),_8385.end()));
  return _8387;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int,1 > > _3241,std::shared_ptr< monty::ndarray< int,2 > > _3242){
  _checked_ptr_1<int> _ptr__3241(_3241 ? _3241->raw() : nullptr, _3241 ? _3241->size(0) : 0);
  int _3243 = (int)((_3241)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _3244 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3243)));
  _checked_ptr_1<long long> _ptr__3244(_3244 ? _3244->raw() : nullptr,_3244 ? _3244->size(0) : 0);
  _ptr__3244[(_3243 - (int)1)] = (int)1;
  int _8388 = (int)1;
  int _8389 = _3243;
  for (int _3245 = _8388; _3245 < _8389; ++_3245)
  {
    {
      _ptr__3244[((_3243 - _3245) - (int)1)] = safe_mul( _ptr__3244[(_3243 - _3245)],_ptr__3241[(_3243 - _3245)] );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _3246 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3242)->size(0)))));
  _checked_ptr_1<long long> _ptr__3246(_3246 ? _3246->raw() : nullptr,_3246 ? _3246->size(0) : 0);
  int _8390 = (int)0;
  int _8391 = (int)((_3242)->size(0));
  for (int _3247 = _8390; _3247 < _8391; ++_3247)
  {
    {
      int _8392 = (int)0;
      int _8393 = _3243;
      for (int _3248 = _8392; _3248 < _8393; ++_3248)
      {
        {
          _ptr__3246[_3247] += safe_mul( _ptr__3244[_3248],((*_3242)(_3247,_3248)) );
        }
      }
    }
  }
  return _3246;
}
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprInner::toString(){
  return std::string ("ExprInner()");
}
void mosek::fusion::p_ExprInner::destroy(){vcof.reset();vsub.reset();expr.reset();}void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _3249,    int _3250,    std::shared_ptr< monty::ndarray< int,1 > > _3251,    std::shared_ptr< monty::ndarray< int,1 > > _3252,    std::shared_ptr< monty::ndarray< double,1 > > _3253,    monty::rc_ptr< ::mosek::fusion::Expression > _3254,    int _3255){ return new mosek::fusion::ExprMulDiagRight(_3249,_3250,_3251,_3252,_3253,_3254,_3255); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _3249,    int _3250,    std::shared_ptr< monty::ndarray< int,1 > > _3251,    std::shared_ptr< monty::ndarray< int,1 > > _3252,    std::shared_ptr< monty::ndarray< double,1 > > _3253,    monty::rc_ptr< ::mosek::fusion::Expression > _3254,    int _3255) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_3249,_3250,_3251,_3252,_3253,_3254,_3255); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _3249,    int _3250,    std::shared_ptr< monty::ndarray< int,1 > > _3251,    std::shared_ptr< monty::ndarray< int,1 > > _3252,    std::shared_ptr< monty::ndarray< double,1 > > _3253,    monty::rc_ptr< ::mosek::fusion::Expression > _3254,    int _3255){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3251(_3251 ? _3251->raw() : nullptr, _3251 ? _3251->size(0) : 0);
    _checked_ptr_1<int> _ptr__3252(_3252 ? _3252->raw() : nullptr, _3252 ? _3252->size(0) : 0);
    _checked_ptr_1<double> _ptr__3253(_3253 ? _3253->raw() : nullptr, _3253 ? _3253->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3250)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _3249;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _3250;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _3251;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _3252;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _3253;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _3254;
  }
}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _3256,    int _3257,    std::shared_ptr< monty::ndarray< int,1 > > _3258,    std::shared_ptr< monty::ndarray< int,1 > > _3259,    std::shared_ptr< monty::ndarray< double,1 > > _3260,    monty::rc_ptr< ::mosek::fusion::Expression > _3261){ return new mosek::fusion::ExprMulDiagRight(_3256,_3257,_3258,_3259,_3260,_3261); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _3256,    int _3257,    std::shared_ptr< monty::ndarray< int,1 > > _3258,    std::shared_ptr< monty::ndarray< int,1 > > _3259,    std::shared_ptr< monty::ndarray< double,1 > > _3260,    monty::rc_ptr< ::mosek::fusion::Expression > _3261) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_3256,_3257,_3258,_3259,_3260,_3261); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _3256,    int _3257,    std::shared_ptr< monty::ndarray< int,1 > > _3258,    std::shared_ptr< monty::ndarray< int,1 > > _3259,    std::shared_ptr< monty::ndarray< double,1 > > _3260,    monty::rc_ptr< ::mosek::fusion::Expression > _3261){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3258(_3258 ? _3258->raw() : nullptr, _3258 ? _3258->size(0) : 0);
    _checked_ptr_1<int> _ptr__3259(_3259 ? _3259->raw() : nullptr, _3259 ? _3259->size(0) : 0);
    _checked_ptr_1<double> _ptr__3260(_3260 ? _3260->raw() : nullptr, _3260 ? _3260->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_3256,_3257,_3258,_3259,_3260,_3261,::mosek::fusion::p_ExprMulDiagRight::validate(_3256,_3257,_3258,_3259,_3260,_3261));
  }
}void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3262,monty::rc_ptr< ::mosek::fusion::WorkStack > _3263,monty::rc_ptr< ::mosek::fusion::WorkStack > _3264) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_3262,_3263,_3264); }void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3262,monty::rc_ptr< ::mosek::fusion::WorkStack > _3263,monty::rc_ptr< ::mosek::fusion::WorkStack > _3264){
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_3263,_3262,_3264);
  int _3265 = (int)0;
  int _3266 = (int)99999;
  int _3267 = (int)0;
  bool _3268 = (_3263->peeki32((int)5) != (int)0);
  if (_3268)
  {
    {
      _3267 = _3263->peeki32((int)2);
      _3266 = _3263->alloci32(safe_add( _3267,(int)1 ));
      _3265 += safe_add( _3267,(int)1 );
    }
  }
  {}
  int _3269 = (int)((mval)->size(0));
  int _3270 = _3263->alloci32(_3269);
  int _3271 = _3263->alloci32(safe_add( mdim1,(int)1 ));
  _3265 += safe_add( safe_add( _3269,mdim1 ),(int)1 );
  {
    std::shared_ptr< monty::ndarray< int,1 > > _3272 = mosek::fusion::p_WorkStack::_get_impl(_3263)->i32;
    _checked_ptr_1<int> _ptr__3272(_3272 ? _3272->raw() : nullptr,_3272 ? _3272->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _3273 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj;
    _checked_ptr_1<int> _ptr__3273(_3273 ? _3273->raw() : nullptr,_3273 ? _3273->size(0) : 0);
    {
      int _8394 = (int)0;
      int _8395 = safe_add( mdim1,(int)1 );
      for (int _3274 = _8394; _3274 < _8395; ++_3274)
      {
        {
          _ptr__3272[safe_add( _3271,_3274 )] = (int)0;
        }
      }
      int _8396 = (int)0;
      int _8397 = _3269;
      for (int _3275 = _8396; _3275 < _8397; ++_3275)
      {
        {
          ++ _ptr__3272[safe_add( safe_add( _3271,_ptr__3273[_3275] ),(int)1 )];
        }
      }
      int _8398 = (int)0;
      int _8399 = mdim1;
      for (int _3276 = _8398; _3276 < _8399; ++_3276)
      {
        {
          _ptr__3272[safe_add( safe_add( _3271,_3276 ),(int)1 )] += _ptr__3272[safe_add( _3271,_3276 )];
        }
      }
      int _8400 = (int)0;
      int _8401 = _3269;
      for (int _3277 = _8400; _3277 < _8401; ++_3277)
      {
        {
          _ptr__3272[safe_add( _3270,_ptr__3272[safe_add( _3271,_ptr__3273[_3277] )] )] = _3277;
          ++ _ptr__3272[safe_add( _3271,_ptr__3273[_3277] )];
        }
      }
      int _8402 = (int)0;
      int _8403 = mdim1;
      for (int _3278 = _8402; _3278 < _8403; ++_3278)
      {
        {
          _ptr__3272[(safe_add( _3271,mdim1 ) - _3278)] = _ptr__3272[((safe_add( _3271,mdim1 ) - _3278) - (int)1)];
        }
      }
      _ptr__3272[_3271] = (int)0;
    }
  }
  _3263->popi32(_3265);
  int _3279 = _3263->popi32();
  if ((_3279 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3280 = _3263->popi32();
  int _3281 = _3263->popi32();
  int _3282 = _3263->popi32();
  int _3283 = _3263->popi32();
  bool _3284 = (_3263->popi32() != (int)0);
  int _3285 = _3263->popi32(safe_add( _3282,(int)1 ));
  int _8404;
  bool _8405 = _3284;
  if (_8405)
  {
    _8404 = _3263->popi64(_3282);
  }
  else
  {
    _8404 = (int)9999;
  }
  int _3286 = _8404;
  int _3287 = _3263->popi64(_3283);
  int _3288 = _3263->popf64(_3282);
  int _3289 = _3263->popf64(_3283);
  std::shared_ptr< monty::ndarray< int,1 > > _3290 = mosek::fusion::p_WorkStack::_get_impl(_3263)->i32;
  _checked_ptr_1<int> _ptr__3290(_3290 ? _3290->raw() : nullptr,_3290 ? _3290->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3291 = mosek::fusion::p_WorkStack::_get_impl(_3263)->i64;
  _checked_ptr_1<long long> _ptr__3291(_3291 ? _3291->raw() : nullptr,_3291 ? _3291->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3292 = mosek::fusion::p_WorkStack::_get_impl(_3263)->f64;
  _checked_ptr_1<double> _ptr__3292(_3292 ? _3292->raw() : nullptr,_3292 ? _3292->size(0) : 0);
  if (_3284)
  {
    {
      int _8406 = (int)0;
      int _8407 = safe_add( _3281,(int)1 );
      for (int _3293 = _8406; _3293 < _8407; ++_3293)
      {
        {
          _ptr__3290[safe_add( _3266,_3293 )] = (int)0;
        }
      }
      int _8408 = (int)0;
      int _8409 = _3282;
      for (int _3294 = _8408; _3294 < _8409; ++_3294)
      {
        {
          ++ _ptr__3290[safe_add( safe_add( _3266,(_ptr__3291[safe_add( _3286,_3294 )] / _3280) ),(int)1 )];
        }
      }
      int _8410 = (int)0;
      int _8411 = _3281;
      for (int _3295 = _8410; _3295 < _8411; ++_3295)
      {
        {
          _ptr__3290[safe_add( safe_add( _3266,_3295 ),(int)1 )] += _ptr__3290[safe_add( _3266,_3295 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3296 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi;
      _checked_ptr_1<int> _ptr__3296(_3296 ? _3296->raw() : nullptr,_3296 ? _3296->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3297 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval;
      _checked_ptr_1<double> _ptr__3297(_3297 ? _3297->raw() : nullptr,_3297 ? _3297->size(0) : 0);
      int _3298 = (int)0;
      int _3299 = (int)0;
      {
        int _8412 = (int)0;
        int _8413 = _3281;
        for (int _3300 = _8412; _3300 < _8413; ++_3300)
        {
          {
            int _3301 = _ptr__3290[safe_add( safe_add( _3271,_3300 ),(int)1 )];
            int _3302 = _ptr__3290[safe_add( _3271,_3300 )];
            int _3303 = _ptr__3290[safe_add( safe_add( _3266,_3300 ),(int)1 )];
            int _3304 = _ptr__3290[safe_add( _3266,_3300 )];
            bool _3305 = false;
            while ( ((_3304 < _3303) && (_3302 < _3301)) )
            {
              {
                int _3306 = _ptr__3290[safe_add( _3270,_3302 )];
                long long _3307 = (_ptr__3291[safe_add( _3286,_3304 )] % _3280);
                if ((_ptr__3296[_3306] < _3307))
                {
                  {
                    ++ _3302;
                  }
                }
                else if((_ptr__3296[_3306] > _3307))
                {
                  {
                    ++ _3304;
                  }
                }
                else
                {
                  {
                    _3305 = true;
                    _3298 += (_ptr__3290[safe_add( safe_add( _3285,_3304 ),(int)1 )] - _ptr__3290[safe_add( _3285,_3304 )]);
                    ++ _3304;
                    ++ _3302;
                  }
                }
              }
            }
            if (_3305)
            {
              {
                ++ _3299;
              }
            }
            {}
          }
        }
      }
      bool _3308 = (_3299 < _3281);
      int _3309 = _3262->alloci32(safe_add( _3299,(int)1 ));
      int _3310 = _3262->alloci64(_3298);
      int _3311 = _3262->alloci64(_3299);
      int _3312 = _3262->allocf64(_3298);
      int _3313 = _3262->allocf64(_3299);
      int _8414;
      bool _8415 = _3308;
      if (_8415)
      {
        _8414 = (int)1;
      }
      else
      {
        _8414 = (int)0;
      }
      _3262->pushi32(_8414);
      _3262->pushi32(_3298);
      _3262->pushi32(_3299);
      _3262->pushi32(_3281);
      _3262->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3314 = mosek::fusion::p_WorkStack::_get_impl(_3262)->i32;
      _checked_ptr_1<int> _ptr__3314(_3314 ? _3314->raw() : nullptr,_3314 ? _3314->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3315 = mosek::fusion::p_WorkStack::_get_impl(_3262)->i64;
      _checked_ptr_1<long long> _ptr__3315(_3315 ? _3315->raw() : nullptr,_3315 ? _3315->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3316 = mosek::fusion::p_WorkStack::_get_impl(_3262)->f64;
      _checked_ptr_1<double> _ptr__3316(_3316 ? _3316->raw() : nullptr,_3316 ? _3316->size(0) : 0);
      {
        int _3317 = (int)0;
        int _3318 = (int)0;
        _ptr__3314[_3309] = (int)0;
        int _8416 = (int)0;
        int _8417 = _3281;
        for (int _3319 = _8416; _3319 < _8417; ++_3319)
        {
          {
            int _3320 = _ptr__3290[safe_add( safe_add( _3271,_3319 ),(int)1 )];
            int _3321 = _ptr__3290[safe_add( _3271,_3319 )];
            int _3322 = _ptr__3290[safe_add( safe_add( _3266,_3319 ),(int)1 )];
            int _3323 = _ptr__3290[safe_add( _3266,_3319 )];
            bool _3324 = false;
            double _3325 = 0.0;
            while ( ((_3323 < _3322) && (_3321 < _3320)) )
            {
              {
                int _3326 = _ptr__3290[safe_add( _3270,_3321 )];
                long long _3327 = (_ptr__3291[safe_add( _3286,_3323 )] % _3280);
                if ((_ptr__3296[_3326] < _3327))
                {
                  {
                    ++ _3321;
                  }
                }
                else if((_ptr__3296[_3326] > _3327))
                {
                  {
                    ++ _3323;
                  }
                }
                else
                {
                  {
                    _3324 = true;
                    int _8418 = _ptr__3290[safe_add( _3285,_3323 )];
                    int _8419 = _ptr__3290[safe_add( safe_add( _3285,_3323 ),(int)1 )];
                    for (int _3328 = _8418; _3328 < _8419; ++_3328)
                    {
                      {
                        _ptr__3315[safe_add( _3310,_3318 )] = _ptr__3291[safe_add( _3287,_3328 )];
                        _ptr__3316[safe_add( _3312,_3318 )] = (_ptr__3292[safe_add( _3289,_3328 )] * _ptr__3297[_3326]);
                        ++ _3318;
                      }
                    }
                    _3325 += (_ptr__3292[safe_add( _3288,_3323 )] * _ptr__3297[_3326]);
                    ++ _3323;
                    ++ _3321;
                  }
                }
              }
            }
            if (_3324)
            {
              {
                _ptr__3314[safe_add( safe_add( _3309,_3317 ),(int)1 )] = _3318;
                _ptr__3315[safe_add( _3311,_3317 )] = _3319;
                _ptr__3316[safe_add( _3313,_3317 )] = _3325;
                ++ _3317;
              }
            }
            {}
          }
        }
      }
      if ((!_3308))
      {
        {
          _3262->popi64(_3299);
        }
      }
      {}
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _3329 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi;
      _checked_ptr_1<int> _ptr__3329(_3329 ? _3329->raw() : nullptr,_3329 ? _3329->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3330 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval;
      _checked_ptr_1<double> _ptr__3330(_3330 ? _3330->raw() : nullptr,_3330 ? _3330->size(0) : 0);
      int _3331 = (int)0;
      int _3332 = (int)0;
      {
        int _8420 = (int)0;
        int _8421 = _3281;
        for (int _3333 = _8420; _3333 < _8421; ++_3333)
        {
          {
            bool _3334 = false;
            int _8422 = _ptr__3290[safe_add( _3271,_3333 )];
            int _8423 = _ptr__3290[safe_add( safe_add( _3271,_3333 ),(int)1 )];
            for (int _3335 = _8422; _3335 < _8423; ++_3335)
            {
              {
                int _3336 = _ptr__3290[safe_add( _3270,_3335 )];
                int _3337 = safe_add( safe_mul( _3333,_3280 ),_ptr__3329[_3336] );
                _3332 += (_ptr__3290[safe_add( safe_add( _3285,_3337 ),(int)1 )] - _ptr__3290[safe_add( _3285,_3337 )]);
                if ((_ptr__3290[safe_add( safe_add( _3285,_3337 ),(int)1 )] > _ptr__3290[safe_add( _3285,_3337 )]))
                {
                  {
                    _3334 = true;
                  }
                }
                {}
              }
            }
            if (_3334)
            {
              {
                ++ _3331;
              }
            }
            {}
          }
        }
      }
      bool _3338 = (_3331 < _3281);
      int _3339 = _3262->alloci32(safe_add( _3331,(int)1 ));
      int _3340 = _3262->alloci64(_3332);
      int _3341 = _3262->alloci64(_3331);
      int _3342 = _3262->allocf64(_3332);
      int _3343 = _3262->allocf64(_3331);
      int _8424;
      bool _8425 = _3338;
      if (_8425)
      {
        _8424 = (int)1;
      }
      else
      {
        _8424 = (int)0;
      }
      _3262->pushi32(_8424);
      _3262->pushi32(_3332);
      _3262->pushi32(_3331);
      _3262->pushi32(_3281);
      _3262->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3344 = mosek::fusion::p_WorkStack::_get_impl(_3262)->i32;
      _checked_ptr_1<int> _ptr__3344(_3344 ? _3344->raw() : nullptr,_3344 ? _3344->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3345 = mosek::fusion::p_WorkStack::_get_impl(_3262)->i64;
      _checked_ptr_1<long long> _ptr__3345(_3345 ? _3345->raw() : nullptr,_3345 ? _3345->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3346 = mosek::fusion::p_WorkStack::_get_impl(_3262)->f64;
      _checked_ptr_1<double> _ptr__3346(_3346 ? _3346->raw() : nullptr,_3346 ? _3346->size(0) : 0);
      {
        int _3347 = (int)0;
        int _3348 = (int)0;
        _ptr__3344[_3339] = (int)0;
        int _8426 = (int)0;
        int _8427 = _3281;
        for (int _3349 = _8426; _3349 < _8427; ++_3349)
        {
          {
            bool _3350 = false;
            double _3351 = 0.0;
            int _8428 = _ptr__3290[safe_add( _3271,_3349 )];
            int _8429 = _ptr__3290[safe_add( safe_add( _3271,_3349 ),(int)1 )];
            for (int _3352 = _8428; _3352 < _8429; ++_3352)
            {
              {
                int _3353 = _ptr__3290[safe_add( _3270,_3352 )];
                int _3354 = safe_add( safe_mul( _3349,_3280 ),_ptr__3329[_3353] );
                int _8430 = _ptr__3290[safe_add( _3285,_3354 )];
                int _8431 = _ptr__3290[safe_add( safe_add( _3285,_3354 ),(int)1 )];
                for (int _3355 = _8430; _3355 < _8431; ++_3355)
                {
                  {
                    _3350 = true;
                    _ptr__3345[safe_add( _3340,_3348 )] = _ptr__3291[safe_add( _3287,_3355 )];
                    _ptr__3346[safe_add( _3342,_3348 )] = (_ptr__3292[safe_add( _3289,_3355 )] * _ptr__3330[_3353]);
                    ++ _3348;
                  }
                }
                _3351 += (_ptr__3292[safe_add( _3288,_3354 )] * _ptr__3330[_3353]);
              }
            }
            if (_3350)
            {
              {
                _ptr__3346[safe_add( _3343,_3347 )] = _3351;
                _ptr__3345[safe_add( _3341,_3347 )] = _3349;
                _ptr__3344[safe_add( safe_add( _3339,_3347 ),(int)1 )] = _3348;
                ++ _3347;
              }
            }
            {}
          }
        }
      }
      if ((!_3338))
      {
        {
          _3262->popi64(_3331);
        }
      }
      {}
    }
  }
}
int mosek::fusion::p_ExprMulDiagRight::validate(int _3356,int _3357,std::shared_ptr< monty::ndarray< int,1 > > _3358,std::shared_ptr< monty::ndarray< int,1 > > _3359,std::shared_ptr< monty::ndarray< double,1 > > _3360,monty::rc_ptr< ::mosek::fusion::Expression > _3361){
  _checked_ptr_1<int> _ptr__3358(_3358 ? _3358->raw() : nullptr, _3358 ? _3358->size(0) : 0);
  _checked_ptr_1<int> _ptr__3359(_3359 ? _3359->raw() : nullptr, _3359 ? _3359->size(0) : 0);
  _checked_ptr_1<double> _ptr__3360(_3360 ? _3360->raw() : nullptr, _3360 ? _3360->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3362 = _3361->getShape();
  _checked_ptr_1<int> _ptr__3362(_3362 ? _3362->raw() : nullptr,_3362 ? _3362->size(0) : 0);
  if (((int)((_3362)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3363 = _ptr__3362[(int)0];
  int _3364 = _ptr__3362[(int)1];
  if (((_3356 < (int)0) || ((_3357 < (int)0) || ((_3363 < (int)0) || (_3364 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3356 != _3364) || (_3357 != _3363)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3358)->size(0)) != (int)((_3359)->size(0))) || ((int)((_3358)->size(0)) != (int)((_3360)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3365 = (int)((_3358)->size(0));
  bool _3366 = false;
  bool _3367 = false;
  {
    int _8432 = (int)0;
    int _8433 = _3365;
    for (int _3368 = _8432; _3368 < _8433; ++_3368)
    {
      {
        if (((_ptr__3358[_3368] < (int)0) || ((_ptr__3358[_3368] >= _3356) || ((_ptr__3359[_3368] < (int)0) || (_ptr__3359[_3368] >= _3357)))))
        {
          {
            _3366 = true;
          }
        }
        {}
      }
    }
    int _8434 = (int)0;
    int _8435 = (_3365 - (int)1);
    for (int _3369 = _8434; _3369 < _8435; ++_3369)
    {
      {
        if (((_ptr__3358[_3369] > _ptr__3358[safe_add( _3369,(int)1 )]) || ((_ptr__3358[_3369] == _ptr__3358[safe_add( _3369,(int)1 )]) && (_ptr__3359[_3369] >= _ptr__3359[safe_add( _3369,(int)1 )]))))
        {
          {
            _3367 = true;
          }
        }
        {}
      }
    }
  }
  if (_3366)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3367)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagRight::toString(){
  return std::string ("ExprMulDiagRight()");
}
void mosek::fusion::p_ExprMulDiagRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _3370,    int _3371,    std::shared_ptr< monty::ndarray< int,1 > > _3372,    std::shared_ptr< monty::ndarray< int,1 > > _3373,    std::shared_ptr< monty::ndarray< double,1 > > _3374,    monty::rc_ptr< ::mosek::fusion::Expression > _3375,    int _3376){ return new mosek::fusion::ExprMulDiagLeft(_3370,_3371,_3372,_3373,_3374,_3375,_3376); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _3370,    int _3371,    std::shared_ptr< monty::ndarray< int,1 > > _3372,    std::shared_ptr< monty::ndarray< int,1 > > _3373,    std::shared_ptr< monty::ndarray< double,1 > > _3374,    monty::rc_ptr< ::mosek::fusion::Expression > _3375,    int _3376) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_3370,_3371,_3372,_3373,_3374,_3375,_3376); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _3370,    int _3371,    std::shared_ptr< monty::ndarray< int,1 > > _3372,    std::shared_ptr< monty::ndarray< int,1 > > _3373,    std::shared_ptr< monty::ndarray< double,1 > > _3374,    monty::rc_ptr< ::mosek::fusion::Expression > _3375,    int _3376){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3372(_3372 ? _3372->raw() : nullptr, _3372 ? _3372->size(0) : 0);
    _checked_ptr_1<int> _ptr__3373(_3373 ? _3373->raw() : nullptr, _3373 ? _3373->size(0) : 0);
    _checked_ptr_1<double> _ptr__3374(_3374 ? _3374->raw() : nullptr, _3374 ? _3374->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3370)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _3370;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _3371;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _3372;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _3373;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _3374;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _3375;
  }
}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _3377,    int _3378,    std::shared_ptr< monty::ndarray< int,1 > > _3379,    std::shared_ptr< monty::ndarray< int,1 > > _3380,    std::shared_ptr< monty::ndarray< double,1 > > _3381,    monty::rc_ptr< ::mosek::fusion::Expression > _3382){ return new mosek::fusion::ExprMulDiagLeft(_3377,_3378,_3379,_3380,_3381,_3382); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _3377,    int _3378,    std::shared_ptr< monty::ndarray< int,1 > > _3379,    std::shared_ptr< monty::ndarray< int,1 > > _3380,    std::shared_ptr< monty::ndarray< double,1 > > _3381,    monty::rc_ptr< ::mosek::fusion::Expression > _3382) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_3377,_3378,_3379,_3380,_3381,_3382); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _3377,    int _3378,    std::shared_ptr< monty::ndarray< int,1 > > _3379,    std::shared_ptr< monty::ndarray< int,1 > > _3380,    std::shared_ptr< monty::ndarray< double,1 > > _3381,    monty::rc_ptr< ::mosek::fusion::Expression > _3382){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3379(_3379 ? _3379->raw() : nullptr, _3379 ? _3379->size(0) : 0);
    _checked_ptr_1<int> _ptr__3380(_3380 ? _3380->raw() : nullptr, _3380 ? _3380->size(0) : 0);
    _checked_ptr_1<double> _ptr__3381(_3381 ? _3381->raw() : nullptr, _3381 ? _3381->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_3377,_3378,_3379,_3380,_3381,_3382,::mosek::fusion::p_ExprMulDiagLeft::validate(_3377,_3378,_3379,_3380,_3381,_3382));
  }
}void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3383,monty::rc_ptr< ::mosek::fusion::WorkStack > _3384,monty::rc_ptr< ::mosek::fusion::WorkStack > _3385) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_3383,_3384,_3385); }void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3383,monty::rc_ptr< ::mosek::fusion::WorkStack > _3384,monty::rc_ptr< ::mosek::fusion::WorkStack > _3385){
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_3384,_3383,_3385);
  if ((_3384->peeki32() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3386 = (int)((msubi)->size(0));
  int _3387 = (int)9999;
  int _3388 = (int)9999;
  int _3389 = (int)0;
  int _3390 = _3384->peeki32((int)5);
  if ((_3390 != (int)0))
  {
    {
      int _3391 = _3384->peeki32((int)1);
      int _3392 = _3384->peeki32((int)3);
      _3387 = _3384->alloci32(safe_add( _3391,(int)1 ));
      _3388 = _3384->alloci32(_3392);
      _3389 += safe_add( safe_add( _3392,_3391 ),(int)1 );
    }
  }
  {}
  int _3393 = _3384->alloci32(safe_add( mdim0,(int)1 ));
  _3389 += safe_add( mdim0,(int)1 );
  _3384->popi32(_3389);
  std::shared_ptr< monty::ndarray< int,1 > > _3394 = mosek::fusion::p_WorkStack::_get_impl(_3384)->i32;
  _checked_ptr_1<int> _ptr__3394(_3394 ? _3394->raw() : nullptr,_3394 ? _3394->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3395 = mosek::fusion::p_WorkStack::_get_impl(_3384)->i64;
  _checked_ptr_1<long long> _ptr__3395(_3395 ? _3395->raw() : nullptr,_3395 ? _3395->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3396 = mosek::fusion::p_WorkStack::_get_impl(_3384)->f64;
  _checked_ptr_1<double> _ptr__3396(_3396 ? _3396->raw() : nullptr,_3396 ? _3396->size(0) : 0);
  int _8436 = (int)0;
  int _8437 = safe_add( mdim0,(int)1 );
  for (int _3397 = _8436; _3397 < _8437; ++_3397)
  {
    {
      _ptr__3394[safe_add( _3393,_3397 )] = (int)0;
    }
  }
  int _8438 = (int)0;
  int _8439 = _3386;
  for (int _3398 = _8438; _3398 < _8439; ++_3398)
  {
    {
      ++ _ptr__3394[safe_add( safe_add( _3393,((*msubi)(_3398)) ),(int)1 )];
    }
  }
  int _8440 = (int)0;
  int _8441 = mdim0;
  for (int _3399 = _8440; _3399 < _8441; ++_3399)
  {
    {
      _ptr__3394[safe_add( safe_add( _3393,_3399 ),(int)1 )] += _ptr__3394[safe_add( _3393,_3399 )];
    }
  }
  int _3400 = _3384->popi32();
  int _3401 = _3384->popi32();
  int _3402 = _3384->popi32();
  int _3403 = _3384->popi32();
  int _3404 = _3384->popi32();
  bool _3405 = (_3384->popi32() != (int)0);
  int _3406 = _3384->popi32(safe_add( _3403,(int)1 ));
  int _8442;
  bool _8443 = _3405;
  if (_8443)
  {
    _8442 = _3384->popi64(_3403);
  }
  else
  {
    _8442 = (int)9999;
  }
  int _3407 = _8442;
  int _3408 = _3384->popi64(_3404);
  int _3409 = _3384->popf64(_3403);
  int _3410 = _3384->popf64(_3404);
  if ((!_3405))
  {
    {
      int _3411 = (int)((msubi)->size(0));
      int _3412 = (int)0;
      int _8444 = (int)0;
      int _8445 = mdim0;
      for (int _3413 = _8444; _3413 < _8445; ++_3413)
      {
        {
          if ((_ptr__3394[safe_add( _3393,_3413 )] < _ptr__3394[safe_add( safe_add( _3393,_3413 ),(int)1 )]))
          {
            {
              ++ _3412;
            }
          }
          {}
        }
      }
      bool _3414 = (_3412 < mdim0);
      _3383->alloc_expr((int)1,_3412,_3411,_3414);
      int _3415 = mosek::fusion::p_WorkStack::_get_impl(_3383)->ptr_base;
      int _3416 = mosek::fusion::p_WorkStack::_get_impl(_3383)->nidxs_base;
      int _8446;
      bool _8447 = _3414;
      if (_8447)
      {
        _8446 = mosek::fusion::p_WorkStack::_get_impl(_3383)->sp_base;
      }
      else
      {
        _8446 = _3383->alloci64(_3412);
      }
      int _3417 = _8446;
      int _3418 = mosek::fusion::p_WorkStack::_get_impl(_3383)->cof_base;
      int _3419 = mosek::fusion::p_WorkStack::_get_impl(_3383)->bfix_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_3383)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3383)->shape_base)) = mdim0;
      std::shared_ptr< monty::ndarray< int,1 > > _3420 = mosek::fusion::p_WorkStack::_get_impl(_3383)->i32;
      _checked_ptr_1<int> _ptr__3420(_3420 ? _3420->raw() : nullptr,_3420 ? _3420->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3421 = mosek::fusion::p_WorkStack::_get_impl(_3383)->i64;
      _checked_ptr_1<long long> _ptr__3421(_3421 ? _3421->raw() : nullptr,_3421 ? _3421->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3422 = mosek::fusion::p_WorkStack::_get_impl(_3383)->f64;
      _checked_ptr_1<double> _ptr__3422(_3422 ? _3422->raw() : nullptr,_3422 ? _3422->size(0) : 0);
      {
        _ptr__3420[_3415] = (int)0;
        int _3423 = (int)0;
        int _3424 = (int)0;
        int _8448 = (int)0;
        int _8449 = mdim0;
        for (int _3425 = _8448; _3425 < _8449; ++_3425)
        {
          {
            if ((_ptr__3394[safe_add( _3393,_3425 )] < _ptr__3394[safe_add( safe_add( _3393,_3425 ),(int)1 )]))
            {
              {
                int _3426 = (int)0;
                int _8450 = _ptr__3394[safe_add( _3393,_3425 )];
                int _8451 = _ptr__3394[safe_add( safe_add( _3393,_3425 ),(int)1 )];
                for (int _3427 = _8450; _3427 < _8451; ++_3427)
                {
                  {
                    int _3428 = ((*msubj)(_3427));
                    int _3429 = safe_add( safe_mul( _3428,_3401 ),_3425 );
                    int _8452 = _ptr__3394[safe_add( _3406,_3429 )];
                    int _8453 = _ptr__3394[safe_add( safe_add( _3406,_3429 ),(int)1 )];
                    for (int _3430 = _8452; _3430 < _8453; ++_3430)
                    {
                      {
                        _ptr__3421[safe_add( _3416,_3424 )] = _ptr__3395[safe_add( _3408,_3430 )];
                        _ptr__3422[safe_add( _3418,_3424 )] = (_ptr__3396[safe_add( _3410,_3430 )] * ((*mval)(_3427)));
                        ++ _3424;
                      }
                    }
                  }
                }
                _ptr__3422[safe_add( _3419,_3423 )] = _3426;
                _ptr__3421[safe_add( _3417,_3423 )] = _3425;
                _ptr__3420[safe_add( safe_add( _3415,_3423 ),(int)1 )] = _3424;
                ++ _3423;
              }
            }
            {}
          }
        }
      }
      if ((!_3414))
      {
        {
          _3383->popi64(_3412);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _8454 = (int)0;
      int _8455 = safe_add( _3401,(int)1 );
      for (int _3431 = _8454; _3431 < _8455; ++_3431)
      {
        {
          _ptr__3394[safe_add( _3387,_3431 )] = (int)0;
        }
      }
      int _8456 = (int)0;
      int _8457 = _3403;
      for (int _3432 = _8456; _3432 < _8457; ++_3432)
      {
        {
          ++ _ptr__3394[safe_add( safe_add( _3387,(_ptr__3395[safe_add( _3407,_3432 )] % _3401) ),(int)1 )];
        }
      }
      int _8458 = (int)0;
      int _8459 = _3401;
      for (int _3433 = _8458; _3433 < _8459; ++_3433)
      {
        {
          _ptr__3394[safe_add( safe_add( _3387,_3433 ),(int)1 )] += _ptr__3394[safe_add( _3387,_3433 )];
        }
      }
      int _8460 = (int)0;
      int _8461 = _3403;
      for (int _3434 = _8460; _3434 < _8461; ++_3434)
      {
        {
          long long _3435 = (_ptr__3395[safe_add( _3407,_3434 )] % _3401);
          _ptr__3394[safe_add( _3388,_ptr__3394[safe_add( _3387,_3435 )] )] = _3434;
          ++ _ptr__3394[safe_add( _3387,_3435 )];
        }
      }
      int _8462 = (int)0;
      int _8463 = _3401;
      for (int _3436 = _8462; _3436 < _8463; ++_3436)
      {
        {
          _ptr__3394[(safe_add( _3387,_3401 ) - _3436)] = _ptr__3394[((safe_add( _3387,_3401 ) - _3436) - (int)1)];
        }
      }
      _ptr__3394[_3387] = (int)0;
      int _3437 = (int)0;
      int _3438 = (int)0;
      {
        int _8464 = (int)0;
        int _8465 = mdim0;
        for (int _3439 = _8464; _3439 < _8465; ++_3439)
        {
          {
            int _3440 = _ptr__3394[safe_add( safe_add( _3387,_3439 ),(int)1 )];
            int _3441 = _ptr__3394[safe_add( _3387,_3439 )];
            int _3442 = _ptr__3394[safe_add( safe_add( _3393,_3439 ),(int)1 )];
            int _3443 = _ptr__3394[safe_add( _3393,_3439 )];
            bool _3444 = false;
            while ( ((_3443 < _3442) && (_3441 < _3440)) )
            {
              {
                int _3445 = _ptr__3394[safe_add( _3388,_3441 )];
                long long _3446 = (_ptr__3395[safe_add( _3407,_3445 )] / _3401);
                if ((((*msubj)(_3443)) < _3446))
                {
                  {
                    ++ _3443;
                  }
                }
                else if((((*msubj)(_3443)) > _3446))
                {
                  {
                    ++ _3441;
                  }
                }
                else
                {
                  {
                    _3444 = true;
                    _3438 += (_ptr__3394[safe_add( safe_add( _3406,_3445 ),(int)1 )] - _ptr__3394[safe_add( _3406,_3445 )]);
                    ++ _3443;
                    ++ _3441;
                  }
                }
              }
            }
            if (_3444)
            {
              {
                ++ _3437;
              }
            }
            {}
          }
        }
      }
      int _3447 = _3437;
      int _3448 = _3438;
      bool _3449 = (_3447 < mdim0);
      int _3450 = _3383->alloci32(safe_add( _3447,(int)1 ));
      int _3451 = _3383->alloci64(_3448);
      int _3452 = _3383->alloci64(_3447);
      int _3453 = _3383->allocf64(_3448);
      int _3454 = _3383->allocf64(_3447);
      int _8466;
      bool _8467 = _3449;
      if (_8467)
      {
        _8466 = (int)1;
      }
      else
      {
        _8466 = (int)0;
      }
      _3383->pushi32(_8466);
      _3383->pushi32(_3448);
      _3383->pushi32(_3447);
      _3383->pushi32(mdim0);
      _3383->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3455 = mosek::fusion::p_WorkStack::_get_impl(_3383)->i32;
      _checked_ptr_1<int> _ptr__3455(_3455 ? _3455->raw() : nullptr,_3455 ? _3455->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3456 = mosek::fusion::p_WorkStack::_get_impl(_3383)->i64;
      _checked_ptr_1<long long> _ptr__3456(_3456 ? _3456->raw() : nullptr,_3456 ? _3456->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3457 = mosek::fusion::p_WorkStack::_get_impl(_3383)->f64;
      _checked_ptr_1<double> _ptr__3457(_3457 ? _3457->raw() : nullptr,_3457 ? _3457->size(0) : 0);
      {
        _ptr__3455[_3450] = (int)0;
        int _3458 = (int)0;
        int _3459 = (int)0;
        int _8468 = (int)0;
        int _8469 = mdim0;
        for (int _3460 = _8468; _3460 < _8469; ++_3460)
        {
          {
            int _3461 = _ptr__3394[safe_add( safe_add( _3387,_3460 ),(int)1 )];
            int _3462 = _ptr__3394[safe_add( _3387,_3460 )];
            int _3463 = _ptr__3394[safe_add( safe_add( _3393,_3460 ),(int)1 )];
            int _3464 = _ptr__3394[safe_add( _3393,_3460 )];
            bool _3465 = false;
            double _3466 = 0.0;
            while ( ((_3464 < _3463) && (_3462 < _3461)) )
            {
              {
                int _3467 = _ptr__3394[safe_add( _3388,_3462 )];
                long long _3468 = (_ptr__3395[safe_add( _3407,_3467 )] / _3401);
                if ((((*msubj)(_3464)) < _3468))
                {
                  {
                    ++ _3464;
                  }
                }
                else if((((*msubj)(_3464)) > _3468))
                {
                  {
                    ++ _3462;
                  }
                }
                else
                {
                  {
                    _3465 = true;
                    int _8470 = _ptr__3394[safe_add( _3406,_3467 )];
                    int _8471 = _ptr__3394[safe_add( safe_add( _3406,_3467 ),(int)1 )];
                    for (int _3469 = _8470; _3469 < _8471; ++_3469)
                    {
                      {
                        _ptr__3456[safe_add( _3451,_3459 )] = _ptr__3395[safe_add( _3408,_3469 )];
                        _ptr__3457[safe_add( _3453,_3459 )] = (_ptr__3396[safe_add( _3410,_3469 )] * ((*mval)(_3464)));
                        ++ _3459;
                      }
                    }
                    _3466 += _ptr__3396[safe_add( _3409,_3467 )];
                    ++ _3464;
                    ++ _3462;
                  }
                }
              }
            }
            if (_3465)
            {
              {
                _ptr__3456[safe_add( _3452,_3458 )] = _3460;
                _ptr__3457[safe_add( _3454,_3458 )] = (_3466 * ((*mval)(_3464)));
                _ptr__3455[safe_add( safe_add( _3450,_3458 ),(int)1 )] = _3459;
                ++ _3458;
              }
            }
            {}
          }
        }
      }
      if ((!_3449))
      {
        {
          _3383->popi64(_3447);
        }
      }
      {}
    }
  }
}
int mosek::fusion::p_ExprMulDiagLeft::validate(int _3470,int _3471,std::shared_ptr< monty::ndarray< int,1 > > _3472,std::shared_ptr< monty::ndarray< int,1 > > _3473,std::shared_ptr< monty::ndarray< double,1 > > _3474,monty::rc_ptr< ::mosek::fusion::Expression > _3475){
  _checked_ptr_1<int> _ptr__3472(_3472 ? _3472->raw() : nullptr, _3472 ? _3472->size(0) : 0);
  _checked_ptr_1<int> _ptr__3473(_3473 ? _3473->raw() : nullptr, _3473 ? _3473->size(0) : 0);
  _checked_ptr_1<double> _ptr__3474(_3474 ? _3474->raw() : nullptr, _3474 ? _3474->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3476 = _3475->getShape();
  _checked_ptr_1<int> _ptr__3476(_3476 ? _3476->raw() : nullptr,_3476 ? _3476->size(0) : 0);
  if (((int)((_3476)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3477 = _ptr__3476[(int)0];
  int _3478 = _ptr__3476[(int)1];
  if (((_3470 < (int)0) || (_3471 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3471 != _3477) || (_3470 != _3478)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3472)->size(0)) != (int)((_3473)->size(0))) || ((int)((_3472)->size(0)) != (int)((_3474)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3479 = (int)((_3472)->size(0));
  bool _3480 = false;
  bool _3481 = false;
  {
    int _8472 = (int)0;
    int _8473 = _3479;
    for (int _3482 = _8472; _3482 < _8473; ++_3482)
    {
      {
        if (((_ptr__3472[_3482] < (int)0) || ((_ptr__3472[_3482] >= _3470) || ((_ptr__3473[_3482] < (int)0) || (_ptr__3473[_3482] >= _3471)))))
        {
          {
            _3480 = true;
          }
        }
        {}
      }
    }
    int _8474 = (int)0;
    int _8475 = (_3479 - (int)1);
    for (int _3483 = _8474; _3483 < _8475; ++_3483)
    {
      {
        if (((_ptr__3472[_3483] > _ptr__3472[safe_add( _3483,(int)1 )]) || ((_ptr__3472[_3483] == _ptr__3472[safe_add( _3483,(int)1 )]) && (_ptr__3473[_3483] >= _ptr__3473[safe_add( _3483,(int)1 )]))))
        {
          {
            _3481 = true;
          }
        }
        {}
      }
    }
  }
  if (_3480)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3481)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagLeft::toString(){
  return std::string ("ExprMulDiagLeft()");
}
void mosek::fusion::p_ExprMulDiagLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulElement::p_ExprMulElement  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3484,    std::shared_ptr< monty::ndarray< long long,1 > > _3485,    monty::rc_ptr< ::mosek::fusion::Expression > _3486){ return new mosek::fusion::ExprMulElement(_3484,_3485,_3486); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3484,    std::shared_ptr< monty::ndarray< long long,1 > > _3485,    monty::rc_ptr< ::mosek::fusion::Expression > _3486) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_3484,_3485,_3486); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _3484,    std::shared_ptr< monty::ndarray< long long,1 > > _3485,    monty::rc_ptr< ::mosek::fusion::Expression > _3486){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3484(_3484 ? _3484->raw() : nullptr, _3484 ? _3484->size(0) : 0);
    _checked_ptr_1<long long> _ptr__3485(_3485 ? _3485->raw() : nullptr, _3485 ? _3485->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_3484,_3485,_3486,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _3487 = _3486->getShape();
    _checked_ptr_1<int> _ptr__3487(_3487 ? _3487->raw() : nullptr,_3487 ? _3487->size(0) : 0);
    if (((int)((_3484)->size(0)) != (int)((_3485)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    long long _3488 = ::mosek::fusion::p_Set::size(_3487);
    bool _3489 = false;
    bool _3490 = false;
    {
      int _8476 = (int)0;
      int _8477 = (int)((_3485)->size(0));
      for (int _3491 = _8476; _3491 < _8477; ++_3491)
      {
        {
          if (((_ptr__3485[_3491] < (int)0) || (_ptr__3485[_3491] >= _3488)))
          {
            {
              _3489 = true;
            }
          }
          {}
        }
      }
      int _8478 = (int)0;
      int _8479 = ((int)((_3485)->size(0)) - (int)1);
      for (int _3492 = _8478; _3492 < _8479; ++_3492)
      {
        {
          if ((_ptr__3485[_3492] >= _ptr__3485[safe_add( _3492,(int)1 )]))
          {
            {
              _3490 = true;
            }
          }
          {}
        }
      }
    }
    if (_3489)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_3490)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3493,    std::shared_ptr< monty::ndarray< long long,1 > > _3494,    monty::rc_ptr< ::mosek::fusion::Expression > _3495,    int _3496){ return new mosek::fusion::ExprMulElement(_3493,_3494,_3495,_3496); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3493,    std::shared_ptr< monty::ndarray< long long,1 > > _3494,    monty::rc_ptr< ::mosek::fusion::Expression > _3495,    int _3496) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_3493,_3494,_3495,_3496); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _3493,    std::shared_ptr< monty::ndarray< long long,1 > > _3494,    monty::rc_ptr< ::mosek::fusion::Expression > _3495,    int _3496){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3493(_3493 ? _3493->raw() : nullptr, _3493 ? _3493->size(0) : 0);
    _checked_ptr_1<long long> _ptr__3494(_3494 ? _3494->raw() : nullptr, _3494 ? _3494->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_3495->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _3495;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _3493;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _3494;
  }
}void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3497,monty::rc_ptr< ::mosek::fusion::WorkStack > _3498,monty::rc_ptr< ::mosek::fusion::WorkStack > _3499) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_3497,_3498,_3499); }void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3497,monty::rc_ptr< ::mosek::fusion::WorkStack > _3498,monty::rc_ptr< ::mosek::fusion::WorkStack > _3499){
  expr->eval(_3498,_3497,_3499);
  int _3500 = _3498->popi32();
  int _3501 = _3498->popi32(_3500);
  int _3502 = _3498->popi32();
  int _3503 = _3498->popi32();
  bool _3504 = (_3498->popi32() != (int)0);
  int _3505 = _3498->popi32(safe_add( _3502,(int)1 ));
  int _8480;
  bool _8481 = _3504;
  if (_8481)
  {
    _8480 = _3498->popi64(_3502);
  }
  else
  {
    _8480 = (-(int)1);
  }
  int _3506 = _8480;
  int _3507 = _3498->popi64(_3503);
  int _3508 = _3498->popf64(_3502);
  int _3509 = _3498->popf64(_3503);
  std::shared_ptr< monty::ndarray< int,1 > > _3510 = mosek::fusion::p_WorkStack::_get_impl(_3498)->i32;
  _checked_ptr_1<int> _ptr__3510(_3510 ? _3510->raw() : nullptr,_3510 ? _3510->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3511 = mosek::fusion::p_WorkStack::_get_impl(_3498)->i64;
  _checked_ptr_1<long long> _ptr__3511(_3511 ? _3511->raw() : nullptr,_3511 ? _3511->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3512 = mosek::fusion::p_WorkStack::_get_impl(_3498)->f64;
  _checked_ptr_1<double> _ptr__3512(_3512 ? _3512->raw() : nullptr,_3512 ? _3512->size(0) : 0);
  int _3513 = (int)0;
  int _3514 = (int)0;
  if ((!_3504))
  {
    {
      _3514 = (int)((msp)->size(0));
      int _8482 = (int)0;
      int _8483 = (int)((msp)->size(0));
      for (int _3515 = _8482; _3515 < _8483; ++_3515)
      {
        {
          _3513 += (_ptr__3510[safe_add( safe_add( _3505,((*msp)(_3515)) ),(int)1 )] - _ptr__3510[safe_add( _3505,((*msp)(_3515)) )]);
        }
      }
    }
  }
  else
  {
    {
      int _3516 = (int)((msp)->size(0));
      int _3517 = (int)0;
      int _3518 = _3502;
      int _3519 = (int)0;
      while ( ((_3517 < _3516) && (_3519 < _3518)) )
      {
        {
          if ((((*msp)(_3517)) < _ptr__3511[safe_add( _3506,_3519 )]))
          {
            {
              ++ _3517;
            }
          }
          else if((((*msp)(_3517)) > _ptr__3511[safe_add( _3506,_3519 )]))
          {
            {
              ++ _3519;
            }
          }
          else
          {
            {
              _3513 += (_ptr__3510[safe_add( safe_add( _3505,_3519 ),(int)1 )] - _ptr__3510[safe_add( _3505,_3519 )]);
              ++ _3517;
              ++ _3519;
              ++ _3514;
            }
          }
        }
      }
    }
  }
  int _3520 = _3497->alloci32(safe_add( _3514,(int)1 ));
  int _3521 = _3497->alloci64(_3513);
  int _3522 = _3497->alloci64(_3514);
  int _3523 = _3497->allocf64(_3513);
  int _3524 = _3497->allocf64(_3514);
  int _3525 = (int)1;
  int _8484 = (int)0;
  int _8485 = _3500;
  for (int _3526 = _8484; _3526 < _8485; ++_3526)
  {
    {
      _3525 *= _ptr__3510[safe_add( _3501,_3526 )];
    }
  }
  bool _3527 = (_3514 < _3525);
  int _8486;
  bool _8487 = _3527;
  if (_8487)
  {
    _8486 = (int)1;
  }
  else
  {
    _8486 = (int)0;
  }
  _3497->pushi32(_8486);
  _3497->pushi32(_3513);
  _3497->pushi32(_3514);
  int _3528 = _3497->alloci32(_3500);
  _3497->pushi32(_3500);
  std::shared_ptr< monty::ndarray< int,1 > > _3529 = mosek::fusion::p_WorkStack::_get_impl(_3497)->i32;
  _checked_ptr_1<int> _ptr__3529(_3529 ? _3529->raw() : nullptr,_3529 ? _3529->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3530 = mosek::fusion::p_WorkStack::_get_impl(_3497)->i64;
  _checked_ptr_1<long long> _ptr__3530(_3530 ? _3530->raw() : nullptr,_3530 ? _3530->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3531 = mosek::fusion::p_WorkStack::_get_impl(_3497)->f64;
  _checked_ptr_1<double> _ptr__3531(_3531 ? _3531->raw() : nullptr,_3531 ? _3531->size(0) : 0);
  {
    int _3532 = (int)0;
    int _3533 = (int)0;
    _ptr__3529[_3520] = (int)0;
    int _8488 = (int)0;
    int _8489 = _3500;
    for (int _3534 = _8488; _3534 < _8489; ++_3534)
    {
      {
        _ptr__3529[safe_add( _3528,_3534 )] = _ptr__3510[safe_add( _3501,_3534 )];
      }
    }
    if ((!_3504))
    {
      {
        int _8490 = (int)0;
        int _8491 = (int)((msp)->size(0));
        for (int _3535 = _8490; _3535 < _8491; ++_3535)
        {
          {
            int _3536 = _ptr__3510[safe_add( _3505,((*msp)(_3535)) )];
            int _3537 = _ptr__3510[safe_add( safe_add( _3505,((*msp)(_3535)) ),(int)1 )];
            int _8492 = _3536;
            int _8493 = _3537;
            for (int _3538 = _8492; _3538 < _8493; ++_3538)
            {
              {
                _ptr__3530[safe_add( _3521,_3533 )] = _ptr__3511[safe_add( _3507,_3538 )];
                _ptr__3531[safe_add( _3523,_3533 )] = (_ptr__3512[safe_add( _3509,_3538 )] * ((*mcof)(_3535)));
                ++ _3533;
              }
            }
            _ptr__3529[safe_add( safe_add( _3520,_3535 ),(int)1 )] = _3533;
            _ptr__3531[safe_add( _3524,_3535 )] = (_ptr__3512[safe_add( _3508,((*msp)(_3535)) )] * ((*mcof)(_3535)));
            _ptr__3530[safe_add( _3522,_3535 )] = ((*msp)(_3535));
          }
        }
      }
    }
    else
    {
      {
        int _3539 = (int)((msp)->size(0));
        int _3540 = (int)0;
        int _3541 = _3502;
        int _3542 = (int)0;
        while ( ((_3540 < _3539) && (_3542 < _3541)) )
        {
          {
            if ((((*msp)(_3540)) < _ptr__3511[safe_add( _3506,_3542 )]))
            {
              {
                ++ _3540;
              }
            }
            else if((((*msp)(_3540)) > _ptr__3511[safe_add( _3506,_3542 )]))
            {
              {
                ++ _3542;
              }
            }
            else
            {
              {
                int _3543 = _ptr__3510[safe_add( _3505,_3542 )];
                int _3544 = _ptr__3510[safe_add( safe_add( _3505,_3542 ),(int)1 )];
                int _8494 = _3543;
                int _8495 = _3544;
                for (int _3545 = _8494; _3545 < _8495; ++_3545)
                {
                  {
                    _ptr__3530[safe_add( _3521,_3533 )] = _ptr__3511[safe_add( _3507,_3545 )];
                    _ptr__3531[safe_add( _3521,_3533 )] = (_ptr__3512[safe_add( _3507,_3545 )] * ((*mcof)(_3540)));
                    ++ _3533;
                  }
                }
                _ptr__3529[safe_add( safe_add( _3520,_3532 ),(int)1 )] = _3533;
                _ptr__3531[safe_add( _3524,_3532 )] = (_ptr__3512[safe_add( _3508,_3542 )] * ((*mcof)(_3540)));
                _ptr__3530[safe_add( _3522,_3532 )] = ((*msp)(_3540));
                ++ _3532;
                ++ _3540;
                ++ _3542;
              }
            }
          }
        }
      }
    }
  }
  if ((!_3527))
  {
    {
      _3497->popi64(_3514);
    }
  }
  {}
}
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulElement::toString(){
  return std::string ("ExprMulElement()");
}
void mosek::fusion::p_ExprMulElement::destroy(){expr.reset();msp.reset();mcof.reset();}void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst  (double _3546,    monty::rc_ptr< ::mosek::fusion::Expression > _3547){ return new mosek::fusion::ExprMulScalarConst(_3546,_3547); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst  (double _3546,    monty::rc_ptr< ::mosek::fusion::Expression > _3547) :    ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this)){ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_3546,_3547); }void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _3546,    monty::rc_ptr< ::mosek::fusion::Expression > _3547){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3547->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _3546;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _3547;
  }
}void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3548,monty::rc_ptr< ::mosek::fusion::WorkStack > _3549,monty::rc_ptr< ::mosek::fusion::WorkStack > _3550) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_3548,_3549,_3550); }void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3548,monty::rc_ptr< ::mosek::fusion::WorkStack > _3549,monty::rc_ptr< ::mosek::fusion::WorkStack > _3550){
  expr->eval(_3548,_3549,_3550);
  int _3551 = _3548->peeki32((int)0);
  int _3552 = _3548->peeki32(safe_add( _3551,(int)1 ));
  int _3553 = _3548->peeki32(safe_add( _3551,(int)2 ));
  int _3554 = (mosek::fusion::p_WorkStack::_get_impl(_3548)->pf64 - _3552);
  int _3555 = (_3554 - _3553);
  std::shared_ptr< monty::ndarray< double,1 > > _3556 = mosek::fusion::p_WorkStack::_get_impl(_3548)->f64;
  _checked_ptr_1<double> _ptr__3556(_3556 ? _3556->raw() : nullptr,_3556 ? _3556->size(0) : 0);
  int _8496 = (int)0;
  int _8497 = safe_add( _3553,_3552 );
  for (int _3557 = _8496; _3557 < _8497; ++_3557)
  {
    {
      _ptr__3556[safe_add( _3555,_3557 )] *= c;
    }
  }
}
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarConst::toString(){
  return std::string ("ExprMulScalarConst()");
}
void mosek::fusion::p_ExprMulScalarConst::destroy(){expr.reset();}void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprScalarMul::p_ExprScalarMul  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _3558,    int _3559,    std::shared_ptr< monty::ndarray< int,1 > > _3560,    std::shared_ptr< monty::ndarray< int,1 > > _3561,    std::shared_ptr< monty::ndarray< double,1 > > _3562,    monty::rc_ptr< ::mosek::fusion::Expression > _3563,    int _3564){ return new mosek::fusion::ExprScalarMul(_3558,_3559,_3560,_3561,_3562,_3563,_3564); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _3558,    int _3559,    std::shared_ptr< monty::ndarray< int,1 > > _3560,    std::shared_ptr< monty::ndarray< int,1 > > _3561,    std::shared_ptr< monty::ndarray< double,1 > > _3562,    monty::rc_ptr< ::mosek::fusion::Expression > _3563,    int _3564) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_3558,_3559,_3560,_3561,_3562,_3563,_3564); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _3558,    int _3559,    std::shared_ptr< monty::ndarray< int,1 > > _3560,    std::shared_ptr< monty::ndarray< int,1 > > _3561,    std::shared_ptr< monty::ndarray< double,1 > > _3562,    monty::rc_ptr< ::mosek::fusion::Expression > _3563,    int _3564){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3560(_3560 ? _3560->raw() : nullptr, _3560 ? _3560->size(0) : 0);
    _checked_ptr_1<int> _ptr__3561(_3561 ? _3561->raw() : nullptr, _3561 ? _3561->size(0) : 0);
    _checked_ptr_1<double> _ptr__3562(_3562 ? _3562->raw() : nullptr, _3562 ? _3562->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3558),(int)(_3559)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _3558;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _3559;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _3560;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _3561;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _3562;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _3563;
  }
}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _3565,    int _3566,    std::shared_ptr< monty::ndarray< int,1 > > _3567,    std::shared_ptr< monty::ndarray< int,1 > > _3568,    std::shared_ptr< monty::ndarray< double,1 > > _3569,    monty::rc_ptr< ::mosek::fusion::Expression > _3570){ return new mosek::fusion::ExprScalarMul(_3565,_3566,_3567,_3568,_3569,_3570); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _3565,    int _3566,    std::shared_ptr< monty::ndarray< int,1 > > _3567,    std::shared_ptr< monty::ndarray< int,1 > > _3568,    std::shared_ptr< monty::ndarray< double,1 > > _3569,    monty::rc_ptr< ::mosek::fusion::Expression > _3570) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_3565,_3566,_3567,_3568,_3569,_3570); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _3565,    int _3566,    std::shared_ptr< monty::ndarray< int,1 > > _3567,    std::shared_ptr< monty::ndarray< int,1 > > _3568,    std::shared_ptr< monty::ndarray< double,1 > > _3569,    monty::rc_ptr< ::mosek::fusion::Expression > _3570){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3567(_3567 ? _3567->raw() : nullptr, _3567 ? _3567->size(0) : 0);
    _checked_ptr_1<int> _ptr__3568(_3568 ? _3568->raw() : nullptr, _3568 ? _3568->size(0) : 0);
    _checked_ptr_1<double> _ptr__3569(_3569 ? _3569->raw() : nullptr, _3569 ? _3569->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_3565,_3566,_3567,_3568,_3569,_3570,::mosek::fusion::p_ExprScalarMul::validate(_3565,_3566,_3567,_3568,_3569,_3570));
  }
}void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3571,monty::rc_ptr< ::mosek::fusion::WorkStack > _3572,monty::rc_ptr< ::mosek::fusion::WorkStack > _3573) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_3571,_3572,_3573); }void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3571,monty::rc_ptr< ::mosek::fusion::WorkStack > _3572,monty::rc_ptr< ::mosek::fusion::WorkStack > _3573){
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_3572,_3571,_3573);
  _3572->pop_expr();
  int _3574 = mosek::fusion::p_WorkStack::_get_impl(_3572)->nd;
  int _3575 = mosek::fusion::p_WorkStack::_get_impl(_3572)->nelem;
  int _3576 = mosek::fusion::p_WorkStack::_get_impl(_3572)->nnz;
  bool _3577 = mosek::fusion::p_WorkStack::_get_impl(_3572)->hassp;
  int _3578 = mosek::fusion::p_WorkStack::_get_impl(_3572)->ptr_base;
  int _3579 = mosek::fusion::p_WorkStack::_get_impl(_3572)->sp_base;
  int _3580 = mosek::fusion::p_WorkStack::_get_impl(_3572)->nidxs_base;
  int _3581 = mosek::fusion::p_WorkStack::_get_impl(_3572)->bfix_base;
  int _3582 = mosek::fusion::p_WorkStack::_get_impl(_3572)->cof_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3583 = mosek::fusion::p_WorkStack::_get_impl(_3572)->i64;
  _checked_ptr_1<long long> _ptr__3583(_3583 ? _3583->raw() : nullptr,_3583 ? _3583->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3584 = mosek::fusion::p_WorkStack::_get_impl(_3572)->f64;
  _checked_ptr_1<double> _ptr__3584(_3584 ? _3584->raw() : nullptr,_3584 ? _3584->size(0) : 0);
  int _3585 = (int)((mval)->size(0));
  if ((_3574 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_3575 == (int)0))
  {
    {
      _3571->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_3571)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3571)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_3571)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_3571)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      _3571->alloc_expr((int)2,_3585,safe_mul( _3585,_3576 ),true);
      int _3586 = mosek::fusion::p_WorkStack::_get_impl(_3571)->ptr_base;
      int _3587 = mosek::fusion::p_WorkStack::_get_impl(_3571)->nidxs_base;
      int _3588 = mosek::fusion::p_WorkStack::_get_impl(_3571)->sp_base;
      int _3589 = mosek::fusion::p_WorkStack::_get_impl(_3571)->cof_base;
      int _3590 = mosek::fusion::p_WorkStack::_get_impl(_3571)->bfix_base;
      int _3591 = mosek::fusion::p_WorkStack::_get_impl(_3571)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _3592 = mosek::fusion::p_WorkStack::_get_impl(_3571)->i32;
      _checked_ptr_1<int> _ptr__3592(_3592 ? _3592->raw() : nullptr,_3592 ? _3592->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3593 = mosek::fusion::p_WorkStack::_get_impl(_3571)->i64;
      _checked_ptr_1<long long> _ptr__3593(_3593 ? _3593->raw() : nullptr,_3593 ? _3593->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3594 = mosek::fusion::p_WorkStack::_get_impl(_3571)->f64;
      _checked_ptr_1<double> _ptr__3594(_3594 ? _3594->raw() : nullptr,_3594 ? _3594->size(0) : 0);
      _ptr__3592[_3591] = mdim0;
      _ptr__3592[safe_add( _3591,(int)1 )] = mdim1;
      int _3595 = (int)0;
      _ptr__3592[_3586] = (int)0;
      int _8498 = (int)0;
      int _8499 = _3585;
      for (int _3596 = _8498; _3596 < _8499; ++_3596)
      {
        {
          int _8500 = (int)0;
          int _8501 = _3576;
          for (int _3597 = _8500; _3597 < _8501; ++_3597)
          {
            {
              _ptr__3593[safe_add( _3587,_3595 )] = _ptr__3583[safe_add( _3580,_3597 )];
              _ptr__3594[safe_add( _3589,_3595 )] = (_ptr__3584[safe_add( _3582,_3597 )] * ((*mval)(_3596)));
              ++ _3595;
            }
          }
          _ptr__3593[safe_add( _3588,_3596 )] = safe_add( safe_mul( ((*msubi)(_3596)),mdim1 ),((*msubj)(_3596)) );
          _ptr__3594[safe_add( _3590,_3596 )] = (((*mval)(_3596)) * _ptr__3584[_3581]);
          _ptr__3592[safe_add( safe_add( _3586,_3596 ),(int)1 )] = _3595;
        }
      }
    }
  }
}
int mosek::fusion::p_ExprScalarMul::validate(int _3598,int _3599,std::shared_ptr< monty::ndarray< int,1 > > _3600,std::shared_ptr< monty::ndarray< int,1 > > _3601,std::shared_ptr< monty::ndarray< double,1 > > _3602,monty::rc_ptr< ::mosek::fusion::Expression > _3603){
  _checked_ptr_1<int> _ptr__3600(_3600 ? _3600->raw() : nullptr, _3600 ? _3600->size(0) : 0);
  _checked_ptr_1<int> _ptr__3601(_3601 ? _3601->raw() : nullptr, _3601 ? _3601->size(0) : 0);
  _checked_ptr_1<double> _ptr__3602(_3602 ? _3602->raw() : nullptr, _3602 ? _3602->size(0) : 0);
  int _3604 = _3603->getND();
  if ((_3604 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3598 < (int)0) || (_3599 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_3600)->size(0)) != (int)((_3601)->size(0))) || ((int)((_3600)->size(0)) != (int)((_3602)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3605 = (int)((_3600)->size(0));
  bool _3606 = false;
  bool _3607 = false;
  {
    int _8502 = (int)0;
    int _8503 = _3605;
    for (int _3608 = _8502; _3608 < _8503; ++_3608)
    {
      {
        if (((_ptr__3600[_3608] < (int)0) || ((_ptr__3600[_3608] >= _3598) || ((_ptr__3601[_3608] < (int)0) || (_ptr__3601[_3608] >= _3599)))))
        {
          {
            _3606 = true;
          }
        }
        {}
      }
    }
    int _8504 = (int)0;
    int _8505 = (_3605 - (int)1);
    for (int _3609 = _8504; _3609 < _8505; ++_3609)
    {
      {
        if (((_ptr__3600[_3609] > _ptr__3600[safe_add( _3609,(int)1 )]) || ((_ptr__3600[_3609] == _ptr__3600[safe_add( _3609,(int)1 )]) && (_ptr__3601[_3609] >= _ptr__3601[safe_add( _3609,(int)1 )]))))
        {
          {
            _3607 = true;
          }
        }
        {}
      }
    }
  }
  if (_3606)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3607)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprScalarMul::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprScalarMul::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulRight::p_ExprMulRight  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _3610,    int _3611,    std::shared_ptr< monty::ndarray< int,1 > > _3612,    std::shared_ptr< monty::ndarray< int,1 > > _3613,    std::shared_ptr< monty::ndarray< double,1 > > _3614,    monty::rc_ptr< ::mosek::fusion::Expression > _3615,    int _3616){ return new mosek::fusion::ExprMulRight(_3610,_3611,_3612,_3613,_3614,_3615,_3616); }mosek::fusion::ExprMulRight::ExprMulRight  (int _3610,    int _3611,    std::shared_ptr< monty::ndarray< int,1 > > _3612,    std::shared_ptr< monty::ndarray< int,1 > > _3613,    std::shared_ptr< monty::ndarray< double,1 > > _3614,    monty::rc_ptr< ::mosek::fusion::Expression > _3615,    int _3616) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_3610,_3611,_3612,_3613,_3614,_3615,_3616); }void mosek::fusion::p_ExprMulRight::_initialize  (int _3610,    int _3611,    std::shared_ptr< monty::ndarray< int,1 > > _3612,    std::shared_ptr< monty::ndarray< int,1 > > _3613,    std::shared_ptr< monty::ndarray< double,1 > > _3614,    monty::rc_ptr< ::mosek::fusion::Expression > _3615,    int _3616){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3612(_3612 ? _3612->raw() : nullptr, _3612 ? _3612->size(0) : 0);
    _checked_ptr_1<int> _ptr__3613(_3613 ? _3613->raw() : nullptr, _3613 ? _3613->size(0) : 0);
    _checked_ptr_1<double> _ptr__3614(_3614 ? _3614->raw() : nullptr, _3614 ? _3614->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_3611,_3615->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _3610;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _3611;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _3612;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _3613;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _3614;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _3615;
  }
}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _3617,    int _3618,    std::shared_ptr< monty::ndarray< int,1 > > _3619,    std::shared_ptr< monty::ndarray< int,1 > > _3620,    std::shared_ptr< monty::ndarray< double,1 > > _3621,    monty::rc_ptr< ::mosek::fusion::Expression > _3622){ return new mosek::fusion::ExprMulRight(_3617,_3618,_3619,_3620,_3621,_3622); }mosek::fusion::ExprMulRight::ExprMulRight  (int _3617,    int _3618,    std::shared_ptr< monty::ndarray< int,1 > > _3619,    std::shared_ptr< monty::ndarray< int,1 > > _3620,    std::shared_ptr< monty::ndarray< double,1 > > _3621,    monty::rc_ptr< ::mosek::fusion::Expression > _3622) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_3617,_3618,_3619,_3620,_3621,_3622); }void mosek::fusion::p_ExprMulRight::_initialize  (int _3617,    int _3618,    std::shared_ptr< monty::ndarray< int,1 > > _3619,    std::shared_ptr< monty::ndarray< int,1 > > _3620,    std::shared_ptr< monty::ndarray< double,1 > > _3621,    monty::rc_ptr< ::mosek::fusion::Expression > _3622){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3619(_3619 ? _3619->raw() : nullptr, _3619 ? _3619->size(0) : 0);
    _checked_ptr_1<int> _ptr__3620(_3620 ? _3620->raw() : nullptr, _3620 ? _3620->size(0) : 0);
    _checked_ptr_1<double> _ptr__3621(_3621 ? _3621->raw() : nullptr, _3621 ? _3621->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_3617,_3618,_3619,_3620,_3621,_3622,::mosek::fusion::p_ExprMulRight::validate(_3617,_3618,_3619,_3620,_3621,_3622));
  }
}void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3623,monty::rc_ptr< ::mosek::fusion::WorkStack > _3624,monty::rc_ptr< ::mosek::fusion::WorkStack > _3625) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_3623,_3624,_3625); }void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3623,monty::rc_ptr< ::mosek::fusion::WorkStack > _3624,monty::rc_ptr< ::mosek::fusion::WorkStack > _3625){
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_3624,_3623,_3625);
  _3624->peek_expr();
  int _3626 = mosek::fusion::p_WorkStack::_get_impl(_3624)->nd;
  bool _3627 = mosek::fusion::p_WorkStack::_get_impl(_3624)->hassp;
  int _3628 = (int)((mval)->size(0));
  bool _3629 = (_3628 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  int _3630 = ((*mosek::fusion::p_WorkStack::_get_impl(_3624)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3624)->shape_base));
  if (_3629)
  {
    {
      int _3631 = _3625->alloci32(safe_add( mdim1,(int)1 ));
      int _3632 = _3625->alloci32(_3628);
      int _3633 = _3625->alloci32(safe_add( _3630,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3634 = mosek::fusion::p_WorkStack::_get_impl(_3625)->i32;
      _checked_ptr_1<int> _ptr__3634(_3634 ? _3634->raw() : nullptr,_3634 ? _3634->size(0) : 0);
      int _8506 = (int)0;
      int _8507 = safe_add( mdim1,(int)1 );
      for (int _3635 = _8506; _3635 < _8507; ++_3635)
      {
        {
          _ptr__3634[safe_add( _3631,_3635 )] = (int)0;
        }
      }
      int _8508 = (int)0;
      int _8509 = _3628;
      for (int _3636 = _8508; _3636 < _8509; ++_3636)
      {
        {
          ++ _ptr__3634[safe_add( safe_add( _3631,((*msubj)(_3636)) ),(int)1 )];
        }
      }
      int _8510 = (int)0;
      int _8511 = mdim1;
      for (int _3637 = _8510; _3637 < _8511; ++_3637)
      {
        {
          _ptr__3634[safe_add( safe_add( _3631,_3637 ),(int)1 )] += _ptr__3634[safe_add( _3631,_3637 )];
        }
      }
      int _8512 = (int)0;
      int _8513 = _3628;
      for (int _3638 = _8512; _3638 < _8513; ++_3638)
      {
        {
          _ptr__3634[safe_add( _3632,_3638 )] = _ptr__3634[safe_add( _3631,((*msubj)(_3638)) )];
          ++ _ptr__3634[safe_add( _3631,((*msubj)(_3638)) )];
        }
      }
      int _8514 = (int)0;
      int _8515 = mdim1;
      for (int _3639 = _8514; _3639 < _8515; ++_3639)
      {
        {
          _ptr__3634[(safe_add( _3631,mdim1 ) - _3639)] = _ptr__3634[((safe_add( _3631,mdim1 ) - _3639) - (int)1)];
        }
      }
      _ptr__3634[_3631] = (int)0;
      int _8516 = (int)0;
      int _8517 = safe_add( _3630,(int)1 );
      for (int _3640 = _8516; _3640 < _8517; ++_3640)
      {
        {
          _ptr__3634[safe_add( _3633,_3640 )] = (int)0;
        }
      }
      _3624->pop_expr();
      std::shared_ptr< monty::ndarray< int,1 > > _3641 = mosek::fusion::p_WorkStack::_get_impl(_3624)->i32;
      _checked_ptr_1<int> _ptr__3641(_3641 ? _3641->raw() : nullptr,_3641 ? _3641->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3642 = mosek::fusion::p_WorkStack::_get_impl(_3624)->i64;
      _checked_ptr_1<long long> _ptr__3642(_3642 ? _3642->raw() : nullptr,_3642 ? _3642->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3643 = mosek::fusion::p_WorkStack::_get_impl(_3624)->f64;
      _checked_ptr_1<double> _ptr__3643(_3643 ? _3643->raw() : nullptr,_3643 ? _3643->size(0) : 0);
      int _3644 = mosek::fusion::p_WorkStack::_get_impl(_3624)->nd;
      if ((_3644 != (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
        }
      }
      {}
      int _3645 = ((*mosek::fusion::p_WorkStack::_get_impl(_3624)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3624)->shape_base));
      int _3646 = ((*mosek::fusion::p_WorkStack::_get_impl(_3624)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_3624)->shape_base,(int)1 )));
      int _3647 = mosek::fusion::p_WorkStack::_get_impl(_3624)->nelem;
      int _3648 = mosek::fusion::p_WorkStack::_get_impl(_3624)->nnz;
      int _3649 = mosek::fusion::p_WorkStack::_get_impl(_3624)->ptr_base;
      int _3650 = mosek::fusion::p_WorkStack::_get_impl(_3624)->sp_base;
      int _3651 = mosek::fusion::p_WorkStack::_get_impl(_3624)->nidxs_base;
      int _3652 = mosek::fusion::p_WorkStack::_get_impl(_3624)->bfix_base;
      int _3653 = mosek::fusion::p_WorkStack::_get_impl(_3624)->cof_base;
      if (_3627)
      {
        {
          int _8518 = (int)0;
          int _8519 = _3647;
          for (int _3654 = _8518; _3654 < _8519; ++_3654)
          {
            {
              ++ _ptr__3634[safe_add( safe_add( _3633,(_ptr__3642[safe_add( _3650,_3654 )] / _3646) ),(int)1 )];
            }
          }
          int _8520 = (int)0;
          int _8521 = _3645;
          for (int _3655 = _8520; _3655 < _8521; ++_3655)
          {
            {
              _ptr__3634[safe_add( safe_add( _3633,_3655 ),(int)1 )] += _ptr__3634[safe_add( _3633,_3655 )];
            }
          }
          int _3656 = (int)0;
          long long _3657 = (long long)0;
          int _8522 = (int)0;
          int _8523 = _3645;
          for (int _3658 = _8522; _3658 < _8523; ++_3658)
          {
            {
              int _8524 = (int)0;
              int _8525 = mdim1;
              for (int _3659 = _8524; _3659 < _8525; ++_3659)
              {
                {
                  bool _3660 = false;
                  int _3661 = _ptr__3634[safe_add( safe_add( _3633,_3658 ),(int)1 )];
                  int _3662 = _ptr__3634[safe_add( _3633,_3658 )];
                  int _3663 = _ptr__3634[safe_add( safe_add( _3631,_3659 ),(int)1 )];
                  int _3664 = _ptr__3634[safe_add( _3631,_3659 )];
                  while ( ((_3662 < _3661) && (_3664 < _3663)) )
                  {
                    {
                      int _3665 = _ptr__3634[safe_add( _3632,_3664 )];
                      if (((_ptr__3642[safe_add( _3650,_3662 )] % _3646) < ((*msubi)(_3665))))
                      {
                        {
                          ++ _3662;
                        }
                      }
                      else if(((_ptr__3642[safe_add( _3650,_3662 )] % _3646) > ((*msubi)(_3665))))
                      {
                        {
                          ++ _3664;
                        }
                      }
                      else
                      {
                        {
                          _3657 += (_ptr__3641[safe_add( safe_add( _3649,_3662 ),(int)1 )] - _ptr__3641[safe_add( _3649,_3662 )]);
                          ++ _3662;
                          ++ _3664;
                          _3660 = true;
                        }
                      }
                    }
                  }
                  if (_3660)
                  {
                    {
                      ++ _3656;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _3666 = (_3656 < safe_mul( _3645,mdim1 ));
          _3623->alloc_expr((int)2,_3656,(int)_3657,_3666);
          int _3667 = mosek::fusion::p_WorkStack::_get_impl(_3623)->ptr_base;
          int _3668 = mosek::fusion::p_WorkStack::_get_impl(_3623)->nidxs_base;
          int _8526;
          bool _8527 = _3666;
          if (_8527)
          {
            _8526 = mosek::fusion::p_WorkStack::_get_impl(_3623)->sp_base;
          }
          else
          {
            _8526 = _3623->alloci64(_3656);
          }
          int _3669 = _8526;
          int _3670 = mosek::fusion::p_WorkStack::_get_impl(_3623)->cof_base;
          int _3671 = mosek::fusion::p_WorkStack::_get_impl(_3623)->bfix_base;
          int _3672 = mosek::fusion::p_WorkStack::_get_impl(_3623)->shape_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3673 = mosek::fusion::p_WorkStack::_get_impl(_3623)->i32;
          _checked_ptr_1<int> _ptr__3673(_3673 ? _3673->raw() : nullptr,_3673 ? _3673->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3674 = mosek::fusion::p_WorkStack::_get_impl(_3623)->i64;
          _checked_ptr_1<long long> _ptr__3674(_3674 ? _3674->raw() : nullptr,_3674 ? _3674->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3675 = mosek::fusion::p_WorkStack::_get_impl(_3623)->f64;
          _checked_ptr_1<double> _ptr__3675(_3675 ? _3675->raw() : nullptr,_3675 ? _3675->size(0) : 0);
          _ptr__3673[_3672] = _3645;
          _ptr__3673[safe_add( _3672,(int)1 )] = mdim1;
          int _3676 = (int)0;
          int _3677 = (int)0;
          _ptr__3673[_3667] = (int)0;
          int _8528 = (int)0;
          int _8529 = _3645;
          for (int _3678 = _8528; _3678 < _8529; ++_3678)
          {
            {
              int _8530 = (int)0;
              int _8531 = mdim1;
              for (int _3679 = _8530; _3679 < _8531; ++_3679)
              {
                {
                  double _3680 = 0.0;
                  int _3681 = (int)0;
                  int _3682 = _ptr__3634[safe_add( safe_add( _3633,_3678 ),(int)1 )];
                  int _3683 = _ptr__3634[safe_add( _3633,_3678 )];
                  int _3684 = _ptr__3634[safe_add( safe_add( _3631,_3679 ),(int)1 )];
                  int _3685 = _ptr__3634[safe_add( _3631,_3679 )];
                  while ( ((_3683 < _3682) && (_3685 < _3684)) )
                  {
                    {
                      int _3686 = _ptr__3634[safe_add( _3632,_3685 )];
                      if (((_ptr__3642[safe_add( _3650,_3683 )] % _3646) < ((*msubi)(_3686))))
                      {
                        {
                          ++ _3683;
                        }
                      }
                      else if(((_ptr__3642[safe_add( _3650,_3683 )] % _3646) > ((*msubi)(_3686))))
                      {
                        {
                          ++ _3685;
                        }
                      }
                      else
                      {
                        {
                          int _3687 = (_ptr__3641[safe_add( safe_add( _3649,_3683 ),(int)1 )] - _ptr__3641[safe_add( _3649,_3683 )]);
                          _3680 += (((*mval)(_3686)) * _ptr__3643[safe_add( _3652,_3683 )]);
                          int _8532 = (int)0;
                          int _8533 = _3687;
                          for (int _3688 = _8532; _3688 < _8533; ++_3688)
                          {
                            {
                              _ptr__3674[safe_add( safe_add( _3668,_3677 ),_3688 )] = _ptr__3642[safe_add( safe_add( _3651,_ptr__3641[safe_add( _3649,_3683 )] ),_3688 )];
                            }
                          }
                          int _8534 = (int)0;
                          int _8535 = _3687;
                          for (int _3689 = _8534; _3689 < _8535; ++_3689)
                          {
                            {
                              _ptr__3675[safe_add( safe_add( _3670,_3677 ),_3689 )] = (_ptr__3643[safe_add( safe_add( _3653,_ptr__3641[safe_add( _3649,_3683 )] ),_3689 )] * ((*mval)(_3686)));
                            }
                          }
                          _3681 += _3687;
                          ++ _3683;
                          ++ _3685;
                        }
                      }
                    }
                  }
                  if ((_3681 > (int)0))
                  {
                    {
                      _3677 += _3681;
                      _ptr__3673[safe_add( safe_add( _3667,_3676 ),(int)1 )] = _3677;
                      _ptr__3675[safe_add( _3671,_3676 )] = _3680;
                      _ptr__3674[safe_add( _3669,_3676 )] = safe_add( safe_mul( _3678,mdim1 ),_3679 );
                      ++ _3676;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((!_3666))
          {
            {
              _3623->popi64(_3656);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _3690 = safe_mul( _3645,mdim1 );
          int _3691 = (int)0;
          int _8536 = (int)0;
          int _8537 = _3645;
          for (int _3692 = _8536; _3692 < _8537; ++_3692)
          {
            {
              int _8538 = (int)0;
              int _8539 = mdim1;
              for (int _3693 = _8538; _3693 < _8539; ++_3693)
              {
                {
                  int _8540 = _ptr__3634[safe_add( _3631,_3693 )];
                  int _8541 = _ptr__3634[safe_add( safe_add( _3631,_3693 ),(int)1 )];
                  for (int _3694 = _8540; _3694 < _8541; ++_3694)
                  {
                    {
                      int _3695 = _ptr__3634[safe_add( _3632,_3694 )];
                      int _3696 = safe_add( safe_mul( _3692,_3646 ),((*msubi)(_3695)) );
                      _3691 += (_ptr__3641[safe_add( safe_add( _3649,_3696 ),(int)1 )] - _ptr__3641[safe_add( _3649,_3696 )]);
                    }
                  }
                }
              }
            }
          }
          bool _3697 = (_3690 < safe_mul( _3645,mdim1 ));
          if ((!(_3691 <= (int)0x7fffffff)))
          {
            {
              throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceede in multiplication"));
            }
          }
          {}
          _3623->alloc_expr((int)2,_3690,(int)_3691,_3697);
          int _3698 = mosek::fusion::p_WorkStack::_get_impl(_3623)->ptr_base;
          int _3699 = mosek::fusion::p_WorkStack::_get_impl(_3623)->nidxs_base;
          int _8542;
          bool _8543 = _3697;
          if (_8543)
          {
            _8542 = mosek::fusion::p_WorkStack::_get_impl(_3623)->sp_base;
          }
          else
          {
            _8542 = _3623->alloci64(_3690);
          }
          int _3700 = _8542;
          int _3701 = mosek::fusion::p_WorkStack::_get_impl(_3623)->cof_base;
          int _3702 = mosek::fusion::p_WorkStack::_get_impl(_3623)->bfix_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3703 = mosek::fusion::p_WorkStack::_get_impl(_3623)->i32;
          _checked_ptr_1<int> _ptr__3703(_3703 ? _3703->raw() : nullptr,_3703 ? _3703->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3704 = mosek::fusion::p_WorkStack::_get_impl(_3623)->i64;
          _checked_ptr_1<long long> _ptr__3704(_3704 ? _3704->raw() : nullptr,_3704 ? _3704->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3705 = mosek::fusion::p_WorkStack::_get_impl(_3623)->f64;
          _checked_ptr_1<double> _ptr__3705(_3705 ? _3705->raw() : nullptr,_3705 ? _3705->size(0) : 0);
          int _3706 = (int)0;
          int _3707 = (int)0;
          _ptr__3703[_3698] = (int)0;
          int _8544 = (int)0;
          int _8545 = _3645;
          for (int _3708 = _8544; _3708 < _8545; ++_3708)
          {
            {
              int _8546 = (int)0;
              int _8547 = mdim1;
              for (int _3709 = _8546; _3709 < _8547; ++_3709)
              {
                {
                  int _3710 = safe_mul( _3708,_3646 );
                  double _3711 = 0.0;
                  int _8548 = _ptr__3634[safe_add( _3631,_3709 )];
                  int _8549 = _ptr__3634[safe_add( safe_add( _3631,_3709 ),(int)1 )];
                  for (int _3712 = _8548; _3712 < _8549; ++_3712)
                  {
                    {
                      int _3713 = _ptr__3634[safe_add( _3632,_3712 )];
                      int _3714 = safe_add( _3710,((*msubi)(_3713)) );
                      int _3715 = _ptr__3641[safe_add( _3649,_3714 )];
                      int _3716 = (_ptr__3641[safe_add( safe_add( _3649,_3714 ),(int)1 )] - _ptr__3641[safe_add( _3649,_3714 )]);
                      int _8550 = (int)0;
                      int _8551 = _3716;
                      for (int _3717 = _8550; _3717 < _8551; ++_3717)
                      {
                        {
                          _ptr__3704[safe_add( safe_add( _3699,_3707 ),_3717 )] = _ptr__3642[safe_add( safe_add( _3651,_3715 ),_3717 )];
                        }
                      }
                      int _8552 = (int)0;
                      int _8553 = _3716;
                      for (int _3718 = _8552; _3718 < _8553; ++_3718)
                      {
                        {
                          _ptr__3705[safe_add( safe_add( _3701,_3707 ),_3718 )] = (_ptr__3643[safe_add( safe_add( _3653,_3715 ),_3718 )] * ((*mval)(_3713)));
                        }
                      }
                      _3711 += (_ptr__3643[safe_add( safe_add( _3652,_3710 ),((*msubi)(_3713)) )] * ((*mval)(_3713)));
                      _3707 += _3716;
                    }
                  }
                  _ptr__3703[safe_add( safe_add( _3698,_3706 ),(int)1 )] = _3707;
                  _ptr__3705[safe_add( _3702,_3706 )] = _3711;
                  _ptr__3704[safe_add( _3700,_3706 )] = safe_add( safe_mul( _3708,mdim1 ),_3709 );
                  ++ _3706;
                }
              }
            }
          }
          if ((!_3697))
          {
            {
              _3623->popi64(_3690);
            }
          }
          {}
        }
      }
      _3625->clear();
    }
  }
  else
  {
    {
      int _3719 = _3625->alloci32(safe_add( _3630,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3720 = mosek::fusion::p_WorkStack::_get_impl(_3625)->i32;
      _checked_ptr_1<int> _ptr__3720(_3720 ? _3720->raw() : nullptr,_3720 ? _3720->size(0) : 0);
      int _8554 = (int)0;
      int _8555 = safe_add( _3630,(int)1 );
      for (int _3721 = _8554; _3721 < _8555; ++_3721)
      {
        {
          _ptr__3720[safe_add( _3719,_3721 )] = (int)0;
        }
      }
      _3624->pop_expr();
      std::shared_ptr< monty::ndarray< int,1 > > _3722 = mosek::fusion::p_WorkStack::_get_impl(_3624)->i32;
      _checked_ptr_1<int> _ptr__3722(_3722 ? _3722->raw() : nullptr,_3722 ? _3722->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3723 = mosek::fusion::p_WorkStack::_get_impl(_3624)->i64;
      _checked_ptr_1<long long> _ptr__3723(_3723 ? _3723->raw() : nullptr,_3723 ? _3723->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3724 = mosek::fusion::p_WorkStack::_get_impl(_3624)->f64;
      _checked_ptr_1<double> _ptr__3724(_3724 ? _3724->raw() : nullptr,_3724 ? _3724->size(0) : 0);
      int _3725 = mosek::fusion::p_WorkStack::_get_impl(_3624)->nd;
      int _3726 = mosek::fusion::p_WorkStack::_get_impl(_3624)->nelem;
      int _3727 = mosek::fusion::p_WorkStack::_get_impl(_3624)->nnz;
      bool _3728 = mosek::fusion::p_WorkStack::_get_impl(_3624)->hassp;
      int _3729 = _3727;
      int _3730 = _3726;
      int _3731 = mosek::fusion::p_WorkStack::_get_impl(_3624)->shape_base;
      int _3732 = mosek::fusion::p_WorkStack::_get_impl(_3624)->ptr_base;
      int _3733 = mosek::fusion::p_WorkStack::_get_impl(_3624)->sp_base;
      int _3734 = mosek::fusion::p_WorkStack::_get_impl(_3624)->nidxs_base;
      int _3735 = mosek::fusion::p_WorkStack::_get_impl(_3624)->bfix_base;
      int _3736 = mosek::fusion::p_WorkStack::_get_impl(_3624)->cof_base;
      int _3737 = _ptr__3722[_3731];
      int _3738 = _ptr__3722[safe_add( _3731,(int)1 )];
      if ((_3725 != (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _3739 = mosek::fusion::p_WorkStack::_get_impl(_3624)->i32;
      _checked_ptr_1<int> _ptr__3739(_3739 ? _3739->raw() : nullptr,_3739 ? _3739->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3740 = mosek::fusion::p_WorkStack::_get_impl(_3624)->i64;
      _checked_ptr_1<long long> _ptr__3740(_3740 ? _3740->raw() : nullptr,_3740 ? _3740->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3741 = mosek::fusion::p_WorkStack::_get_impl(_3624)->f64;
      _checked_ptr_1<double> _ptr__3741(_3741 ? _3741->raw() : nullptr,_3741 ? _3741->size(0) : 0);
      int _3742 = safe_mul( _3737,mdim1 );
      long long _3743 = safe_mul( (long long)_3727,mdim1 );
      bool _3744 = false;
      int _3745 = (int)2;
      if ((!(_3743 <= (int)0x7fffffff)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceede in multiplication"));
        }
      }
      {}
      _3623->alloc_expr(_3745,_3742,(int)_3743,_3744);
      std::shared_ptr< monty::ndarray< int,1 > > _3746 = mosek::fusion::p_WorkStack::_get_impl(_3623)->i32;
      _checked_ptr_1<int> _ptr__3746(_3746 ? _3746->raw() : nullptr,_3746 ? _3746->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3747 = mosek::fusion::p_WorkStack::_get_impl(_3623)->i64;
      _checked_ptr_1<long long> _ptr__3747(_3747 ? _3747->raw() : nullptr,_3747 ? _3747->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3748 = mosek::fusion::p_WorkStack::_get_impl(_3623)->f64;
      _checked_ptr_1<double> _ptr__3748(_3748 ? _3748->raw() : nullptr,_3748 ? _3748->size(0) : 0);
      int _3749 = mosek::fusion::p_WorkStack::_get_impl(_3623)->shape_base;
      int _3750 = mosek::fusion::p_WorkStack::_get_impl(_3623)->ptr_base;
      int _3751 = mosek::fusion::p_WorkStack::_get_impl(_3623)->nidxs_base;
      int _3752 = mosek::fusion::p_WorkStack::_get_impl(_3623)->sp_base;
      int _3753 = mosek::fusion::p_WorkStack::_get_impl(_3623)->cof_base;
      int _3754 = mosek::fusion::p_WorkStack::_get_impl(_3623)->bfix_base;
      _ptr__3746[_3749] = _3737;
      _ptr__3746[safe_add( _3749,(int)1 )] = mdim1;
      int _3755 = (int)0;
      int _3756 = (int)0;
      _ptr__3746[_3750] = (int)0;
      if (_3728)
      {
        {
          int _8556 = (int)0;
          int _8557 = _3726;
          for (int _3757 = _8556; _3757 < _8557; ++_3757)
          {
            {
              ++ _ptr__3720[safe_add( safe_add( _3719,(_ptr__3740[safe_add( _3733,_3757 )] / _3738) ),(int)1 )];
            }
          }
          int _8558 = (int)0;
          int _8559 = _3737;
          for (int _3758 = _8558; _3758 < _8559; ++_3758)
          {
            {
              _ptr__3720[safe_add( safe_add( _3719,_3758 ),(int)1 )] += _ptr__3720[safe_add( _3719,_3758 )];
            }
          }
          int _8560 = (int)0;
          int _8561 = _3737;
          for (int _3759 = _8560; _3759 < _8561; ++_3759)
          {
            {
              int _8562 = (int)0;
              int _8563 = mdim1;
              for (int _3760 = _8562; _3760 < _8563; ++_3760)
              {
                {
                  double _3761 = 0.0;
                  int _3762 = (int)0;
                  int _8564 = _ptr__3720[safe_add( _3719,_3759 )];
                  int _8565 = _ptr__3720[safe_add( safe_add( _3719,_3759 ),(int)1 )];
                  for (int _3763 = _8564; _3763 < _8565; ++_3763)
                  {
                    {
                      long long _3764 = safe_add( _3760,safe_mul( (_ptr__3740[safe_add( _3733,_3763 )] % _3738),mdim1 ) );
                      _3761 += (_ptr__3741[safe_add( _3735,_3763 )] * ((*mval)(_3764)));
                      int _8566 = _ptr__3739[safe_add( _3732,_3763 )];
                      int _8567 = _ptr__3739[safe_add( safe_add( _3732,_3763 ),(int)1 )];
                      for (int _3765 = _8566; _3765 < _8567; ++_3765)
                      {
                        {
                          _ptr__3747[safe_add( safe_add( _3751,_3755 ),_3762 )] = _ptr__3740[safe_add( _3734,_3765 )];
                          _ptr__3748[safe_add( safe_add( _3753,_3755 ),_3762 )] = (_ptr__3741[safe_add( _3736,_3765 )] * ((*mval)(_3764)));
                          ++ _3762;
                        }
                      }
                    }
                  }
                  _3755 += _3762;
                  _ptr__3746[safe_add( safe_add( _3750,_3756 ),(int)1 )] = _3755;
                  _ptr__3748[safe_add( _3754,_3756 )] = _3761;
                  ++ _3756;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _8568 = (int)0;
          int _8569 = _3737;
          for (int _3766 = _8568; _3766 < _8569; ++_3766)
          {
            {
              int _8570 = (int)0;
              int _8571 = mdim1;
              for (int _3767 = _8570; _3767 < _8571; ++_3767)
              {
                {
                  double _3768 = 0.0;
                  int _3769 = (int)0;
                  int _8572 = (int)0;
                  int _8573 = _3738;
                  for (int _3770 = _8572; _3770 < _8573; ++_3770)
                  {
                    {
                      int _3771 = safe_add( safe_mul( _3766,_3738 ),_3770 );
                      int _3772 = safe_add( _3767,safe_mul( _3770,mdim1 ) );
                      _3768 += (_ptr__3741[safe_add( _3735,_3771 )] * ((*mval)(_3772)));
                      int _8574 = _ptr__3739[safe_add( _3732,_3771 )];
                      int _8575 = _ptr__3739[safe_add( safe_add( _3732,_3771 ),(int)1 )];
                      for (int _3773 = _8574; _3773 < _8575; ++_3773)
                      {
                        {
                          _ptr__3747[safe_add( safe_add( _3751,_3755 ),_3769 )] = _ptr__3740[safe_add( _3734,_3773 )];
                          _ptr__3748[safe_add( safe_add( _3753,_3755 ),_3769 )] = (_ptr__3741[safe_add( _3736,_3773 )] * ((*mval)(_3772)));
                          ++ _3769;
                        }
                      }
                    }
                  }
                  _3755 += _3769;
                  _ptr__3746[safe_add( safe_add( _3750,_3756 ),(int)1 )] = _3755;
                  _ptr__3748[safe_add( _3754,_3756 )] = _3768;
                  ++ _3756;
                }
              }
            }
          }
        }
      }
      _3625->clear();
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulRight::computeshape(int _3774,std::shared_ptr< monty::ndarray< int,1 > > _3775){
  _checked_ptr_1<int> _ptr__3775(_3775 ? _3775->raw() : nullptr, _3775 ? _3775->size(0) : 0);
  if (((int)((_3775)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_3774)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__3775[(int)0]),(int)(_3774)});
    }
  }
}
int mosek::fusion::p_ExprMulRight::validate(int _3776,int _3777,std::shared_ptr< monty::ndarray< int,1 > > _3778,std::shared_ptr< monty::ndarray< int,1 > > _3779,std::shared_ptr< monty::ndarray< double,1 > > _3780,monty::rc_ptr< ::mosek::fusion::Expression > _3781){
  _checked_ptr_1<int> _ptr__3778(_3778 ? _3778->raw() : nullptr, _3778 ? _3778->size(0) : 0);
  _checked_ptr_1<int> _ptr__3779(_3779 ? _3779->raw() : nullptr, _3779 ? _3779->size(0) : 0);
  _checked_ptr_1<double> _ptr__3780(_3780 ? _3780->raw() : nullptr, _3780 ? _3780->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3782 = _3781->getShape();
  _checked_ptr_1<int> _ptr__3782(_3782 ? _3782->raw() : nullptr,_3782 ? _3782->size(0) : 0);
  if (((int)((_3782)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3783 = _ptr__3782[(int)0];
  int _3784 = _ptr__3782[(int)1];
  if (((_3776 < (int)0) || ((_3777 < (int)0) || ((_3783 < (int)0) || (_3784 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_3776 != _3784))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3778)->size(0)) != (int)((_3779)->size(0))) || ((int)((_3778)->size(0)) != (int)((_3780)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3785 = (int)((_3778)->size(0));
  {
    bool _3786 = false;
    int _8576 = (int)0;
    int _8577 = _3785;
    for (int _3787 = _8576; _3787 < _8577; ++_3787)
    {
      {
        _3786 = (_3786 || ((_ptr__3778[_3787] < (int)0) || ((_ptr__3778[_3787] >= _3776) || ((_ptr__3779[_3787] < (int)0) || (_ptr__3779[_3787] >= _3777)))));
      }
    }
    if (_3786)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _3788 = false;
    int _8578 = (int)0;
    int _8579 = (_3785 - (int)1);
    for (int _3789 = _8578; _3789 < _8579; ++_3789)
    {
      {
        _3788 = (_3788 || ((_ptr__3778[_3789] > _ptr__3778[safe_add( _3789,(int)1 )]) || ((_ptr__3778[_3789] == _ptr__3778[safe_add( _3789,(int)1 )]) && (_ptr__3779[_3789] >= _ptr__3779[safe_add( _3789,(int)1 )]))));
      }
    }
    if (_3788)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulLeft::p_ExprMulLeft  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _3790,    int _3791,    std::shared_ptr< monty::ndarray< int,1 > > _3792,    std::shared_ptr< monty::ndarray< int,1 > > _3793,    std::shared_ptr< monty::ndarray< double,1 > > _3794,    monty::rc_ptr< ::mosek::fusion::Expression > _3795,    int _3796){ return new mosek::fusion::ExprMulLeft(_3790,_3791,_3792,_3793,_3794,_3795,_3796); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _3790,    int _3791,    std::shared_ptr< monty::ndarray< int,1 > > _3792,    std::shared_ptr< monty::ndarray< int,1 > > _3793,    std::shared_ptr< monty::ndarray< double,1 > > _3794,    monty::rc_ptr< ::mosek::fusion::Expression > _3795,    int _3796) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_3790,_3791,_3792,_3793,_3794,_3795,_3796); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _3790,    int _3791,    std::shared_ptr< monty::ndarray< int,1 > > _3792,    std::shared_ptr< monty::ndarray< int,1 > > _3793,    std::shared_ptr< monty::ndarray< double,1 > > _3794,    monty::rc_ptr< ::mosek::fusion::Expression > _3795,    int _3796){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3792(_3792 ? _3792->raw() : nullptr, _3792 ? _3792->size(0) : 0);
    _checked_ptr_1<int> _ptr__3793(_3793 ? _3793->raw() : nullptr, _3793 ? _3793->size(0) : 0);
    _checked_ptr_1<double> _ptr__3794(_3794 ? _3794->raw() : nullptr, _3794 ? _3794->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_3790,_3791,_3795->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _3790;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _3791;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _3792;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _3793;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _3794;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _3795;
  }
}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _3797,    int _3798,    std::shared_ptr< monty::ndarray< int,1 > > _3799,    std::shared_ptr< monty::ndarray< int,1 > > _3800,    std::shared_ptr< monty::ndarray< double,1 > > _3801,    monty::rc_ptr< ::mosek::fusion::Expression > _3802){ return new mosek::fusion::ExprMulLeft(_3797,_3798,_3799,_3800,_3801,_3802); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _3797,    int _3798,    std::shared_ptr< monty::ndarray< int,1 > > _3799,    std::shared_ptr< monty::ndarray< int,1 > > _3800,    std::shared_ptr< monty::ndarray< double,1 > > _3801,    monty::rc_ptr< ::mosek::fusion::Expression > _3802) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_3797,_3798,_3799,_3800,_3801,_3802); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _3797,    int _3798,    std::shared_ptr< monty::ndarray< int,1 > > _3799,    std::shared_ptr< monty::ndarray< int,1 > > _3800,    std::shared_ptr< monty::ndarray< double,1 > > _3801,    monty::rc_ptr< ::mosek::fusion::Expression > _3802){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3799(_3799 ? _3799->raw() : nullptr, _3799 ? _3799->size(0) : 0);
    _checked_ptr_1<int> _ptr__3800(_3800 ? _3800->raw() : nullptr, _3800 ? _3800->size(0) : 0);
    _checked_ptr_1<double> _ptr__3801(_3801 ? _3801->raw() : nullptr, _3801 ? _3801->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_3797,_3798,_3799,_3800,_3801,_3802,::mosek::fusion::p_ExprMulLeft::validate(_3797,_3798,_3799,_3800,_3801,_3802));
  }
}void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3803,monty::rc_ptr< ::mosek::fusion::WorkStack > _3804,monty::rc_ptr< ::mosek::fusion::WorkStack > _3805) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_3803,_3804,_3805); }void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3803,monty::rc_ptr< ::mosek::fusion::WorkStack > _3804,monty::rc_ptr< ::mosek::fusion::WorkStack > _3805){
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_3804,_3803,_3805);
  _3804->pop_expr();
  int _3806 = mosek::fusion::p_WorkStack::_get_impl(_3804)->nd;
  int _3807 = mosek::fusion::p_WorkStack::_get_impl(_3804)->nnz;
  int _3808 = mosek::fusion::p_WorkStack::_get_impl(_3804)->nelem;
  bool _3809 = mosek::fusion::p_WorkStack::_get_impl(_3804)->hassp;
  int _3810 = mosek::fusion::p_WorkStack::_get_impl(_3804)->shape_base;
  int _3811 = mosek::fusion::p_WorkStack::_get_impl(_3804)->ptr_base;
  int _3812 = mosek::fusion::p_WorkStack::_get_impl(_3804)->sp_base;
  int _3813 = mosek::fusion::p_WorkStack::_get_impl(_3804)->nidxs_base;
  int _3814 = mosek::fusion::p_WorkStack::_get_impl(_3804)->bfix_base;
  int _3815 = mosek::fusion::p_WorkStack::_get_impl(_3804)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _3816 = mosek::fusion::p_WorkStack::_get_impl(_3804)->i32;
  _checked_ptr_1<int> _ptr__3816(_3816 ? _3816->raw() : nullptr,_3816 ? _3816->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3817 = mosek::fusion::p_WorkStack::_get_impl(_3804)->i64;
  _checked_ptr_1<long long> _ptr__3817(_3817 ? _3817->raw() : nullptr,_3817 ? _3817->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3818 = mosek::fusion::p_WorkStack::_get_impl(_3804)->f64;
  _checked_ptr_1<double> _ptr__3818(_3818 ? _3818->raw() : nullptr,_3818 ? _3818->size(0) : 0);
  if ((_3806 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3819 = (int)9999;
  int _3820 = (int)9999;
  int _3821 = (int)9999;
  int _3822 = _ptr__3816[_3810];
  int _3823 = _ptr__3816[safe_add( _3810,(int)1 )];
  int _3824 = (int)((msubi)->size(0));
  bool _3825 = (_3824 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  bool _3826 = false;
  int _3827 = (int)0;
  long long _3828 = (long long)0;
  if (_3809)
  {
    {
      _3819 = _3805->alloci32(_3808);
      _3820 = _3805->alloci32(_3808);
      _3821 = _3805->alloci32(safe_add( _3823,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3829 = mosek::fusion::p_WorkStack::_get_impl(_3805)->i32;
      _checked_ptr_1<int> _ptr__3829(_3829 ? _3829->raw() : nullptr,_3829 ? _3829->size(0) : 0);
      int _8580 = (int)0;
      int _8581 = safe_add( _3823,(int)1 );
      for (int _3830 = _8580; _3830 < _8581; ++_3830)
      {
        {
          _ptr__3829[safe_add( _3821,_3830 )] = (int)0;
        }
      }
      int _8582 = (int)0;
      int _8583 = _3808;
      for (int _3831 = _8582; _3831 < _8583; ++_3831)
      {
        {
          ++ _ptr__3829[safe_add( safe_add( _3821,(_ptr__3817[safe_add( _3812,_3831 )] % _3823) ),(int)1 )];
        }
      }
      int _8584 = (int)0;
      int _8585 = _3823;
      for (int _3832 = _8584; _3832 < _8585; ++_3832)
      {
        {
          _ptr__3829[safe_add( safe_add( _3821,_3832 ),(int)1 )] += _ptr__3829[safe_add( _3821,_3832 )];
        }
      }
      int _8586 = (int)0;
      int _8587 = _3808;
      for (int _3833 = _8586; _3833 < _8587; ++_3833)
      {
        {
          long long _3834 = (_ptr__3817[safe_add( _3812,_3833 )] % _3823);
          _ptr__3829[safe_add( _3819,_ptr__3829[safe_add( _3821,_3834 )] )] = _3833;
          ++ _ptr__3829[safe_add( _3821,_3834 )];
        }
      }
      int _8588 = (int)0;
      int _8589 = _3823;
      for (int _3835 = _8588; _3835 < _8589; ++_3835)
      {
        {
          _ptr__3829[(safe_add( _3821,_3823 ) - _3835)] = _ptr__3829[((safe_add( _3821,_3823 ) - _3835) - (int)1)];
        }
      }
      _ptr__3829[_3821] = (int)0;
      if (_3825)
      {
        {
          int _3836 = (int)0;
          while ( (_3836 < _3824) )
          {
            {
              int _3837 = ((*msubi)(_3836));
              int _3838 = safe_add( _3836,(int)1 );
              while ( ((_3838 < _3824) && (((*msubi)(_3838)) == ((*msubi)(_3836)))) )
              {
                {
                  ++ _3838;
                }
              }
              int _8590 = (int)0;
              int _8591 = _3823;
              for (int _3839 = _8590; _3839 < _8591; ++_3839)
              {
                {
                  bool _3840 = false;
                  int _3841 = _3838;
                  int _3842 = _3836;
                  int _3843 = _ptr__3829[safe_add( safe_add( _3821,_3839 ),(int)1 )];
                  int _3844 = _ptr__3829[safe_add( _3821,_3839 )];
                  while ( ((_3842 < _3841) && (_3844 < _3843)) )
                  {
                    {
                      int _3845 = _ptr__3829[safe_add( _3819,_3844 )];
                      if ((((*msubj)(_3842)) < (_ptr__3817[safe_add( _3812,_3845 )] / _3823)))
                      {
                        {
                          ++ _3842;
                        }
                      }
                      else if((((*msubj)(_3842)) > (_ptr__3817[safe_add( _3812,_3845 )] / _3823)))
                      {
                        {
                          ++ _3844;
                        }
                      }
                      else
                      {
                        {
                          _3840 = true;
                          _3828 += (_ptr__3816[safe_add( safe_add( _3811,_3845 ),(int)1 )] - _ptr__3816[safe_add( _3811,_3845 )]);
                          ++ _3844;
                          ++ _3842;
                        }
                      }
                    }
                  }
                  if (_3840)
                  {
                    {
                      ++ _3827;
                    }
                  }
                  {}
                }
              }
              _3836 = _3838;
            }
          }
        }
      }
      else
      {
        {
          _3827 = safe_mul( mdim0,_3823 );
          _3828 = safe_mul( (long long)_3807,mdim0 );
        }
      }
    }
  }
  else
  {
    {
      if (_3825)
      {
        {
          int _3846 = (int)0;
          while ( (_3846 < _3824) )
          {
            {
              int _3847 = safe_add( _3846,(int)1 );
              while ( ((_3847 < _3824) && (((*msubi)(_3846)) == ((*msubi)(_3847)))) )
              {
                {
                  ++ _3847;
                }
              }
              int _3848 = ((*msubi)(_3846));
              int _8592 = (int)0;
              int _8593 = _3823;
              for (int _3849 = _8592; _3849 < _8593; ++_3849)
              {
                {
                  bool _3850 = false;
                  int _8594 = _3846;
                  int _8595 = _3847;
                  for (int _3851 = _8594; _3851 < _8595; ++_3851)
                  {
                    {
                      int _3852 = safe_add( safe_mul( ((*msubj)(_3851)),_3823 ),_3849 );
                      _3828 += (_ptr__3816[safe_add( safe_add( _3811,_3852 ),(int)1 )] - _ptr__3816[safe_add( _3811,_3852 )]);
                      _3850 = true;
                    }
                  }
                  if (_3850)
                  {
                    {
                      ++ _3827;
                    }
                  }
                  {}
                }
              }
              _3846 = _3847;
            }
          }
        }
      }
      else
      {
        {
          _3828 = safe_mul( (long long)_3807,mdim0 );
          _3827 = safe_mul( mdim0,_3823 );
        }
      }
    }
  }
  if ((!(_3828 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceede in multiplication"));
    }
  }
  {}
  _3826 = (_3827 < safe_mul( mdim0,_3823 ));
  int _3853 = (int)2;
  _3803->alloc_expr(_3853,_3827,(int)_3828,_3826);
  int _3854 = mosek::fusion::p_WorkStack::_get_impl(_3803)->ptr_base;
  int _3855 = mosek::fusion::p_WorkStack::_get_impl(_3803)->nidxs_base;
  int _8596;
  bool _8597 = _3826;
  if (_8597)
  {
    _8596 = mosek::fusion::p_WorkStack::_get_impl(_3803)->sp_base;
  }
  else
  {
    _8596 = _3803->alloci64(_3827);
  }
  int _3856 = _8596;
  int _3857 = mosek::fusion::p_WorkStack::_get_impl(_3803)->cof_base;
  int _3858 = mosek::fusion::p_WorkStack::_get_impl(_3803)->bfix_base;
  int _3859 = mosek::fusion::p_WorkStack::_get_impl(_3803)->shape_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3860 = mosek::fusion::p_WorkStack::_get_impl(_3803)->i64;
  _checked_ptr_1<long long> _ptr__3860(_3860 ? _3860->raw() : nullptr,_3860 ? _3860->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3861 = mosek::fusion::p_WorkStack::_get_impl(_3803)->f64;
  _checked_ptr_1<double> _ptr__3861(_3861 ? _3861->raw() : nullptr,_3861 ? _3861->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3862 = mosek::fusion::p_WorkStack::_get_impl(_3803)->i32;
  _checked_ptr_1<int> _ptr__3862(_3862 ? _3862->raw() : nullptr,_3862 ? _3862->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3863 = mosek::fusion::p_WorkStack::_get_impl(_3805)->i32;
  _checked_ptr_1<int> _ptr__3863(_3863 ? _3863->raw() : nullptr,_3863 ? _3863->size(0) : 0);
  _ptr__3862[_3859] = mdim0;
  _ptr__3862[safe_add( _3859,(int)1 )] = _3823;
  if (_3809)
  {
    {
      _ptr__3862[_3854] = (int)0;
      if (_3825)
      {
        {
          int _3864 = (int)0;
          int _3865 = (int)0;
          int _3866 = (int)0;
          while ( (_3866 < _3824) )
          {
            {
              int _3867 = ((*msubi)(_3866));
              int _3868 = safe_add( _3866,(int)1 );
              while ( ((_3868 < _3824) && (((*msubi)(_3868)) == ((*msubi)(_3866)))) )
              {
                {
                  ++ _3868;
                }
              }
              int _8598 = (int)0;
              int _8599 = _3823;
              for (int _3869 = _8598; _3869 < _8599; ++_3869)
              {
                {
                  bool _3870 = false;
                  double _3871 = 0.0;
                  int _3872 = _3868;
                  int _3873 = _3866;
                  int _3874 = _ptr__3863[safe_add( safe_add( _3821,_3869 ),(int)1 )];
                  int _3875 = _ptr__3863[safe_add( _3821,_3869 )];
                  while ( ((_3873 < _3872) && (_3875 < _3874)) )
                  {
                    {
                      int _3876 = _ptr__3863[safe_add( _3819,_3875 )];
                      if ((((*msubj)(_3873)) < (_ptr__3817[safe_add( _3812,_3876 )] / _3823)))
                      {
                        {
                          ++ _3873;
                        }
                      }
                      else if((((*msubj)(_3873)) > (_ptr__3817[safe_add( _3812,_3876 )] / _3823)))
                      {
                        {
                          ++ _3875;
                        }
                      }
                      else
                      {
                        {
                          _3870 = true;
                          _3871 += (_ptr__3818[safe_add( _3814,_3876 )] * ((*mval)(_3873)));
                          int _3877 = (_ptr__3816[safe_add( safe_add( _3811,_3876 ),(int)1 )] - _ptr__3816[safe_add( _3811,_3876 )]);
                          int _8600 = (int)0;
                          int _8601 = _3877;
                          for (int _3878 = _8600; _3878 < _8601; ++_3878)
                          {
                            {
                              _ptr__3860[safe_add( safe_add( _3855,_3865 ),_3878 )] = _ptr__3817[safe_add( safe_add( _3813,_ptr__3816[safe_add( _3811,_3876 )] ),_3878 )];
                            }
                          }
                          int _8602 = (int)0;
                          int _8603 = _3877;
                          for (int _3879 = _8602; _3879 < _8603; ++_3879)
                          {
                            {
                              _ptr__3861[safe_add( safe_add( _3857,_3865 ),_3879 )] = (_ptr__3818[safe_add( safe_add( _3815,_ptr__3816[safe_add( _3811,_3876 )] ),_3879 )] * ((*mval)(_3873)));
                            }
                          }
                          ++ _3873;
                          ++ _3875;
                          _3865 += _3877;
                        }
                      }
                    }
                  }
                  if (_3870)
                  {
                    {
                      _ptr__3862[safe_add( safe_add( _3854,_3864 ),(int)1 )] = _3865;
                      _ptr__3860[safe_add( _3856,_3864 )] = safe_add( safe_mul( _3867,_3823 ),_3869 );
                      _ptr__3861[safe_add( _3858,_3864 )] = _3871;
                      ++ _3864;
                    }
                  }
                  {}
                }
              }
              _3866 = _3868;
            }
          }
        }
      }
      else
      {
        {
          int _3880 = (int)0;
          int _3881 = (int)0;
          int _8604 = (int)0;
          int _8605 = mdim0;
          for (int _3882 = _8604; _3882 < _8605; ++_3882)
          {
            {
              int _8606 = (int)0;
              int _8607 = _3823;
              for (int _3883 = _8606; _3883 < _8607; ++_3883)
              {
                {
                  double _3884 = 0.0;
                  int _8608 = _ptr__3863[safe_add( _3821,_3883 )];
                  int _8609 = _ptr__3863[safe_add( safe_add( _3821,_3883 ),(int)1 )];
                  for (int _3885 = _8608; _3885 < _8609; ++_3885)
                  {
                    {
                      int _3886 = _ptr__3863[safe_add( _3819,_3885 )];
                      long long _3887 = safe_add( safe_mul( _3882,mdim1 ),(_ptr__3817[safe_add( _3812,_3886 )] / _3823) );
                      _3884 += (_ptr__3818[safe_add( _3814,_3886 )] * ((*mval)(_3887)));
                      int _3888 = (_ptr__3816[safe_add( safe_add( _3811,_3886 ),(int)1 )] - _ptr__3816[safe_add( _3811,_3886 )]);
                      int _8610 = (int)0;
                      int _8611 = _3888;
                      for (int _3889 = _8610; _3889 < _8611; ++_3889)
                      {
                        {
                          _ptr__3860[safe_add( safe_add( _3855,_3881 ),_3889 )] = _ptr__3817[safe_add( safe_add( _3813,_ptr__3816[safe_add( _3811,_3886 )] ),_3889 )];
                          _ptr__3861[safe_add( safe_add( _3857,_3881 ),_3889 )] = (_ptr__3818[safe_add( safe_add( _3815,_ptr__3816[safe_add( _3811,_3886 )] ),_3889 )] * ((*mval)(_3887)));
                        }
                      }
                      _3881 += _3888;
                    }
                  }
                  _ptr__3862[safe_add( safe_add( _3854,_3880 ),(int)1 )] = _3881;
                  _ptr__3861[safe_add( _3858,_3880 )] = _3884;
                  ++ _3880;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _ptr__3862[_3854] = (int)0;
      int _3890 = (int)0;
      int _3891 = (int)0;
      int _3892 = (int)0;
      while ( (_3890 < _3824) )
      {
        {
          int _3893 = safe_add( _3890,(int)1 );
          while ( ((_3893 < _3824) && (((*msubi)(_3890)) == ((*msubi)(_3893)))) )
          {
            {
              ++ _3893;
            }
          }
          int _3894 = ((*msubi)(_3890));
          int _8612 = (int)0;
          int _8613 = _3823;
          for (int _3895 = _8612; _3895 < _8613; ++_3895)
          {
            {
              double _3896 = 0.0;
              bool _3897 = false;
              int _8614 = _3890;
              int _8615 = _3893;
              for (int _3898 = _8614; _3898 < _8615; ++_3898)
              {
                {
                  int _3899 = safe_add( safe_mul( ((*msubj)(_3898)),_3823 ),_3895 );
                  int _3900 = (_ptr__3816[safe_add( safe_add( _3811,_3899 ),(int)1 )] - _ptr__3816[safe_add( _3811,_3899 )]);
                  int _8616 = (int)0;
                  int _8617 = _3900;
                  for (int _3901 = _8616; _3901 < _8617; ++_3901)
                  {
                    {
                      _ptr__3860[safe_add( safe_add( _3855,_3892 ),_3901 )] = _ptr__3817[safe_add( safe_add( _3813,_ptr__3816[safe_add( _3811,_3899 )] ),_3901 )];
                    }
                  }
                  int _8618 = (int)0;
                  int _8619 = _3900;
                  for (int _3902 = _8618; _3902 < _8619; ++_3902)
                  {
                    {
                      _ptr__3861[safe_add( safe_add( _3857,_3892 ),_3902 )] = (_ptr__3818[safe_add( safe_add( _3815,_ptr__3816[safe_add( _3811,_3899 )] ),_3902 )] * ((*mval)(_3898)));
                    }
                  }
                  _3896 += (_ptr__3818[safe_add( _3814,_3899 )] * ((*mval)(_3898)));
                  _3897 = true;
                  _3892 += _3900;
                }
              }
              if (_3897)
              {
                {
                  _ptr__3860[safe_add( _3856,_3891 )] = safe_add( safe_mul( _3894,_3823 ),_3895 );
                  _ptr__3861[safe_add( _3858,_3891 )] = _3896;
                  _ptr__3862[safe_add( safe_add( _3854,_3891 ),(int)1 )] = _3892;
                  ++ _3891;
                }
              }
              {}
            }
          }
          _3890 = _3893;
        }
      }
    }
  }
  if ((!_3826))
  {
    {
      _3803->popi64(_3827);
    }
  }
  {}
  _3805->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int _3903,int _3904,std::shared_ptr< monty::ndarray< int,1 > > _3905){
  _checked_ptr_1<int> _ptr__3905(_3905 ? _3905->raw() : nullptr, _3905 ? _3905->size(0) : 0);
  if (((int)((_3905)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_3904 != _ptr__3905[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3903),(int)(_ptr__3905[(int)1])});
}
int mosek::fusion::p_ExprMulLeft::validate(int _3906,int _3907,std::shared_ptr< monty::ndarray< int,1 > > _3908,std::shared_ptr< monty::ndarray< int,1 > > _3909,std::shared_ptr< monty::ndarray< double,1 > > _3910,monty::rc_ptr< ::mosek::fusion::Expression > _3911){
  _checked_ptr_1<int> _ptr__3908(_3908 ? _3908->raw() : nullptr, _3908 ? _3908->size(0) : 0);
  _checked_ptr_1<int> _ptr__3909(_3909 ? _3909->raw() : nullptr, _3909 ? _3909->size(0) : 0);
  _checked_ptr_1<double> _ptr__3910(_3910 ? _3910->raw() : nullptr, _3910 ? _3910->size(0) : 0);
  if ((_3911->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3912 = _3911->getDim((int)0);
  int _3913 = _3911->getDim((int)0);
  if (((_3906 < (int)0) || (_3907 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_3907 != _3912))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3908)->size(0)) != (int)((_3909)->size(0))) || ((int)((_3908)->size(0)) != (int)((_3910)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3914 = (int)((_3908)->size(0));
  bool _3915 = false;
  bool _3916 = false;
  {
    int _8620 = (int)0;
    int _8621 = _3914;
    for (int _3917 = _8620; _3917 < _8621; ++_3917)
    {
      {
        _3915 = (_3915 || ((_ptr__3908[_3917] < (int)0) || ((_ptr__3908[_3917] >= _3906) || ((_ptr__3909[_3917] < (int)0) || (_ptr__3909[_3917] >= _3907)))));
      }
    }
    if ((!_3915))
    {
      {
        int _8622 = (int)0;
        int _8623 = (_3914 - (int)1);
        for (int _3918 = _8622; _3918 < _8623; ++_3918)
        {
          {
            _3916 = (_3916 || ((_ptr__3908[_3918] > _ptr__3908[safe_add( _3918,(int)1 )]) || ((_ptr__3908[_3918] == _ptr__3908[safe_add( _3918,(int)1 )]) && (_ptr__3909[_3918] >= _ptr__3909[safe_add( _3918,(int)1 )]))));
          }
        }
      }
    }
    {}
  }
  if (_3915)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3916)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVar::p_ExprMulVar  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _3919,    int _3920,    int _3921,    std::shared_ptr< monty::ndarray< int,1 > > _3922,    std::shared_ptr< monty::ndarray< int,1 > > _3923,    std::shared_ptr< monty::ndarray< double,1 > > _3924,    monty::rc_ptr< ::mosek::fusion::Variable > _3925){ return new mosek::fusion::ExprMulVar(_3919,_3920,_3921,_3922,_3923,_3924,_3925); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _3919,    int _3920,    int _3921,    std::shared_ptr< monty::ndarray< int,1 > > _3922,    std::shared_ptr< monty::ndarray< int,1 > > _3923,    std::shared_ptr< monty::ndarray< double,1 > > _3924,    monty::rc_ptr< ::mosek::fusion::Variable > _3925) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_3919,_3920,_3921,_3922,_3923,_3924,_3925); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _3919,    int _3920,    int _3921,    std::shared_ptr< monty::ndarray< int,1 > > _3922,    std::shared_ptr< monty::ndarray< int,1 > > _3923,    std::shared_ptr< monty::ndarray< double,1 > > _3924,    monty::rc_ptr< ::mosek::fusion::Variable > _3925){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3922(_3922 ? _3922->raw() : nullptr, _3922 ? _3922->size(0) : 0);
    _checked_ptr_1<int> _ptr__3923(_3923 ? _3923->raw() : nullptr, _3923 ? _3923->size(0) : 0);
    _checked_ptr_1<double> _ptr__3924(_3924 ? _3924->raw() : nullptr, _3924 ? _3924->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_3919,_3920,_3921,_3922,_3923,_3924,_3925,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _3926 = _3925->getShape();
    _checked_ptr_1<int> _ptr__3926(_3926 ? _3926->raw() : nullptr,_3926 ? _3926->size(0) : 0);
    int _3927 = (int)((_3926)->size(0));
    if ((_3927 != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_3919 && (_ptr__3926[(int)0] != _3921)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_3919) && (_ptr__3926[(int)1] != _3920)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_3922)->size(0)) != (int)((_3923)->size(0))) || ((int)((_3922)->size(0)) != (int)((_3924)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_3920,_3921,_3922,_3923,_3924);
  }
}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _3928,    int _3929,    int _3930,    std::shared_ptr< monty::ndarray< int,1 > > _3931,    std::shared_ptr< monty::ndarray< int,1 > > _3932,    std::shared_ptr< monty::ndarray< double,1 > > _3933,    monty::rc_ptr< ::mosek::fusion::Variable > _3934,    int _3935){ return new mosek::fusion::ExprMulVar(_3928,_3929,_3930,_3931,_3932,_3933,_3934,_3935); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _3928,    int _3929,    int _3930,    std::shared_ptr< monty::ndarray< int,1 > > _3931,    std::shared_ptr< monty::ndarray< int,1 > > _3932,    std::shared_ptr< monty::ndarray< double,1 > > _3933,    monty::rc_ptr< ::mosek::fusion::Variable > _3934,    int _3935) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_3928,_3929,_3930,_3931,_3932,_3933,_3934,_3935); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _3928,    int _3929,    int _3930,    std::shared_ptr< monty::ndarray< int,1 > > _3931,    std::shared_ptr< monty::ndarray< int,1 > > _3932,    std::shared_ptr< monty::ndarray< double,1 > > _3933,    monty::rc_ptr< ::mosek::fusion::Variable > _3934,    int _3935){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3931(_3931 ? _3931->raw() : nullptr, _3931 ? _3931->size(0) : 0);
    _checked_ptr_1<int> _ptr__3932(_3932 ? _3932->raw() : nullptr, _3932 ? _3932->size(0) : 0);
    _checked_ptr_1<double> _ptr__3933(_3933 ? _3933->raw() : nullptr, _3933 ? _3933->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_3929,_3930,_3934->getShape(),_3928));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _3928;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _3934;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _3929;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _3930;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_3931);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_3932);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_3933);
  }
}void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3936,monty::rc_ptr< ::mosek::fusion::WorkStack > _3937,monty::rc_ptr< ::mosek::fusion::WorkStack > _3938) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_3936,_3937,_3938); }void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3936,monty::rc_ptr< ::mosek::fusion::WorkStack > _3937,monty::rc_ptr< ::mosek::fusion::WorkStack > _3938){
  if (left)
  {
    {
      _pubthis->eval_left(_3936,_3937,_3938);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_3936,_3937,_3938);
    }
  }
}
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _3939,monty::rc_ptr< ::mosek::fusion::WorkStack > _3940,monty::rc_ptr< ::mosek::fusion::WorkStack > _3941) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_3939,_3940,_3941); }void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _3939,monty::rc_ptr< ::mosek::fusion::WorkStack > _3940,monty::rc_ptr< ::mosek::fusion::WorkStack > _3941){
  int _3942 = mosek::fusion::p_WorkStack::_get_impl(_3940)->pi32;
  int _3943 = mosek::fusion::p_WorkStack::_get_impl(_3940)->pi64;
  int _3944 = x->numInst();
  int _3945 = _3940->alloci64(_3944);
  int _3946 = _3940->alloci64(_3944);
  int _3947 = _3940->alloci32(_3944);
  int _3948 = _3940->alloci32(_3944);
  std::shared_ptr< monty::ndarray< int,1 > > _3949 = x->getShape();
  _checked_ptr_1<int> _ptr__3949(_3949 ? _3949->raw() : nullptr,_3949 ? _3949->size(0) : 0);
  int _3950 = (int)((_3949)->size(0));
  long long _3951 = safe_mul( _ptr__3949[(int)0],_ptr__3949[(int)1] );
  int _3952 = _ptr__3949[(int)1];
  int _3953 = _ptr__3949[(int)0];
  int _3954 = _3940->alloci32(safe_add( _3953,(int)1 ));
  int _3955 = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _3956 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__3956(_3956 ? _3956->raw() : nullptr,_3956 ? _3956->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3957 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__3957(_3957 ? _3957->raw() : nullptr,_3957 ? _3957->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3958 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__3958(_3958 ? _3958->raw() : nullptr,_3958 ? _3958->size(0) : 0);
  int _3959 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _3960 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _3961 = ((_3955 / _3959) == _3960);
  int _3962 = _3940->alloci32(_3955);
  int _3963 = _3940->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _3964 = mosek::fusion::p_WorkStack::_get_impl(_3940)->i32;
  _checked_ptr_1<int> _ptr__3964(_3964 ? _3964->raw() : nullptr,_3964 ? _3964->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3965 = mosek::fusion::p_WorkStack::_get_impl(_3940)->i64;
  _checked_ptr_1<long long> _ptr__3965(_3965 ? _3965->raw() : nullptr,_3965 ? _3965->size(0) : 0);
  int _3966 = (int)0;
  int _3967 = (int)0;
  x->inst(_3946,_3965,_3945,_3965);
  if (_3961)
  {
    {
      int _3968 = (int)0;
      if ((_3944 > (int)0))
      {
        {
          _3968 = (int)1;
          if ((_3953 > (int)1))
          {
            {
              if ((_3952 == (int)1))
              {
                {
                  int _8624 = (int)1;
                  int _8625 = _3944;
                  for (int _3969 = _8624; _3969 < _8625; ++_3969)
                  {
                    {
                      if ((_ptr__3965[safe_add( _3946,_3969 )] > _ptr__3965[(safe_add( _3946,_3969 ) - (int)1)]))
                      {
                        {
                          ++ _3968;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int _8626 = (int)1;
                  int _8627 = _3944;
                  for (int _3970 = _8626; _3970 < _8627; ++_3970)
                  {
                    {
                      if (((_ptr__3965[safe_add( _3946,_3970 )] / _3952) > (_ptr__3965[(safe_add( _3946,_3970 ) - (int)1)] / _3952)))
                      {
                        {
                          ++ _3968;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _3967 = safe_mul( _3968,_3960 );
      _3966 = safe_mul( _3944,_3960 );
      bool _3971 = (_3968 < _3953);
      int _3972 = _3939->alloci32(safe_add( _3967,(int)1 ));
      int _8628;
      bool _8629 = _3971;
      if (_8629)
      {
        _8628 = (int)1;
      }
      else
      {
        _8628 = (int)0;
      }
      _3939->pushi32(_8628);
      _3939->pushi32(_3966);
      _3939->pushi32(_3967);
      _3939->pushi32(_3953);
      _3939->pushi32(_3960);
      _3939->pushi32((int)2);
      int _3973 = _3939->alloci64(_3966);
      int _3974 = _3939->alloci64(_3967);
      int _3975 = _3939->allocf64(_3966);
      int _3976 = _3939->allocf64(_3967);
      std::shared_ptr< monty::ndarray< int,1 > > _3977 = mosek::fusion::p_WorkStack::_get_impl(_3939)->i32;
      _checked_ptr_1<int> _ptr__3977(_3977 ? _3977->raw() : nullptr,_3977 ? _3977->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3978 = mosek::fusion::p_WorkStack::_get_impl(_3939)->i64;
      _checked_ptr_1<long long> _ptr__3978(_3978 ? _3978->raw() : nullptr,_3978 ? _3978->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3979 = mosek::fusion::p_WorkStack::_get_impl(_3939)->f64;
      _checked_ptr_1<double> _ptr__3979(_3979 ? _3979->raw() : nullptr,_3979 ? _3979->size(0) : 0);
      {
        int _3980 = (int)0;
        int _3981 = (int)0;
        int _3982 = (int)0;
        _ptr__3977[_3972] = (int)0;
        while ( (_3980 < _3944) )
        {
          {
            int _3983 = _3980;
            ++ _3980;
            while ( ((_3980 < _3944) && ((_ptr__3965[safe_add( _3946,_3980 )] / _3952) == (_ptr__3965[safe_add( _3946,_3983 )] / _3952))) )
            {
              {
                ++ _3980;
              }
            }
            long long _3984 = (_ptr__3965[safe_add( _3946,_3983 )] / _3952);
            int _8630 = (int)0;
            int _8631 = _3960;
            for (int _3985 = _8630; _3985 < _8631; ++_3985)
            {
              {
                int _8632 = _3983;
                int _8633 = _3980;
                for (int _3986 = _8632; _3986 < _8633; ++_3986)
                {
                  {
                    long long _3987 = (_ptr__3965[safe_add( _3946,_3986 )] % _3952);
                    _ptr__3978[safe_add( _3973,_3982 )] = _ptr__3965[safe_add( _3945,_3986 )];
                    _ptr__3979[safe_add( _3975,_3982 )] = _ptr__3958[safe_add( safe_mul( _3987,_3960 ),_3985 )];
                    ++ _3982;
                  }
                }
                _ptr__3977[safe_add( safe_add( _3972,_3981 ),(int)1 )] = _3982;
                _ptr__3979[safe_add( _3976,_3981 )] = 0.0;
                _ptr__3978[safe_add( _3974,_3981 )] = safe_add( safe_mul( _3984,_3960 ),_3985 );
                ++ _3981;
              }
            }
          }
        }
      }
      if ((!_3971))
      {
        {
          _3939->popi64(_3967);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_3960 == (int)1))
        {
          {
            int _8634 = (int)0;
            int _8635 = _3955;
            for (int _3988 = _8634; _3988 < _8635; ++_3988)
            {
              {
                _ptr__3964[safe_add( _3962,_3988 )] = _3988;
              }
            }
            _ptr__3964[_3963] = (int)0;
            _ptr__3964[safe_add( _3963,(int)1 )] = _3955;
          }
        }
        else
        {
          {
            _ptr__3964[_3963] = (int)0;
            int _8636 = (int)0;
            int _8637 = safe_add( _3960,(int)1 );
            for (int _3989 = _8636; _3989 < _8637; ++_3989)
            {
              {
                _ptr__3964[safe_add( _3963,_3989 )] = (int)0;
              }
            }
            int _8638 = (int)0;
            int _8639 = _3955;
            for (int _3990 = _8638; _3990 < _8639; ++_3990)
            {
              {
                ++ _ptr__3964[safe_add( safe_add( _3963,_ptr__3957[_3990] ),(int)1 )];
              }
            }
            int _8640 = (int)0;
            int _8641 = mdimj;
            for (int _3991 = _8640; _3991 < _8641; ++_3991)
            {
              {
                _ptr__3964[safe_add( safe_add( _3963,_3991 ),(int)1 )] += _ptr__3964[safe_add( _3963,_3991 )];
              }
            }
            int _8642 = (int)0;
            int _8643 = _3955;
            for (int _3992 = _8642; _3992 < _8643; ++_3992)
            {
              {
                _ptr__3964[safe_add( _3962,_ptr__3964[safe_add( _3963,_ptr__3957[_3992] )] )] = _3992;
                ++ _ptr__3964[safe_add( _3963,_ptr__3957[_3992] )];
              }
            }
            int _8644 = (int)0;
            int _8645 = _3960;
            for (int _3993 = _8644; _3993 < _8645; ++_3993)
            {
              {
                _ptr__3964[(safe_add( _3963,_3960 ) - _3993)] = _ptr__3964[((safe_add( _3963,_3960 ) - _3993) - (int)1)];
              }
            }
            _ptr__3964[_3963] = (int)0;
          }
        }
      }
      if (((_3944 / _3953) == _3952))
      {
        {
          int _3994 = (int)0;
          {
            int _3995 = (int)0;
            while ( (_3995 < _3955) )
            {
              {
                ++ _3995;
                while ( ((_3995 < _3955) && (_ptr__3957[_ptr__3964[(safe_add( _3962,_3995 ) - (int)1)]] == _ptr__3957[_ptr__3964[safe_add( _3962,_3995 )]])) )
                {
                  {
                    ++ _3995;
                  }
                }
                ++ _3994;
              }
            }
          }
          _3967 = safe_mul( _3994,_3953 );
          _3966 = safe_mul( _3955,_3953 );
          bool _3996 = (_3994 < _3960);
          int _3997 = _3939->alloci32(safe_add( _3967,(int)1 ));
          int _8646;
          bool _8647 = _3996;
          if (_8647)
          {
            _8646 = (int)1;
          }
          else
          {
            _8646 = (int)0;
          }
          _3939->pushi32(_8646);
          _3939->pushi32(_3966);
          _3939->pushi32(_3967);
          _3939->pushi32(_3953);
          _3939->pushi32(_3960);
          _3939->pushi32((int)2);
          int _3998 = _3939->alloci64(_3966);
          int _3999 = _3939->alloci64(_3967);
          int _4000 = _3939->allocf64(_3966);
          int _4001 = _3939->allocf64(_3967);
          std::shared_ptr< monty::ndarray< int,1 > > _4002 = mosek::fusion::p_WorkStack::_get_impl(_3939)->i32;
          _checked_ptr_1<int> _ptr__4002(_4002 ? _4002->raw() : nullptr,_4002 ? _4002->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4003 = mosek::fusion::p_WorkStack::_get_impl(_3939)->i64;
          _checked_ptr_1<long long> _ptr__4003(_4003 ? _4003->raw() : nullptr,_4003 ? _4003->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4004 = mosek::fusion::p_WorkStack::_get_impl(_3939)->f64;
          _checked_ptr_1<double> _ptr__4004(_4004 ? _4004->raw() : nullptr,_4004 ? _4004->size(0) : 0);
          _ptr__4002[_3997] = (int)0;
          int _4005 = (int)0;
          int _4006 = (int)0;
          int _8648 = (int)0;
          int _8649 = _3953;
          for (int _4007 = _8648; _4007 < _8649; ++_4007)
          {
            {
              int _4008 = (int)0;
              while ( (_4008 < _3955) )
              {
                {
                  int _4009 = _4008;
                  ++ _4008;
                  while ( ((_4008 < _3955) && (_ptr__3957[_ptr__3964[safe_add( _3962,_4009 )]] == _ptr__3957[_ptr__3964[safe_add( _3962,_4008 )]])) )
                  {
                    {
                      ++ _4008;
                    }
                  }
                  int _4010 = _ptr__3957[_ptr__3964[safe_add( _3962,_4009 )]];
                  int _8650 = _4009;
                  int _8651 = _4008;
                  for (int _4011 = _8650; _4011 < _8651; ++_4011)
                  {
                    {
                      int _4012 = _ptr__3956[_ptr__3964[safe_add( _3962,_4011 )]];
                      _ptr__4003[safe_add( _3998,_4006 )] = _ptr__3965[safe_add( safe_add( _3945,safe_mul( _4007,_3952 ) ),_4012 )];
                      _ptr__4004[safe_add( _4000,_4006 )] = _ptr__3958[_ptr__3964[safe_add( _3962,_4011 )]];
                      ++ _4006;
                    }
                  }
                  _ptr__4004[safe_add( _4001,_4005 )] = 0.0;
                  _ptr__4003[safe_add( _3999,_4005 )] = safe_add( safe_mul( _4007,_3960 ),_4010 );
                  _ptr__4002[safe_add( safe_add( _3997,_4005 ),(int)1 )] = _4006;
                  ++ _4005;
                }
              }
            }
          }
          if ((!_3996))
          {
            {
              _3939->popi64(_3967);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _8652 = (int)0;
          int _8653 = safe_add( _3953,(int)1 );
          for (int _4013 = _8652; _4013 < _8653; ++_4013)
          {
            {
              _ptr__3964[safe_add( _3954,_4013 )] = (int)0;
            }
          }
          if ((_3950 == (int)1))
          {
            {
              int _8654 = (int)0;
              int _8655 = _3944;
              for (int _4014 = _8654; _4014 < _8655; ++_4014)
              {
                {
                  _ptr__3964[safe_add( _3947,_4014 )] = (int)0;
                }
              }
              int _8656 = (int)0;
              int _8657 = _3944;
              for (int _4015 = _8656; _4015 < _8657; ++_4015)
              {
                {
                  _ptr__3964[safe_add( _3948,_4015 )] = (int)_ptr__3965[safe_add( _3946,_4015 )];
                }
              }
              _ptr__3964[_3954] = (int)0;
              _ptr__3964[safe_add( _3954,(int)1 )] = _3944;
            }
          }
          else
          {
            {
              int _8658 = (int)0;
              int _8659 = _3944;
              for (int _4016 = _8658; _4016 < _8659; ++_4016)
              {
                {
                  _ptr__3964[safe_add( _3947,_4016 )] = (int)(_ptr__3965[safe_add( _3946,_4016 )] / _ptr__3949[(int)1]);
                }
              }
              int _8660 = (int)0;
              int _8661 = _3944;
              for (int _4017 = _8660; _4017 < _8661; ++_4017)
              {
                {
                  _ptr__3964[safe_add( _3948,_4017 )] = (int)(_ptr__3965[safe_add( _3946,_4017 )] % _ptr__3949[(int)1]);
                }
              }
              _ptr__3964[_3954] = (int)0;
              int _8662 = (int)0;
              int _8663 = _3944;
              for (int _4018 = _8662; _4018 < _8663; ++_4018)
              {
                {
                  ++ _ptr__3964[safe_add( safe_add( _3954,_ptr__3964[safe_add( _3947,_4018 )] ),(int)1 )];
                }
              }
              int _8664 = (int)0;
              int _8665 = _3953;
              for (int _4019 = _8664; _4019 < _8665; ++_4019)
              {
                {
                  _ptr__3964[safe_add( safe_add( _3954,_4019 ),(int)1 )] += _ptr__3964[safe_add( _3954,_4019 )];
                }
              }
            }
          }
          int _8666 = (int)0;
          int _8667 = _3953;
          for (int _4020 = _8666; _4020 < _8667; ++_4020)
          {
            {
              int _8668 = (int)0;
              int _8669 = mdimj;
              for (int _4021 = _8668; _4021 < _8669; ++_4021)
              {
                {
                  int _4022 = (int)0;
                  int _4023 = _ptr__3964[safe_add( safe_add( _3954,_4020 ),(int)1 )];
                  int _4024 = _ptr__3964[safe_add( safe_add( _3963,_4021 ),(int)1 )];
                  int _4025 = _ptr__3964[safe_add( _3954,_4020 )];
                  int _4026 = _ptr__3964[safe_add( _3963,_4021 )];
                  while ( ((_4026 < _4024) && (_4025 < _4023)) )
                  {
                    {
                      if ((_ptr__3956[_ptr__3964[safe_add( _3962,_4026 )]] < _ptr__3964[safe_add( _3948,_4025 )]))
                      {
                        {
                          ++ _4026;
                        }
                      }
                      else if((_ptr__3956[_ptr__3964[safe_add( _3962,_4026 )]] > _ptr__3964[safe_add( _3948,_4025 )]))
                      {
                        {
                          ++ _4025;
                        }
                      }
                      else
                      {
                        {
                          ++ _4022;
                          ++ _4026;
                          ++ _4025;
                        }
                      }
                    }
                  }
                  if ((_4022 > (int)0))
                  {
                    {
                      _3966 += _4022;
                      ++ _3967;
                    }
                  }
                  {}
                }
              }
            }
          }
          int _4027 = _3939->alloci32(safe_add( _3967,(int)1 ));
          bool _8670;
          bool _8671 = (_3967 < safe_mul( _3952,mdimi ));
          if (_8671)
          {
            _8670 = true;
          }
          else
          {
            _8670 = false;
          }
          bool _4028 = _8670;
          int _8672;
          bool _8673 = _4028;
          if (_8673)
          {
            _8672 = (int)1;
          }
          else
          {
            _8672 = (int)0;
          }
          _3939->pushi32(_8672);
          _3939->pushi32(_3966);
          _3939->pushi32(_3967);
          _3939->pushi32(_3953);
          _3939->pushi32(mdimj);
          _3939->pushi32((int)2);
          int _4029 = _3939->alloci64(_3966);
          int _4030 = _3939->alloci64(_3967);
          int _4031 = _3939->allocf64(_3966);
          int _4032 = _3939->allocf64(_3967);
          std::shared_ptr< monty::ndarray< int,1 > > _4033 = mosek::fusion::p_WorkStack::_get_impl(_3939)->i32;
          _checked_ptr_1<int> _ptr__4033(_4033 ? _4033->raw() : nullptr,_4033 ? _4033->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4034 = mosek::fusion::p_WorkStack::_get_impl(_3939)->i64;
          _checked_ptr_1<long long> _ptr__4034(_4034 ? _4034->raw() : nullptr,_4034 ? _4034->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4035 = mosek::fusion::p_WorkStack::_get_impl(_3939)->f64;
          _checked_ptr_1<double> _ptr__4035(_4035 ? _4035->raw() : nullptr,_4035 ? _4035->size(0) : 0);
          {
            int _4036 = (int)0;
            int _4037 = (int)0;
            int _4038 = (int)0;
            _ptr__4033[_4027] = (int)0;
            int _8674 = (int)0;
            int _8675 = _3967;
            for (int _4039 = _8674; _4039 < _8675; ++_4039)
            {
              {
                _ptr__4035[safe_add( _4032,_4039 )] = 0.0;
              }
            }
            int _8676 = (int)0;
            int _8677 = _3953;
            for (int _4040 = _8676; _4040 < _8677; ++_4040)
            {
              {
                int _8678 = (int)0;
                int _8679 = mdimj;
                for (int _4041 = _8678; _4041 < _8679; ++_4041)
                {
                  {
                    int _4042 = (int)0;
                    int _4043 = _ptr__3964[safe_add( safe_add( _3954,_4040 ),(int)1 )];
                    int _4044 = _ptr__3964[safe_add( safe_add( _3963,_4041 ),(int)1 )];
                    int _4045 = _ptr__3964[safe_add( _3954,_4040 )];
                    int _4046 = _ptr__3964[safe_add( _3963,_4041 )];
                    while ( ((_4046 < _4044) && (_4045 < _4043)) )
                    {
                      {
                        if ((_ptr__3956[_ptr__3964[safe_add( _3962,_4046 )]] < _ptr__3964[safe_add( _3948,_4045 )]))
                        {
                          {
                            ++ _4046;
                          }
                        }
                        else if((_ptr__3956[_ptr__3964[safe_add( _3962,_4046 )]] > _ptr__3964[safe_add( _3948,_4045 )]))
                        {
                          {
                            ++ _4045;
                          }
                        }
                        else
                        {
                          {
                            _ptr__4034[safe_add( _4029,_4038 )] = _ptr__3965[safe_add( _3945,_4045 )];
                            _ptr__4035[safe_add( _4031,_4038 )] = _ptr__3958[_ptr__3964[safe_add( _3962,_4046 )]];
                            ++ _4042;
                            ++ _4038;
                            ++ _4046;
                            ++ _4045;
                          }
                        }
                      }
                    }
                    if ((_4042 > (int)0))
                    {
                      {
                        _ptr__4033[safe_add( safe_add( _4027,_4037 ),(int)1 )] = _4038;
                        _ptr__4034[safe_add( _4030,_4037 )] = _4036;
                        ++ _4037;
                      }
                    }
                    {}
                    ++ _4036;
                  }
                }
              }
            }
          }
          if ((!_4028))
          {
            {
              _3939->popi64(_3967);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_3940)->pi32 = _3942;
  mosek::fusion::p_WorkStack::_get_impl(_3940)->pi64 = _3943;
}
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _4047,monty::rc_ptr< ::mosek::fusion::WorkStack > _4048,monty::rc_ptr< ::mosek::fusion::WorkStack > _4049) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_4047,_4048,_4049); }void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _4047,monty::rc_ptr< ::mosek::fusion::WorkStack > _4048,monty::rc_ptr< ::mosek::fusion::WorkStack > _4049){
  int _4050 = x->numInst();
  std::shared_ptr< monty::ndarray< int,1 > > _4051 = x->getShape();
  _checked_ptr_1<int> _ptr__4051(_4051 ? _4051->raw() : nullptr,_4051 ? _4051->size(0) : 0);
  int _4052 = (int)((_4051)->size(0));
  int _4053 = _4049->alloci64(_4050);
  int _4054 = _4049->alloci64(_4050);
  int _4055 = _4049->alloci32(_4050);
  int _4056 = _4049->alloci32(_4050);
  int _4057 = _4049->alloci32(_4050);
  int _4058 = _4049->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _4059 = x->getShape();
  _checked_ptr_1<int> _ptr__4059(_4059 ? _4059->raw() : nullptr,_4059 ? _4059->size(0) : 0);
  int _4060 = (int)((_4059)->size(0));
  int _8680;
  bool _8681 = (_4060 == (int)1);
  if (_8681)
  {
    _8680 = (int)1;
  }
  else
  {
    _8680 = _ptr__4059[(int)1];
  }
  int _4061 = _8680;
  int _4062 = _ptr__4059[(int)0];
  int _4063 = _4049->alloci32(safe_add( _4061,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _4064 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__4064(_4064 ? _4064->raw() : nullptr,_4064 ? _4064->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4065 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__4065(_4065 ? _4065->raw() : nullptr,_4065 ? _4065->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4066 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__4066(_4066 ? _4066->raw() : nullptr,_4066 ? _4066->size(0) : 0);
  int _4067 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _4068 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int _4069 = (int)0;
  int _4070 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4071 = mosek::fusion::p_WorkStack::_get_impl(_4049)->i32;
  _checked_ptr_1<int> _ptr__4071(_4071 ? _4071->raw() : nullptr,_4071 ? _4071->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4072 = mosek::fusion::p_WorkStack::_get_impl(_4049)->i64;
  _checked_ptr_1<long long> _ptr__4072(_4072 ? _4072->raw() : nullptr,_4072 ? _4072->size(0) : 0);
  int _4073 = (int)((_4066)->size(0));
  x->inst(_4054,_4072,_4053,_4072);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int _8682 = (int)0;
        int _8683 = safe_add( _4067,(int)1 );
        for (int _4074 = _8682; _4074 < _8683; ++_4074)
        {
          {
            _ptr__4071[safe_add( _4058,_4074 )] = (int)0;
          }
        }
        int _8684 = (int)0;
        int _8685 = (int)((_4064)->size(0));
        for (int _4075 = _8684; _4075 < _8685; ++_4075)
        {
          {
            ++ _ptr__4071[safe_add( safe_add( _4058,_ptr__4064[_4075] ),(int)1 )];
          }
        }
        int _8686 = (int)0;
        int _8687 = _4067;
        for (int _4076 = _8686; _4076 < _8687; ++_4076)
        {
          {
            _ptr__4071[safe_add( safe_add( _4058,_4076 ),(int)1 )] += _ptr__4071[safe_add( _4058,_4076 )];
          }
        }
        if ((_4060 == (int)1))
        {
          {
            int _8688 = (int)0;
            int _8689 = _4050;
            for (int _4077 = _8688; _4077 < _8689; ++_4077)
            {
              {
                _ptr__4071[safe_add( _4055,_4077 )] = (int)_ptr__4072[safe_add( _4054,_4077 )];
              }
            }
            int _8690 = (int)0;
            int _8691 = _4050;
            for (int _4078 = _8690; _4078 < _8691; ++_4078)
            {
              {
                _ptr__4071[safe_add( _4056,_4078 )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int _8692 = (int)0;
            int _8693 = _4050;
            for (int _4079 = _8692; _4079 < _8693; ++_4079)
            {
              {
                _ptr__4071[safe_add( _4055,_4079 )] = (int)(_ptr__4072[safe_add( _4054,_4079 )] / _4061);
              }
            }
            int _8694 = (int)0;
            int _8695 = _4050;
            for (int _4080 = _8694; _4080 < _8695; ++_4080)
            {
              {
                _ptr__4071[safe_add( _4056,_4080 )] = (int)(_ptr__4072[safe_add( _4054,_4080 )] % _4061);
              }
            }
          }
        }
        if ((_4060 > (int)1))
        {
          {
            int _8696 = (int)0;
            int _8697 = safe_add( _4061,(int)1 );
            for (int _4081 = _8696; _4081 < _8697; ++_4081)
            {
              {
                _ptr__4071[safe_add( _4063,_4081 )] = (int)0;
              }
            }
            int _8698 = (int)0;
            int _8699 = _4050;
            for (int _4082 = _8698; _4082 < _8699; ++_4082)
            {
              {
                ++ _ptr__4071[safe_add( safe_add( _4063,_ptr__4071[safe_add( _4056,_4082 )] ),(int)1 )];
              }
            }
            int _8700 = (int)0;
            int _8701 = _4061;
            for (int _4083 = _8700; _4083 < _8701; ++_4083)
            {
              {
                _ptr__4071[safe_add( safe_add( _4063,_4083 ),(int)1 )] += _ptr__4071[safe_add( _4063,_4083 )];
              }
            }
            int _8702 = (int)0;
            int _8703 = _4050;
            for (int _4084 = _8702; _4084 < _8703; ++_4084)
            {
              {
                _ptr__4071[safe_add( _4057,_ptr__4071[safe_add( _4063,_ptr__4071[safe_add( _4056,_4084 )] )] )] = _4084;
                ++ _ptr__4071[safe_add( _4063,_ptr__4071[safe_add( _4056,_4084 )] )];
              }
            }
            int _8704 = (int)0;
            int _8705 = _4061;
            for (int _4085 = _8704; _4085 < _8705; ++_4085)
            {
              {
                _ptr__4071[(safe_add( _4063,_4061 ) - _4085)] = _ptr__4071[((safe_add( _4063,_4061 ) - _4085) - (int)1)];
              }
            }
            _ptr__4071[_4063] = (int)0;
          }
        }
        else
        {
          {
            _ptr__4071[_4063] = (int)0;
            _ptr__4071[safe_add( _4063,(int)1 )] = _4050;
            int _8706 = (int)0;
            int _8707 = _4050;
            for (int _4086 = _8706; _4086 < _8707; ++_4086)
            {
              {
                _ptr__4071[safe_add( _4057,_4086 )] = _4086;
              }
            }
          }
        }
        int _8708 = (int)0;
        int _8709 = _4067;
        for (int _4087 = _8708; _4087 < _8709; ++_4087)
        {
          {
            int _8710 = (int)0;
            int _8711 = _4061;
            for (int _4088 = _8710; _4088 < _8711; ++_4088)
            {
              {
                int _4089 = (int)0;
                int _4090 = _ptr__4071[safe_add( safe_add( _4063,_4088 ),(int)1 )];
                int _4091 = _ptr__4071[safe_add( safe_add( _4058,_4087 ),(int)1 )];
                int _4092 = _ptr__4071[safe_add( _4063,_4088 )];
                int _4093 = _ptr__4071[safe_add( _4058,_4087 )];
                while ( ((_4093 < _4091) && (_4092 < _4090)) )
                {
                  {
                    if ((_ptr__4065[_4093] < _ptr__4071[safe_add( _4055,_ptr__4071[safe_add( _4057,_4092 )] )]))
                    {
                      {
                        ++ _4093;
                      }
                    }
                    else if((_ptr__4065[_4093] > _ptr__4071[safe_add( _4055,_ptr__4071[safe_add( _4057,_4092 )] )]))
                    {
                      {
                        ++ _4092;
                      }
                    }
                    else
                    {
                      {
                        ++ _4089;
                        ++ _4093;
                        ++ _4092;
                      }
                    }
                  }
                }
                if ((_4089 > (int)0))
                {
                  {
                    _4069 += _4089;
                    ++ _4070;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _4069 = safe_mul( _4073,_4061 );
      int _4094 = (int)0;
      while ( (_4094 < _4073) )
      {
        {
          int _4095 = safe_add( _4094,(int)1 );
          while ( ((_4095 < _4073) && (_ptr__4064[_4094] == _ptr__4064[_4095])) )
          {
            {
              ++ _4095;
            }
          }
          ++ _4070;
          _4094 = _4095;
        }
      }
      _4070 *= _4061;
    }
  }
  bool _8712;
  bool _8713 = (_4070 < safe_mul( _4061,_4067 ));
  if (_8713)
  {
    _8712 = true;
  }
  else
  {
    _8712 = false;
  }
  bool _4096 = _8712;
  int _4097 = _4060;
  _4047->alloc_expr(_4097,_4070,_4069,_4096);
  int _4098 = mosek::fusion::p_WorkStack::_get_impl(_4047)->ptr_base;
  int _4099 = mosek::fusion::p_WorkStack::_get_impl(_4047)->shape_base;
  int _4100 = mosek::fusion::p_WorkStack::_get_impl(_4047)->nidxs_base;
  int _8714;
  bool _8715 = _4096;
  if (_8715)
  {
    _8714 = mosek::fusion::p_WorkStack::_get_impl(_4047)->sp_base;
  }
  else
  {
    _8714 = _4047->alloci64(_4070);
  }
  int _4101 = _8714;
  int _4102 = mosek::fusion::p_WorkStack::_get_impl(_4047)->cof_base;
  int _4103 = mosek::fusion::p_WorkStack::_get_impl(_4047)->bfix_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4104 = mosek::fusion::p_WorkStack::_get_impl(_4047)->i32;
  _checked_ptr_1<int> _ptr__4104(_4104 ? _4104->raw() : nullptr,_4104 ? _4104->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4105 = mosek::fusion::p_WorkStack::_get_impl(_4047)->i64;
  _checked_ptr_1<long long> _ptr__4105(_4105 ? _4105->raw() : nullptr,_4105 ? _4105->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4106 = mosek::fusion::p_WorkStack::_get_impl(_4047)->f64;
  _checked_ptr_1<double> _ptr__4106(_4106 ? _4106->raw() : nullptr,_4106 ? _4106->size(0) : 0);
  _ptr__4104[_4099] = _4067;
  if ((_4060 > (int)1))
  {
    {
      _ptr__4104[safe_add( _4099,(int)1 )] = _4061;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int _4107 = (int)0;
      int _4108 = (int)0;
      int _4109 = (int)0;
      _ptr__4104[_4098] = (int)0;
      int _8716 = (int)0;
      int _8717 = _4070;
      for (int _4110 = _8716; _4110 < _8717; ++_4110)
      {
        {
          _ptr__4106[safe_add( _4103,_4110 )] = 0.0;
        }
      }
      int _8718 = (int)0;
      int _8719 = _4067;
      for (int _4111 = _8718; _4111 < _8719; ++_4111)
      {
        {
          int _8720 = (int)0;
          int _8721 = _4061;
          for (int _4112 = _8720; _4112 < _8721; ++_4112)
          {
            {
              int _4113 = (int)0;
              int _4114 = _ptr__4071[safe_add( safe_add( _4063,_4112 ),(int)1 )];
              int _4115 = _ptr__4071[safe_add( safe_add( _4058,_4111 ),(int)1 )];
              int _4116 = _ptr__4071[safe_add( _4063,_4112 )];
              int _4117 = _ptr__4071[safe_add( _4058,_4111 )];
              while ( ((_4117 < _4115) && (_4116 < _4114)) )
              {
                {
                  if ((_ptr__4065[_4117] < _ptr__4071[safe_add( _4055,_ptr__4071[safe_add( _4057,_4116 )] )]))
                  {
                    {
                      ++ _4117;
                    }
                  }
                  else if((_ptr__4065[_4117] > _ptr__4071[safe_add( _4055,_ptr__4071[safe_add( _4057,_4116 )] )]))
                  {
                    {
                      ++ _4116;
                    }
                  }
                  else
                  {
                    {
                      _ptr__4105[safe_add( _4100,_4109 )] = _ptr__4072[safe_add( _4053,_ptr__4071[safe_add( _4057,_4116 )] )];
                      _ptr__4106[safe_add( _4102,_4109 )] = _ptr__4066[_4117];
                      ++ _4113;
                      ++ _4109;
                      ++ _4117;
                      ++ _4116;
                    }
                  }
                }
              }
              if ((_4113 > (int)0))
              {
                {
                  _ptr__4104[safe_add( safe_add( _4098,_4108 ),(int)1 )] = _4109;
                  _ptr__4105[safe_add( _4101,_4108 )] = _4107;
                  ++ _4108;
                }
              }
              {}
              ++ _4107;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _4118 = (int)0;
      int _4119 = (int)0;
      _ptr__4104[_4098] = (int)0;
      int _4120 = (int)0;
      while ( (_4120 < _4073) )
      {
        {
          int _4121 = safe_add( _4120,(int)1 );
          while ( ((_4121 < _4073) && (_ptr__4064[_4121] == _ptr__4064[_4120])) )
          {
            {
              ++ _4121;
            }
          }
          int _8722 = (int)0;
          int _8723 = _4061;
          for (int _4122 = _8722; _4122 < _8723; ++_4122)
          {
            {
              int _8724 = _4120;
              int _8725 = _4121;
              for (int _4123 = _8724; _4123 < _8725; ++_4123)
              {
                {
                  _ptr__4105[safe_add( _4100,_4118 )] = _ptr__4072[safe_add( safe_add( _4053,safe_mul( _ptr__4065[_4123],_4061 ) ),_4122 )];
                  _ptr__4106[safe_add( _4102,_4118 )] = _ptr__4066[_4123];
                  ++ _4118;
                }
              }
              _ptr__4104[safe_add( safe_add( _4098,_4119 ),(int)1 )] = _4118;
              _ptr__4105[safe_add( _4101,_4119 )] = safe_add( safe_mul( _ptr__4064[_4120],_4061 ),_4122 );
              _ptr__4106[safe_add( _4103,_4119 )] = (int)0;
              ++ _4119;
            }
          }
          _4120 = _4121;
        }
      }
    }
  }
  if ((!_4096))
  {
    {
      _4047->popi64(_4070);
    }
  }
  {}
  _4049->clear();
}
void mosek::fusion::p_ExprMulVar::validate(int _4124,int _4125,std::shared_ptr< monty::ndarray< int,1 > > _4126,std::shared_ptr< monty::ndarray< int,1 > > _4127,std::shared_ptr< monty::ndarray< double,1 > > _4128){
  _checked_ptr_1<int> _ptr__4126(_4126 ? _4126->raw() : nullptr, _4126 ? _4126->size(0) : 0);
  _checked_ptr_1<int> _ptr__4127(_4127 ? _4127->raw() : nullptr, _4127 ? _4127->size(0) : 0);
  _checked_ptr_1<double> _ptr__4128(_4128 ? _4128->raw() : nullptr, _4128 ? _4128->size(0) : 0);
  bool _4129 = true;
  {
    int _8726 = (int)0;
    int _8727 = (int)((_4126)->size(0));
    for (int _4130 = _8726; _4130 < _8727; ++_4130)
    {
      {
        if (((_ptr__4126[_4130] < (int)0) || ((_ptr__4126[_4130] >= _4124) || ((_ptr__4127[_4130] < (int)0) || (_ptr__4127[_4130] >= _4125)))))
        {
          {
            _4129 = false;
          }
        }
        {}
      }
    }
    int _8728 = (int)1;
    int _8729 = (int)((_4126)->size(0));
    for (int _4131 = _8728; _4131 < _8729; ++_4131)
    {
      {
        if (((_ptr__4126[(_4131 - (int)1)] > _ptr__4126[_4131]) || ((_ptr__4126[(_4131 - (int)1)] == _ptr__4126[_4131]) && (_ptr__4127[(_4131 - (int)1)] >= _ptr__4127[_4131]))))
        {
          {
            _4129 = false;
          }
        }
        {}
      }
    }
  }
  if ((!_4129))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulVar::resshape(int _4132,int _4133,std::shared_ptr< monty::ndarray< int,1 > > _4134,bool _4135){
  _checked_ptr_1<int> _ptr__4134(_4134 ? _4134->raw() : nullptr, _4134 ? _4134->size(0) : 0);
  if (_4135)
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4132),(int)(_ptr__4134[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__4134[(int)0]),(int)(_4133)});
    }
  }
}
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVar::toString(){
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
void mosek::fusion::p_ExprMulVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _4136,    int _4137,    std::shared_ptr< monty::ndarray< int,1 > > _4138,    std::shared_ptr< monty::ndarray< int,1 > > _4139,    std::shared_ptr< monty::ndarray< double,1 > > _4140,    monty::rc_ptr< ::mosek::fusion::Variable > _4141){ return new mosek::fusion::ExprMulScalarVar(_4136,_4137,_4138,_4139,_4140,_4141); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _4136,    int _4137,    std::shared_ptr< monty::ndarray< int,1 > > _4138,    std::shared_ptr< monty::ndarray< int,1 > > _4139,    std::shared_ptr< monty::ndarray< double,1 > > _4140,    monty::rc_ptr< ::mosek::fusion::Variable > _4141) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_4136,_4137,_4138,_4139,_4140,_4141); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _4136,    int _4137,    std::shared_ptr< monty::ndarray< int,1 > > _4138,    std::shared_ptr< monty::ndarray< int,1 > > _4139,    std::shared_ptr< monty::ndarray< double,1 > > _4140,    monty::rc_ptr< ::mosek::fusion::Variable > _4141){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4138(_4138 ? _4138->raw() : nullptr, _4138 ? _4138->size(0) : 0);
    _checked_ptr_1<int> _ptr__4139(_4139 ? _4139->raw() : nullptr, _4139 ? _4139->size(0) : 0);
    _checked_ptr_1<double> _ptr__4140(_4140 ? _4140->raw() : nullptr, _4140 ? _4140->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_4136,_4137,::mosek::fusion::Utils::Tools::arraycopy(_4138),::mosek::fusion::Utils::Tools::arraycopy(_4139),::mosek::fusion::Utils::Tools::arraycopy(_4140),_4141,(int)1);
    if ((_4141->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_4136 < (int)0) || ((_4137 < (int)0) || (((int)((_4138)->size(0)) != (int)((_4139)->size(0))) || ((int)((_4138)->size(0)) != (int)((_4140)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _4142 = false;
    int _8730 = (int)0;
    int _8731 = (int)((_4138)->size(0));
    for (int _4143 = _8730; _4143 < _8731; ++_4143)
    {
      {
        if (((_ptr__4138[_4143] < (int)0) || ((_ptr__4138[_4143] >= _4136) || ((_ptr__4139[_4143] < (int)0) || (_ptr__4139[_4143] >= _4137)))))
        {
          {
            _4142 = true;
          }
        }
        {}
      }
    }
    if (_4142)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _4144 = false;
    int _8732 = (int)1;
    int _8733 = (int)((_4138)->size(0));
    for (int _4145 = _8732; _4145 < _8733; ++_4145)
    {
      {
        if (((_ptr__4138[_4145] < _ptr__4138[(_4145 - (int)1)]) || ((_ptr__4138[_4145] == _ptr__4138[(_4145 - (int)1)]) && (_ptr__4139[_4145] <= _ptr__4139[(_4145 - (int)1)]))))
        {
          {
            _4144 = true;
          }
        }
        {}
      }
    }
    if (_4144)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _4146,    int _4147,    std::shared_ptr< monty::ndarray< int,1 > > _4148,    std::shared_ptr< monty::ndarray< int,1 > > _4149,    std::shared_ptr< monty::ndarray< double,1 > > _4150,    monty::rc_ptr< ::mosek::fusion::Variable > _4151,    int _4152){ return new mosek::fusion::ExprMulScalarVar(_4146,_4147,_4148,_4149,_4150,_4151,_4152); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _4146,    int _4147,    std::shared_ptr< monty::ndarray< int,1 > > _4148,    std::shared_ptr< monty::ndarray< int,1 > > _4149,    std::shared_ptr< monty::ndarray< double,1 > > _4150,    monty::rc_ptr< ::mosek::fusion::Variable > _4151,    int _4152) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_4146,_4147,_4148,_4149,_4150,_4151,_4152); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _4146,    int _4147,    std::shared_ptr< monty::ndarray< int,1 > > _4148,    std::shared_ptr< monty::ndarray< int,1 > > _4149,    std::shared_ptr< monty::ndarray< double,1 > > _4150,    monty::rc_ptr< ::mosek::fusion::Variable > _4151,    int _4152){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4148(_4148 ? _4148->raw() : nullptr, _4148 ? _4148->size(0) : 0);
    _checked_ptr_1<int> _ptr__4149(_4149 ? _4149->raw() : nullptr, _4149 ? _4149->size(0) : 0);
    _checked_ptr_1<double> _ptr__4150(_4150 ? _4150->raw() : nullptr, _4150 ? _4150->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4146),(int)(_4147)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _4146;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _4147;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _4148;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _4149;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _4150;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _4151;
  }
}void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4153,monty::rc_ptr< ::mosek::fusion::WorkStack > _4154,monty::rc_ptr< ::mosek::fusion::WorkStack > _4155) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_4153,_4154,_4155); }void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4153,monty::rc_ptr< ::mosek::fusion::WorkStack > _4154,monty::rc_ptr< ::mosek::fusion::WorkStack > _4155){
  if ((x->numInst() == (int)0))
  {
    {
      _4153->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_4153)->i32)(mosek::fusion::p_WorkStack::_get_impl(_4153)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4153)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4153)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4156 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1)));
      _checked_ptr_1<long long> _ptr__4156(_4156 ? _4156->raw() : nullptr,_4156 ? _4156->size(0) : 0);
      x->inst((int)0,_4156);
      long long _4157 = _ptr__4156[(int)0];
      int _4158 = (int)((msubi)->size(0));
      int _4159 = _4158;
      bool _4160 = (_4158 < safe_mul( mdimi,mdimj ));
      _4153->alloc_expr((int)2,_4158,_4159,_4160);
      int _4161 = mosek::fusion::p_WorkStack::_get_impl(_4153)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4153)->i32)(mosek::fusion::p_WorkStack::_get_impl(_4153)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4153)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4153)->shape_base,(int)1 ))) = mdimj;
      int _4162 = mosek::fusion::p_WorkStack::_get_impl(_4153)->nidxs_base;
      int _4163 = mosek::fusion::p_WorkStack::_get_impl(_4153)->sp_base;
      int _4164 = mosek::fusion::p_WorkStack::_get_impl(_4153)->cof_base;
      int _4165 = mosek::fusion::p_WorkStack::_get_impl(_4153)->bfix_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4166 = mosek::fusion::p_WorkStack::_get_impl(_4153)->i32;
      _checked_ptr_1<int> _ptr__4166(_4166 ? _4166->raw() : nullptr,_4166 ? _4166->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4167 = mosek::fusion::p_WorkStack::_get_impl(_4153)->i64;
      _checked_ptr_1<long long> _ptr__4167(_4167 ? _4167->raw() : nullptr,_4167 ? _4167->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4168 = mosek::fusion::p_WorkStack::_get_impl(_4153)->f64;
      _checked_ptr_1<double> _ptr__4168(_4168 ? _4168->raw() : nullptr,_4168 ? _4168->size(0) : 0);
      {
        int _8734 = (int)0;
        int _8735 = _4158;
        for (int _4169 = _8734; _4169 < _8735; ++_4169)
        {
          {
            _ptr__4168[safe_add( _4165,_4169 )] = (int)0;
          }
        }
        int _8736 = (int)0;
        int _8737 = _4159;
        for (int _4170 = _8736; _4170 < _8737; ++_4170)
        {
          {
            _ptr__4168[safe_add( _4164,_4170 )] = ((*mcof)(_4170));
          }
        }
        int _8738 = (int)0;
        int _8739 = _4159;
        for (int _4171 = _8738; _4171 < _8739; ++_4171)
        {
          {
            _ptr__4167[safe_add( _4162,_4171 )] = _4157;
          }
        }
        if (_4160)
        {
          {
            int _8740 = (int)0;
            int _8741 = _4158;
            for (int _4172 = _8740; _4172 < _8741; ++_4172)
            {
              {
                _ptr__4167[safe_add( _4163,_4172 )] = safe_add( safe_mul( ((*msubi)(_4172)),mdimj ),((*msubj)(_4172)) );
              }
            }
          }
        }
        {}
        int _8742 = (int)0;
        int _8743 = safe_add( _4158,(int)1 );
        for (int _4173 = _8742; _4173 < _8743; ++_4173)
        {
          {
            _ptr__4166[safe_add( _4161,_4173 )] = _4173;
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulScalarVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _4174,    double _4175){ return new mosek::fusion::ExprMulVarScalarConst(_4174,_4175); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _4174,    double _4175) :    ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this)){ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_4174,_4175); }void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _4174,    double _4175){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4174->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _4174;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _4175;
  }
}void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4176,monty::rc_ptr< ::mosek::fusion::WorkStack > _4177,monty::rc_ptr< ::mosek::fusion::WorkStack > _4178) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_4176,_4177,_4178); }void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4176,monty::rc_ptr< ::mosek::fusion::WorkStack > _4177,monty::rc_ptr< ::mosek::fusion::WorkStack > _4178){
  int _4179 = x->numInst();
  int _4180 = _4179;
  std::shared_ptr< monty::ndarray< int,1 > > _4181 = x->getShape();
  _checked_ptr_1<int> _ptr__4181(_4181 ? _4181->raw() : nullptr,_4181 ? _4181->size(0) : 0);
  int _4182 = (int)((_4181)->size(0));
  int _4183 = _4176->alloci32(safe_add( _4180,(int)1 ));
  int _4184 = _4176->alloci64(_4179);
  bool _4185 = (::mosek::fusion::p_Set::size(_4181) > _4180);
  int _8744;
  bool _8745 = _4185;
  if (_8745)
  {
    _8744 = _4176->alloci64(_4180);
  }
  else
  {
    _8744 = (int)0;
  }
  int _4186 = _8744;
  int _4187 = _4176->allocf64(_4179);
  int _4188 = _4176->allocf64(_4180);
  if (_4185)
  {
    {
      x->inst(_4186,mosek::fusion::p_WorkStack::_get_impl(_4176)->i64,_4184,mosek::fusion::p_WorkStack::_get_impl(_4176)->i64);
    }
  }
  else
  {
    {
      x->inst(_4184,mosek::fusion::p_WorkStack::_get_impl(_4176)->i64);
    }
  }
  int _8746;
  bool _8747 = _4185;
  if (_8747)
  {
    _8746 = (int)1;
  }
  else
  {
    _8746 = (int)0;
  }
  _4176->pushi32(_8746);
  _4176->pushi32(_4180);
  _4176->pushi32(_4179);
  int _8748 = (int)0;
  int _8749 = _4182;
  for (int _4189 = _8748; _4189 < _8749; ++_4189)
  {
    {
      _4176->pushi32(_ptr__4181[_4189]);
    }
  }
  _4176->pushi32(_4182);
  std::shared_ptr< monty::ndarray< int,1 > > _4190 = mosek::fusion::p_WorkStack::_get_impl(_4176)->i32;
  _checked_ptr_1<int> _ptr__4190(_4190 ? _4190->raw() : nullptr,_4190 ? _4190->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4191 = mosek::fusion::p_WorkStack::_get_impl(_4176)->i64;
  _checked_ptr_1<long long> _ptr__4191(_4191 ? _4191->raw() : nullptr,_4191 ? _4191->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4192 = mosek::fusion::p_WorkStack::_get_impl(_4176)->f64;
  _checked_ptr_1<double> _ptr__4192(_4192 ? _4192->raw() : nullptr,_4192 ? _4192->size(0) : 0);
  {
    int _8750 = (int)0;
    int _8751 = safe_add( _4180,(int)1 );
    for (int _4193 = _8750; _4193 < _8751; ++_4193)
    {
      {
        _ptr__4190[safe_add( _4183,_4193 )] = _4193;
      }
    }
    int _8752 = (int)0;
    int _8753 = _4179;
    for (int _4194 = _8752; _4194 < _8753; ++_4194)
    {
      {
        _ptr__4192[safe_add( _4187,_4194 )] = 1.0;
      }
    }
    int _8754 = (int)0;
    int _8755 = _4180;
    for (int _4195 = _8754; _4195 < _8755; ++_4195)
    {
      {
        _ptr__4192[safe_add( _4188,_4195 )] = 0.0;
      }
    }
  }
}
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVarScalarConst::toString(){
  return std::string ("ExprMulVarScalarConst()");
}
void mosek::fusion::p_ExprMulVarScalarConst::destroy(){x.reset();}void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprAdd::p_ExprAdd  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _4196,    monty::rc_ptr< ::mosek::fusion::Expression > _4197,    double _4198,    double _4199){ return new mosek::fusion::ExprAdd(_4196,_4197,_4198,_4199); }mosek::fusion::ExprAdd::ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _4196,    monty::rc_ptr< ::mosek::fusion::Expression > _4197,    double _4198,    double _4199) :    ExprAdd(new mosek::fusion::p_ExprAdd(this)){ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_4196,_4197,_4198,_4199); }void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4196,    monty::rc_ptr< ::mosek::fusion::Expression > _4197,    double _4198,    double _4199){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4196->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _4196;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _4197;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _4198;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _4199;
    if ((_4196->getND() != _4197->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int _8756 = (int)0;
    int _8757 = _4196->getND();
    for (int _4200 = _8756; _4200 < _8757; ++_4200)
    {
      {
        if ((_4196->getDim(_4200) != _4197->getDim(_4200)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4201,monty::rc_ptr< ::mosek::fusion::WorkStack > _4202,monty::rc_ptr< ::mosek::fusion::WorkStack > _4203) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_4201,_4202,_4203); }void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4201,monty::rc_ptr< ::mosek::fusion::WorkStack > _4202,monty::rc_ptr< ::mosek::fusion::WorkStack > _4203){
  e1->eval(_4202,_4201,_4203);
  e2->eval(_4202,_4201,_4203);
  _4202->pop_expr();
  int _4204 = mosek::fusion::p_WorkStack::_get_impl(_4202)->nd;
  int _4205 = mosek::fusion::p_WorkStack::_get_impl(_4202)->shape_base;
  int _4206 = mosek::fusion::p_WorkStack::_get_impl(_4202)->nelem;
  int _4207 = mosek::fusion::p_WorkStack::_get_impl(_4202)->nnz;
  bool _4208 = mosek::fusion::p_WorkStack::_get_impl(_4202)->hassp;
  int _4209 = mosek::fusion::p_WorkStack::_get_impl(_4202)->ptr_base;
  int _4210 = mosek::fusion::p_WorkStack::_get_impl(_4202)->sp_base;
  int _4211 = mosek::fusion::p_WorkStack::_get_impl(_4202)->nidxs_base;
  int _4212 = mosek::fusion::p_WorkStack::_get_impl(_4202)->bfix_base;
  int _4213 = mosek::fusion::p_WorkStack::_get_impl(_4202)->cof_base;
  _4202->pop_expr();
  int _4214 = mosek::fusion::p_WorkStack::_get_impl(_4202)->nd;
  int _4215 = mosek::fusion::p_WorkStack::_get_impl(_4202)->shape_base;
  int _4216 = mosek::fusion::p_WorkStack::_get_impl(_4202)->nelem;
  int _4217 = mosek::fusion::p_WorkStack::_get_impl(_4202)->nnz;
  bool _4218 = mosek::fusion::p_WorkStack::_get_impl(_4202)->hassp;
  int _4219 = mosek::fusion::p_WorkStack::_get_impl(_4202)->ptr_base;
  int _4220 = mosek::fusion::p_WorkStack::_get_impl(_4202)->sp_base;
  int _4221 = mosek::fusion::p_WorkStack::_get_impl(_4202)->nidxs_base;
  int _4222 = mosek::fusion::p_WorkStack::_get_impl(_4202)->bfix_base;
  int _4223 = mosek::fusion::p_WorkStack::_get_impl(_4202)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4224 = mosek::fusion::p_WorkStack::_get_impl(_4202)->i32;
  _checked_ptr_1<int> _ptr__4224(_4224 ? _4224->raw() : nullptr,_4224 ? _4224->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4225 = mosek::fusion::p_WorkStack::_get_impl(_4202)->i64;
  _checked_ptr_1<long long> _ptr__4225(_4225 ? _4225->raw() : nullptr,_4225 ? _4225->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4226 = mosek::fusion::p_WorkStack::_get_impl(_4202)->f64;
  _checked_ptr_1<double> _ptr__4226(_4226 ? _4226->raw() : nullptr,_4226 ? _4226->size(0) : 0);
  if ((_4214 != _4204))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int _8758 = (int)0;
  int _8759 = _4214;
  for (int _4227 = _8758; _4227 < _8759; ++_4227)
  {
    {
      if ((_ptr__4224[safe_add( _4215,_4227 )] != _ptr__4224[safe_add( _4205,_4227 )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_4218) && (!_4208)))
  {
    {
      int _4228 = _4216;
      int _4229 = safe_add( _4217,_4207 );
      int _4230 = _4214;
      _4201->alloc_expr(_4230,_4228,_4229,false);
      int _4231 = mosek::fusion::p_WorkStack::_get_impl(_4201)->shape_base;
      int _4232 = mosek::fusion::p_WorkStack::_get_impl(_4201)->ptr_base;
      int _4233 = mosek::fusion::p_WorkStack::_get_impl(_4201)->sp_base;
      int _4234 = mosek::fusion::p_WorkStack::_get_impl(_4201)->nidxs_base;
      int _4235 = mosek::fusion::p_WorkStack::_get_impl(_4201)->bfix_base;
      int _4236 = mosek::fusion::p_WorkStack::_get_impl(_4201)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4237 = mosek::fusion::p_WorkStack::_get_impl(_4201)->i32;
      _checked_ptr_1<int> _ptr__4237(_4237 ? _4237->raw() : nullptr,_4237 ? _4237->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4238 = mosek::fusion::p_WorkStack::_get_impl(_4201)->i64;
      _checked_ptr_1<long long> _ptr__4238(_4238 ? _4238->raw() : nullptr,_4238 ? _4238->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4239 = mosek::fusion::p_WorkStack::_get_impl(_4201)->f64;
      _checked_ptr_1<double> _ptr__4239(_4239 ? _4239->raw() : nullptr,_4239 ? _4239->size(0) : 0);
      int _8760 = (int)0;
      int _8761 = _4230;
      for (int _4240 = _8760; _4240 < _8761; ++_4240)
      {
        {
          _ptr__4237[safe_add( _4231,_4240 )] = _ptr__4224[safe_add( _4215,_4240 )];
        }
      }
      int _4241 = (int)0;
      _ptr__4237[_4232] = (int)0;
      int _8762 = (int)0;
      int _8763 = _4228;
      for (int _4242 = _8762; _4242 < _8763; ++_4242)
      {
        {
          int _8764 = _ptr__4224[safe_add( _4219,_4242 )];
          int _8765 = _ptr__4224[safe_add( safe_add( _4219,_4242 ),(int)1 )];
          for (int _4243 = _8764; _4243 < _8765; ++_4243)
          {
            {
              _ptr__4238[safe_add( _4234,_4241 )] = _ptr__4225[safe_add( _4221,_4243 )];
              _ptr__4239[safe_add( _4236,_4241 )] = (_ptr__4226[safe_add( _4223,_4243 )] * m1);
              ++ _4241;
            }
          }
          int _8766 = _ptr__4224[safe_add( _4209,_4242 )];
          int _8767 = _ptr__4224[safe_add( safe_add( _4209,_4242 ),(int)1 )];
          for (int _4244 = _8766; _4244 < _8767; ++_4244)
          {
            {
              _ptr__4238[safe_add( _4234,_4241 )] = _ptr__4225[safe_add( _4211,_4244 )];
              _ptr__4239[safe_add( _4236,_4241 )] = (_ptr__4226[safe_add( _4213,_4244 )] * m2);
              ++ _4241;
            }
          }
          _ptr__4237[safe_add( safe_add( _4232,_4242 ),(int)1 )] = _4241;
          _ptr__4239[safe_add( _4235,_4242 )] = ((_ptr__4226[safe_add( _4222,_4242 )] * m1) + (_ptr__4226[safe_add( _4212,_4242 )] * m2));
        }
      }
    }
  }
  else if(((!_4218) || (!_4208)))
  {
    {
      if ((!_4208))
      {
        {
          int _4245 = _4206;
          int _4246 = _4207;
          int _4247 = _4209;
          int _4248 = _4210;
          int _4249 = _4211;
          int _4250 = _4212;
          int _4251 = _4213;
          _4206 = _4216;
          _4207 = _4217;
          _4209 = _4219;
          _4210 = _4220;
          _4211 = _4221;
          _4212 = _4222;
          _4213 = _4223;
          _4216 = _4245;
          _4217 = _4246;
          _4219 = _4247;
          _4220 = _4248;
          _4221 = _4249;
          _4222 = _4250;
          _4223 = _4251;
        }
      }
      {}
      double _8768;
      bool _8769 = (!_4218);
      if (_8769)
      {
        _8768 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _8768 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _4252 = _8768;
      double _8770;
      bool _8771 = (!_4218);
      if (_8771)
      {
        _8770 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _8770 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _4253 = _8770;
      int _4254 = _4216;
      int _4255 = safe_add( _4217,_4207 );
      int _4256 = _4214;
      _4201->alloc_expr(_4256,_4254,_4255,false);
      int _4257 = mosek::fusion::p_WorkStack::_get_impl(_4201)->shape_base;
      int _4258 = mosek::fusion::p_WorkStack::_get_impl(_4201)->ptr_base;
      int _4259 = mosek::fusion::p_WorkStack::_get_impl(_4201)->sp_base;
      int _4260 = mosek::fusion::p_WorkStack::_get_impl(_4201)->nidxs_base;
      int _4261 = mosek::fusion::p_WorkStack::_get_impl(_4201)->bfix_base;
      int _4262 = mosek::fusion::p_WorkStack::_get_impl(_4201)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4263 = mosek::fusion::p_WorkStack::_get_impl(_4201)->i32;
      _checked_ptr_1<int> _ptr__4263(_4263 ? _4263->raw() : nullptr,_4263 ? _4263->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4264 = mosek::fusion::p_WorkStack::_get_impl(_4201)->i64;
      _checked_ptr_1<long long> _ptr__4264(_4264 ? _4264->raw() : nullptr,_4264 ? _4264->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4265 = mosek::fusion::p_WorkStack::_get_impl(_4201)->f64;
      _checked_ptr_1<double> _ptr__4265(_4265 ? _4265->raw() : nullptr,_4265 ? _4265->size(0) : 0);
      {
        int _4266 = (int)0;
        int _8772 = (int)0;
        int _8773 = _4256;
        for (int _4267 = _8772; _4267 < _8773; ++_4267)
        {
          {
            _ptr__4263[safe_add( _4257,_4267 )] = _ptr__4224[safe_add( _4215,_4267 )];
          }
        }
        int _8774 = (int)0;
        int _8775 = safe_add( _4254,(int)1 );
        for (int _4268 = _8774; _4268 < _8775; ++_4268)
        {
          {
            _ptr__4263[safe_add( _4258,_4268 )] = (int)0;
          }
        }
        int _8776 = (int)0;
        int _8777 = _4216;
        for (int _4269 = _8776; _4269 < _8777; ++_4269)
        {
          {
            _ptr__4263[safe_add( safe_add( _4258,_4269 ),(int)1 )] += (_ptr__4224[safe_add( safe_add( _4219,_4269 ),(int)1 )] - _ptr__4224[safe_add( _4219,_4269 )]);
          }
        }
        int _8778 = (int)0;
        int _8779 = _4206;
        for (int _4270 = _8778; _4270 < _8779; ++_4270)
        {
          {
            long long _4271 = _ptr__4225[safe_add( _4210,_4270 )];
            _ptr__4263[safe_add( safe_add( _4258,_4271 ),(int)1 )] += (_ptr__4224[safe_add( safe_add( _4209,_4270 ),(int)1 )] - _ptr__4224[safe_add( _4209,_4270 )]);
          }
        }
        int _8780 = (int)0;
        int _8781 = _4254;
        for (int _4272 = _8780; _4272 < _8781; ++_4272)
        {
          {
            _ptr__4263[safe_add( safe_add( _4258,_4272 ),(int)1 )] += _ptr__4263[safe_add( _4258,_4272 )];
          }
        }
        int _8782 = (int)0;
        int _8783 = _4216;
        for (int _4273 = _8782; _4273 < _8783; ++_4273)
        {
          {
            int _4274 = _ptr__4263[safe_add( _4258,_4273 )];
            int _4275 = _ptr__4224[safe_add( _4219,_4273 )];
            int _4276 = (_ptr__4224[safe_add( safe_add( _4219,_4273 ),(int)1 )] - _ptr__4224[safe_add( _4219,_4273 )]);
            int _8784 = (int)0;
            int _8785 = _4276;
            for (int _4277 = _8784; _4277 < _8785; ++_4277)
            {
              {
                _ptr__4264[safe_add( safe_add( _4260,_4274 ),_4277 )] = _ptr__4225[safe_add( safe_add( _4221,_4275 ),_4277 )];
                _ptr__4265[safe_add( safe_add( _4262,_4274 ),_4277 )] = (_ptr__4226[safe_add( safe_add( _4223,_4275 ),_4277 )] * _4252);
              }
            }
            _ptr__4263[safe_add( _4258,_4273 )] += _4276;
            _ptr__4265[safe_add( _4261,_4273 )] = (_ptr__4226[safe_add( _4222,_4273 )] * _4252);
          }
        }
        int _8786 = (int)0;
        int _8787 = _4206;
        for (int _4278 = _8786; _4278 < _8787; ++_4278)
        {
          {
            long long _4279 = _ptr__4225[safe_add( _4210,_4278 )];
            int _4280 = _ptr__4263[safe_add( _4258,_4279 )];
            int _4281 = _ptr__4224[safe_add( _4209,_4278 )];
            int _4282 = (_ptr__4224[safe_add( safe_add( _4209,_4278 ),(int)1 )] - _ptr__4224[safe_add( _4209,_4278 )]);
            int _8788 = (int)0;
            int _8789 = _4282;
            for (int _4283 = _8788; _4283 < _8789; ++_4283)
            {
              {
                _ptr__4264[safe_add( safe_add( _4260,_4280 ),_4283 )] = _ptr__4225[safe_add( safe_add( _4211,_4281 ),_4283 )];
                _ptr__4265[safe_add( safe_add( _4262,_4280 ),_4283 )] = (_ptr__4226[safe_add( safe_add( _4213,_4281 ),_4283 )] * _4253);
              }
            }
            _ptr__4263[safe_add( _4258,_4279 )] += _4282;
            _ptr__4265[safe_add( _4261,_4279 )] += (_ptr__4226[safe_add( _4212,_4278 )] * _4253);
          }
        }
        int _8790 = (int)0;
        int _8791 = _4254;
        for (int _4284 = _8790; _4284 < _8791; ++_4284)
        {
          {
            _ptr__4263[(safe_add( _4258,_4254 ) - _4284)] = _ptr__4263[((safe_add( _4258,_4254 ) - _4284) - (int)1)];
          }
        }
        _ptr__4263[_4258] = (int)0;
      }
    }
  }
  else
  {
    {
      int _4285 = safe_add( _4217,_4207 );
      int _4286 = (int)0;
      int _4287 = _4214;
      long long _4288 = (long long)1;
      int _8792 = (int)0;
      int _8793 = _4287;
      for (int _4289 = _8792; _4289 < _8793; ++_4289)
      {
        {
          _4288 *= _ptr__4224[safe_add( _4215,_4289 )];
        }
      }
      {
        int _4290 = (int)0;
        int _4291 = (int)0;
        while ( ((_4291 < _4216) && (_4290 < _4206)) )
        {
          {
            if ((_ptr__4225[safe_add( _4220,_4291 )] < _ptr__4225[safe_add( _4210,_4290 )]))
            {
              {
                ++ _4286;
                ++ _4291;
              }
            }
            else if((_ptr__4225[safe_add( _4220,_4291 )] > _ptr__4225[safe_add( _4210,_4290 )]))
            {
              {
                ++ _4286;
                ++ _4290;
              }
            }
            else
            {
              {
                ++ _4286;
                ++ _4291;
                ++ _4290;
              }
            }
          }
        }
        _4286 += (safe_add( (_4216 - _4291),_4206 ) - _4290);
      }
      bool _4292 = (_4286 < _4288);
      _4201->alloc_expr(_4287,_4286,_4285,_4292);
      int _4293 = mosek::fusion::p_WorkStack::_get_impl(_4201)->shape_base;
      int _4294 = mosek::fusion::p_WorkStack::_get_impl(_4201)->ptr_base;
      int _8794;
      bool _8795 = _4292;
      if (_8795)
      {
        _8794 = mosek::fusion::p_WorkStack::_get_impl(_4201)->sp_base;
      }
      else
      {
        _8794 = _4201->alloci64(_4286);
      }
      int _4295 = _8794;
      int _4296 = mosek::fusion::p_WorkStack::_get_impl(_4201)->nidxs_base;
      int _4297 = mosek::fusion::p_WorkStack::_get_impl(_4201)->bfix_base;
      int _4298 = mosek::fusion::p_WorkStack::_get_impl(_4201)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4299 = mosek::fusion::p_WorkStack::_get_impl(_4201)->i32;
      _checked_ptr_1<int> _ptr__4299(_4299 ? _4299->raw() : nullptr,_4299 ? _4299->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4300 = mosek::fusion::p_WorkStack::_get_impl(_4201)->i64;
      _checked_ptr_1<long long> _ptr__4300(_4300 ? _4300->raw() : nullptr,_4300 ? _4300->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4301 = mosek::fusion::p_WorkStack::_get_impl(_4201)->f64;
      _checked_ptr_1<double> _ptr__4301(_4301 ? _4301->raw() : nullptr,_4301 ? _4301->size(0) : 0);
      int _8796 = (int)0;
      int _8797 = _4287;
      for (int _4302 = _8796; _4302 < _8797; ++_4302)
      {
        {
          _ptr__4299[safe_add( _4293,_4302 )] = _ptr__4224[safe_add( _4215,_4302 )];
        }
      }
      {
        _ptr__4299[_4294] = (int)0;
        int _4303 = (int)0;
        int _4304 = (int)0;
        int _4305 = (int)0;
        int _4306 = (int)0;
        while ( ((_4306 < _4216) && (_4305 < _4206)) )
        {
          {
            if ((_ptr__4225[safe_add( _4220,_4306 )] < _ptr__4225[safe_add( _4210,_4305 )]))
            {
              {
                int _8798 = _ptr__4224[safe_add( _4219,_4306 )];
                int _8799 = _ptr__4224[safe_add( safe_add( _4219,_4306 ),(int)1 )];
                for (int _4307 = _8798; _4307 < _8799; ++_4307)
                {
                  {
                    _ptr__4300[safe_add( _4296,_4304 )] = _ptr__4225[safe_add( _4221,_4307 )];
                    _ptr__4301[safe_add( _4298,_4304 )] = (m1 * _ptr__4226[safe_add( _4223,_4307 )]);
                    ++ _4304;
                  }
                }
                _ptr__4301[safe_add( _4297,_4303 )] = (m1 * _ptr__4226[safe_add( _4222,_4306 )]);
                _ptr__4300[safe_add( _4295,_4303 )] = _ptr__4225[safe_add( _4220,_4306 )];
                _ptr__4299[safe_add( safe_add( _4294,_4303 ),(int)1 )] = _4304;
                ++ _4303;
                ++ _4306;
              }
            }
            else if((_ptr__4225[safe_add( _4210,_4305 )] < _ptr__4225[safe_add( _4220,_4306 )]))
            {
              {
                int _8800 = _ptr__4224[safe_add( _4209,_4305 )];
                int _8801 = _ptr__4224[safe_add( safe_add( _4209,_4305 ),(int)1 )];
                for (int _4308 = _8800; _4308 < _8801; ++_4308)
                {
                  {
                    _ptr__4300[safe_add( _4296,_4304 )] = _ptr__4225[safe_add( _4211,_4308 )];
                    _ptr__4301[safe_add( _4298,_4304 )] = (m2 * _ptr__4226[safe_add( _4213,_4308 )]);
                    ++ _4304;
                  }
                }
                _ptr__4301[safe_add( _4297,_4303 )] = (m1 * _ptr__4226[safe_add( _4212,_4306 )]);
                _ptr__4300[safe_add( _4295,_4303 )] = _ptr__4225[safe_add( _4210,_4305 )];
                _ptr__4299[safe_add( safe_add( _4294,_4303 ),(int)1 )] = _4304;
                ++ _4303;
                ++ _4305;
              }
            }
            else
            {
              {
                int _8802 = _ptr__4224[safe_add( _4219,_4306 )];
                int _8803 = _ptr__4224[safe_add( safe_add( _4219,_4306 ),(int)1 )];
                for (int _4309 = _8802; _4309 < _8803; ++_4309)
                {
                  {
                    _ptr__4300[safe_add( _4296,_4304 )] = _ptr__4225[safe_add( _4221,_4309 )];
                    _ptr__4301[safe_add( _4298,_4304 )] = (m1 * _ptr__4226[safe_add( _4223,_4309 )]);
                    ++ _4304;
                  }
                }
                int _8804 = _ptr__4224[safe_add( _4209,_4305 )];
                int _8805 = _ptr__4224[safe_add( safe_add( _4209,_4305 ),(int)1 )];
                for (int _4310 = _8804; _4310 < _8805; ++_4310)
                {
                  {
                    _ptr__4300[safe_add( _4296,_4304 )] = _ptr__4225[safe_add( _4211,_4310 )];
                    _ptr__4301[safe_add( _4298,_4304 )] = (m2 * _ptr__4226[safe_add( _4213,_4310 )]);
                    ++ _4304;
                  }
                }
                _ptr__4301[safe_add( _4297,_4303 )] = ((m1 * _ptr__4226[safe_add( _4222,_4306 )]) + (m2 * _ptr__4226[safe_add( _4212,_4305 )]));
                _ptr__4300[safe_add( _4295,_4303 )] = _ptr__4225[safe_add( _4220,_4306 )];
                _ptr__4299[safe_add( safe_add( _4294,_4303 ),(int)1 )] = _4304;
                ++ _4303;
                ++ _4306;
                ++ _4305;
              }
            }
          }
        }
        while ( (_4306 < _4216) )
        {
          {
            int _8806 = _ptr__4224[safe_add( _4219,_4306 )];
            int _8807 = _ptr__4224[safe_add( safe_add( _4219,_4306 ),(int)1 )];
            for (int _4311 = _8806; _4311 < _8807; ++_4311)
            {
              {
                _ptr__4300[safe_add( _4296,_4304 )] = _ptr__4225[safe_add( _4221,_4311 )];
                _ptr__4301[safe_add( _4298,_4304 )] = (m1 * _ptr__4226[safe_add( _4223,_4311 )]);
                ++ _4304;
              }
            }
            _ptr__4301[safe_add( _4297,_4303 )] = (m1 * _ptr__4226[safe_add( _4222,_4306 )]);
            _ptr__4300[safe_add( _4295,_4303 )] = _ptr__4225[safe_add( _4220,_4306 )];
            _ptr__4299[safe_add( safe_add( _4294,_4303 ),(int)1 )] = _4304;
            ++ _4303;
            ++ _4306;
          }
        }
        while ( (_4305 < _4206) )
        {
          {
            int _8808 = _ptr__4224[safe_add( _4209,_4305 )];
            int _8809 = _ptr__4224[safe_add( safe_add( _4209,_4305 ),(int)1 )];
            for (int _4312 = _8808; _4312 < _8809; ++_4312)
            {
              {
                _ptr__4300[safe_add( _4296,_4304 )] = _ptr__4225[safe_add( _4211,_4312 )];
                _ptr__4301[safe_add( _4298,_4304 )] = (m2 * _ptr__4226[safe_add( _4213,_4312 )]);
                ++ _4304;
              }
            }
            _ptr__4301[safe_add( _4297,_4303 )] = (m1 * _ptr__4226[safe_add( _4212,_4305 )]);
            _ptr__4300[safe_add( _4295,_4303 )] = _ptr__4225[safe_add( _4210,_4305 )];
            _ptr__4299[safe_add( safe_add( _4294,_4303 ),(int)1 )] = _4304;
            ++ _4303;
            ++ _4305;
          }
        }
      }
      if ((!_4292))
      {
        {
          _4201->popi64(_4286);
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprAdd::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprAdd::destroy(){e2.reset();e1.reset();}void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprWSum::p_ExprWSum  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4313,    std::shared_ptr< monty::ndarray< double,1 > > _4314){ return new mosek::fusion::ExprWSum(_4313,_4314); }mosek::fusion::ExprWSum::ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4313,    std::shared_ptr< monty::ndarray< double,1 > > _4314) :    ExprWSum(new mosek::fusion::p_ExprWSum(this)){ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_4313,_4314); }void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4313,    std::shared_ptr< monty::ndarray< double,1 > > _4314){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__4314(_4314 ? _4314->raw() : nullptr, _4314 ? _4314->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_4313)((int)0))->getShape());
    if (((int)((_4314)->size(0)) != (int)((_4313)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_4314);
    std::shared_ptr< monty::ndarray< int,1 > > _4315 = ((*_4313)((int)0))->getShape();
    _checked_ptr_1<int> _ptr__4315(_4315 ? _4315->raw() : nullptr,_4315 ? _4315->size(0) : 0);
    int _4316 = (int)((_4315)->size(0));
    int _8810 = (int)1;
    int _8811 = (int)((_4313)->size(0));
    for (int _4317 = _8810; _4317 < _8811; ++_4317)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4318 = ((*_4313)(_4317))->getShape();
        _checked_ptr_1<int> _ptr__4318(_4318 ? _4318->raw() : nullptr,_4318 ? _4318->size(0) : 0);
        if ((_4316 != (int)((_4318)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int _8812 = (int)0;
            int _8813 = _4316;
            for (int _4319 = _8812; _4319 < _8813; ++_4319)
            {
              {
                if ((_ptr__4315[_4319] != _ptr__4318[_4319]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _8814;
    for (int _4320 = (int)0, _8815 = (int)((_4313)->size(0)); _4320 < _8815 ; ++_4320)
    {
      _8814.push_back(((*_4313)(_4320)));
    }
    auto _8816 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_8814.size()),_8814.begin(),_8814.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _8816;
  }
}void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4321,monty::rc_ptr< ::mosek::fusion::WorkStack > _4322,monty::rc_ptr< ::mosek::fusion::WorkStack > _4323) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_4321,_4322,_4323); }void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4321,monty::rc_ptr< ::mosek::fusion::WorkStack > _4322,monty::rc_ptr< ::mosek::fusion::WorkStack > _4323){
  int _4324 = (int)((es)->size(0));
  int _8817 = (int)0;
  int _8818 = _4324;
  for (int _4325 = _8817; _4325 < _8818; ++_4325)
  {
    {
      ((*es)(_4325))->eval(_4322,_4321,_4323);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4326 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4324)));
  _checked_ptr_1<int> _ptr__4326(_4326 ? _4326->raw() : nullptr,_4326 ? _4326->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4327 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4324)));
  _checked_ptr_1<int> _ptr__4327(_4327 ? _4327->raw() : nullptr,_4327 ? _4327->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4328 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4324)));
  _checked_ptr_1<int> _ptr__4328(_4328 ? _4328->raw() : nullptr,_4328 ? _4328->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4329 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4324)));
  _checked_ptr_1<int> _ptr__4329(_4329 ? _4329->raw() : nullptr,_4329 ? _4329->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4330 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4324)));
  _checked_ptr_1<int> _ptr__4330(_4330 ? _4330->raw() : nullptr,_4330 ? _4330->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4331 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4324)));
  _checked_ptr_1<int> _ptr__4331(_4331 ? _4331->raw() : nullptr,_4331 ? _4331->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4332 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4324)));
  _checked_ptr_1<int> _ptr__4332(_4332 ? _4332->raw() : nullptr,_4332 ? _4332->size(0) : 0);
  int _4333 = _4322->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _4334 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4333)));
  _checked_ptr_1<int> _ptr__4334(_4334 ? _4334->raw() : nullptr,_4334 ? _4334->size(0) : 0);
  _4322->popi32(_4333,_4334,(int)0);
  {
    _ptr__4326[(_4324 - (int)1)] = _4322->popi32();
    _ptr__4327[(_4324 - (int)1)] = _4322->popi32();
    bool _4335 = (_4322->popi32() != (int)0);
    _ptr__4328[(_4324 - (int)1)] = _4322->popi32(safe_add( _ptr__4326[(_4324 - (int)1)],(int)1 ));
    int _8819;
    bool _8820 = _4335;
    if (_8820)
    {
      _8819 = _4322->popi64(_ptr__4326[(_4324 - (int)1)]);
    }
    else
    {
      _8819 = (-(int)1);
    }
    _ptr__4330[(_4324 - (int)1)] = _8819;
    _ptr__4329[(_4324 - (int)1)] = _4322->popi64(_ptr__4327[(_4324 - (int)1)]);
    _ptr__4332[(_4324 - (int)1)] = _4322->popf64(_ptr__4326[(_4324 - (int)1)]);
    _ptr__4331[(_4324 - (int)1)] = _4322->popf64(_ptr__4327[(_4324 - (int)1)]);
  }
  int _8821 = (int)1;
  int _8822 = _4324;
  for (int _4336 = _8821; _4336 < _8822; ++_4336)
  {
    {
      int _4337 = ((_4324 - _4336) - (int)1);
      _4322->popi32();
      _4322->popi32(_4333);
      _ptr__4326[_4337] = _4322->popi32();
      _ptr__4327[_4337] = _4322->popi32();
      bool _4338 = (_4322->popi32() != (int)0);
      _ptr__4328[_4337] = _4322->popi32(safe_add( _ptr__4326[_4337],(int)1 ));
      int _8823;
      bool _8824 = _4338;
      if (_8824)
      {
        _8823 = _4322->popi64(_ptr__4326[_4337]);
      }
      else
      {
        _8823 = (-(int)1);
      }
      _ptr__4330[_4337] = _8823;
      _ptr__4329[_4337] = _4322->popi64(_ptr__4327[_4337]);
      _ptr__4332[_4337] = _4322->popf64(_ptr__4326[_4337]);
      _ptr__4331[_4337] = _4322->popf64(_ptr__4327[_4337]);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4339 = mosek::fusion::p_WorkStack::_get_impl(_4322)->i32;
  _checked_ptr_1<int> _ptr__4339(_4339 ? _4339->raw() : nullptr,_4339 ? _4339->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4340 = mosek::fusion::p_WorkStack::_get_impl(_4322)->i64;
  _checked_ptr_1<long long> _ptr__4340(_4340 ? _4340->raw() : nullptr,_4340 ? _4340->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4341 = mosek::fusion::p_WorkStack::_get_impl(_4322)->f64;
  _checked_ptr_1<double> _ptr__4341(_4341 ? _4341->raw() : nullptr,_4341 ? _4341->size(0) : 0);
  bool _4342 = false;
  int _8825 = (int)0;
  int _8826 = _4324;
  for (int _4343 = _8825; _4343 < _8826; ++_4343)
  {
    {
      if ((_ptr__4330[_4343] < (int)0))
      {
        {
          _4342 = true;
        }
      }
      {}
    }
  }
  int _4344 = (int)0;
  int _4345 = (int)0;
  if (_4342)
  {
    {
      _4344 = (int)::mosek::fusion::p_Set::size(_4334);
      int _8827 = (int)0;
      int _8828 = _4324;
      for (int _4346 = _8827; _4346 < _8828; ++_4346)
      {
        {
          _4345 += _ptr__4327[_4346];
        }
      }
    }
  }
  else
  {
    {
      bool _4347 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _4348 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4324)));
      _checked_ptr_1<int> _ptr__4348(_4348 ? _4348->raw() : nullptr,_4348 ? _4348->size(0) : 0);
      int _8829 = (int)0;
      int _8830 = _4324;
      for (int _4349 = _8829; _4349 < _8830; ++_4349)
      {
        {
          _4345 += _ptr__4327[_4349];
        }
      }
      while ( (!_4347) )
      {
        {
          long long _4350 = (-(int)1);
          int _8831 = (int)0;
          int _8832 = _4324;
          for (int _4351 = _8831; _4351 < _8832; ++_4351)
          {
            {
              if (((_ptr__4348[_4351] < _ptr__4326[_4351]) && ((_4350 < (int)0) || (_ptr__4340[safe_add( _ptr__4330[_4351],_ptr__4348[_4351] )] < _4350))))
              {
                {
                  _4350 = _ptr__4340[safe_add( _ptr__4330[_4351],_ptr__4348[_4351] )];
                }
              }
              {}
            }
          }
          if ((_4350 < (int)0))
          {
            {
              _4347 = true;
            }
          }
          else
          {
            {
              int _8833 = (int)0;
              int _8834 = _4324;
              for (int _4352 = _8833; _4352 < _8834; ++_4352)
              {
                {
                  if (((_ptr__4348[_4352] < _ptr__4326[_4352]) && (_4350 == _ptr__4340[safe_add( _ptr__4330[_4352],_ptr__4348[_4352] )])))
                  {
                    {
                      ++ _ptr__4348[_4352];
                    }
                  }
                  {}
                }
              }
              ++ _4344;
            }
          }
        }
      }
    }
  }
  int _4353 = _4321->alloci32(safe_add( _4344,(int)1 ));
  int _4354 = _4321->alloci64(_4345);
  int _8835;
  bool _8836 = (!_4342);
  if (_8836)
  {
    _8835 = _4321->alloci64(_4344);
  }
  else
  {
    _8835 = (-(int)1);
  }
  int _4355 = _8835;
  int _4356 = _4321->allocf64(_4345);
  int _4357 = _4321->allocf64(_4344);
  int _8837;
  bool _8838 = _4342;
  if (_8838)
  {
    _8837 = (int)0;
  }
  else
  {
    _8837 = (int)1;
  }
  _4321->pushi32(_8837);
  _4321->pushi32(_4345);
  _4321->pushi32(_4344);
  int _8839 = (int)0;
  int _8840 = _4333;
  for (int _4358 = _8839; _4358 < _8840; ++_4358)
  {
    {
      _4321->pushi32(_ptr__4334[_4358]);
    }
  }
  _4321->pushi32(_4333);
  std::shared_ptr< monty::ndarray< int,1 > > _4359 = mosek::fusion::p_WorkStack::_get_impl(_4321)->i32;
  _checked_ptr_1<int> _ptr__4359(_4359 ? _4359->raw() : nullptr,_4359 ? _4359->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4360 = mosek::fusion::p_WorkStack::_get_impl(_4321)->i64;
  _checked_ptr_1<long long> _ptr__4360(_4360 ? _4360->raw() : nullptr,_4360 ? _4360->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4361 = mosek::fusion::p_WorkStack::_get_impl(_4321)->f64;
  _checked_ptr_1<double> _ptr__4361(_4361 ? _4361->raw() : nullptr,_4361 ? _4361->size(0) : 0);
  _ptr__4359[_4353] = (int)0;
  int _8841 = (int)0;
  int _8842 = _4344;
  for (int _4362 = _8841; _4362 < _8842; ++_4362)
  {
    {
      _ptr__4361[safe_add( _4357,_4362 )] = 0.0;
    }
  }
  int _8843 = (int)0;
  int _8844 = safe_add( _4344,(int)1 );
  for (int _4363 = _8843; _4363 < _8844; ++_4363)
  {
    {
      _ptr__4359[safe_add( _4353,_4363 )] = (int)0;
    }
  }
  if (_4342)
  {
    {
      int _8845 = (int)0;
      int _8846 = _4324;
      for (int _4364 = _8845; _4364 < _8846; ++_4364)
      {
        {
          if ((_ptr__4330[_4364] >= (int)0))
          {
            {
              int _8847 = (int)0;
              int _8848 = _ptr__4326[_4364];
              for (int _4365 = _8847; _4365 < _8848; ++_4365)
              {
                {
                  _ptr__4359[safe_add( safe_add( _4353,_ptr__4340[safe_add( _ptr__4330[_4364],_4365 )] ),(int)1 )] += (_ptr__4339[safe_add( safe_add( _ptr__4328[_4364],_4365 ),(int)1 )] - _ptr__4339[safe_add( _ptr__4328[_4364],_4365 )]);
                }
              }
            }
          }
          else
          {
            {
              int _8849 = (int)0;
              int _8850 = _ptr__4326[_4364];
              for (int _4366 = _8849; _4366 < _8850; ++_4366)
              {
                {
                  _ptr__4359[safe_add( safe_add( _4353,_4366 ),(int)1 )] += (_ptr__4339[safe_add( safe_add( _ptr__4328[_4364],_4366 ),(int)1 )] - _ptr__4339[safe_add( _ptr__4328[_4364],_4366 )]);
                }
              }
            }
          }
        }
      }
      int _8851 = (int)0;
      int _8852 = _4344;
      for (int _4367 = _8851; _4367 < _8852; ++_4367)
      {
        {
          _ptr__4359[safe_add( safe_add( _4353,_4367 ),(int)1 )] += _ptr__4359[safe_add( _4353,_4367 )];
        }
      }
      int _8853 = (int)0;
      int _8854 = _4324;
      for (int _4368 = _8853; _4368 < _8854; ++_4368)
      {
        {
          if ((_ptr__4330[_4368] >= (int)0))
          {
            {
              int _8855 = (int)0;
              int _8856 = _ptr__4326[_4368];
              for (int _4369 = _8855; _4369 < _8856; ++_4369)
              {
                {
                  int _4370 = _ptr__4339[safe_add( _ptr__4328[_4368],_4369 )];
                  int _4371 = _ptr__4339[safe_add( safe_add( _ptr__4328[_4368],_4369 ),(int)1 )];
                  long long _4372 = _ptr__4340[safe_add( _ptr__4330[_4368],_4369 )];
                  int _4373 = _ptr__4359[safe_add( _4353,_4372 )];
                  int _8857 = _4370;
                  int _8858 = _4371;
                  for (int _4374 = _8857; _4374 < _8858; ++_4374)
                  {
                    {
                      _ptr__4360[safe_add( _4354,_4373 )] = _ptr__4340[safe_add( _ptr__4329[_4368],_4374 )];
                      _ptr__4361[safe_add( _4356,_4373 )] = (((*w)(_4368)) * _ptr__4341[safe_add( _ptr__4331[_4368],_4374 )]);
                      ++ _4373;
                    }
                  }
                  _ptr__4361[safe_add( _4357,_4372 )] += (((*w)(_4368)) * _ptr__4341[safe_add( _ptr__4332[_4368],_4369 )]);
                  _ptr__4359[safe_add( _4353,_4372 )] += (_4371 - _4370);
                }
              }
            }
          }
          else
          {
            {
              int _8859 = (int)0;
              int _8860 = _ptr__4326[_4368];
              for (int _4375 = _8859; _4375 < _8860; ++_4375)
              {
                {
                  int _4376 = _ptr__4339[safe_add( _ptr__4328[_4368],_4375 )];
                  int _4377 = _ptr__4339[safe_add( safe_add( _ptr__4328[_4368],_4375 ),(int)1 )];
                  int _4378 = _4375;
                  int _4379 = _ptr__4359[safe_add( _4353,_4378 )];
                  int _8861 = _4376;
                  int _8862 = _4377;
                  for (int _4380 = _8861; _4380 < _8862; ++_4380)
                  {
                    {
                      _ptr__4360[safe_add( _4354,_4379 )] = _ptr__4340[safe_add( _ptr__4329[_4368],_4380 )];
                      _ptr__4361[safe_add( _4356,_4379 )] = (((*w)(_4368)) * _ptr__4341[safe_add( _ptr__4331[_4368],_4380 )]);
                      ++ _4379;
                    }
                  }
                  _ptr__4361[safe_add( _4357,_4378 )] += (((*w)(_4368)) * _ptr__4341[safe_add( _ptr__4332[_4368],_4375 )]);
                  _ptr__4359[safe_add( _4353,_4378 )] += (_4377 - _4376);
                }
              }
            }
          }
        }
      }
      int _8863 = (int)0;
      int _8864 = _4344;
      for (int _4381 = _8863; _4381 < _8864; ++_4381)
      {
        {
          _ptr__4359[(safe_add( _4353,_4344 ) - _4381)] = _ptr__4359[((safe_add( _4353,_4344 ) - _4381) - (int)1)];
        }
      }
      _ptr__4359[_4353] = (int)0;
    }
  }
  else
  {
    {
      bool _4382 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _4383 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4324)));
      _checked_ptr_1<int> _ptr__4383(_4383 ? _4383->raw() : nullptr,_4383 ? _4383->size(0) : 0);
      int _4384 = (int)0;
      int _4385 = (int)0;
      while ( (!_4382) )
      {
        {
          long long _4386 = (-(int)1);
          int _8865 = (int)0;
          int _8866 = _4324;
          for (int _4387 = _8865; _4387 < _8866; ++_4387)
          {
            {
              if (((_ptr__4383[_4387] < _ptr__4326[_4387]) && ((_4386 < (int)0) || (_ptr__4340[safe_add( _ptr__4330[_4387],_ptr__4383[_4387] )] < _4386))))
              {
                {
                  _4386 = _ptr__4340[safe_add( _ptr__4330[_4387],_ptr__4383[_4387] )];
                }
              }
              {}
            }
          }
          if ((_4386 < (int)0))
          {
            {
              _4382 = true;
            }
          }
          else
          {
            {
              int _8867 = (int)0;
              int _8868 = _4324;
              for (int _4388 = _8867; _4388 < _8868; ++_4388)
              {
                {
                  if (((_ptr__4383[_4388] < _ptr__4326[_4388]) && (_4386 == _ptr__4340[safe_add( _ptr__4330[_4388],_ptr__4383[_4388] )])))
                  {
                    {
                      int _8869 = _ptr__4339[safe_add( _ptr__4328[_4388],_ptr__4383[_4388] )];
                      int _8870 = _ptr__4339[safe_add( safe_add( _ptr__4328[_4388],_ptr__4383[_4388] ),(int)1 )];
                      for (int _4389 = _8869; _4389 < _8870; ++_4389)
                      {
                        {
                          _ptr__4360[safe_add( _4354,_4385 )] = _ptr__4340[safe_add( _ptr__4329[_4388],_4389 )];
                          _ptr__4361[safe_add( _4356,_4385 )] = (((*w)(_4388)) * _ptr__4341[safe_add( _ptr__4331[_4388],_4389 )]);
                          ++ _4385;
                        }
                      }
                      _ptr__4361[safe_add( _4357,_4384 )] += (((*w)(_4388)) * _ptr__4341[safe_add( _ptr__4332[_4388],_ptr__4383[_4388] )]);
                      ++ _ptr__4383[_4388];
                    }
                  }
                  {}
                }
              }
              _ptr__4359[safe_add( safe_add( _4353,_4384 ),(int)1 )] = _4385;
              _ptr__4360[safe_add( _4355,_4384 )] = _4386;
            }
          }
          ++ _4384;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprWSum::toString(){
  return std::string ("ExprWSum()");
}
void mosek::fusion::p_ExprWSum::destroy(){w.reset();es.reset();}void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSumReduce::p_ExprSumReduce  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce  (int _4390,    monty::rc_ptr< ::mosek::fusion::Expression > _4391){ return new mosek::fusion::ExprSumReduce(_4390,_4391); }mosek::fusion::ExprSumReduce::ExprSumReduce  (int _4390,    monty::rc_ptr< ::mosek::fusion::Expression > _4391) :    ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this)){ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_4390,_4391); }void mosek::fusion::p_ExprSumReduce::_initialize  (int _4390,    monty::rc_ptr< ::mosek::fusion::Expression > _4391){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_4390,_4391->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _4391;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _4390;
    std::shared_ptr< monty::ndarray< int,1 > > _4392 = _4391->getShape();
    _checked_ptr_1<int> _ptr__4392(_4392 ? _4392->raw() : nullptr,_4392 ? _4392->size(0) : 0);
    if (((int)((_4392)->size(0)) <= _4390))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4393,monty::rc_ptr< ::mosek::fusion::WorkStack > _4394,monty::rc_ptr< ::mosek::fusion::WorkStack > _4395) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_4393,_4394,_4395); }void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4393,monty::rc_ptr< ::mosek::fusion::WorkStack > _4394,monty::rc_ptr< ::mosek::fusion::WorkStack > _4395){
  expr->eval(_4394,_4393,_4395);
  _4394->pop_expr();
  int _4396 = mosek::fusion::p_WorkStack::_get_impl(_4394)->nd;
  int _4397 = mosek::fusion::p_WorkStack::_get_impl(_4394)->shape_base;
  int _4398 = mosek::fusion::p_WorkStack::_get_impl(_4394)->nelem;
  int _4399 = mosek::fusion::p_WorkStack::_get_impl(_4394)->nnz;
  bool _4400 = mosek::fusion::p_WorkStack::_get_impl(_4394)->hassp;
  int _4401 = mosek::fusion::p_WorkStack::_get_impl(_4394)->ptr_base;
  int _4402 = mosek::fusion::p_WorkStack::_get_impl(_4394)->sp_base;
  int _4403 = mosek::fusion::p_WorkStack::_get_impl(_4394)->nidxs_base;
  int _4404 = mosek::fusion::p_WorkStack::_get_impl(_4394)->bfix_base;
  int _4405 = mosek::fusion::p_WorkStack::_get_impl(_4394)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4406 = mosek::fusion::p_WorkStack::_get_impl(_4394)->i32;
  _checked_ptr_1<int> _ptr__4406(_4406 ? _4406->raw() : nullptr,_4406 ? _4406->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4407 = mosek::fusion::p_WorkStack::_get_impl(_4394)->i64;
  _checked_ptr_1<long long> _ptr__4407(_4407 ? _4407->raw() : nullptr,_4407 ? _4407->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4408 = mosek::fusion::p_WorkStack::_get_impl(_4394)->f64;
  _checked_ptr_1<double> _ptr__4408(_4408 ? _4408->raw() : nullptr,_4408 ? _4408->size(0) : 0);
  int _4409 = (int)99999;
  int _4410 = (int)99999;
  int _4411 = (int)99999;
  if (_4400)
  {
    {
      int _4412 = (int)0;
      int _8871 = (int)0;
      int _8872 = _4396;
      for (int _4413 = _8871; _4413 < _8872; ++_4413)
      {
        {
          if ((_4412 < _ptr__4406[safe_add( _4397,_4413 )]))
          {
            {
              _4412 = _ptr__4406[safe_add( _4397,_4413 )];
            }
          }
          {}
        }
      }
      _4409 = _4395->alloci32(safe_add( _4412,(int)1 ));
      _4410 = _4395->alloci32(_4398);
      _4411 = _4395->alloci32(_4398);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _4414 = mosek::fusion::p_WorkStack::_get_impl(_4395)->i32;
  _checked_ptr_1<int> _ptr__4414(_4414 ? _4414->raw() : nullptr,_4414 ? _4414->size(0) : 0);
  if (_4400)
  {
    {
      int _4415 = _4410;
      int _4416 = _4411;
      int _8873 = (int)0;
      int _8874 = _4398;
      for (int _4417 = _8873; _4417 < _8874; ++_4417)
      {
        {
          _ptr__4414[safe_add( _4415,_4417 )] = _4417;
        }
      }
      if ((dim < (_4396 - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _4418 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4396)));
          _checked_ptr_1<long long> _ptr__4418(_4418 ? _4418->raw() : nullptr,_4418 ? _4418->size(0) : 0);
          _ptr__4418[(_4396 - (int)1)] = (int)1;
          int _8875 = (int)1;
          int _8876 = _4396;
          for (int _4419 = _8875; _4419 < _8876; ++_4419)
          {
            {
              _ptr__4418[((_4396 - _4419) - (int)1)] = safe_mul( _ptr__4418[(_4396 - _4419)],_ptr__4406[(safe_add( _4397,_4396 ) - _4419)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _4420 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_4396 - (int)1))));
          _checked_ptr_1<int> _ptr__4420(_4420 ? _4420->raw() : nullptr,_4420 ? _4420->size(0) : 0);
          int _8877 = (int)0;
          int _8878 = dim;
          for (int _4421 = _8877; _4421 < _8878; ++_4421)
          {
            {
              _ptr__4420[((_4396 - _4421) - (int)2)] = _4421;
            }
          }
          int _8879 = safe_add( dim,(int)1 );
          int _8880 = _4396;
          for (int _4422 = _8879; _4422 < _8880; ++_4422)
          {
            {
              _ptr__4420[((_4396 - _4422) - (int)1)] = _4422;
            }
          }
          int _8881 = (int)0;
          int _8882 = (_4396 - (int)1);
          for (int _4423 = _8881; _4423 < _8882; ++_4423)
          {
            {
              int _4424 = _ptr__4420[_4423];
              int _4425 = _ptr__4406[safe_add( _4397,_4424 )];
              int _8883 = (int)0;
              int _8884 = safe_add( _4425,(int)1 );
              for (int _4426 = _8883; _4426 < _8884; ++_4426)
              {
                {
                  _ptr__4414[safe_add( _4409,_4426 )] = (int)0;
                }
              }
              int _8885 = (int)0;
              int _8886 = _4398;
              for (int _4427 = _8885; _4427 < _8886; ++_4427)
              {
                {
                  ++ _ptr__4414[safe_add( safe_add( _4409,(int)1 ),((_ptr__4407[safe_add( _4402,_4427 )] / _ptr__4418[_4424]) % _4425) )];
                }
              }
              int _8887 = (int)0;
              int _8888 = _4425;
              for (int _4428 = _8887; _4428 < _8888; ++_4428)
              {
                {
                  _ptr__4414[safe_add( safe_add( _4409,_4428 ),(int)1 )] += _ptr__4414[safe_add( _4409,_4428 )];
                }
              }
              int _8889 = (int)0;
              int _8890 = _4398;
              for (int _4429 = _8889; _4429 < _8890; ++_4429)
              {
                {
                  int _4430 = _ptr__4414[safe_add( _4415,_4429 )];
                  long long _4431 = ((_ptr__4407[safe_add( _4402,_4430 )] / _ptr__4418[_4424]) % _4425);
                  _ptr__4414[safe_add( _4416,_ptr__4414[safe_add( _4409,_4431 )] )] = _4430;
                  ++ _ptr__4414[safe_add( _4409,_4431 )];
                }
              }
              int _4432 = _4416;
              _4416 = _4415;
              _4415 = _4432;
            }
          }
        }
      }
      {}
      int _4433 = (int)1;
      int _8891 = (int)0;
      int _8892 = dim;
      for (int _4434 = _8891; _4434 < _8892; ++_4434)
      {
        {
          _4433 *= _ptr__4406[safe_add( _4397,_4434 )];
        }
      }
      int _4435 = _ptr__4406[safe_add( _4397,dim )];
      int _4436 = (int)1;
      int _8893 = safe_add( dim,(int)1 );
      int _8894 = _4396;
      for (int _4437 = _8893; _4437 < _8894; ++_4437)
      {
        {
          _4436 *= _ptr__4406[safe_add( _4397,_4437 )];
        }
      }
      int _4438 = safe_mul( _4436,_4435 );
      int _4439 = _4436;
      int _4440 = (int)1;
      int _4441 = (int)0;
      long long _4442 = (-(int)1);
      long long _4443 = (-(int)1);
      int _8895 = (int)0;
      int _8896 = _4398;
      for (int _4444 = _8895; _4444 < _8896; ++_4444)
      {
        {
          int _4445 = _ptr__4414[safe_add( _4415,_4444 )];
          long long _4446 = ((_ptr__4407[safe_add( _4402,_4445 )] / _4438) % _4433);
          long long _4447 = (_ptr__4407[safe_add( _4402,_4445 )] % _4436);
          if (((_4443 != _4446) || (_4442 != _4447)))
          {
            {
              _4443 = _4446;
              _4442 = _4447;
              ++ _4441;
            }
          }
          {}
        }
      }
      int _4448 = (_4396 - (int)1);
      bool _4449 = (_4441 < safe_mul( _4433,_4436 ));
      int _4450 = _4399;
      _4393->alloc_expr(_4448,_4441,_4450,_4449);
      int _4451 = mosek::fusion::p_WorkStack::_get_impl(_4393)->ptr_base;
      int _4452 = mosek::fusion::p_WorkStack::_get_impl(_4393)->nidxs_base;
      int _8897;
      bool _8898 = _4449;
      if (_8898)
      {
        _8897 = mosek::fusion::p_WorkStack::_get_impl(_4393)->sp_base;
      }
      else
      {
        _8897 = _4393->alloci64(_4441);
      }
      int _4453 = _8897;
      int _4454 = mosek::fusion::p_WorkStack::_get_impl(_4393)->cof_base;
      int _4455 = mosek::fusion::p_WorkStack::_get_impl(_4393)->bfix_base;
      int _4456 = mosek::fusion::p_WorkStack::_get_impl(_4393)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4457 = mosek::fusion::p_WorkStack::_get_impl(_4393)->i32;
      _checked_ptr_1<int> _ptr__4457(_4457 ? _4457->raw() : nullptr,_4457 ? _4457->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4458 = mosek::fusion::p_WorkStack::_get_impl(_4393)->i64;
      _checked_ptr_1<long long> _ptr__4458(_4458 ? _4458->raw() : nullptr,_4458 ? _4458->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4459 = mosek::fusion::p_WorkStack::_get_impl(_4393)->f64;
      _checked_ptr_1<double> _ptr__4459(_4459 ? _4459->raw() : nullptr,_4459 ? _4459->size(0) : 0);
      int _8899 = (int)0;
      int _8900 = dim;
      for (int _4460 = _8899; _4460 < _8900; ++_4460)
      {
        {
          _ptr__4457[safe_add( _4456,_4460 )] = _ptr__4406[safe_add( _4397,_4460 )];
        }
      }
      int _8901 = safe_add( dim,(int)1 );
      int _8902 = _4396;
      for (int _4461 = _8901; _4461 < _8902; ++_4461)
      {
        {
          _ptr__4457[(safe_add( _4456,_4461 ) - (int)1)] = _ptr__4406[safe_add( _4397,_4461 )];
        }
      }
      _ptr__4457[_4451] = (int)0;
      int _4462 = (int)0;
      int _4463 = (int)0;
      int _4464 = (int)0;
      while ( (_4464 < _4398) )
      {
        {
          int _4465 = _4464;
          long long _4466 = ((_ptr__4407[safe_add( _4402,_ptr__4414[safe_add( _4415,_4465 )] )] / _4438) % _4433);
          long long _4467 = (_ptr__4407[safe_add( _4402,_ptr__4414[safe_add( _4415,_4465 )] )] % _4436);
          ++ _4464;
          while ( ((_4464 < _4398) && ((_4466 == ((_ptr__4407[safe_add( _4402,_ptr__4414[safe_add( _4415,_4464 )] )] / _4438) % _4433)) && (_4467 == (_ptr__4407[safe_add( _4402,_ptr__4414[safe_add( _4415,_4464 )] )] % _4436)))) )
          {
            {
              ++ _4464;
            }
          }
          double _4468 = 0.0;
          int _8903 = _4465;
          int _8904 = _4464;
          for (int _4469 = _8903; _4469 < _8904; ++_4469)
          {
            {
              int _4470 = _ptr__4414[safe_add( _4415,_4469 )];
              int _8905 = _ptr__4406[safe_add( _4401,_4470 )];
              int _8906 = _ptr__4406[safe_add( safe_add( _4401,_4470 ),(int)1 )];
              for (int _4471 = _8905; _4471 < _8906; ++_4471)
              {
                {
                  _ptr__4458[safe_add( _4452,_4463 )] = _ptr__4407[safe_add( _4403,_4471 )];
                  _ptr__4459[safe_add( _4454,_4463 )] = _ptr__4408[safe_add( _4405,_4471 )];
                  ++ _4463;
                }
              }
              _4468 += _ptr__4408[safe_add( _4404,_4470 )];
            }
          }
          _ptr__4458[safe_add( _4453,_4462 )] = safe_add( safe_mul( _4466,_4436 ),_4467 );
          _ptr__4457[safe_add( safe_add( _4451,_4462 ),(int)1 )] = _4463;
          _ptr__4459[safe_add( _4455,_4462 )] = _4468;
          ++ _4462;
        }
      }
      if ((!_4449))
      {
        {
          _4393->popi64(_4441);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4472 = (int)1;
      int _8907 = (int)0;
      int _8908 = dim;
      for (int _4473 = _8907; _4473 < _8908; ++_4473)
      {
        {
          _4472 *= _ptr__4406[safe_add( _4397,_4473 )];
        }
      }
      int _4474 = _ptr__4406[safe_add( _4397,dim )];
      int _4475 = (int)1;
      int _8909 = safe_add( dim,(int)1 );
      int _8910 = _4396;
      for (int _4476 = _8909; _4476 < _8910; ++_4476)
      {
        {
          _4475 *= _ptr__4406[safe_add( _4397,_4476 )];
        }
      }
      int _4477 = safe_mul( _4475,_4474 );
      int _4478 = _4475;
      int _4479 = (int)1;
      int _4480 = safe_mul( _4472,_4475 );
      int _4481 = _4393->alloci32(safe_add( _4480,(int)1 ));
      int _4482 = _4393->alloci64(_4399);
      int _4483 = _4393->allocf64(_4399);
      int _4484 = _4393->allocf64(_4480);
      _4393->pushi32((int)0);
      _4393->pushi32(_4399);
      _4393->pushi32(_4480);
      int _4485 = _4393->alloci32((_4396 - (int)1));
      _4393->pushi32((_4396 - (int)1));
      std::shared_ptr< monty::ndarray< int,1 > > _4486 = mosek::fusion::p_WorkStack::_get_impl(_4393)->i32;
      _checked_ptr_1<int> _ptr__4486(_4486 ? _4486->raw() : nullptr,_4486 ? _4486->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4487 = mosek::fusion::p_WorkStack::_get_impl(_4393)->i64;
      _checked_ptr_1<long long> _ptr__4487(_4487 ? _4487->raw() : nullptr,_4487 ? _4487->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4488 = mosek::fusion::p_WorkStack::_get_impl(_4393)->f64;
      _checked_ptr_1<double> _ptr__4488(_4488 ? _4488->raw() : nullptr,_4488 ? _4488->size(0) : 0);
      int _8911 = (int)0;
      int _8912 = dim;
      for (int _4489 = _8911; _4489 < _8912; ++_4489)
      {
        {
          _ptr__4486[safe_add( _4485,_4489 )] = _ptr__4406[safe_add( _4397,_4489 )];
        }
      }
      int _8913 = safe_add( dim,(int)1 );
      int _8914 = _4396;
      for (int _4490 = _8913; _4490 < _8914; ++_4490)
      {
        {
          _ptr__4486[(safe_add( _4485,_4490 ) - (int)1)] = _ptr__4406[safe_add( _4397,_4490 )];
        }
      }
      int _4491 = (int)0;
      int _4492 = (int)0;
      _ptr__4486[_4481] = (int)0;
      int _8915 = (int)0;
      int _8916 = _4472;
      for (int _4493 = _8915; _4493 < _8916; ++_4493)
      {
        {
          int _8917 = (int)0;
          int _8918 = _4475;
          for (int _4494 = _8917; _4494 < _8918; ++_4494)
          {
            {
              double _4495 = 0.0;
              int _8919 = (int)0;
              int _8920 = _4474;
              for (int _4496 = _8919; _4496 < _8920; ++_4496)
              {
                {
                  int _4497 = safe_add( safe_add( safe_mul( _4493,_4477 ),safe_mul( _4496,_4478 ) ),_4494 );
                  int _8921 = _ptr__4406[safe_add( _4401,_4497 )];
                  int _8922 = _ptr__4406[safe_add( safe_add( _4401,_4497 ),(int)1 )];
                  for (int _4498 = _8921; _4498 < _8922; ++_4498)
                  {
                    {
                      _ptr__4487[safe_add( _4482,_4492 )] = _ptr__4407[safe_add( _4403,_4498 )];
                      _ptr__4488[safe_add( _4483,_4492 )] = _ptr__4408[safe_add( _4405,_4498 )];
                      ++ _4492;
                    }
                  }
                  _4495 += _ptr__4408[safe_add( _4404,_4497 )];
                }
              }
              _ptr__4486[safe_add( safe_add( _4481,_4491 ),(int)1 )] = _4492;
              _ptr__4488[safe_add( _4484,_4491 )] = _4495;
              ++ _4491;
            }
          }
        }
      }
    }
  }
  _4395->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int _4499,std::shared_ptr< monty::ndarray< int,1 > > _4500){
  _checked_ptr_1<int> _ptr__4500(_4500 ? _4500->raw() : nullptr, _4500 ? _4500->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4501 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((_4500)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__4501(_4501 ? _4501->raw() : nullptr,_4501 ? _4501->size(0) : 0);
  int _8923 = (int)0;
  int _8924 = _4499;
  for (int _4502 = _8923; _4502 < _8924; ++_4502)
  {
    {
      _ptr__4501[_4502] = _ptr__4500[_4502];
    }
  }
  int _8925 = safe_add( _4499,(int)1 );
  int _8926 = (int)((_4500)->size(0));
  for (int _4503 = _8925; _4503 < _8926; ++_4503)
  {
    {
      _ptr__4501[(_4503 - (int)1)] = _ptr__4500[_4503];
    }
  }
  return _4501;
}
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSumReduce::toString(){
  return std::string ("ExprSumReduce()");
}
void mosek::fusion::p_ExprSumReduce::destroy(){expr.reset();}void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDenseTril::p_ExprDenseTril  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _4504,    int _4505,    monty::rc_ptr< ::mosek::fusion::Expression > _4506,    int _4507){ return new mosek::fusion::ExprDenseTril(_4504,_4505,_4506,_4507); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _4504,    int _4505,    monty::rc_ptr< ::mosek::fusion::Expression > _4506,    int _4507) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_4504,_4505,_4506,_4507); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _4504,    int _4505,    monty::rc_ptr< ::mosek::fusion::Expression > _4506,    int _4507){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4506->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _4506;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _4504;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _4505;
  }
}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _4508,    int _4509,    monty::rc_ptr< ::mosek::fusion::Expression > _4510){ return new mosek::fusion::ExprDenseTril(_4508,_4509,_4510); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _4508,    int _4509,    monty::rc_ptr< ::mosek::fusion::Expression > _4510) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_4508,_4509,_4510); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _4508,    int _4509,    monty::rc_ptr< ::mosek::fusion::Expression > _4510){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprDenseTril::_initialize(_4508,_4509,_4510,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4511 = _4510->getShape();
    _checked_ptr_1<int> _ptr__4511(_4511 ? _4511->raw() : nullptr,_4511 ? _4511->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_4511)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_4511)->size(0))) || (_ptr__4511[dim0] != _ptr__4511[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4512,monty::rc_ptr< ::mosek::fusion::WorkStack > _4513,monty::rc_ptr< ::mosek::fusion::WorkStack > _4514) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_4512,_4513,_4514); }void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4512,monty::rc_ptr< ::mosek::fusion::WorkStack > _4513,monty::rc_ptr< ::mosek::fusion::WorkStack > _4514){
  expr->eval(_4513,_4512,_4514);
  std::shared_ptr< monty::ndarray< int,1 > > _4515 = mosek::fusion::p_WorkStack::_get_impl(_4513)->i32;
  _checked_ptr_1<int> _ptr__4515(_4515 ? _4515->raw() : nullptr,_4515 ? _4515->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4516 = mosek::fusion::p_WorkStack::_get_impl(_4513)->i64;
  _checked_ptr_1<long long> _ptr__4516(_4516 ? _4516->raw() : nullptr,_4516 ? _4516->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4517 = mosek::fusion::p_WorkStack::_get_impl(_4513)->f64;
  _checked_ptr_1<double> _ptr__4517(_4517 ? _4517->raw() : nullptr,_4517 ? _4517->size(0) : 0);
  int _8927;
  bool _8928 = (dim0 < dim1);
  if (_8928)
  {
    _8927 = dim0;
  }
  else
  {
    _8927 = dim1;
  }
  int _4518 = _8927;
  int _8929;
  bool _8930 = (dim0 > dim1);
  if (_8930)
  {
    _8929 = dim0;
  }
  else
  {
    _8929 = dim1;
  }
  int _4519 = _8929;
  bool _4520 = (dim0 < dim1);
  int _4521 = _4513->popi32();
  int _4522 = _4513->popi32(_4521);
  int _4523 = _4513->popi32();
  int _4524 = _4513->popi32();
  bool _4525 = (_4513->popi32() != (int)0);
  int _4526 = _4513->popi32(safe_add( _4523,(int)1 ));
  int _8931;
  bool _8932 = _4525;
  if (_8932)
  {
    _8931 = _4513->popi64(_4523);
  }
  else
  {
    _8931 = (-(int)1);
  }
  int _4527 = _8931;
  int _4528 = _4513->popi64(_4524);
  int _4529 = _4513->popf64(_4523);
  int _4530 = _4513->popf64(_4524);
  std::vector<int> _8933;
  for (int _4532 = (int)0, _8934 = (int)5; _4532 < _8934 ; ++_4532)
  {
    _8933.push_back((int)1);
  }
  auto _8935 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8933.size()),_8933.begin(),_8933.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4531 = _8935;
  _checked_ptr_1<int> _ptr__4531(_4531 ? _4531->raw() : nullptr,_4531 ? _4531->size(0) : 0);
  int _8936 = (int)0;
  int _8937 = _4518;
  for (int _4533 = _8936; _4533 < _8937; ++_4533)
  {
    {
      _ptr__4531[(int)0] *= _ptr__4515[safe_add( _4522,_4533 )];
    }
  }
  _ptr__4531[(int)1] = _ptr__4515[safe_add( _4522,_4518 )];
  int _8938 = safe_add( _4518,(int)1 );
  int _8939 = _4519;
  for (int _4534 = _8938; _4534 < _8939; ++_4534)
  {
    {
      _ptr__4531[(int)2] *= _ptr__4515[safe_add( _4522,_4534 )];
    }
  }
  _ptr__4531[(int)3] = _ptr__4515[safe_add( _4522,_4519 )];
  int _8940 = safe_add( _4519,(int)1 );
  int _8941 = _4521;
  for (int _4535 = _8940; _4535 < _8941; ++_4535)
  {
    {
      _ptr__4531[(int)4] *= _ptr__4515[safe_add( _4522,_4535 )];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4536 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__4536(_4536 ? _4536->raw() : nullptr,_4536 ? _4536->size(0) : 0);
  _ptr__4536[(int)4] = (int)1;
  int _8942 = (int)1;
  int _8943 = (int)5;
  for (int _4537 = _8942; _4537 < _8943; ++_4537)
  {
    {
      _ptr__4536[(((int)5 - _4537) - (int)1)] = safe_mul( _ptr__4536[((int)5 - _4537)],_ptr__4531[((int)5 - _4537)] );
    }
  }
  int _4538 = (int)0;
  int _4539 = (int)0;
  {
    if (_4525)
    {
      {
        if (_4520)
        {
          {
            int _8944 = (int)0;
            int _8945 = _4523;
            for (int _4540 = _8944; _4540 < _8945; ++_4540)
            {
              {
                long long _4541 = ((_ptr__4516[safe_add( _4527,_4540 )] / _ptr__4536[(int)1]) % _ptr__4531[(int)1]);
                long long _4542 = ((_ptr__4516[safe_add( _4527,_4540 )] / _ptr__4536[(int)3]) % _ptr__4531[(int)3]);
                if ((_4541 >= _4542))
                {
                  {
                    _4538 += (_ptr__4515[safe_add( safe_add( _4526,_4540 ),(int)1 )] - _ptr__4515[safe_add( _4526,_4540 )]);
                    ++ _4539;
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int _8946 = (int)0;
            int _8947 = _4523;
            for (int _4543 = _8946; _4543 < _8947; ++_4543)
            {
              {
                long long _4544 = ((_ptr__4516[safe_add( _4527,_4543 )] / _ptr__4536[(int)1]) % _ptr__4531[(int)1]);
                long long _4545 = ((_ptr__4516[safe_add( _4527,_4543 )] / _ptr__4536[(int)3]) % _ptr__4531[(int)3]);
                if ((_4544 <= _4545))
                {
                  {
                    _4538 += (_ptr__4515[safe_add( safe_add( _4526,_4543 ),(int)1 )] - _ptr__4515[safe_add( _4526,_4543 )]);
                    ++ _4539;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        _4539 = safe_mul( safe_mul( safe_mul( _ptr__4531[(int)0],_ptr__4531[(int)2] ),_ptr__4531[(int)4] ),(safe_mul( _ptr__4531[(int)1],safe_add( _ptr__4531[(int)1],(int)1 ) ) / (int)2) );
        if (_4520)
        {
          {
            int _8948 = (int)0;
            int _8949 = _ptr__4531[(int)0];
            for (int _4546 = _8948; _4546 < _8949; ++_4546)
            {
              {
                int _8950 = (int)0;
                int _8951 = _ptr__4531[(int)1];
                for (int _4547 = _8950; _4547 < _8951; ++_4547)
                {
                  {
                    int _8952 = (int)0;
                    int _8953 = _ptr__4531[(int)2];
                    for (int _4548 = _8952; _4548 < _8953; ++_4548)
                    {
                      {
                        int _8954 = (int)0;
                        int _8955 = safe_add( _4547,(int)1 );
                        for (int _4549 = _8954; _4549 < _8955; ++_4549)
                        {
                          {
                            int _8956 = (int)0;
                            int _8957 = _ptr__4531[(int)4];
                            for (int _4550 = _8956; _4550 < _8957; ++_4550)
                            {
                              {
                                int _4551 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4546,_ptr__4536[(int)0] ),safe_mul( _4547,_ptr__4536[(int)1] ) ),safe_mul( _4548,_ptr__4536[(int)2] ) ),safe_mul( _4549,_ptr__4536[(int)3] ) ),safe_mul( _4550,_ptr__4536[(int)4] ) );
                                _4538 += (_ptr__4515[safe_add( safe_add( _4526,_4551 ),(int)1 )] - _ptr__4515[safe_add( _4526,_4551 )]);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int _8958 = (int)0;
            int _8959 = _ptr__4531[(int)0];
            for (int _4552 = _8958; _4552 < _8959; ++_4552)
            {
              {
                int _8960 = (int)0;
                int _8961 = _ptr__4531[(int)1];
                for (int _4553 = _8960; _4553 < _8961; ++_4553)
                {
                  {
                    int _8962 = (int)0;
                    int _8963 = _ptr__4531[(int)2];
                    for (int _4554 = _8962; _4554 < _8963; ++_4554)
                    {
                      {
                        int _8964 = _4553;
                        int _8965 = _ptr__4531[(int)3];
                        for (int _4555 = _8964; _4555 < _8965; ++_4555)
                        {
                          {
                            int _8966 = (int)0;
                            int _8967 = _ptr__4531[(int)4];
                            for (int _4556 = _8966; _4556 < _8967; ++_4556)
                            {
                              {
                                int _4557 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4552,_ptr__4536[(int)0] ),safe_mul( _4553,_ptr__4536[(int)1] ) ),safe_mul( _4554,_ptr__4536[(int)2] ) ),safe_mul( _4555,_ptr__4536[(int)3] ) ),safe_mul( _4556,_ptr__4536[(int)4] ) );
                                _4538 += (_ptr__4515[safe_add( safe_add( _4526,_4557 ),(int)1 )] - _ptr__4515[safe_add( _4526,_4557 )]);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _4558 = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__4531[(int)0],_ptr__4531[(int)2] ),_ptr__4531[(int)4] ),_ptr__4531[(int)1] ),safe_add( _ptr__4531[(int)1],(int)1 ) ) / (int)2);
  int _4559 = _4512->alloci32(safe_add( _4558,(int)1 ));
  _4512->pushi32((int)1);
  _4512->pushi32(_4538);
  _4512->pushi32(_4558);
  int _8968 = (int)0;
  int _8969 = _4521;
  for (int _4560 = _8968; _4560 < _8969; ++_4560)
  {
    {
      _4512->pushi32(_ptr__4515[safe_add( _4522,_4560 )]);
    }
  }
  _4512->pushi32(_4521);
  int _4561 = _4512->alloci64(_4538);
  int _4562 = _4512->alloci64(_4558);
  int _4563 = _4512->allocf64(_4538);
  int _4564 = _4512->allocf64(_4558);
  std::shared_ptr< monty::ndarray< int,1 > > _4565 = mosek::fusion::p_WorkStack::_get_impl(_4512)->i32;
  _checked_ptr_1<int> _ptr__4565(_4565 ? _4565->raw() : nullptr,_4565 ? _4565->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4566 = mosek::fusion::p_WorkStack::_get_impl(_4512)->i64;
  _checked_ptr_1<long long> _ptr__4566(_4566 ? _4566->raw() : nullptr,_4566 ? _4566->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4567 = mosek::fusion::p_WorkStack::_get_impl(_4512)->f64;
  _checked_ptr_1<double> _ptr__4567(_4567 ? _4567->raw() : nullptr,_4567 ? _4567->size(0) : 0);
  _ptr__4565[_4559] = (int)0;
  if (_4520)
  {
    {
      int _4568 = (int)0;
      int _8970 = (int)0;
      int _8971 = _ptr__4531[(int)0];
      for (int _4569 = _8970; _4569 < _8971; ++_4569)
      {
        {
          int _8972 = (int)0;
          int _8973 = _ptr__4531[(int)1];
          for (int _4570 = _8972; _4570 < _8973; ++_4570)
          {
            {
              int _8974 = (int)0;
              int _8975 = _ptr__4531[(int)2];
              for (int _4571 = _8974; _4571 < _8975; ++_4571)
              {
                {
                  int _8976 = (int)0;
                  int _8977 = safe_add( _4570,(int)1 );
                  for (int _4572 = _8976; _4572 < _8977; ++_4572)
                  {
                    {
                      int _8978 = (int)0;
                      int _8979 = _ptr__4531[(int)4];
                      for (int _4573 = _8978; _4573 < _8979; ++_4573)
                      {
                        {
                          _ptr__4566[safe_add( _4562,_4568 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _4569,_ptr__4536[(int)0] ),safe_mul( _4570,_ptr__4536[(int)1] ) ),safe_mul( _4571,_ptr__4536[(int)2] ) ),safe_mul( _4572,_ptr__4536[(int)3] ) ),safe_mul( _4573,_ptr__4536[(int)4] ) );
                          ++ _4568;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _4574 = (int)0;
      int _8980 = (int)0;
      int _8981 = _ptr__4531[(int)0];
      for (int _4575 = _8980; _4575 < _8981; ++_4575)
      {
        {
          int _8982 = (int)0;
          int _8983 = _ptr__4531[(int)1];
          for (int _4576 = _8982; _4576 < _8983; ++_4576)
          {
            {
              int _8984 = (int)0;
              int _8985 = _ptr__4531[(int)2];
              for (int _4577 = _8984; _4577 < _8985; ++_4577)
              {
                {
                  int _8986 = _4576;
                  int _8987 = _ptr__4531[(int)3];
                  for (int _4578 = _8986; _4578 < _8987; ++_4578)
                  {
                    {
                      int _8988 = (int)0;
                      int _8989 = _ptr__4531[(int)4];
                      for (int _4579 = _8988; _4579 < _8989; ++_4579)
                      {
                        {
                          _ptr__4566[safe_add( _4562,_4574 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _4575,_ptr__4536[(int)0] ),safe_mul( _4576,_ptr__4536[(int)1] ) ),safe_mul( _4577,_ptr__4536[(int)2] ) ),safe_mul( _4578,_ptr__4536[(int)3] ) ),safe_mul( _4579,_ptr__4536[(int)4] ) );
                          ++ _4574;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  {
    int _4580 = (int)0;
    if (_4525)
    {
      {
        int _4581 = (int)0;
        int _4582 = (int)0;
        while ( ((_4582 < _4523) && (_4581 < _4558)) )
        {
          {
            if ((_ptr__4516[safe_add( _4527,_4582 )] < _ptr__4566[safe_add( _4562,_4581 )]))
            {
              {
                ++ _4582;
              }
            }
            else if((_ptr__4516[safe_add( _4527,_4582 )] > _ptr__4566[safe_add( _4562,_4581 )]))
            {
              {
                _ptr__4567[safe_add( _4564,_4581 )] = 0.0;
                _ptr__4565[safe_add( safe_add( _4559,_4581 ),(int)1 )] = _4580;
                ++ _4581;
              }
            }
            else
            {
              {
                int _8990 = _ptr__4515[safe_add( _4526,_4582 )];
                int _8991 = _ptr__4515[safe_add( safe_add( _4526,_4582 ),(int)1 )];
                for (int _4583 = _8990; _4583 < _8991; ++_4583)
                {
                  {
                    _ptr__4566[safe_add( _4561,_4580 )] = _ptr__4516[safe_add( _4528,_4583 )];
                    _ptr__4567[safe_add( _4563,_4580 )] = _ptr__4517[safe_add( _4530,_4583 )];
                    ++ _4580;
                  }
                }
                _ptr__4567[safe_add( _4564,_4581 )] = _ptr__4517[safe_add( _4529,_4582 )];
                _ptr__4565[safe_add( safe_add( _4559,_4581 ),(int)1 )] = _4580;
                ++ _4582;
                ++ _4581;
              }
            }
          }
        }
        while ( (_4581 < _4558) )
        {
          {
            _ptr__4565[safe_add( safe_add( _4559,_4581 ),(int)1 )] = _4580;
            _ptr__4567[safe_add( _4564,_4581 )] = 0.0;
            ++ _4581;
          }
        }
      }
    }
    else
    {
      {
        int _8992 = (int)0;
        int _8993 = _4558;
        for (int _4584 = _8992; _4584 < _8993; ++_4584)
        {
          {
            long long _4585 = _ptr__4566[safe_add( _4562,_4584 )];
            _ptr__4567[safe_add( _4564,_4584 )] = _ptr__4517[safe_add( _4529,_4585 )];
            int _8994 = _ptr__4515[safe_add( _4526,_4585 )];
            int _8995 = _ptr__4515[safe_add( safe_add( _4526,_4585 ),(int)1 )];
            for (int _4586 = _8994; _4586 < _8995; ++_4586)
            {
              {
                _ptr__4566[safe_add( _4561,_4580 )] = _ptr__4516[safe_add( _4528,_4586 )];
                _ptr__4567[safe_add( _4563,_4580 )] = _ptr__4517[safe_add( _4530,_4586 )];
                ++ _4580;
              }
            }
            _ptr__4565[safe_add( safe_add( _4559,_4584 ),(int)1 )] = _4580;
          }
        }
      }
    }
  }
}
void mosek::fusion::p_ExprDenseTril::destroy(){expr.reset();}void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDense::p_ExprDense  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _4587){ return new mosek::fusion::ExprDense(_4587); }mosek::fusion::ExprDense::ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _4587) :    ExprDense(new mosek::fusion::p_ExprDense(this)){ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_4587); }void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4587){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4587->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _4587;
  }
}void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4588,monty::rc_ptr< ::mosek::fusion::WorkStack > _4589,monty::rc_ptr< ::mosek::fusion::WorkStack > _4590) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_4588,_4589,_4590); }void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4588,monty::rc_ptr< ::mosek::fusion::WorkStack > _4589,monty::rc_ptr< ::mosek::fusion::WorkStack > _4590){
  expr->eval(_4588,_4589,_4590);
  _4588->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_4588)->hassp)
  {
    {
      int _4591 = mosek::fusion::p_WorkStack::_get_impl(_4588)->nd;
      int _4592 = mosek::fusion::p_WorkStack::_get_impl(_4588)->nnz;
      int _4593 = mosek::fusion::p_WorkStack::_get_impl(_4588)->nelem;
      int _4594 = mosek::fusion::p_WorkStack::_get_impl(_4588)->sp_base;
      std::vector<int> _8996;
      for (int _4596 = (int)0, _8997 = _4591; _4596 < _8997 ; ++_4596)
      {
        _8996.push_back(((*mosek::fusion::p_WorkStack::_get_impl(_4588)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4588)->shape_base,_4596 ))));
      }
      auto _8998 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8996.size()),_8996.begin(),_8996.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _4595 = _8998;
      _checked_ptr_1<int> _ptr__4595(_4595 ? _4595->raw() : nullptr,_4595 ? _4595->size(0) : 0);
      int _4597 = (int)::mosek::fusion::p_Set::size(_4595);
      _4588->popi32(safe_add( (int)4,_4591 ));
      if ((_4597 == _4593))
      {
        {
          _4588->popi64(_4593);
          _4588->pushi32((int)0);
          _4588->pushi32(_4592);
          _4588->pushi32(_4593);
          int _4598 = _4588->alloci32(_4591);
          int _8999 = (int)0;
          int _9000 = _4591;
          for (int _4599 = _8999; _4599 < _9000; ++_4599)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_4588)->i32)(safe_add( _4598,_4599 ))) = _ptr__4595[_4599];
            }
          }
          _4588->pushi32(_4591);
          _4588->peek_expr();
        }
      }
      else
      {
        {
          int _4600 = _4590->alloci32(safe_add( _4597,(int)1 ));
          int _4601 = _4590->allocf64(_4597);
          std::shared_ptr< monty::ndarray< int,1 > > _4602 = mosek::fusion::p_WorkStack::_get_impl(_4590)->i32;
          _checked_ptr_1<int> _ptr__4602(_4602 ? _4602->raw() : nullptr,_4602 ? _4602->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4603 = mosek::fusion::p_WorkStack::_get_impl(_4590)->f64;
          _checked_ptr_1<double> _ptr__4603(_4603 ? _4603->raw() : nullptr,_4603 ? _4603->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_WorkStack::_get_impl(_4588)->f64,mosek::fusion::p_WorkStack::_get_impl(_4588)->bfix_base,_4603,_4601,_4593);
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_WorkStack::_get_impl(_4588)->i32,mosek::fusion::p_WorkStack::_get_impl(_4588)->ptr_base,_4602,_4600,safe_add( _4593,(int)1 ));
          _4588->popi32(safe_add( _4593,(int)1 ));
          _4588->popf64(_4593);
          int _4604 = _4588->alloci32(safe_add( _4597,(int)1 ));
          int _4605 = _4588->allocf64(_4597);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _4606 = mosek::fusion::p_WorkStack::_get_impl(_4588)->i32;
            _checked_ptr_1<int> _ptr__4606(_4606 ? _4606->raw() : nullptr,_4606 ? _4606->size(0) : 0);
            std::shared_ptr< monty::ndarray< long long,1 > > _4607 = mosek::fusion::p_WorkStack::_get_impl(_4588)->i64;
            _checked_ptr_1<long long> _ptr__4607(_4607 ? _4607->raw() : nullptr,_4607 ? _4607->size(0) : 0);
            std::shared_ptr< monty::ndarray< double,1 > > _4608 = mosek::fusion::p_WorkStack::_get_impl(_4588)->f64;
            _checked_ptr_1<double> _ptr__4608(_4608 ? _4608->raw() : nullptr,_4608 ? _4608->size(0) : 0);
            _ptr__4606[_4604] = (int)0;
            int _4609 = (int)0;
            if ((_4593 > (int)0))
            {
              {
                int _9001 = (int)0;
                int _9002 = _4597;
                for (int _4610 = _9001; _4610 < _9002; ++_4610)
                {
                  {
                    if (((_4609 < _4593) && (_ptr__4607[safe_add( _4594,_4609 )] == _4610)))
                    {
                      {
                        _ptr__4608[safe_add( _4605,_4610 )] = _ptr__4603[safe_add( _4601,_4609 )];
                        ++ _4609;
                      }
                    }
                    else
                    {
                      {
                        _ptr__4608[safe_add( _4605,_4610 )] = (int)0;
                      }
                    }
                    _ptr__4606[safe_add( safe_add( _4604,_4610 ),(int)1 )] = _ptr__4602[safe_add( _4600,_4609 )];
                  }
                }
              }
            }
            else
            {
              {
                int _9003 = (int)0;
                int _9004 = _4597;
                for (int _4611 = _9003; _4611 < _9004; ++_4611)
                {
                  {
                    _ptr__4608[safe_add( _4605,_4611 )] = (int)0;
                    _ptr__4606[safe_add( safe_add( _4604,_4611 ),(int)1 )] = (int)0;
                  }
                }
              }
            }
          }
          _4588->popi64(_4593);
          _4588->pushi32((int)0);
          _4588->pushi32(_4592);
          _4588->pushi32(_4597);
          int _9005 = (int)0;
          int _9006 = _4591;
          for (int _4612 = _9005; _4612 < _9006; ++_4612)
          {
            {
              _4588->pushi32(_ptr__4595[_4612]);
            }
          }
          _4588->pushi32(_4591);
          if ((((*mosek::fusion::p_WorkStack::_get_impl(_4588)->i32)(safe_add( _4604,_4597 ))) != _4592))
          {
            {
              throw ::mosek::fusion::FatalError(std::string ("Internal: Mismatching ptr and nnz"));
            }
          }
          {}
        }
      }
      _4588->peek_expr();
    }
  }
  {}
  _4590->clear();
}
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDense::destroy(){expr.reset();}void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _4613,    int _4614,    monty::rc_ptr< ::mosek::fusion::Expression > _4615,    int _4616){ return new mosek::fusion::ExprSymmetrize(_4613,_4614,_4615,_4616); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _4613,    int _4614,    monty::rc_ptr< ::mosek::fusion::Expression > _4615,    int _4616) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_4613,_4614,_4615,_4616); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _4613,    int _4614,    monty::rc_ptr< ::mosek::fusion::Expression > _4615,    int _4616){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4615->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _4615;
    if ((_4613 < _4614))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _4613;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _4614;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _4614;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _4613;
      }
    }
  }
}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _4617,    int _4618,    monty::rc_ptr< ::mosek::fusion::Expression > _4619){ return new mosek::fusion::ExprSymmetrize(_4617,_4618,_4619); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _4617,    int _4618,    monty::rc_ptr< ::mosek::fusion::Expression > _4619) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_4617,_4618,_4619); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _4617,    int _4618,    monty::rc_ptr< ::mosek::fusion::Expression > _4619){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprSymmetrize::_initialize(_4617,_4618,_4619,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4620 = _4619->getShape();
    _checked_ptr_1<int> _ptr__4620(_4620 ? _4620->raw() : nullptr,_4620 ? _4620->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_4620)->size(0))) || (_ptr__4620[dim0] != _ptr__4620[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4621,monty::rc_ptr< ::mosek::fusion::WorkStack > _4622,monty::rc_ptr< ::mosek::fusion::WorkStack > _4623) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_4621,_4622,_4623); }void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4621,monty::rc_ptr< ::mosek::fusion::WorkStack > _4622,monty::rc_ptr< ::mosek::fusion::WorkStack > _4623){
  expr->eval(_4622,_4621,_4623);
  int _4624 = (int)0;
  int _4625 = _4622->peeki32();
  int _4626 = _4622->peeki32(safe_add( _4625,(int)3 ));
  int _4627 = _4622->peeki32(safe_add( _4625,(int)2 ));
  int _9007 = (int)0;
  int _9008 = _4625;
  for (int _4628 = _9007; _4628 < _9008; ++_4628)
  {
    {
      int _4629 = _4622->peeki32(safe_add( _4628,(int)1 ));
      if ((_4629 > _4624))
      {
        {
          _4629 = _4624;
        }
      }
      {}
    }
  }
  int _4630 = _4622->alloci32(_4627);
  int _4631 = _4622->alloci32(_4627);
  int _4632 = _4622->alloci32(safe_add( _4624,(int)1 ));
  int _4633 = _4622->alloci64(_4627);
  _4622->popi32(safe_add( safe_add( safe_mul( (int)2,_4627 ),_4624 ),(int)1 ));
  _4622->popi64(_4627);
  int _4634 = _4622->popi32();
  int _4635 = _4622->popi32(_4634);
  int _4636 = _4622->popi32();
  int _4637 = _4622->popi32();
  bool _4638 = (_4622->popi32() != (int)0);
  int _4639 = _4622->popi32(safe_add( _4636,(int)1 ));
  int _9009;
  bool _9010 = _4638;
  if (_9010)
  {
    _9009 = _4622->popi64(_4636);
  }
  else
  {
    _9009 = (-(int)1);
  }
  int _4640 = _9009;
  int _4641 = _4622->popi64(_4637);
  int _4642 = _4622->popf64(_4636);
  int _4643 = _4622->popf64(_4637);
  int _4644 = (int)0;
  int _4645 = (int)0;
  std::vector<int> _9011;
  for (int _4647 = (int)0, _9012 = (int)5; _4647 < _9012 ; ++_4647)
  {
    _9011.push_back((int)1);
  }
  auto _9013 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9011.size()),_9011.begin(),_9011.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4646 = _9013;
  _checked_ptr_1<int> _ptr__4646(_4646 ? _4646->raw() : nullptr,_4646 ? _4646->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4648 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)5)));
  _checked_ptr_1<long long> _ptr__4648(_4648 ? _4648->raw() : nullptr,_4648 ? _4648->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4649 = mosek::fusion::p_WorkStack::_get_impl(_4622)->i32;
  _checked_ptr_1<int> _ptr__4649(_4649 ? _4649->raw() : nullptr,_4649 ? _4649->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4650 = mosek::fusion::p_WorkStack::_get_impl(_4622)->i64;
  _checked_ptr_1<long long> _ptr__4650(_4650 ? _4650->raw() : nullptr,_4650 ? _4650->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4651 = mosek::fusion::p_WorkStack::_get_impl(_4622)->f64;
  _checked_ptr_1<double> _ptr__4651(_4651 ? _4651->raw() : nullptr,_4651 ? _4651->size(0) : 0);
  int _9014 = (int)0;
  int _9015 = dim0;
  for (int _4652 = _9014; _4652 < _9015; ++_4652)
  {
    {
      _ptr__4646[(int)0] *= _ptr__4649[safe_add( _4635,_4652 )];
    }
  }
  _ptr__4646[(int)1] = _ptr__4649[safe_add( _4635,dim0 )];
  int _9016 = safe_add( dim0,(int)1 );
  int _9017 = dim1;
  for (int _4653 = _9016; _4653 < _9017; ++_4653)
  {
    {
      _ptr__4646[(int)2] *= _ptr__4649[safe_add( _4635,_4653 )];
    }
  }
  _ptr__4646[(int)3] = _ptr__4649[safe_add( _4635,dim1 )];
  int _9018 = safe_add( dim1,(int)1 );
  int _9019 = _4634;
  for (int _4654 = _9018; _4654 < _9019; ++_4654)
  {
    {
      _ptr__4646[(int)4] *= _ptr__4649[safe_add( _4635,_4654 )];
    }
  }
  _ptr__4648[(int)4] = (int)1;
  int _9020 = (int)1;
  int _9021 = (int)5;
  for (int _4655 = _9020; _4655 < _9021; ++_4655)
  {
    {
      _ptr__4648[(((int)5 - _4655) - (int)1)] = safe_mul( _ptr__4648[((int)5 - _4655)],_ptr__4646[((int)5 - _4655)] );
    }
  }
  if (_4638)
  {
    {
      int _4656 = _4630;
      int _9022 = (int)0;
      int _9023 = _4636;
      for (int _4657 = _9022; _4657 < _9023; ++_4657)
      {
        {
          _ptr__4649[safe_add( _4656,_4657 )] = _4657;
        }
      }
      int _4658 = _4631;
      std::shared_ptr< monty::ndarray< int,1 > > _4659 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)2),(int)((int)3),(int)((int)0)});
      _checked_ptr_1<int> _ptr__4659(_4659 ? _4659->raw() : nullptr,_4659 ? _4659->size(0) : 0);
      int _9024 = (int)0;
      int _9025 = (int)4;
      for (int _4660 = _9024; _4660 < _9025; ++_4660)
      {
        {
          long long _4661 = _ptr__4648[_ptr__4659[_4660]];
          int _4662 = _ptr__4646[_ptr__4659[_4660]];
          if ((_4662 > (int)1))
          {
            {
              int _9026 = (int)0;
              int _9027 = safe_add( _4662,(int)1 );
              for (int _4663 = _9026; _4663 < _9027; ++_4663)
              {
                {
                  _ptr__4649[safe_add( _4632,_4663 )] = (int)0;
                }
              }
              int _9028 = (int)0;
              int _9029 = _4636;
              for (int _4664 = _9028; _4664 < _9029; ++_4664)
              {
                {
                  ++ _ptr__4649[safe_add( safe_add( _4632,((_ptr__4650[safe_add( _4640,_ptr__4649[safe_add( _4656,_4664 )] )] / _4661) % _4662) ),(int)1 )];
                }
              }
              int _9030 = (int)0;
              int _9031 = _ptr__4646[(int)3];
              for (int _4665 = _9030; _4665 < _9031; ++_4665)
              {
                {
                  _ptr__4649[safe_add( safe_add( _4632,_4665 ),(int)1 )] += _ptr__4649[safe_add( _4632,_4665 )];
                }
              }
              int _9032 = (int)0;
              int _9033 = _4636;
              for (int _4666 = _9032; _4666 < _9033; ++_4666)
              {
                {
                  int _4667 = _ptr__4649[safe_add( _4656,_4666 )];
                  long long _4668 = ((_ptr__4650[safe_add( _4640,_4667 )] / _4661) % _4662);
                  _ptr__4649[safe_add( _4658,_ptr__4649[safe_add( _4632,_4668 )] )] = _4667;
                  ++ _ptr__4649[safe_add( _4632,_4668 )];
                }
              }
              int _4669 = _4656;
              _4656 = _4658;
              _4658 = _4669;
            }
          }
          {}
        }
      }
      int _9034 = (int)0;
      int _9035 = _4636;
      for (int _4670 = _9034; _4670 < _9035; ++_4670)
      {
        {
          _ptr__4650[safe_add( _4633,_4670 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__4650[safe_add( _4640,_4670 )] / _ptr__4648[(int)0]) % _ptr__4646[(int)0]),_ptr__4648[(int)0] ),safe_mul( ((_ptr__4650[safe_add( _4640,_4670 )] / _ptr__4648[(int)1]) % _ptr__4646[(int)1]),_ptr__4648[(int)3] ) ),safe_mul( ((_ptr__4650[safe_add( _4640,_4670 )] / _ptr__4648[(int)2]) % _ptr__4646[(int)2]),_ptr__4648[(int)2] ) ),safe_mul( ((_ptr__4650[safe_add( _4640,_4670 )] / _ptr__4648[(int)3]) % _ptr__4646[(int)3]),_ptr__4648[(int)1] ) ),safe_mul( ((_ptr__4650[safe_add( _4640,_4670 )] / _ptr__4648[(int)4]) % _ptr__4646[(int)4]),_ptr__4648[(int)4] ) );
        }
      }
      {
        int _4671 = (int)0;
        int _4672 = (int)0;
        while ( ((_4672 < _4636) && (_4671 < _4636)) )
        {
          {
            int _4673 = _ptr__4649[safe_add( _4656,_4671 )];
            if ((_ptr__4650[safe_add( _4640,_4672 )] < _ptr__4650[safe_add( _4633,_4673 )]))
            {
              {
                _4645 += (_ptr__4649[safe_add( safe_add( _4639,_4672 ),(int)1 )] - _ptr__4649[safe_add( _4639,_4672 )]);
                ++ _4644;
                ++ _4672;
              }
            }
            else if((_ptr__4650[safe_add( _4640,_4672 )] > _ptr__4650[safe_add( _4633,_4673 )]))
            {
              {
                _4645 += (_ptr__4649[safe_add( safe_add( _4639,_4673 ),(int)1 )] - _ptr__4649[safe_add( _4639,_4673 )]);
                ++ _4644;
                ++ _4671;
              }
            }
            else if((_ptr__4650[safe_add( _4640,_4672 )] != _ptr__4650[safe_add( _4640,_4673 )]))
            {
              {
                _4645 += (_ptr__4649[safe_add( safe_add( _4639,_4672 ),(int)1 )] - _ptr__4649[safe_add( _4639,_4672 )]);
                _4645 += (_ptr__4649[safe_add( safe_add( _4639,_4673 ),(int)1 )] - _ptr__4649[safe_add( _4639,_4673 )]);
                ++ _4644;
                ++ _4671;
                ++ _4672;
              }
            }
            else
            {
              {
                _4645 += (_ptr__4649[safe_add( safe_add( _4639,_4672 ),(int)1 )] - _ptr__4649[safe_add( _4639,_4672 )]);
                ++ _4644;
                ++ _4671;
                ++ _4672;
              }
            }
          }
        }
        while ( (_4672 < _4636) )
        {
          {
            _4645 += (_ptr__4649[safe_add( safe_add( _4639,_4672 ),(int)1 )] - _ptr__4649[safe_add( _4639,_4672 )]);
            ++ _4644;
            ++ _4672;
          }
        }
        while ( (_4671 < _4636) )
        {
          {
            int _4674 = _ptr__4649[safe_add( _4656,_4671 )];
            _4645 += (_ptr__4649[safe_add( safe_add( _4639,_4674 ),(int)1 )] - _ptr__4649[safe_add( _4639,_4674 )]);
            ++ _4644;
            ++ _4671;
          }
        }
      }
      int _4675 = _4621->alloci32(safe_add( _4644,(int)1 ));
      _4621->pushi32((int)1);
      _4621->pushi32(_4645);
      _4621->pushi32(_4644);
      int _9036 = (int)0;
      int _9037 = _4634;
      for (int _4676 = _9036; _4676 < _9037; ++_4676)
      {
        {
          _4621->pushi32(_ptr__4649[safe_add( _4635,_4676 )]);
        }
      }
      _4621->pushi32(_4634);
      int _4677 = _4621->alloci64(_4645);
      int _4678 = _4621->alloci64(_4644);
      int _4679 = _4621->allocf64(_4645);
      int _4680 = _4621->allocf64(_4644);
      std::shared_ptr< monty::ndarray< int,1 > > _4681 = mosek::fusion::p_WorkStack::_get_impl(_4621)->i32;
      _checked_ptr_1<int> _ptr__4681(_4681 ? _4681->raw() : nullptr,_4681 ? _4681->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4682 = mosek::fusion::p_WorkStack::_get_impl(_4621)->i64;
      _checked_ptr_1<long long> _ptr__4682(_4682 ? _4682->raw() : nullptr,_4682 ? _4682->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4683 = mosek::fusion::p_WorkStack::_get_impl(_4621)->f64;
      _checked_ptr_1<double> _ptr__4683(_4683 ? _4683->raw() : nullptr,_4683 ? _4683->size(0) : 0);
      _ptr__4681[_4675] = (int)0;
      {
        int _4684 = (int)0;
        int _4685 = (int)0;
        int _4686 = (int)0;
        int _4687 = (int)0;
        _ptr__4649[_4675] = (int)0;
        while ( ((_4687 < _4636) && (_4686 < _4636)) )
        {
          {
            int _4688 = _ptr__4649[safe_add( _4656,_4686 )];
            if ((_ptr__4650[safe_add( _4640,_4687 )] < _ptr__4650[safe_add( _4633,_4688 )]))
            {
              {
                int _9038 = _ptr__4649[safe_add( _4639,_4687 )];
                int _9039 = _ptr__4649[safe_add( safe_add( _4639,_4687 ),(int)1 )];
                for (int _4689 = _9038; _4689 < _9039; ++_4689)
                {
                  {
                    _ptr__4682[safe_add( _4677,_4684 )] = _ptr__4650[safe_add( _4641,_4689 )];
                    _ptr__4683[safe_add( _4679,_4684 )] = (_ptr__4651[safe_add( _4643,_4689 )] * 0.5);
                    ++ _4684;
                  }
                }
                _ptr__4683[safe_add( _4680,_4685 )] = (_ptr__4651[safe_add( _4642,_4687 )] * 0.5);
                _ptr__4682[safe_add( _4678,_4685 )] = _ptr__4650[safe_add( _4640,_4687 )];
                _ptr__4681[safe_add( safe_add( _4675,_4685 ),(int)1 )] = _4684;
                ++ _4685;
                ++ _4687;
              }
            }
            else if((_ptr__4650[safe_add( _4640,_4687 )] > _ptr__4650[safe_add( _4633,_4688 )]))
            {
              {
                int _9040 = _ptr__4649[safe_add( _4639,_4688 )];
                int _9041 = _ptr__4649[safe_add( safe_add( _4639,_4688 ),(int)1 )];
                for (int _4690 = _9040; _4690 < _9041; ++_4690)
                {
                  {
                    _ptr__4682[safe_add( _4677,_4684 )] = _ptr__4650[safe_add( _4641,_4690 )];
                    _ptr__4683[safe_add( _4679,_4684 )] = (_ptr__4651[safe_add( _4643,_4690 )] * 0.5);
                    ++ _4684;
                  }
                }
                _ptr__4683[safe_add( _4680,_4685 )] = (_ptr__4651[safe_add( _4642,_4688 )] * 0.5);
                _ptr__4682[safe_add( _4678,_4685 )] = _ptr__4650[safe_add( _4633,_4688 )];
                _ptr__4681[safe_add( safe_add( _4675,_4685 ),(int)1 )] = _4684;
                ++ _4685;
                ++ _4686;
              }
            }
            else if((_ptr__4650[safe_add( _4640,_4687 )] != _ptr__4650[safe_add( _4640,_4688 )]))
            {
              {
                int _9042 = _ptr__4649[safe_add( _4639,_4687 )];
                int _9043 = _ptr__4649[safe_add( safe_add( _4639,_4687 ),(int)1 )];
                for (int _4691 = _9042; _4691 < _9043; ++_4691)
                {
                  {
                    _ptr__4682[safe_add( _4677,_4684 )] = _ptr__4650[safe_add( _4641,_4691 )];
                    _ptr__4683[safe_add( _4679,_4684 )] = (_ptr__4651[safe_add( _4643,_4691 )] * 0.5);
                    ++ _4684;
                  }
                }
                int _9044 = _ptr__4649[safe_add( _4639,_4688 )];
                int _9045 = _ptr__4649[safe_add( safe_add( _4639,_4688 ),(int)1 )];
                for (int _4692 = _9044; _4692 < _9045; ++_4692)
                {
                  {
                    _ptr__4682[safe_add( _4677,_4684 )] = _ptr__4650[safe_add( _4641,_4692 )];
                    _ptr__4683[safe_add( _4679,_4684 )] = (_ptr__4651[safe_add( _4643,_4692 )] * 0.5);
                    ++ _4684;
                  }
                }
                _ptr__4683[safe_add( _4680,_4685 )] = (0.5 * (_ptr__4651[safe_add( _4642,_4687 )] + _ptr__4651[safe_add( _4642,_4688 )]));
                _ptr__4682[safe_add( _4678,_4685 )] = _ptr__4650[safe_add( _4640,_4687 )];
                _ptr__4681[safe_add( safe_add( _4675,_4685 ),(int)1 )] = _4684;
                ++ _4685;
                ++ _4686;
                ++ _4687;
              }
            }
            else
            {
              {
                int _9046 = _ptr__4649[safe_add( _4639,_4687 )];
                int _9047 = _ptr__4649[safe_add( safe_add( _4639,_4687 ),(int)1 )];
                for (int _4693 = _9046; _4693 < _9047; ++_4693)
                {
                  {
                    _ptr__4682[safe_add( _4677,_4684 )] = _ptr__4650[safe_add( _4641,_4693 )];
                    _ptr__4683[safe_add( _4679,_4684 )] = _ptr__4651[safe_add( _4643,_4693 )];
                    ++ _4684;
                  }
                }
                _ptr__4683[safe_add( _4680,_4685 )] = _ptr__4651[safe_add( _4642,_4687 )];
                _ptr__4682[safe_add( _4678,_4685 )] = _ptr__4650[safe_add( _4640,_4687 )];
                _ptr__4681[safe_add( safe_add( _4675,_4685 ),(int)1 )] = _4684;
                ++ _4685;
                ++ _4686;
                ++ _4687;
              }
            }
          }
        }
        while ( (_4687 < _4636) )
        {
          {
            int _9048 = _ptr__4649[safe_add( _4639,_4687 )];
            int _9049 = _ptr__4649[safe_add( safe_add( _4639,_4687 ),(int)1 )];
            for (int _4694 = _9048; _4694 < _9049; ++_4694)
            {
              {
                _ptr__4682[safe_add( _4677,_4684 )] = _ptr__4650[safe_add( _4641,_4694 )];
                _ptr__4683[safe_add( _4679,_4684 )] = (_ptr__4651[safe_add( _4643,_4694 )] * 0.5);
                ++ _4684;
              }
            }
            _ptr__4683[safe_add( _4680,_4685 )] = (_ptr__4651[safe_add( _4642,_4687 )] * 0.5);
            _ptr__4682[safe_add( _4678,_4685 )] = _ptr__4650[safe_add( _4640,_4687 )];
            _ptr__4681[safe_add( safe_add( _4675,_4685 ),(int)1 )] = _4684;
            ++ _4685;
            ++ _4687;
          }
        }
        while ( (_4686 < _4636) )
        {
          {
            int _4695 = _ptr__4649[safe_add( _4656,_4686 )];
            int _9050 = _ptr__4649[safe_add( _4639,_4695 )];
            int _9051 = _ptr__4649[safe_add( safe_add( _4639,_4695 ),(int)1 )];
            for (int _4696 = _9050; _4696 < _9051; ++_4696)
            {
              {
                _ptr__4682[safe_add( _4677,_4684 )] = _ptr__4650[safe_add( _4641,_4696 )];
                _ptr__4683[safe_add( _4679,_4684 )] = (_ptr__4651[safe_add( _4643,_4696 )] * 0.5);
                ++ _4684;
              }
            }
            _ptr__4683[safe_add( _4680,_4685 )] = (_ptr__4651[safe_add( _4642,_4695 )] * 0.5);
            _ptr__4682[safe_add( _4678,_4685 )] = _ptr__4650[safe_add( _4633,_4695 )];
            _ptr__4681[safe_add( safe_add( _4675,_4685 ),(int)1 )] = _4684;
            ++ _4685;
            ++ _4686;
          }
        }
      }
    }
  }
  else
  {
    {
      _4644 = _4636;
      _4645 = safe_mul( _4637,(int)2 );
      int _9052 = (int)0;
      int _9053 = _ptr__4646[(int)0];
      for (int _4697 = _9052; _4697 < _9053; ++_4697)
      {
        {
          int _9054 = (int)0;
          int _9055 = _ptr__4646[(int)2];
          for (int _4698 = _9054; _4698 < _9055; ++_4698)
          {
            {
              int _9056 = (int)0;
              int _9057 = _ptr__4646[(int)4];
              for (int _4699 = _9056; _4699 < _9057; ++_4699)
              {
                {
                  int _9058 = (int)0;
                  int _9059 = _ptr__4646[(int)1];
                  for (int _4700 = _9058; _4700 < _9059; ++_4700)
                  {
                    {
                      long long _4701 = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__4648[(int)0],_4697 ),safe_mul( _ptr__4648[(int)1],_4700 ) ),safe_mul( _ptr__4648[(int)2],_4698 ) ),safe_mul( _ptr__4648[(int)3],_4700 ) ),safe_mul( _ptr__4648[(int)4],_4699 ) );
                      _4645 -= (_ptr__4649[safe_add( safe_add( _4639,_4701 ),(int)1 )] - _ptr__4649[safe_add( _4639,_4701 )]);
                    }
                  }
                }
              }
            }
          }
        }
      }
      int _4702 = _4621->alloci32(safe_add( _4644,(int)1 ));
      _4621->pushi32((int)0);
      _4621->pushi32(_4645);
      _4621->pushi32(_4644);
      int _9060 = (int)0;
      int _9061 = _4634;
      for (int _4703 = _9060; _4703 < _9061; ++_4703)
      {
        {
          _4621->pushi32(_ptr__4649[safe_add( _4635,_4703 )]);
        }
      }
      _4621->pushi32(_4634);
      int _4704 = _4621->alloci64(_4645);
      int _4705 = _4621->allocf64(_4645);
      int _4706 = _4621->allocf64(_4644);
      std::shared_ptr< monty::ndarray< int,1 > > _4707 = mosek::fusion::p_WorkStack::_get_impl(_4621)->i32;
      _checked_ptr_1<int> _ptr__4707(_4707 ? _4707->raw() : nullptr,_4707 ? _4707->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4708 = mosek::fusion::p_WorkStack::_get_impl(_4621)->i64;
      _checked_ptr_1<long long> _ptr__4708(_4708 ? _4708->raw() : nullptr,_4708 ? _4708->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4709 = mosek::fusion::p_WorkStack::_get_impl(_4621)->f64;
      _checked_ptr_1<double> _ptr__4709(_4709 ? _4709->raw() : nullptr,_4709 ? _4709->size(0) : 0);
      int _4710 = (int)0;
      int _4711 = (int)0;
      _ptr__4707[_4702] = (int)0;
      int _4712 = (int)0;
      int _9062 = (int)0;
      int _9063 = _ptr__4646[(int)0];
      for (int _4713 = _9062; _4713 < _9063; ++_4713)
      {
        {
          int _9064 = (int)0;
          int _9065 = _ptr__4646[(int)1];
          for (int _4714 = _9064; _4714 < _9065; ++_4714)
          {
            {
              int _9066 = (int)0;
              int _9067 = _ptr__4646[(int)2];
              for (int _4715 = _9066; _4715 < _9067; ++_4715)
              {
                {
                  int _9068 = (int)0;
                  int _9069 = _ptr__4646[(int)3];
                  for (int _4716 = _9068; _4716 < _9069; ++_4716)
                  {
                    {
                      int _9070 = (int)0;
                      int _9071 = _ptr__4646[(int)4];
                      for (int _4717 = _9070; _4717 < _9071; ++_4717)
                      {
                        {
                          if ((_4714 == _4716))
                          {
                            {
                              int _9072 = _ptr__4649[safe_add( _4639,_4712 )];
                              int _9073 = _ptr__4649[safe_add( safe_add( _4639,_4712 ),(int)1 )];
                              for (int _4718 = _9072; _4718 < _9073; ++_4718)
                              {
                                {
                                  _ptr__4708[safe_add( _4704,_4710 )] = _ptr__4650[safe_add( _4641,_4718 )];
                                  _ptr__4709[safe_add( _4705,_4710 )] = _ptr__4651[safe_add( _4643,_4718 )];
                                  ++ _4710;
                                }
                              }
                              _ptr__4709[safe_add( _4706,_4711 )] = _ptr__4651[safe_add( _4642,_4713 )];
                              _ptr__4707[safe_add( safe_add( _4702,_4711 ),(int)1 )] = _4710;
                              ++ _4712;
                            }
                          }
                          else
                          {
                            {
                              long long _4719 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4713,_ptr__4648[(int)0] ),safe_mul( _4716,_ptr__4648[(int)1] ) ),safe_mul( _4715,_ptr__4648[(int)2] ) ),safe_mul( _4714,_ptr__4648[(int)3] ) ),_4717 );
                              int _9074 = _ptr__4649[safe_add( _4639,_4712 )];
                              int _9075 = _ptr__4649[safe_add( safe_add( _4639,_4712 ),(int)1 )];
                              for (int _4720 = _9074; _4720 < _9075; ++_4720)
                              {
                                {
                                  _ptr__4708[safe_add( _4704,_4710 )] = _ptr__4650[safe_add( _4641,_4720 )];
                                  _ptr__4709[safe_add( _4705,_4710 )] = (_ptr__4651[safe_add( _4643,_4720 )] * 0.5);
                                  ++ _4710;
                                }
                              }
                              int _9076 = _ptr__4649[safe_add( _4639,_4719 )];
                              int _9077 = _ptr__4649[safe_add( safe_add( _4639,_4719 ),(int)1 )];
                              for (int _4721 = _9076; _4721 < _9077; ++_4721)
                              {
                                {
                                  _ptr__4708[safe_add( _4704,_4710 )] = _ptr__4650[safe_add( _4641,_4721 )];
                                  _ptr__4709[safe_add( _4705,_4710 )] = (_ptr__4651[safe_add( _4643,_4721 )] * 0.5);
                                  ++ _4710;
                                }
                              }
                              _ptr__4709[safe_add( _4706,_4711 )] = (0.5 * (_ptr__4651[safe_add( _4642,_4712 )] + _ptr__4651[safe_add( _4642,_4719 )]));
                              _ptr__4707[safe_add( safe_add( _4702,_4711 ),(int)1 )] = _4710;
                              ++ _4712;
                            }
                          }
                          ++ _4711;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::p_ExprSymmetrize::destroy(){expr.reset();}void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCompress::p_ExprCompress  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4722){ return new mosek::fusion::ExprCompress(_4722); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4722) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4722); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4722){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4722->getShape());
    eps = 0.0;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4722;
  }
}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4723,    double _4724){ return new mosek::fusion::ExprCompress(_4723,_4724); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4723,    double _4724) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4723,_4724); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4723,    double _4724){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4723->getShape());
    eps = _4724;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4723;
  }
}void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4725,monty::rc_ptr< ::mosek::fusion::WorkStack > _4726,monty::rc_ptr< ::mosek::fusion::WorkStack > _4727) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4725,_4726,_4727); }void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4725,monty::rc_ptr< ::mosek::fusion::WorkStack > _4726,monty::rc_ptr< ::mosek::fusion::WorkStack > _4727){
  expr->eval(_4726,_4725,_4727);
  _4726->pop_expr();
  int _4728 = mosek::fusion::p_WorkStack::_get_impl(_4726)->nd;
  int _4729 = mosek::fusion::p_WorkStack::_get_impl(_4726)->shape_base;
  int _4730 = mosek::fusion::p_WorkStack::_get_impl(_4726)->nelem;
  int _4731 = mosek::fusion::p_WorkStack::_get_impl(_4726)->nnz;
  bool _4732 = mosek::fusion::p_WorkStack::_get_impl(_4726)->hassp;
  int _4733 = mosek::fusion::p_WorkStack::_get_impl(_4726)->ptr_base;
  int _4734 = mosek::fusion::p_WorkStack::_get_impl(_4726)->sp_base;
  int _4735 = mosek::fusion::p_WorkStack::_get_impl(_4726)->nidxs_base;
  int _4736 = mosek::fusion::p_WorkStack::_get_impl(_4726)->bfix_base;
  int _4737 = mosek::fusion::p_WorkStack::_get_impl(_4726)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4738 = mosek::fusion::p_WorkStack::_get_impl(_4726)->i32;
  _checked_ptr_1<int> _ptr__4738(_4738 ? _4738->raw() : nullptr,_4738 ? _4738->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4739 = mosek::fusion::p_WorkStack::_get_impl(_4726)->i64;
  _checked_ptr_1<long long> _ptr__4739(_4739 ? _4739->raw() : nullptr,_4739 ? _4739->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4740 = mosek::fusion::p_WorkStack::_get_impl(_4726)->f64;
  _checked_ptr_1<double> _ptr__4740(_4740 ? _4740->raw() : nullptr,_4740 ? _4740->size(0) : 0);
  std::vector<int> _9078;
  for (int _4742 = (int)0, _9079 = _4728; _4742 < _9079 ; ++_4742)
  {
    _9078.push_back(_ptr__4738[safe_add( _4729,_4742 )]);
  }
  auto _9080 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9078.size()),_9078.begin(),_9078.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4741 = _9080;
  _checked_ptr_1<int> _ptr__4741(_4741 ? _4741->raw() : nullptr,_4741 ? _4741->size(0) : 0);
  bool _4743 = true;
  {
    int _9081 = (int)0;
    int _9082 = _4730;
    for (int _4744 = _9081; _4744 < _9082; ++_4744)
    {
      {
        int _9083 = safe_add( _ptr__4738[safe_add( _4733,_4744 )],(int)1 );
        int _9084 = _ptr__4738[safe_add( safe_add( _4733,_4744 ),(int)1 )];
        for (int _4745 = _9083; _4745 < _9084; ++_4745)
        {
          {
            _4743 = (_4743 && ((_ptr__4739[safe_add( _4735,_4745 )] != (int)0) && (_ptr__4739[(safe_add( _4735,_4745 ) - (int)1)] < _ptr__4739[safe_add( _4735,_4745 )])));
          }
        }
      }
    }
    if (_4743)
    {
      {
        int _9085 = (int)0;
        int _9086 = _4731;
        for (int _4746 = _9085; _4746 < _9086; ++_4746)
        {
          {
            _4743 = (_4743 && ((_ptr__4740[safe_add( _4737,_4746 )] <= (0.0 - eps)) || ((0.0 + eps) <= _ptr__4740[safe_add( _4737,_4746 )])));
          }
        }
      }
    }
    {}
  }
  if (_4743)
  {
    {
      _4725->alloc_expr(_4728,_4730,_4731,_4732);
      int _4747 = mosek::fusion::p_WorkStack::_get_impl(_4725)->ptr_base;
      int _4748 = mosek::fusion::p_WorkStack::_get_impl(_4725)->nidxs_base;
      int _4749 = mosek::fusion::p_WorkStack::_get_impl(_4725)->sp_base;
      int _4750 = mosek::fusion::p_WorkStack::_get_impl(_4725)->cof_base;
      int _4751 = mosek::fusion::p_WorkStack::_get_impl(_4725)->bfix_base;
      int _4752 = mosek::fusion::p_WorkStack::_get_impl(_4725)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4753 = mosek::fusion::p_WorkStack::_get_impl(_4725)->i32;
      _checked_ptr_1<int> _ptr__4753(_4753 ? _4753->raw() : nullptr,_4753 ? _4753->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4754 = mosek::fusion::p_WorkStack::_get_impl(_4725)->i64;
      _checked_ptr_1<long long> _ptr__4754(_4754 ? _4754->raw() : nullptr,_4754 ? _4754->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4755 = mosek::fusion::p_WorkStack::_get_impl(_4725)->f64;
      _checked_ptr_1<double> _ptr__4755(_4755 ? _4755->raw() : nullptr,_4755 ? _4755->size(0) : 0);
      {
        int _9087 = (int)0;
        int _9088 = _4728;
        for (int _4756 = _9087; _4756 < _9088; ++_4756)
        {
          {
            _ptr__4753[safe_add( _4752,_4756 )] = _ptr__4741[_4756];
          }
        }
        int _9089 = (int)0;
        int _9090 = safe_add( _4730,(int)1 );
        for (int _4757 = _9089; _4757 < _9090; ++_4757)
        {
          {
            _ptr__4753[safe_add( _4747,_4757 )] = _ptr__4738[safe_add( _4733,_4757 )];
          }
        }
        if (_4732)
        {
          {
            int _9091 = (int)0;
            int _9092 = _4730;
            for (int _4758 = _9091; _4758 < _9092; ++_4758)
            {
              {
                _ptr__4754[safe_add( _4749,_4758 )] = _ptr__4739[safe_add( _4734,_4758 )];
              }
            }
          }
        }
        {}
        int _9093 = (int)0;
        int _9094 = _4730;
        for (int _4759 = _9093; _4759 < _9094; ++_4759)
        {
          {
            _ptr__4755[safe_add( _4751,_4759 )] = _ptr__4740[safe_add( _4736,_4759 )];
          }
        }
        int _9095 = (int)0;
        int _9096 = _4731;
        for (int _4760 = _9095; _4760 < _9096; ++_4760)
        {
          {
            _ptr__4754[safe_add( _4748,_4760 )] = _ptr__4739[safe_add( _4735,_4760 )];
          }
        }
        int _9097 = (int)0;
        int _9098 = _4731;
        for (int _4761 = _9097; _4761 < _9098; ++_4761)
        {
          {
            _ptr__4755[safe_add( _4750,_4761 )] = _ptr__4740[safe_add( _4737,_4761 )];
          }
        }
      }
    }
  }
  else
  {
    {
      int _4762 = _4727->alloci32(_4731);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4726,_4727,_4762,_4730,_4731,_4733,_4735);
      std::shared_ptr< monty::ndarray< int,1 > > _4763 = mosek::fusion::p_WorkStack::_get_impl(_4727)->i32;
      _checked_ptr_1<int> _ptr__4763(_4763 ? _4763->raw() : nullptr,_4763 ? _4763->size(0) : 0);
      int _4764 = (int)0;
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4765 = mosek::fusion::p_WorkStack::_get_impl(_4725)->i32;
        _checked_ptr_1<int> _ptr__4765(_4765 ? _4765->raw() : nullptr,_4765 ? _4765->size(0) : 0);
        int _9099 = (int)0;
        int _9100 = _4730;
        for (int _4766 = _9099; _4766 < _9100; ++_4766)
        {
          {
            int _4767 = _ptr__4738[safe_add( safe_add( _4733,_4766 ),(int)1 )];
            int _4768 = _ptr__4738[safe_add( _4733,_4766 )];
            if ((_4768 < _4767))
            {
              {
                int _4769 = _4768;
                while ( (_4769 < _4767) )
                {
                  {
                    double _4770 = 0.0;
                    long long _4771 = _ptr__4739[safe_add( _4735,_ptr__4763[safe_add( _4762,_4769 )] )];
                    if ((_4771 == (int)0))
                    {
                      {
                        ++ _4769;
                      }
                    }
                    else
                    {
                      {
                        while ( ((_4769 < _4767) && (_ptr__4739[safe_add( _4735,_ptr__4763[safe_add( _4762,_4769 )] )] == _4771)) )
                        {
                          {
                            _4770 += _ptr__4740[safe_add( _4737,_ptr__4763[safe_add( _4762,_4769 )] )];
                            ++ _4769;
                          }
                        }
                        {
                        }
                        if (((_4771 != (int)0) && ((_4770 < (-eps)) || (eps < _4770))))
                        {
                          {
                            ++ _4764;
                          }
                        }
                        {}
                      }
                    }
                  }
                }
              }
            }
            {}
          }
        }
      }
      _4725->alloc_expr(_4728,_4730,_4764,_4732);
      int _4772 = mosek::fusion::p_WorkStack::_get_impl(_4725)->nidxs_base;
      int _4773 = mosek::fusion::p_WorkStack::_get_impl(_4725)->shape_base;
      int _4774 = mosek::fusion::p_WorkStack::_get_impl(_4725)->sp_base;
      int _4775 = mosek::fusion::p_WorkStack::_get_impl(_4725)->cof_base;
      int _4776 = mosek::fusion::p_WorkStack::_get_impl(_4725)->bfix_base;
      int _4777 = mosek::fusion::p_WorkStack::_get_impl(_4725)->ptr_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4778 = mosek::fusion::p_WorkStack::_get_impl(_4725)->i32;
      _checked_ptr_1<int> _ptr__4778(_4778 ? _4778->raw() : nullptr,_4778 ? _4778->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4779 = mosek::fusion::p_WorkStack::_get_impl(_4725)->i64;
      _checked_ptr_1<long long> _ptr__4779(_4779 ? _4779->raw() : nullptr,_4779 ? _4779->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4780 = mosek::fusion::p_WorkStack::_get_impl(_4725)->f64;
      _checked_ptr_1<double> _ptr__4780(_4780 ? _4780->raw() : nullptr,_4780 ? _4780->size(0) : 0);
      {
        int _9101 = (int)0;
        int _9102 = _4728;
        for (int _4781 = _9101; _4781 < _9102; ++_4781)
        {
          {
            _ptr__4778[safe_add( _4773,_4781 )] = _ptr__4741[_4781];
          }
        }
        int _9103 = (int)0;
        int _9104 = _4730;
        for (int _4782 = _9103; _4782 < _9104; ++_4782)
        {
          {
            _ptr__4780[safe_add( _4775,_4782 )] = 0.0;
          }
        }
        int _9105 = (int)0;
        int _9106 = _4730;
        for (int _4783 = _9105; _4783 < _9106; ++_4783)
        {
          {
            _ptr__4780[safe_add( _4776,_4783 )] = _ptr__4740[safe_add( _4736,_4783 )];
          }
        }
        if (_4732)
        {
          {
            int _9107 = (int)0;
            int _9108 = _4730;
            for (int _4784 = _9107; _4784 < _9108; ++_4784)
            {
              {
                _ptr__4779[safe_add( _4774,_4784 )] = _ptr__4739[safe_add( _4774,_4784 )];
              }
            }
          }
        }
        {}
        int _4785 = (int)0;
        {
          int _4786 = (_4775 - _4772);
          _ptr__4778[_4777] = (int)0;
          int _9109 = (int)0;
          int _9110 = _4730;
          for (int _4787 = _9109; _4787 < _9110; ++_4787)
          {
            {
              int _4788 = _ptr__4738[safe_add( safe_add( _4733,_4787 ),(int)1 )];
              int _4789 = _ptr__4738[safe_add( _4733,_4787 )];
              if ((_4789 < _4788))
              {
                {
                  int _4790 = _4789;
                  while ( (_4790 < _4788) )
                  {
                    {
                      double _4791 = 0.0;
                      long long _4792 = _ptr__4739[safe_add( _4735,_ptr__4763[safe_add( _4762,_4790 )] )];
                      while ( ((_4790 < _4788) && (_ptr__4739[safe_add( _4735,_ptr__4763[safe_add( _4762,_4790 )] )] == _4792)) )
                      {
                        {
                          _4791 += _ptr__4740[safe_add( _4737,_ptr__4763[safe_add( _4762,_4790 )] )];
                          ++ _4790;
                        }
                      }
                      {
                      }
                      if (((_4792 != (int)0) && ((_4791 < (-eps)) || (eps < _4791))))
                      {
                        {
                          _ptr__4779[safe_add( _4772,_4785 )] = _4792;
                          _ptr__4780[safe_add( _4775,_4785 )] = _4791;
                          ++ _4785;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              {}
              _ptr__4778[safe_add( safe_add( _4777,_4787 ),(int)1 )] = _4785;
            }
          }
        }
      }
    }
  }
  _4727->clear();
}
void mosek::fusion::ExprCompress::arg_sort  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4793,    monty::rc_ptr< ::mosek::fusion::WorkStack > _4794,    int _4795,    int _4796,    int _4797,    int _4798,    int _4799) { mosek::fusion::p_ExprCompress::arg_sort(_4793,_4794,_4795,_4796,_4797,_4798,_4799); }void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4793,monty::rc_ptr< ::mosek::fusion::WorkStack > _4794,int _4795,int _4796,int _4797,int _4798,int _4799){
  int _4800 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4801 = mosek::fusion::p_WorkStack::_get_impl(_4793)->i32;
  _checked_ptr_1<int> _ptr__4801(_4801 ? _4801->raw() : nullptr,_4801 ? _4801->size(0) : 0);
  int _9111 = (int)0;
  int _9112 = _4796;
  for (int _4802 = _9111; _4802 < _9112; ++_4802)
  {
    {
      if (((_ptr__4801[safe_add( safe_add( _4798,_4802 ),(int)1 )] - _ptr__4801[safe_add( _4798,_4802 )]) > _4800))
      {
        {
          _4800 = (_ptr__4801[safe_add( safe_add( _4798,_4802 ),(int)1 )] - _ptr__4801[safe_add( _4798,_4802 )]);
        }
      }
      {}
    }
  }
  int _9113;
  bool _9114 = (_4800 > (int)2);
  if (_9114)
  {
    _9113 = _4794->alloci32(safe_mul( _4800,(int)2 ));
  }
  else
  {
    _9113 = (int)99999;
  }
  int _4803 = _9113;
  std::shared_ptr< monty::ndarray< int,1 > > _4804 = mosek::fusion::p_WorkStack::_get_impl(_4794)->i32;
  _checked_ptr_1<int> _ptr__4804(_4804 ? _4804->raw() : nullptr,_4804 ? _4804->size(0) : 0);
  _4801 = mosek::fusion::p_WorkStack::_get_impl(_4793)->i32;
  _ptr__4801.update(_4801 ? _4801->raw() : nullptr, _4801 ? _4801->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4805 = mosek::fusion::p_WorkStack::_get_impl(_4793)->i64;
  _checked_ptr_1<long long> _ptr__4805(_4805 ? _4805->raw() : nullptr,_4805 ? _4805->size(0) : 0);
  int _9115 = (int)0;
  int _9116 = _4796;
  for (int _4806 = _9115; _4806 < _9116; ++_4806)
  {
    {
      int _4807 = _ptr__4801[safe_add( _4798,_4806 )];
      int _4808 = _ptr__4801[safe_add( safe_add( _4798,_4806 ),(int)1 )];
      int _4809 = (_4808 - _4807);
      if ((_4809 == (int)0))
      {
        {
        }
      }
      else if((_4809 == (int)1))
      {
        {
          _ptr__4804[safe_add( _4795,_4807 )] = _4807;
        }
      }
      else if((_4809 == (int)2))
      {
        {
          if ((_ptr__4805[safe_add( _4799,_4807 )] <= _ptr__4805[safe_add( safe_add( _4799,_4807 ),(int)1 )]))
          {
            {
              _ptr__4804[safe_add( _4795,_4807 )] = _4807;
              _ptr__4804[safe_add( safe_add( _4795,_4807 ),(int)1 )] = safe_add( _4807,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4804[safe_add( _4795,_4807 )] = safe_add( _4807,(int)1 );
              _ptr__4804[safe_add( safe_add( _4795,_4807 ),(int)1 )] = _4807;
            }
          }
        }
      }
      else
      {
        {
          long long _4810 = _ptr__4805[safe_add( _4799,_4807 )];
          long long _4811 = _ptr__4805[safe_add( _4799,_4807 )];
          bool _4812 = false;
          int _9117 = safe_add( _4807,(int)1 );
          int _9118 = _4808;
          for (int _4813 = _9117; _4813 < _9118; ++_4813)
          {
            {
              _4812 = (_4812 && (_ptr__4805[(safe_add( _4799,_4813 ) - (int)1)] <= _ptr__4805[safe_add( _4799,_4813 )]));
              if ((_4810 > _ptr__4805[safe_add( _4799,_4813 )]))
              {
                {
                  _4810 = _ptr__4805[safe_add( _4799,_4813 )];
                }
              }
              {}
              if ((_4811 < _ptr__4805[safe_add( _4799,_4813 )]))
              {
                {
                  _4811 = _ptr__4805[safe_add( _4799,_4813 )];
                }
              }
              {}
            }
          }
          if (_4812)
          {
            {
              int _9119 = _4807;
              int _9120 = _4808;
              for (int _4814 = _9119; _4814 < _9120; ++_4814)
              {
                {
                  _ptr__4804[safe_add( _4795,_4814 )] = _4814;
                }
              }
            }
          }
          else if((safe_add( (_4811 - _4810),(int)1 ) <= _4809))
          {
            {
              long long _4815 = safe_add( (_4811 - _4810),(int)1 );
              int _9121 = (int)0;
              long long _9122 = safe_add( _4815,(int)1 );
              for (long long _4816 = _9121; _4816 < _9122; ++_4816)
              {
                {
                  _ptr__4804[safe_add( _4803,_4816 )] = (int)0;
                }
              }
              int _9123 = _4807;
              int _9124 = _4808;
              for (int _4817 = _9123; _4817 < _9124; ++_4817)
              {
                {
                  ++ _ptr__4804[safe_add( (safe_add( _4803,_ptr__4805[safe_add( _4799,_4817 )] ) - _4810),(int)1 )];
                }
              }
              int _9125 = (int)0;
              long long _9126 = _4815;
              for (long long _4818 = _9125; _4818 < _9126; ++_4818)
              {
                {
                  _ptr__4804[safe_add( safe_add( _4803,_4818 ),(int)1 )] += _ptr__4804[safe_add( _4803,_4818 )];
                }
              }
              int _9127 = _4807;
              int _9128 = _4808;
              for (int _4819 = _9127; _4819 < _9128; ++_4819)
              {
                {
                  _ptr__4804[safe_add( safe_add( _4795,_4807 ),_ptr__4804[(safe_add( _4803,_ptr__4805[safe_add( _4799,_4819 )] ) - _4810)] )] = _4819;
                  ++ _ptr__4804[(safe_add( _4803,_ptr__4805[safe_add( _4799,_4819 )] ) - _4810)];
                }
              }
            }
          }
          else
          {
            {
              int _4820 = (int)1;
              int _4821 = _4803;
              int _4822 = safe_add( _4803,_4809 );
              int _9129 = (int)0;
              int _9130 = _4809;
              for (int _4823 = _9129; _4823 < _9130; ++_4823)
              {
                {
                  _ptr__4804[safe_add( _4821,_4823 )] = _4823;
                }
              }
              while ( (_4820 < _4809) )
              {
                {
                  int _4824 = safe_mul( _4820,(int)2 );
                  int _4825 = (_4809 / _4824);
                  if ((safe_add( safe_mul( _4825,_4824 ),_4820 ) < _4809))
                  {
                    {
                      ++ _4825;
                    }
                  }
                  {}
                  int _4826 = (int)0;
                  int _9131 = (int)0;
                  int _9132 = _4825;
                  for (int _4827 = _9131; _4827 < _9132; ++_4827)
                  {
                    {
                      int _4828 = safe_mul( _4827,_4824 );
                      int _4829 = safe_add( _4828,_4820 );
                      int _4830 = _4829;
                      int _4831 = safe_add( _4830,_4820 );
                      if ((_4831 > _4809))
                      {
                        {
                          _4831 = _4809;
                        }
                      }
                      {}
                      while ( ((_4828 < _4829) && (_4830 < _4831)) )
                      {
                        {
                          if ((_ptr__4805[safe_add( safe_add( _4799,_ptr__4804[safe_add( _4821,_4828 )] ),_4807 )] <= _ptr__4805[safe_add( safe_add( _4799,_ptr__4804[safe_add( _4821,_4830 )] ),_4807 )]))
                          {
                            {
                              _ptr__4804[safe_add( _4822,_4826 )] = _ptr__4804[safe_add( _4821,_4828 )];
                              ++ _4826;
                              ++ _4828;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4804[safe_add( _4822,_4826 )] = _ptr__4804[safe_add( _4821,_4830 )];
                              ++ _4826;
                              ++ _4830;
                            }
                          }
                        }
                      }
                      while ( (_4828 < _4829) )
                      {
                        {
                          _ptr__4804[safe_add( _4822,_4826 )] = _ptr__4804[safe_add( _4821,_4828 )];
                          ++ _4826;
                          ++ _4828;
                        }
                      }
                      while ( (_4830 < _4831) )
                      {
                        {
                          _ptr__4804[safe_add( _4822,_4826 )] = _ptr__4804[safe_add( _4821,_4830 )];
                          ++ _4826;
                          ++ _4830;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4825,_4824 ) < _4809))
                  {
                    {
                      int _4832 = safe_mul( _4825,_4824 );
                      while ( (_4832 < _4809) )
                      {
                        {
                          _ptr__4804[safe_add( _4822,_4826 )] = _ptr__4804[safe_add( _4821,_4832 )];
                          ++ _4832;
                          ++ _4826;
                        }
                      }
                    }
                  }
                  {}
                  int _4833 = _4821;
                  _4821 = _4822;
                  _4822 = _4833;
                  _4820 *= (int)2;
                }
              }
              int _9133 = (int)0;
              int _9134 = _4809;
              for (int _4834 = _9133; _4834 < _9134; ++_4834)
              {
                {
                  _ptr__4804[safe_add( safe_add( _4795,_4807 ),_4834 )] = safe_add( _ptr__4804[safe_add( _4821,_4834 )],_4807 );
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress::merge_sort  ( int _4835,    int _4836,    int _4837,    int _4838,    int _4839,    int _4840,    std::shared_ptr< monty::ndarray< int,1 > > _4841,    std::shared_ptr< monty::ndarray< long long,1 > > _4842) { mosek::fusion::p_ExprCompress::merge_sort(_4835,_4836,_4837,_4838,_4839,_4840,_4841,_4842); }void mosek::fusion::p_ExprCompress::merge_sort(int _4835,int _4836,int _4837,int _4838,int _4839,int _4840,std::shared_ptr< monty::ndarray< int,1 > > _4841,std::shared_ptr< monty::ndarray< long long,1 > > _4842){
  _checked_ptr_1<int> _ptr__4841(_4841 ? _4841->raw() : nullptr, _4841 ? _4841->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4842(_4842 ? _4842->raw() : nullptr, _4842 ? _4842->size(0) : 0);
  int _4843 = _4835;
  int _4844 = _4836;
  int _9135 = (int)0;
  int _9136 = _4838;
  for (int _4845 = _9135; _4845 < _9136; ++_4845)
  {
    {
      _ptr__4841[safe_add( _4843,_4845 )] = _4845;
    }
  }
  int _9137 = (int)0;
  int _9138 = _4837;
  for (int _4846 = _9137; _4846 < _9138; ++_4846)
  {
    {
      _4843 = _4835;
      _4844 = _4836;
      int _4847 = _ptr__4841[safe_add( safe_add( _4839,_4846 ),(int)1 )];
      int _4848 = _ptr__4841[safe_add( _4839,_4846 )];
      if ((safe_add( _4848,(int)1 ) < _4847))
      {
        {
          int _4849 = (_4847 - _4848);
          int _4850 = (int)0;
          while ( (_4849 > (int)1) )
          {
            {
              ++ _4850;
              _4849 /= (int)2;
            }
          }
          _4849 = (_4847 - _4848);
          int _4851 = (int)1;
          int _9139 = (int)0;
          int _9140 = safe_add( _4850,(int)1 );
          for (int _4852 = _9139; _4852 < _9140; ++_4852)
          {
            {
              int _4853 = ((safe_add( _4849,_4851 ) - (int)1) / _4851);
              int _4854 = (_4853 / (int)2);
              int _4855 = _4848;
              int _9141 = (int)0;
              int _9142 = _4854;
              for (int _4856 = _9141; _4856 < _9142; ++_4856)
              {
                {
                  int _4857 = safe_mul( safe_mul( _4856,_4851 ),(int)2 );
                  int _9143;
                  bool _9144 = (safe_add( safe_add( _4848,_4857 ),safe_mul( (int)2,_4851 ) ) < _4847);
                  if (_9144)
                  {
                    _9143 = safe_add( safe_add( _4848,_4857 ),safe_mul( (int)2,_4851 ) );
                  }
                  else
                  {
                    _9143 = _4847;
                  }
                  int _4858 = _9143;
                  int _4859 = safe_add( safe_add( _4848,_4857 ),_4851 );
                  int _4860 = safe_add( safe_add( _4848,_4857 ),_4851 );
                  int _4861 = safe_add( _4848,_4857 );
                  while ( ((_4861 < _4860) && (_4859 < _4858)) )
                  {
                    {
                      if ((_ptr__4842[safe_add( _4840,_ptr__4841[safe_add( _4843,_4861 )] )] <= _ptr__4842[safe_add( _4840,_ptr__4841[safe_add( _4843,_4859 )] )]))
                      {
                        {
                          _ptr__4841[safe_add( _4844,_4855 )] = _ptr__4841[safe_add( _4843,_4861 )];
                          ++ _4855;
                          ++ _4861;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4841[safe_add( _4844,_4855 )] = _ptr__4841[safe_add( _4843,_4859 )];
                          ++ _4855;
                          ++ _4859;
                        }
                      }
                    }
                  }
                  while ( (_4861 < _4860) )
                  {
                    {
                      _ptr__4841[safe_add( _4844,_4855 )] = _ptr__4841[safe_add( _4843,_4861 )];
                      ++ _4855;
                      ++ _4861;
                    }
                  }
                  while ( (_4859 < _4858) )
                  {
                    {
                      _ptr__4841[safe_add( _4844,_4855 )] = _ptr__4841[safe_add( _4843,_4859 )];
                      ++ _4855;
                      ++ _4859;
                    }
                  }
                }
              }
              int _9145 = _4855;
              int _9146 = _4847;
              for (int _4862 = _9145; _4862 < _9146; ++_4862)
              {
                {
                  _ptr__4841[safe_add( _4844,_4862 )] = _ptr__4841[safe_add( _4843,_4862 )];
                }
              }
              int _4863 = _4843;
              _4843 = _4844;
              _4844 = _4863;
              _4851 *= (int)2;
            }
          }
        }
      }
      {}
      int _9147 = _4848;
      int _9148 = _4847;
      for (int _4864 = _9147; _4864 < _9148; ++_4864)
      {
        {
          _ptr__4841[safe_add( _4835,_4864 )] = _ptr__4841[safe_add( _4843,_4864 )];
        }
      }
    }
  }
}
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCompress::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCompress::destroy(){expr.reset();}void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCondense::p_ExprCondense  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _4865){ return new mosek::fusion::ExprCondense(_4865); }mosek::fusion::ExprCondense::ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _4865) :    ExprCondense(new mosek::fusion::p_ExprCondense(this)){ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_4865); }void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4865){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4865->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _4865;
  }
}void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4866,monty::rc_ptr< ::mosek::fusion::WorkStack > _4867,monty::rc_ptr< ::mosek::fusion::WorkStack > _4868) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_4866,_4867,_4868); }void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4866,monty::rc_ptr< ::mosek::fusion::WorkStack > _4867,monty::rc_ptr< ::mosek::fusion::WorkStack > _4868){
  expr->eval(_4866,_4867,_4868);
  int _4869 = _4866->popi32();
  long long _4870 = (int)1;
  int _9149 = (int)0;
  int _9150 = _4869;
  for (int _4871 = _9149; _4871 < _9150; ++_4871)
  {
    {
      _4870 *= _4866->popi32();
    }
  }
  int _4872 = _4866->popi32();
  int _4873 = _4866->popi32();
  bool _4874 = (_4866->popi32() != (int)0);
  if (_4874)
  {
    {
      _4866->popi64(_4872);
    }
  }
  {}
  _4866->pushi32((int)0);
  _4866->pushi32(_4873);
  _4866->pushi32(_4872);
  _4866->pushi32(_4872);
  _4866->pushi32((int)1);
}
void mosek::fusion::p_ExprCondense::destroy(){expr.reset();}void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprFromVar::p_ExprFromVar  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _4875){ return new mosek::fusion::ExprFromVar(_4875); }mosek::fusion::ExprFromVar::ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _4875) :    ExprFromVar(new mosek::fusion::p_ExprFromVar(this)){ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_4875); }void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _4875){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4875->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _4875;
  }
}void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4876,monty::rc_ptr< ::mosek::fusion::WorkStack > _4877,monty::rc_ptr< ::mosek::fusion::WorkStack > _4878) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_4876,_4877,_4878); }void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4876,monty::rc_ptr< ::mosek::fusion::WorkStack > _4877,monty::rc_ptr< ::mosek::fusion::WorkStack > _4878){
  std::shared_ptr< monty::ndarray< int,1 > > _4879 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4879(_4879 ? _4879->raw() : nullptr,_4879 ? _4879->size(0) : 0);
  long long _4880 = ::mosek::fusion::p_Set::size(_4879);
  int _4881 = x->numInst();
  int _4882 = _4881;
  bool _4883 = (_4880 > _4881);
  int _4884 = _4876->alloci32(safe_add( _4881,(int)1 ));
  int _4885 = _4876->alloci64(_4882);
  int _9151;
  bool _9152 = _4883;
  if (_9152)
  {
    _9151 = _4876->alloci64(_4881);
  }
  else
  {
    _9151 = (-(int)1);
  }
  int _4886 = _9151;
  int _4887 = _4876->allocf64(_4882);
  int _4888 = _4876->allocf64(_4881);
  int _9153;
  bool _9154 = _4883;
  if (_9154)
  {
    _9153 = (int)1;
  }
  else
  {
    _9153 = (int)0;
  }
  _4876->pushi32(_9153);
  _4876->pushi32(_4882);
  _4876->pushi32(_4881);
  int _9155 = (int)0;
  int _9156 = (int)((_4879)->size(0));
  for (int _4889 = _9155; _4889 < _9156; ++_4889)
  {
    {
      _4876->pushi32(_ptr__4879[_4889]);
    }
  }
  _4876->pushi32((int)((_4879)->size(0)));
  std::shared_ptr< monty::ndarray< int,1 > > _4890 = mosek::fusion::p_WorkStack::_get_impl(_4876)->i32;
  _checked_ptr_1<int> _ptr__4890(_4890 ? _4890->raw() : nullptr,_4890 ? _4890->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4891 = mosek::fusion::p_WorkStack::_get_impl(_4876)->i64;
  _checked_ptr_1<long long> _ptr__4891(_4891 ? _4891->raw() : nullptr,_4891 ? _4891->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4892 = mosek::fusion::p_WorkStack::_get_impl(_4876)->f64;
  _checked_ptr_1<double> _ptr__4892(_4892 ? _4892->raw() : nullptr,_4892 ? _4892->size(0) : 0);
  {
    int _9157 = (int)0;
    int _9158 = safe_add( _4881,(int)1 );
    for (int _4893 = _9157; _4893 < _9158; ++_4893)
    {
      {
        _ptr__4890[safe_add( _4884,_4893 )] = _4893;
      }
    }
    int _9159 = (int)0;
    int _9160 = _4881;
    for (int _4894 = _9159; _4894 < _9160; ++_4894)
    {
      {
        _ptr__4892[safe_add( _4888,_4894 )] = 0.0;
      }
    }
    int _9161 = (int)0;
    int _9162 = _4882;
    for (int _4895 = _9161; _4895 < _9162; ++_4895)
    {
      {
        _ptr__4892[safe_add( _4887,_4895 )] = 1.0;
      }
    }
  }
  if (_4883)
  {
    {
      x->inst(_4886,_4891,_4885,_4891);
    }
  }
  else
  {
    {
      x->inst(_4885,_4891);
    }
  }
}
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprFromVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprFromVar::destroy(){x.reset();}void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprReshape::p_ExprReshape  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _4896,    monty::rc_ptr< ::mosek::fusion::Expression > _4897){ return new mosek::fusion::ExprReshape(_4896,_4897); }mosek::fusion::ExprReshape::ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _4896,    monty::rc_ptr< ::mosek::fusion::Expression > _4897) :    ExprReshape(new mosek::fusion::p_ExprReshape(this)){ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_4896,_4897); }void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4896,    monty::rc_ptr< ::mosek::fusion::Expression > _4897){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4896(_4896 ? _4896->raw() : nullptr, _4896 ? _4896->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_4896));
    long long _4898 = _4897->getSize();
    if ((::mosek::fusion::p_Set::size(_4896) != _4897->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _4897;
  }
}void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4899,monty::rc_ptr< ::mosek::fusion::WorkStack > _4900,monty::rc_ptr< ::mosek::fusion::WorkStack > _4901) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_4899,_4900,_4901); }void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4899,monty::rc_ptr< ::mosek::fusion::WorkStack > _4900,monty::rc_ptr< ::mosek::fusion::WorkStack > _4901){
  std::shared_ptr< monty::ndarray< int,1 > > _4902 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4902(_4902 ? _4902->raw() : nullptr,_4902 ? _4902->size(0) : 0);
  e->eval(_4899,_4900,_4901);
  _4899->peek_expr();
  int _4903 = _4899->popi32();
  long long _4904 = (int)1;
  int _9163 = (int)0;
  int _9164 = _4903;
  for (int _4905 = _9163; _4905 < _9164; ++_4905)
  {
    {
      _4904 *= _4899->popi32();
    }
  }
  if ((_4904 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int _9165 = (int)0;
  int _9166 = (int)((_4902)->size(0));
  for (int _4906 = _9165; _4906 < _9166; ++_4906)
  {
    {
      _4899->pushi32(_ptr__4902[_4906]);
    }
  }
  _4899->pushi32((int)((_4902)->size(0)));
}
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprReshape::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4907 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _4907->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int _9167 = (int)1;
      int _9168 = _pubthis->getND();
      for (int _4908 = _9167; _4908 < _9168; ++_4908)
      {
        {
          _4907->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_4908));
        }
      }
    }
  }
  {}
  _4907->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4907->toString();
}
void mosek::fusion::p_ExprReshape::destroy(){e.reset();}void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseExpression::p_BaseExpression  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4909){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4909(_4909 ? _4909->raw() : nullptr, _4909 ? _4909->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _4909;
  }
}std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseExpression::toString(){
  return std::string ("Expression()");
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__eval() { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression::eval() { return __mosek_2fusion_2BaseExpression__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__eval() { return __mosek_2fusion_2BaseExpression__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__eval(){
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4910 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4911 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4912 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  _pubthis->eval(_4910,_4911,_4912);
  int _4913 = _4910->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _4914 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4913)));
  _checked_ptr_1<int> _ptr__4914(_4914 ? _4914->raw() : nullptr,_4914 ? _4914->size(0) : 0);
  _4910->popi32(_4913,_4914,(int)0);
  int _4915 = _4910->popi32();
  int _4916 = _4910->popi32();
  int _4917 = (int)1;
  int _9169 = (int)0;
  int _9170 = _4913;
  for (int _4918 = _9169; _4918 < _9170; ++_4918)
  {
    {
      _4917 *= _ptr__4914[_4918];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _4919 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4916)));
  _checked_ptr_1<long long> _ptr__4919(_4919 ? _4919->raw() : nullptr,_4919 ? _4919->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4920 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _4915,(int)1 ))));
  _checked_ptr_1<int> _ptr__4920(_4920 ? _4920->raw() : nullptr,_4920 ? _4920->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4921 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4915)));
  _checked_ptr_1<double> _ptr__4921(_4921 ? _4921->raw() : nullptr,_4921 ? _4921->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4922 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4916)));
  _checked_ptr_1<double> _ptr__4922(_4922 ? _4922->raw() : nullptr,_4922 ? _4922->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4923 = nullptr;
  _checked_ptr_1<long long> _ptr__4923(_4923 ? _4923->raw() : nullptr,_4923 ? _4923->size(0) : 0);
  if ((_4917 < _4915))
  {
    {
      _4923 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4915)));
      _ptr__4923.update(_4923 ? _4923->raw() : nullptr, _4923 ? _4923->size(0) : 0);
      _4910->popi64(_4915,_4923,(int)0);
    }
  }
  {}
  _4910->popi32(_4915,_4920,(int)1);
  _4910->popi64(_4916,_4919,(int)0);
  _4910->popf64(_4915,_4921,(int)0);
  _4910->popf64(_4916,_4922,(int)0);
  std::vector<long long> _9171;
  for (int _4924 = (int)0, _9172 = safe_add( _4915,(int)1 ); _4924 < _9172 ; ++_4924)
  {
    _9171.push_back(_ptr__4920[_4924]);
  }
  auto _9173 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9171.size()),_9171.begin(),_9171.end()));
  return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_4921,_9173,_4919,_4922,_4914,_4923);
}
void mosek::fusion::BaseExpression::storeexpr  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4925,    std::shared_ptr< monty::ndarray< int,1 > > _4926,    std::shared_ptr< monty::ndarray< int,1 > > _4927,    std::shared_ptr< monty::ndarray< long long,1 > > _4928,    std::shared_ptr< monty::ndarray< long long,1 > > _4929,    std::shared_ptr< monty::ndarray< double,1 > > _4930,    std::shared_ptr< monty::ndarray< double,1 > > _4931) { mosek::fusion::p_BaseExpression::storeexpr(_4925,_4926,_4927,_4928,_4929,_4930,_4931); }void mosek::fusion::p_BaseExpression::storeexpr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4925,std::shared_ptr< monty::ndarray< int,1 > > _4926,std::shared_ptr< monty::ndarray< int,1 > > _4927,std::shared_ptr< monty::ndarray< long long,1 > > _4928,std::shared_ptr< monty::ndarray< long long,1 > > _4929,std::shared_ptr< monty::ndarray< double,1 > > _4930,std::shared_ptr< monty::ndarray< double,1 > > _4931){
  _checked_ptr_1<int> _ptr__4926(_4926 ? _4926->raw() : nullptr, _4926 ? _4926->size(0) : 0);
  _checked_ptr_1<int> _ptr__4927(_4927 ? _4927->raw() : nullptr, _4927 ? _4927->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4928(_4928 ? _4928->raw() : nullptr, _4928 ? _4928->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4929(_4929 ? _4929->raw() : nullptr, _4929 ? _4929->size(0) : 0);
  _checked_ptr_1<double> _ptr__4930(_4930 ? _4930->raw() : nullptr, _4930 ? _4930->size(0) : 0);
  _checked_ptr_1<double> _ptr__4931(_4931 ? _4931->raw() : nullptr, _4931 ? _4931->size(0) : 0);
  int _4932 = _ptr__4927[((int)((_4927)->size(0)) - (int)1)];
  int _4933 = ((int)((_4927)->size(0)) - (int)1);
  int _4934 = (int)((_4926)->size(0));
  {
    int _4935 = _4925->alloci32(safe_add( _4933,(int)1 ));
    ::mosek::fusion::Utils::Tools::arraycopy(_4927,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4925)->i32,_4935,safe_add( _4933,(int)1 ));
  }
  int _9174;
  bool _9175 = (NULL != _4928.get());
  if (_9175)
  {
    _9174 = (int)1;
  }
  else
  {
    _9174 = (int)0;
  }
  _4925->pushi32(_9174);
  _4925->pushi32(_4932);
  _4925->pushi32(_4933);
  {
    int _4936 = _4925->alloci32(_4934);
    ::mosek::fusion::Utils::Tools::arraycopy(_4926,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4925)->i32,_4936,_4934);
  }
  _4925->pushi32(_4934);
  {
    int _4937 = _4925->alloci64(_4932);
    ::mosek::fusion::Utils::Tools::arraycopy(_4929,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4925)->i64,_4937,_4932);
  }
  if ((NULL != _4928.get()))
  {
    {
      int _4938 = _4925->alloci64(_4933);
      ::mosek::fusion::Utils::Tools::arraycopy(_4928,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4925)->i64,_4938,_4933);
    }
  }
  {}
  {
    int _4939 = _4925->allocf64(_4932);
    ::mosek::fusion::Utils::Tools::arraycopy(_4930,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4925)->f64,_4939,_4932);
  }
  {
    int _4940 = _4925->allocf64(_4933);
    if ((NULL != _4931.get()))
    {
      {
        ::mosek::fusion::Utils::Tools::arraycopy(_4931,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4925)->f64,_4940,_4933);
      }
    }
    else
    {
      {
        int _9176 = (int)0;
        int _9177 = _4933;
        for (int _4941 = _9176; _4941 < _9177; ++_4941)
        {
          {
            ((*mosek::fusion::p_WorkStack::_get_impl(_4925)->f64)(safe_add( _4940,_4941 ))) = (int)0;
          }
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4945) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_4945); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,2 > > _4945) { return __mosek_2fusion_2BaseExpression__pick(_4945); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4945) { return __mosek_2fusion_2BaseExpression__pick(_4945); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4945){
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4945)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4946) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_4946); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,1 > > _4946) { return __mosek_2fusion_2BaseExpression__pick(_4946); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4946) { return __mosek_2fusion_2BaseExpression__pick(_4946); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4946){
  _checked_ptr_1<int> _ptr__4946(_4946 ? _4946->raw() : nullptr, _4946 ? _4946->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _4947 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_4946)->size(0)),(int)1)));
  int _9178 = (int)0;
  int _9179 = (int)((_4946)->size(0));
  for (int _4948 = _9178; _4948 < _9179; ++_4948)
  {
    {
      ((*_4947)(_4948,(int)0)) = _ptr__4946[_4948];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4947)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _4949) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_4949); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int,1 > > _4949) { return __mosek_2fusion_2BaseExpression__index(_4949); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _4949) { return __mosek_2fusion_2BaseExpression__index(_4949); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _4949){
  _checked_ptr_1<int> _ptr__4949(_4949 ? _4949->raw() : nullptr, _4949 ? _4949->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _4950 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_4949)->size(0)))));
  int _9180 = (int)0;
  int _9181 = (int)((_4949)->size(0));
  for (int _4951 = _9180; _4951 < _9181; ++_4951)
  {
    {
      ((*_4950)((int)0,_4951)) = _ptr__4949[_4951];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4950)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int _4952) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_4952); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int _4952) { return __mosek_2fusion_2BaseExpression__index(_4952); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int _4952) { return __mosek_2fusion_2BaseExpression__index(_4952); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int _4952){
  std::shared_ptr< monty::ndarray< int,2 > > _4953 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)1)));
  ((*_4953)((int)0,(int)0)) = _4952;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4953)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4954,std::shared_ptr< monty::ndarray< int,1 > > _4955) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_4954,_4955); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int,1 > > _4954,std::shared_ptr< monty::ndarray< int,1 > > _4955) { return __mosek_2fusion_2BaseExpression__slice(_4954,_4955); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4954,std::shared_ptr< monty::ndarray< int,1 > > _4955) { return __mosek_2fusion_2BaseExpression__slice(_4954,_4955); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4954,std::shared_ptr< monty::ndarray< int,1 > > _4955){
  _checked_ptr_1<int> _ptr__4954(_4954 ? _4954->raw() : nullptr, _4954 ? _4954->size(0) : 0);
  _checked_ptr_1<int> _ptr__4955(_4955 ? _4955->raw() : nullptr, _4955 ? _4955->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4954,_4955)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int _4956,int _4957) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_4956,_4957); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int _4956,int _4957) { return __mosek_2fusion_2BaseExpression__slice(_4956,_4957); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int _4956,int _4957) { return __mosek_2fusion_2BaseExpression__slice(_4956,_4957); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int _4956,int _4957){
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4956)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4957)}))).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseExpression::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }int mosek::fusion::p_BaseExpression::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseExpression :: getDim(int _4958) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_4958); }int mosek::fusion::p_BaseExpression::getDim(int _4958){
  return ((*shape)(_4958));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseExpression::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::p_BaseExpression::destroy(){shape.reset();}void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }mosek::fusion::p_WorkStack::p_WorkStack  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis){}int mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int _val) { _impl->cof_base = _val; }
int mosek::fusion::WorkStack::get_bfix_base() { return _impl->bfix_base; }
void mosek::fusion::WorkStack::set_bfix_base(int _val) { _impl->bfix_base = _val; }
int mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int _val) { _impl->nidxs_base = _val; }
int mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int _val) { _impl->sp_base = _val; }
int mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int _val) { _impl->shape_base = _val; }
int mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int _val) { _impl->nelem = _val; }
int mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int _val) { _impl->nnz = _val; }
int mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int _val) { _impl->nd = _val; }
int mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int _val) { _impl->pf64 = _val; }
int mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int _val) { _impl->pi64 = _val; }
int mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->i32 = _val; }
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack  (){ return new mosek::fusion::WorkStack(); }mosek::fusion::WorkStack::WorkStack  () :    WorkStack(new mosek::fusion::p_WorkStack(this)){ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }void mosek::fusion::p_WorkStack::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    i32 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    bfix_base = (int)0;
    cof_base = (int)0;
  }
}bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }bool mosek::fusion::p_WorkStack::peek_hassp(){
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
int mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }int mosek::fusion::p_WorkStack::peek_nnz(){
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }int mosek::fusion::p_WorkStack::peek_nelem(){
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_dim(int _4959) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_4959); }int mosek::fusion::p_WorkStack::peek_dim(int _4959){
  return _pubthis->peeki32(safe_add( _4959,(int)1 ));
}
int mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }int mosek::fusion::p_WorkStack::peek_nd(){
  return _pubthis->peeki32();
}
void mosek::fusion::WorkStack :: alloc_expr(int _4960,int _4961,int _4962,bool _4963) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_4960,_4961,_4962,_4963); }void mosek::fusion::p_WorkStack::alloc_expr(int _4960,int _4961,int _4962,bool _4963){
  cof_base = _pubthis->allocf64(_4962);
  bfix_base = _pubthis->allocf64(_4961);
  nidxs_base = _pubthis->alloci64(_4962);
  int _9182;
  bool _9183 = _4963;
  if (_9183)
  {
    _9182 = _pubthis->alloci64(_4961);
  }
  else
  {
    _9182 = (-(int)9999);
  }
  sp_base = _9182;
  ptr_base = _pubthis->alloci32(safe_add( _4961,(int)1 ));
  int _9184;
  bool _9185 = _4963;
  if (_9185)
  {
    _9184 = (int)1;
  }
  else
  {
    _9184 = (int)0;
  }
  _pubthis->pushi32(_9184);
  _pubthis->pushi32(_4962);
  _pubthis->pushi32(_4961);
  shape_base = _pubthis->alloci32(_4960);
  _pubthis->pushi32(_4960);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _4960;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _4961;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _4962;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _4963;
}
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4964) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_4964); }void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4964){
  int _4965 = pi32;
  int _4966 = pi64;
  int _4967 = pf64;
  _pubthis->pop_expr();
  int _4968 = _4964->alloci32((_4965 - pi32));
  int _4969 = _4964->alloci64((_4966 - pi64));
  int _4970 = _4964->allocf64((_4967 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_4964)->i32,_4968,(_4965 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_4964)->i64,_4969,(_4966 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_4964)->f64,_4970,(_4967 - pf64));
}
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }void mosek::fusion::p_WorkStack::peek_expr(){
  int _4971 = pi32;
  int _4972 = pi64;
  int _4973 = pf64;
  _pubthis->pop_expr();
  pi32 = _4971;
  pi64 = _4972;
  pf64 = _4973;
}
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }void mosek::fusion::p_WorkStack::pop_expr(){
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int _9186;
  bool _9187 = hassp;
  if (_9187)
  {
    _9186 = _pubthis->popi64(nelem);
  }
  else
  {
    _9186 = (-(int)9999);
  }
  sp_base = _9186;
  nidxs_base = _pubthis->popi64(nnz);
  bfix_base = _pubthis->popf64(nelem);
  cof_base = _pubthis->popf64(nnz);
}
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }void mosek::fusion::p_WorkStack::ensure_sparsity(){
  int _4974 = ((*i32)((pi32 - (int)1)));
  bool _4975 = (((*i32)(((pi32 - _4974) - (int)3))) != (int)0);
  int _4976 = ((*i32)(((pi32 - _4974) - (int)1)));
  if ((!_4975))
  {
    {
      ((*i32)(((pi32 - _4974) - (int)3))) = (int)1;
      int _4977 = _pubthis->alloci64(_4976);
      int _9188 = (int)0;
      int _9189 = _4976;
      for (int _4978 = _9188; _4978 < _9189; ++_4978)
      {
        {
          ((*i64)(_4977)) = _4978;
        }
      }
    }
  }
  {}
}
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }void mosek::fusion::p_WorkStack::clear(){
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
int mosek::fusion::WorkStack :: allocf64(int _4979) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_4979); }int mosek::fusion::p_WorkStack::allocf64(int _4979){
  _pubthis->ensuref64(_4979);
  int _4980 = pf64;
  pf64 += _4979;
  return _4980;
}
int mosek::fusion::WorkStack :: alloci64(int _4981) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_4981); }int mosek::fusion::p_WorkStack::alloci64(int _4981){
  _pubthis->ensurei64(_4981);
  int _4982 = pi64;
  pi64 += _4981;
  return _4982;
}
int mosek::fusion::WorkStack :: alloci32(int _4983) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_4983); }int mosek::fusion::p_WorkStack::alloci32(int _4983){
  if ((_4983 > (int)0))
  {
    {
      _pubthis->ensurei32(_4983);
      int _4984 = pi32;
      pi32 += _4983;
      return _4984;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
void mosek::fusion::WorkStack :: pushf64(double _4985) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_4985); }void mosek::fusion::p_WorkStack::pushf64(double _4985){
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _4985;
  ++ pf64;
}
void mosek::fusion::WorkStack :: pushi64(long long _4986) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_4986); }void mosek::fusion::p_WorkStack::pushi64(long long _4986){
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _4986;
  ++ pi64;
}
void mosek::fusion::WorkStack :: pushi32(int _4987) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_4987); }void mosek::fusion::p_WorkStack::pushi32(int _4987){
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _4987;
  ++ pi32;
}
void mosek::fusion::WorkStack :: ensuref64(int _4988) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_4988); }void mosek::fusion::p_WorkStack::ensuref64(int _4988){
  if ((safe_add( pf64,_4988 ) > (int)((f64)->size(0))))
  {
    {
      int _9190;
      bool _9191 = (_4988 < (int)((f64)->size(0)));
      if (_9191)
      {
        _9190 = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _9190 = safe_add( (int)((f64)->size(0)),_4988 );
      }
      int _4989 = _9190;
      std::shared_ptr< monty::ndarray< double,1 > > _4990 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4989)));
      _checked_ptr_1<double> _ptr__4990(_4990 ? _4990->raw() : nullptr,_4990 ? _4990->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_4990,(int)0,pf64);
      f64 = _4990;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei64(int _4991) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_4991); }void mosek::fusion::p_WorkStack::ensurei64(int _4991){
  if ((safe_add( pi64,_4991 ) > (int)((i64)->size(0))))
  {
    {
      int _9192;
      bool _9193 = (_4991 < (int)((i64)->size(0)));
      if (_9193)
      {
        _9192 = (int)((i64)->size(0));
      }
      else
      {
        _9192 = _4991;
      }
      int _4992 = safe_add( (int)((i64)->size(0)),_9192 );
      std::shared_ptr< monty::ndarray< long long,1 > > _4993 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4992)));
      _checked_ptr_1<long long> _ptr__4993(_4993 ? _4993->raw() : nullptr,_4993 ? _4993->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_4993,(int)0,pi64);
      i64 = _4993;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei32(int _4994) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_4994); }void mosek::fusion::p_WorkStack::ensurei32(int _4994){
  if ((safe_add( pi32,_4994 ) > (int)((i32)->size(0))))
  {
    {
      int _9194;
      bool _9195 = (_4994 < (int)((i32)->size(0)));
      if (_9195)
      {
        _9194 = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _9194 = safe_add( (int)((i32)->size(0)),_4994 );
      }
      int _4995 = _9194;
      std::shared_ptr< monty::ndarray< int,1 > > _4996 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4995)));
      _checked_ptr_1<int> _ptr__4996(_4996 ? _4996->raw() : nullptr,_4996 ? _4996->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_4996,(int)0,pi32);
      i32 = _4996;
    }
  }
  {}
}
int mosek::fusion::WorkStack :: popf64(int _4997) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_4997); }int mosek::fusion::p_WorkStack::popf64(int _4997){
  pf64 -= _4997;
  return pf64;
}
int mosek::fusion::WorkStack :: popi64(int _4998) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_4998); }int mosek::fusion::p_WorkStack::popi64(int _4998){
  pi64 -= _4998;
  return pi64;
}
int mosek::fusion::WorkStack :: popi32(int _4999) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_4999); }int mosek::fusion::p_WorkStack::popi32(int _4999){
  pi32 -= _4999;
  return pi32;
}
void mosek::fusion::WorkStack :: popf64(int _5000,std::shared_ptr< monty::ndarray< double,1 > > _5001,int _5002) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_5000,_5001,_5002); }void mosek::fusion::p_WorkStack::popf64(int _5000,std::shared_ptr< monty::ndarray< double,1 > > _5001,int _5002){
  _checked_ptr_1<double> _ptr__5001(_5001 ? _5001->raw() : nullptr, _5001 ? _5001->size(0) : 0);
  pf64 -= _5000;
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_5001,_5002,_5000);
}
void mosek::fusion::WorkStack :: popi64(int _5003,std::shared_ptr< monty::ndarray< long long,1 > > _5004,int _5005) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_5003,_5004,_5005); }void mosek::fusion::p_WorkStack::popi64(int _5003,std::shared_ptr< monty::ndarray< long long,1 > > _5004,int _5005){
  _checked_ptr_1<long long> _ptr__5004(_5004 ? _5004->raw() : nullptr, _5004 ? _5004->size(0) : 0);
  pi64 -= _5003;
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_5004,_5005,_5003);
}
void mosek::fusion::WorkStack :: popi32(int _5006,std::shared_ptr< monty::ndarray< int,1 > > _5007,int _5008) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_5006,_5007,_5008); }void mosek::fusion::p_WorkStack::popi32(int _5006,std::shared_ptr< monty::ndarray< int,1 > > _5007,int _5008){
  _checked_ptr_1<int> _ptr__5007(_5007 ? _5007->raw() : nullptr, _5007 ? _5007->size(0) : 0);
  pi32 -= _5006;
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_5007,_5008,_5006);
}
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }double mosek::fusion::p_WorkStack::popf64(){
  -- pf64;
  return ((*f64)(pf64));
}
long long mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }long long mosek::fusion::p_WorkStack::popi64(){
  -- pi64;
  return ((*i64)(pi64));
}
int mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }int mosek::fusion::p_WorkStack::popi32(){
  -- pi32;
  return ((*i32)(pi32));
}
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }double mosek::fusion::p_WorkStack::peekf64(){
  return ((*f64)((pf64 - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }long long mosek::fusion::p_WorkStack::peeki64(){
  return ((*i64)((pi64 - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }int mosek::fusion::p_WorkStack::peeki32(){
  return ((*i32)((pi32 - (int)1)));
}
double mosek::fusion::WorkStack :: peekf64(int _5009) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_5009); }double mosek::fusion::p_WorkStack::peekf64(int _5009){
  return ((*f64)(((pf64 - _5009) - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64(int _5010) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_5010); }long long mosek::fusion::p_WorkStack::peeki64(int _5010){
  return ((*i64)(((pi64 - _5010) - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32(int _5011) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_5011); }int mosek::fusion::p_WorkStack::peeki32(int _5011){
  return ((*i32)(((pi32 - _5011) - (int)1)));
}
void mosek::fusion::p_WorkStack::destroy(){f64.reset();i64.reset();i32.reset();}void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _5012,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _5013,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5014,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5015){ return new mosek::fusion::SymmetricExpr(_5012,_5013,_5014,_5015); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _5012,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _5013,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5014,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5015) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_5012,_5013,_5014,_5015); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _5012,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _5013,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5014,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5015){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->n = _5012;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->Ms = _5013;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->xs = _5014;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->b = _5015;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _5016,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5017){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_5016)->n != _5017->getdim()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9196;
  bool _9197 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5016)->b.get());
  if (_9197)
  {
    _9196 = mosek::fusion::p_SymmetricExpr::_get_impl(_5016)->b->__mosek_2fusion_2SymmetricMatrix__add(_5017);
  }
  else
  {
    _9196 = _5017;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_5016)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_5016)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_5016)->xs,_9196);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _5018,double _5019){
  std::vector<monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >> _9198;
  for (int _5020 = (int)0, _9199 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5018)->Ms)->size(0)); _5020 < _9199 ; ++_5020)
  {
    _9198.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_5018)->Ms)(_5020))->__mosek_2fusion_2SymmetricMatrix__mul(_5019));
  }
  auto _9200 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_9198.size()),_9198.begin(),_9198.end()));
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9201;
  bool _9202 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5018)->b.get());
  if (_9202)
  {
    _9201 = mosek::fusion::p_SymmetricExpr::_get_impl(_5018)->b->__mosek_2fusion_2SymmetricMatrix__mul(_5019);
  }
  else
  {
    _9201 = nullptr;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_5018)->n,_9200,mosek::fusion::p_SymmetricExpr::_get_impl(_5018)->xs,_9201);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _5021,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _5022){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _5023 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->Ms)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->Ms)->size(0)) ))));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5024 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->xs)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->xs)->size(0)) ))));
  int _5025 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->Ms)->size(0));
  int _9203 = (int)0;
  int _9204 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->Ms)->size(0));
  for (int _5026 = _9203; _5026 < _9204; ++_5026)
  {
    {
      ((*_5023)(_5026)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->Ms)(_5026));
    }
  }
  int _9205 = (int)0;
  int _9206 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->Ms)->size(0));
  for (int _5027 = _9205; _5027 < _9206; ++_5027)
  {
    {
      ((*_5023)(safe_add( _5027,_5025 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->Ms)(_5027));
    }
  }
  int _5028 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->xs)->size(0));
  int _9207 = (int)0;
  int _9208 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->xs)->size(0));
  for (int _5029 = _9207; _5029 < _9208; ++_5029)
  {
    {
      ((*_5024)(_5029)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->xs)(_5029));
    }
  }
  int _9209 = (int)0;
  int _9210 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->xs)->size(0));
  for (int _5030 = _9209; _5030 < _9210; ++_5030)
  {
    {
      ((*_5024)(safe_add( _5030,_5028 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->xs)(_5030));
    }
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9211;
  bool _9212 = ((NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->b.get()) && (NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->b.get()));
  if (_9212)
  {
    _9211 = nullptr;
  }
  else
  {
    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9213;
    bool _9214 = ((NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->b.get()) && (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->b.get()));
    if (_9214)
    {
      _9213 = mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->b->__mosek_2fusion_2SymmetricMatrix__add(mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->b);
    }
    else
    {
      monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9215;
      bool _9216 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->b.get());
      if (_9216)
      {
        _9215 = mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->b;
      }
      else
      {
        _9215 = mosek::fusion::p_SymmetricExpr::_get_impl(_5022)->b;
      }
      _9213 = _9215;
    }
    _9211 = _9213;
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5031 = _9211;
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_5021)->n,_5023,_5024,_5031);
}
std::string mosek::fusion::SymmetricExpr :: toString() { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5032 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5032->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SymmetricExpr( ("))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _5032->toString();
}
void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5033,    std::shared_ptr< monty::ndarray< long long,1 > > _5034,    std::shared_ptr< monty::ndarray< double,1 > > _5035,    std::shared_ptr< monty::ndarray< double,1 > > _5036,    std::shared_ptr< monty::ndarray< int,1 > > _5037,    std::shared_ptr< monty::ndarray< long long,1 > > _5038){ return new mosek::fusion::Expr(_5033,_5034,_5035,_5036,_5037,_5038); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5033,    std::shared_ptr< monty::ndarray< long long,1 > > _5034,    std::shared_ptr< monty::ndarray< double,1 > > _5035,    std::shared_ptr< monty::ndarray< double,1 > > _5036,    std::shared_ptr< monty::ndarray< int,1 > > _5037,    std::shared_ptr< monty::ndarray< long long,1 > > _5038) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_5033,_5034,_5035,_5036,_5037,_5038); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _5033,    std::shared_ptr< monty::ndarray< long long,1 > > _5034,    std::shared_ptr< monty::ndarray< double,1 > > _5035,    std::shared_ptr< monty::ndarray< double,1 > > _5036,    std::shared_ptr< monty::ndarray< int,1 > > _5037,    std::shared_ptr< monty::ndarray< long long,1 > > _5038){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__5033(_5033 ? _5033->raw() : nullptr, _5033 ? _5033->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5034(_5034 ? _5034->raw() : nullptr, _5034 ? _5034->size(0) : 0);
    _checked_ptr_1<double> _ptr__5035(_5035 ? _5035->raw() : nullptr, _5035 ? _5035->size(0) : 0);
    _checked_ptr_1<double> _ptr__5036(_5036 ? _5036->raw() : nullptr, _5036 ? _5036->size(0) : 0);
    _checked_ptr_1<int> _ptr__5037(_5037 ? _5037->raw() : nullptr, _5037 ? _5037->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5038(_5038 ? _5038->raw() : nullptr, _5038 ? _5038->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _9217;
    bool _9218 = (NULL != _5037.get());
    if (_9218)
    {
      _9217 = ::mosek::fusion::Utils::Tools::arraycopy(_5037);
    }
    else
    {
      _9217 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((int)((_5033)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< long long,1 > > _9219;
    bool _9220 = (NULL != _5038.get());
    if (_9220)
    {
      _9219 = ::mosek::fusion::Utils::Tools::arraycopy(_5038);
    }
    else
    {
      _9219 = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_5033),::mosek::fusion::Utils::Tools::arraycopy(_5034),::mosek::fusion::Utils::Tools::arraycopy(_5035),::mosek::fusion::Utils::Tools::arraycopy(_5036),_9217,_9219,(int)1);
    int _5039 = ((int)((_5033)->size(0)) - (int)1);
    if ((_5039 < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    long long _5040 = _ptr__5033[_5039];
    if (((_5040 < (int)0) || ((_5040 != (int)((_5035)->size(0))) || (_5040 != (int)((_5034)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _5041 = true;
    bool _5042 = true;
    bool _5043 = true;
    std::shared_ptr< monty::ndarray< int,1 > > _5044 = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int> _ptr__5044(_5044 ? _5044->raw() : nullptr,_5044 ? _5044->size(0) : 0);
    long long _5045 = ::mosek::fusion::p_Set::size(_5044);
    {
      int _9221 = (int)0;
      int _9222 = (int)((_5044)->size(0));
      for (int _5046 = _9221; _5046 < _9222; ++_5046)
      {
        {
          _5042 = (_5042 && (_ptr__5044[_5046] >= (int)0));
        }
      }
      int _9223 = (int)0;
      int _9224 = _5039;
      for (int _5047 = _9223; _5047 < _9224; ++_5047)
      {
        {
          _5041 = (_5041 && (_ptr__5033[_5047] <= _ptr__5033[safe_add( _5047,(int)1 )]));
        }
      }
      if (((NULL != _5038.get()) && ((int)((_5038)->size(0)) > (int)0)))
      {
        {
          _5043 = ((_ptr__5038[(int)0] >= (int)0) && (_ptr__5038[(_5039 - (int)1)] < _5045));
          int _9225 = (int)0;
          int _9226 = (_5039 - (int)1);
          for (int _5048 = _9225; _5048 < _9226; ++_5048)
          {
            {
              _5043 = (_5043 && (_ptr__5038[_5048] < _ptr__5038[safe_add( _5048,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_5042))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_5041))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_5043))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5049,    std::shared_ptr< monty::ndarray< long long,1 > > _5050,    std::shared_ptr< monty::ndarray< double,1 > > _5051,    std::shared_ptr< monty::ndarray< double,1 > > _5052,    std::shared_ptr< monty::ndarray< int,1 > > _5053,    std::shared_ptr< monty::ndarray< long long,1 > > _5054,    int _5055){ return new mosek::fusion::Expr(_5049,_5050,_5051,_5052,_5053,_5054,_5055); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5049,    std::shared_ptr< monty::ndarray< long long,1 > > _5050,    std::shared_ptr< monty::ndarray< double,1 > > _5051,    std::shared_ptr< monty::ndarray< double,1 > > _5052,    std::shared_ptr< monty::ndarray< int,1 > > _5053,    std::shared_ptr< monty::ndarray< long long,1 > > _5054,    int _5055) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_5049,_5050,_5051,_5052,_5053,_5054,_5055); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _5049,    std::shared_ptr< monty::ndarray< long long,1 > > _5050,    std::shared_ptr< monty::ndarray< double,1 > > _5051,    std::shared_ptr< monty::ndarray< double,1 > > _5052,    std::shared_ptr< monty::ndarray< int,1 > > _5053,    std::shared_ptr< monty::ndarray< long long,1 > > _5054,    int _5055){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__5049(_5049 ? _5049->raw() : nullptr, _5049 ? _5049->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5050(_5050 ? _5050->raw() : nullptr, _5050 ? _5050->size(0) : 0);
    _checked_ptr_1<double> _ptr__5051(_5051 ? _5051->raw() : nullptr, _5051 ? _5051->size(0) : 0);
    _checked_ptr_1<double> _ptr__5052(_5052 ? _5052->raw() : nullptr, _5052 ? _5052->size(0) : 0);
    _checked_ptr_1<int> _ptr__5053(_5053 ? _5053->raw() : nullptr, _5053 ? _5053->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5054(_5054 ? _5054->raw() : nullptr, _5054 ? _5054->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5053);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _5053;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _5049;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _5050;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _5051;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _5052;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _5054;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _5056){ return new mosek::fusion::Expr(_5056); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _5056) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_5056); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5056){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_5056->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _9227 = _5056;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_9227.get()))
    {
      ::mosek::fusion::Expr::t _5057 (dynamic_cast<::mosek::fusion::Expr*>(_9227.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_5057)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_5057)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_5057)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_5057)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_5057)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_5057)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _5058 = _9227;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _5059 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _5060 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _5061 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _5058->eval(_5061,_5060,_5059);
        int _5062 = _5061->popi32();
        int _5063 = _5061->popi32(_5062);
        int _5064 = _5061->popi32();
        int _5065 = _5061->popi32();
        bool _5066 = (_5061->popi32() != (int)0);
        int _5067 = _5061->popi32(safe_add( _5064,(int)1 ));
        int _9228;
        bool _9229 = _5066;
        if (_9229)
        {
          _9228 = _5061->popi64(_5064);
        }
        else
        {
          _9228 = (int)0;
        }
        int _5068 = _9228;
        int _5069 = _5061->popi64(_5065);
        int _5070 = _5061->popf64(_5064);
        int _5071 = _5061->popf64(_5065);
        std::shared_ptr< monty::ndarray< int,1 > > _5072 = mosek::fusion::p_WorkStack::_get_impl(_5061)->i32;
        _checked_ptr_1<int> _ptr__5072(_5072 ? _5072->raw() : nullptr,_5072 ? _5072->size(0) : 0);
        std::shared_ptr< monty::ndarray< long long,1 > > _5073 = mosek::fusion::p_WorkStack::_get_impl(_5061)->i64;
        _checked_ptr_1<long long> _ptr__5073(_5073 ? _5073->raw() : nullptr,_5073 ? _5073->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _5074 = mosek::fusion::p_WorkStack::_get_impl(_5061)->f64;
        _checked_ptr_1<double> _ptr__5074(_5074 ? _5074->raw() : nullptr,_5074 ? _5074->size(0) : 0);
        std::vector<int> _9230;
        for (int _5075 = (int)0, _9231 = _5062; _5075 < _9231 ; ++_5075)
        {
          _9230.push_back(_ptr__5072[safe_add( _5063,_5075 )]);
        }
        auto _9232 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9230.size()),_9230.begin(),_9230.end()));
        shape = _9232;
        std::vector<long long> _9233;
        for (int _5076 = (int)0, _9234 = safe_add( _5064,(int)1 ); _5076 < _9234 ; ++_5076)
        {
          _9233.push_back(_ptr__5072[safe_add( _5067,_5076 )]);
        }
        auto _9235 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9233.size()),_9233.begin(),_9233.end()));
        ptrb = _9235;
        std::vector<long long> _9236;
        for (int _5077 = (int)0, _9237 = _5065; _5077 < _9237 ; ++_5077)
        {
          _9236.push_back(_ptr__5073[safe_add( _5069,_5077 )]);
        }
        auto _9238 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9236.size()),_9236.begin(),_9236.end()));
        subj = _9238;
        std::vector<double> _9239;
        for (int _5078 = (int)0, _9240 = _5065; _5078 < _9240 ; ++_5078)
        {
          _9239.push_back(_ptr__5074[safe_add( _5071,_5078 )]);
        }
        auto _9241 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9239.size()),_9239.begin(),_9239.end()));
        cof_v = _9241;
        std::vector<double> _9242;
        for (int _5079 = (int)0, _9243 = _5065; _5079 < _9243 ; ++_5079)
        {
          _9242.push_back(_ptr__5074[safe_add( _5070,_5079 )]);
        }
        auto _9244 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9242.size()),_9242.begin(),_9242.end()));
        bfix = _9244;
        std::shared_ptr< monty::ndarray< long long,1 > > _9245;
        bool _9246 = _5066;
        if (_9246)
        {
          std::vector<long long> _9247;
          for (int _5080 = (int)0, _9248 = _5065; _5080 < _9248 ; ++_5080)
          {
            _9247.push_back(_ptr__5073[safe_add( _5068,_5080 )]);
          }
          auto _9249 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9247.size()),_9247.begin(),_9247.end()));
          _9245 = _9249;
        }
        else
        {
          _9245 = nullptr;
        }
        inst = _9245;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}long long mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int,1 > > _5081){
  _checked_ptr_1<int> _ptr__5081(_5081 ? _5081->raw() : nullptr, _5081 ? _5081->size(0) : 0);
  int _5082 = (int)1;
  int _9250 = (int)0;
  int _9251 = (int)((_5081)->size(0));
  for (int _5083 = _9250; _5083 < _9251; ++_5083)
  {
    {
      _5082 *= _ptr__5081[_5083];
    }
  }
  return _5082;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _5084){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _9252;
  for (int _5085 = (int)0, _9253 = (int)((_5084)->size(0)); _5085 < _9253 ; ++_5085)
  {
    for (int _5086 = (int)0, _9254 = (int)((((*_5084)(_5085)))->size(0)); _5086 < _9254 ; ++_5086)
    {
      _9252.push_back(((*((*_5084)(_5085)))(_5086)));
    }
  }
  auto _9255 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_9252.size()),_9252.begin(),_9252.end()));
  return _9255;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5087,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5088){
  if ((NULL == _5087.get()))
  {
    {
      return _5088;
    }
  }
  else if((NULL == _5088.get()))
  {
    {
      return _5087;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5089 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_5087)->size(0)),(int)((_5088)->size(0)) ))));
      int _9256 = (int)0;
      int _9257 = (int)((_5087)->size(0));
      for (int _5090 = _9256; _5090 < _9257; ++_5090)
      {
        {
          ((*_5089)(_5090)) = ((*_5087)(_5090));
        }
      }
      int _9258 = (int)0;
      int _9259 = (int)((_5088)->size(0));
      for (int _5091 = _9258; _5091 < _9259; ++_5091)
      {
        {
          ((*_5089)(safe_add( _5091,(int)((_5087)->size(0)) ))) = ((*_5088)(_5091));
        }
      }
      return _5089;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense  ( monty::rc_ptr< ::mosek::fusion::Expression > _5092) { return mosek::fusion::p_Expr::condense(_5092); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _5092){
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_5092)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _5093) { return mosek::fusion::p_Expr::flatten(_5093); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _5093){
  if ((NULL == _5093.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5093,(int)_5093->getSize());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5094,    int _5095,    int _5096) { return mosek::fusion::p_Expr::reshape(_5094,_5095,_5096); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5094,int _5095,int _5096){
  if ((NULL == _5094.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5094,::mosek::fusion::p_Set::make(_5095,_5096));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5097,    int _5098) { return mosek::fusion::p_Expr::reshape(_5097,_5098); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5097,int _5098){
  if ((NULL == _5097.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5097,::mosek::fusion::p_Set::make(_5098));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5099,    std::shared_ptr< monty::ndarray< int,1 > > _5100) { return mosek::fusion::p_Expr::reshape(_5099,_5100); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5099,std::shared_ptr< monty::ndarray< int,1 > > _5100){
  _checked_ptr_1<int> _ptr__5100(_5100 ? _5100->raw() : nullptr, _5100 ? _5100->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5100,_5099)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: size() { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size(){
  return ((long long)((ptrb)->size(0)) - (int)1);
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr :: __mosek_2fusion_2Expr__eval() { return mosek::fusion::p_Expr::_get_impl(this)->__mosek_2fusion_2Expr__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::eval() { return __mosek_2fusion_2Expr__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::__mosek_2fusion_2BaseExpression__eval() { return __mosek_2fusion_2Expr__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_Expr::__mosek_2fusion_2Expr__eval(){
  std::shared_ptr< monty::ndarray< double,1 > > _9260;
  bool _9261 = (NULL == bfix.get());
  if (_9261)
  {
    _9260 = nullptr;
  }
  else
  {
    _9260 = ::mosek::fusion::Utils::Tools::arraycopy(bfix);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5101 = _9260;
  _checked_ptr_1<double> _ptr__5101(_5101 ? _5101->raw() : nullptr,_5101 ? _5101->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _9262;
  bool _9263 = (NULL == inst.get());
  if (_9263)
  {
    _9262 = nullptr;
  }
  else
  {
    _9262 = ::mosek::fusion::Utils::Tools::arraycopy(inst);
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5102 = _9262;
  _checked_ptr_1<long long> _ptr__5102(_5102 ? _5102->raw() : nullptr,_5102 ? _5102->size(0) : 0);
  return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_5101,::mosek::fusion::Utils::Tools::arraycopy(ptrb),::mosek::fusion::Utils::Tools::arraycopy(subj),::mosek::fusion::Utils::Tools::arraycopy(cof_v),shape,inst);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( std::shared_ptr< monty::ndarray< int,1 > > _5103) { return mosek::fusion::p_Expr::zeros(_5103); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int,1 > > _5103){
  _checked_ptr_1<int> _ptr__5103(_5103 ? _5103->raw() : nullptr, _5103 ? _5103->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5103,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _5104) { return mosek::fusion::p_Expr::zeros(_5104); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int _5104){
  return ::mosek::fusion::p_Expr::constTerm(_5104,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( ) { return mosek::fusion::p_Expr::ones(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(){
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _5105,    std::shared_ptr< monty::ndarray< int,2 > > _5106) { return mosek::fusion::p_Expr::ones(_5105,_5106); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _5105,std::shared_ptr< monty::ndarray< int,2 > > _5106){
  _checked_ptr_1<int> _ptr__5105(_5105 ? _5105->raw() : nullptr, _5105 ? _5105->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5105,_5106,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _5107) { return mosek::fusion::p_Expr::ones(_5107); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _5107){
  _checked_ptr_1<int> _ptr__5107(_5107 ? _5107->raw() : nullptr, _5107 ? _5107->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5107,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _5108) { return mosek::fusion::p_Expr::ones(_5108); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int _5108){
  return ::mosek::fusion::p_Expr::constTerm(_5108,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5109) { return mosek::fusion::p_Expr::constTerm(_5109); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5109){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_5109)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_5109)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5109)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5110) { return mosek::fusion::p_Expr::constTerm(_5110); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _5110){
  int _5111 = _5110->numRows();
  int _5112 = _5110->numColumns();
  std::shared_ptr< monty::ndarray< int,1 > > _5113 = ::mosek::fusion::p_Set::make(_5111,_5112);
  _checked_ptr_1<int> _ptr__5113(_5113 ? _5113->raw() : nullptr,_5113 ? _5113->size(0) : 0);
  if (_5110->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5114 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5110->numNonzeros())));
      _checked_ptr_1<double> _ptr__5114(_5114 ? _5114->raw() : nullptr,_5114 ? _5114->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5115 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5110->numNonzeros())));
      _checked_ptr_1<int> _ptr__5115(_5115 ? _5115->raw() : nullptr,_5115 ? _5115->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5116 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5110->numNonzeros())));
      _checked_ptr_1<int> _ptr__5116(_5116 ? _5116->raw() : nullptr,_5116 ? _5116->size(0) : 0);
      _5110->getDataAsTriplets(_5116,_5115,_5114);
      std::vector<long long> _9264;
      for (int _5118 = (int)0, _9265 = (int)((_5115)->size(0)); _5118 < _9265 ; ++_5118)
      {
        _9264.push_back(safe_add( safe_mul( _ptr__5116[_5118],_5112 ),_ptr__5115[_5118] ));
      }
      auto _9266 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9264.size()),_9264.begin(),_9264.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _5117 = _9266;
      _checked_ptr_1<long long> _ptr__5117(_5117 ? _5117->raw() : nullptr,_5117 ? _5117->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5113,_5117,_5114)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5113,nullptr,_5110->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _5119) { return mosek::fusion::p_Expr::constTerm(_5119); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _5119){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,_5119)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5120,    std::shared_ptr< monty::ndarray< int,2 > > _5121,    double _5122) { return mosek::fusion::p_Expr::constTerm(_5120,_5121,_5122); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5120,std::shared_ptr< monty::ndarray< int,2 > > _5121,double _5122){
  _checked_ptr_1<int> _ptr__5120(_5120 ? _5120->raw() : nullptr, _5120 ? _5120->size(0) : 0);
  int _5123 = (int)((_5121)->size(0));
  int _5124 = (int)((_5120)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5125 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5123)));
  _checked_ptr_1<long long> _ptr__5125(_5125 ? _5125->raw() : nullptr,_5125 ? _5125->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5126 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5124)));
  _checked_ptr_1<long long> _ptr__5126(_5126 ? _5126->raw() : nullptr,_5126 ? _5126->size(0) : 0);
  _ptr__5126[(_5124 - (int)1)] = (int)1;
  int _9267 = (int)1;
  int _9268 = _5124;
  for (int _5127 = _9267; _5127 < _9268; ++_5127)
  {
    {
      _ptr__5126[((_5124 - _5127) - (int)1)] = safe_mul( _ptr__5126[(_5124 - _5127)],_ptr__5120[(_5124 - _5127)] );
    }
  }
  int _9269 = (int)0;
  int _9270 = _5123;
  for (int _5128 = _9269; _5128 < _9270; ++_5128)
  {
    {
      int _9271 = (int)0;
      int _9272 = _5124;
      for (int _5129 = _9271; _5129 < _9272; ++_5129)
      {
        {
          _ptr__5125[_5128] += safe_mul( _ptr__5126[_5129],((*_5121)(_5128,_5129)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5120,_5125,_5122)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5130,    std::shared_ptr< monty::ndarray< int,2 > > _5131,    std::shared_ptr< monty::ndarray< double,1 > > _5132) { return mosek::fusion::p_Expr::constTerm(_5130,_5131,_5132); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5130,std::shared_ptr< monty::ndarray< int,2 > > _5131,std::shared_ptr< monty::ndarray< double,1 > > _5132){
  _checked_ptr_1<int> _ptr__5130(_5130 ? _5130->raw() : nullptr, _5130 ? _5130->size(0) : 0);
  _checked_ptr_1<double> _ptr__5132(_5132 ? _5132->raw() : nullptr, _5132 ? _5132->size(0) : 0);
  int _5133 = (int)((_5131)->size(0));
  int _5134 = (int)((_5130)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5135 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5133)));
  _checked_ptr_1<long long> _ptr__5135(_5135 ? _5135->raw() : nullptr,_5135 ? _5135->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5136 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5134)));
  _checked_ptr_1<long long> _ptr__5136(_5136 ? _5136->raw() : nullptr,_5136 ? _5136->size(0) : 0);
  _ptr__5136[(_5134 - (int)1)] = (int)1;
  int _9273 = (int)1;
  int _9274 = _5134;
  for (int _5137 = _9273; _5137 < _9274; ++_5137)
  {
    {
      _ptr__5136[((_5134 - _5137) - (int)1)] = safe_mul( _ptr__5136[(_5134 - _5137)],_ptr__5130[(_5134 - _5137)] );
    }
  }
  int _9275 = (int)0;
  int _9276 = _5133;
  for (int _5138 = _9275; _5138 < _9276; ++_5138)
  {
    {
      int _9277 = (int)0;
      int _9278 = _5134;
      for (int _5139 = _9277; _5139 < _9278; ++_5139)
      {
        {
          _ptr__5135[_5138] += safe_mul( _ptr__5136[_5139],((*_5131)(_5138,_5139)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5130,_5135,_5132)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5140,    double _5141) { return mosek::fusion::p_Expr::constTerm(_5140,_5141); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5140,double _5141){
  _checked_ptr_1<int> _ptr__5140(_5140 ? _5140->raw() : nullptr, _5140 ? _5140->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5140,nullptr,_5141)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _5142,    double _5143) { return mosek::fusion::p_Expr::constTerm(_5142,_5143); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int _5142,double _5143){
  std::vector<double> _9279;
  for (int _5144 = (int)0, _9280 = _5142; _5144 < _9280 ; ++_5144)
  {
    _9279.push_back(_5143);
  }
  auto _9281 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9279.size()),_9279.begin(),_9279.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5142)}),nullptr,_9281)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _5145) { return mosek::fusion::p_Expr::constTerm(_5145); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _5145){
  std::vector<double> _9282;
  for (int _5146 = (int)0, _9283 = (int)((_5145)->size(0)); _5146 < _9283 ; ++_5146)
  {
    for (int _5147 = (int)0, _9284 = (int)((_5145)->size(1)); _5147 < _9284 ; ++_5147)
    {
      _9282.push_back(((*_5145)(_5146,_5147)));
    }
  }
  auto _9285 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9282.size()),_9282.begin(),_9282.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5145)->size(0))),(int)((int)((_5145)->size(1)))}),nullptr,_9285)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _5148) { return mosek::fusion::p_Expr::constTerm(_5148); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _5148){
  _checked_ptr_1<double> _ptr__5148(_5148 ? _5148->raw() : nullptr, _5148 ? _5148->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5148)->size(0)))}),nullptr,_5148)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: numNonzeros() { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros(){
  return (long long)((cof_v)->size(0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _5149,    int _5150) { return mosek::fusion::p_Expr::sum(_5149,_5150); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _5149,int _5150){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_5150,_5149)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _5151) { return mosek::fusion::p_Expr::sum(_5151); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _5151){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_5151))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _5152) { return mosek::fusion::p_Expr::neg(_5152); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _5152){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_5152)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _5153,monty::rc_ptr< ::mosek::fusion::Matrix > _5154,monty::rc_ptr< ::mosek::fusion::Expression > _5155){
  long long _5156 = _5154->numNonzeros();
  int _5157 = _5154->numRows();
  int _5158 = _5154->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5159 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5156)));
  _checked_ptr_1<double> _ptr__5159(_5159 ? _5159->raw() : nullptr,_5159 ? _5159->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5160 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5156)));
  _checked_ptr_1<int> _ptr__5160(_5160 ? _5160->raw() : nullptr,_5160 ? _5160->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5161 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5156)));
  _checked_ptr_1<int> _ptr__5161(_5161 ? _5161->raw() : nullptr,_5161 ? _5161->size(0) : 0);
  _5154->getDataAsTriplets(_5161,_5160,_5159);
  if (_5153)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_5157,_5158,_5161,_5160,_5159,_5155)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_5157,_5158,_5161,_5160,_5159,_5155)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _5162,    monty::rc_ptr< ::mosek::fusion::Matrix > _5163) { return mosek::fusion::p_Expr::mulDiag(_5162,_5163); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _5162,monty::rc_ptr< ::mosek::fusion::Matrix > _5163){
  return ::mosek::fusion::p_Expr::mulDiag(false,_5163,_5162->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5164,    monty::rc_ptr< ::mosek::fusion::Variable > _5165) { return mosek::fusion::p_Expr::mulDiag(_5164,_5165); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _5164,monty::rc_ptr< ::mosek::fusion::Variable > _5165){
  return ::mosek::fusion::p_Expr::mulDiag(true,_5164,_5165->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _5166,    monty::rc_ptr< ::mosek::fusion::Matrix > _5167) { return mosek::fusion::p_Expr::mulDiag(_5166,_5167); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _5166,monty::rc_ptr< ::mosek::fusion::Matrix > _5167){
  return ::mosek::fusion::p_Expr::mulDiag(false,_5167,_5166);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5168,    monty::rc_ptr< ::mosek::fusion::Expression > _5169) { return mosek::fusion::p_Expr::mulDiag(_5168,_5169); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _5168,monty::rc_ptr< ::mosek::fusion::Expression > _5169){
  return ::mosek::fusion::p_Expr::mulDiag(true,_5168,_5169);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _5170,    std::shared_ptr< monty::ndarray< double,2 > > _5171) { return mosek::fusion::p_Expr::mulDiag(_5170,_5171); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _5170,std::shared_ptr< monty::ndarray< double,2 > > _5171){
  std::vector<int> _9286;
  for (int _5172 = (int)0, _9287 = (int)((_5171)->size(0)); _5172 < _9287 ; ++_5172)
  {
    for (int _5173 = (int)0, _9288 = (int)((_5171)->size(1)); _5173 < _9288 ; ++_5173)
    {
      _9286.push_back(_5172);
    }
  }
  auto _9289 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9286.size()),_9286.begin(),_9286.end()));
  std::vector<int> _9290;
  for (int _5174 = (int)0, _9291 = (int)((_5171)->size(0)); _5174 < _9291 ; ++_5174)
  {
    for (int _5175 = (int)0, _9292 = (int)((_5171)->size(1)); _5175 < _9292 ; ++_5175)
    {
      _9290.push_back(_5175);
    }
  }
  auto _9293 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9290.size()),_9290.begin(),_9290.end()));
  std::vector<double> _9294;
  for (int _5176 = (int)0, _9295 = (int)((_5171)->size(0)); _5176 < _9295 ; ++_5176)
  {
    for (int _5177 = (int)0, _9296 = (int)((_5171)->size(1)); _5177 < _9296 ; ++_5177)
    {
      _9294.push_back(((*_5171)(_5176,_5177)));
    }
  }
  auto _9297 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9294.size()),_9294.begin(),_9294.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_5171)->size(0)),(int)((_5171)->size(1)),_9289,_9293,_9297,_5170->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _5178,    std::shared_ptr< monty::ndarray< double,2 > > _5179) { return mosek::fusion::p_Expr::mulDiag(_5178,_5179); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _5178,std::shared_ptr< monty::ndarray< double,2 > > _5179){
  std::vector<int> _9298;
  for (int _5180 = (int)0, _9299 = (int)((_5179)->size(0)); _5180 < _9299 ; ++_5180)
  {
    for (int _5181 = (int)0, _9300 = (int)((_5179)->size(1)); _5181 < _9300 ; ++_5181)
    {
      _9298.push_back(_5180);
    }
  }
  auto _9301 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9298.size()),_9298.begin(),_9298.end()));
  std::vector<int> _9302;
  for (int _5182 = (int)0, _9303 = (int)((_5179)->size(0)); _5182 < _9303 ; ++_5182)
  {
    for (int _5183 = (int)0, _9304 = (int)((_5179)->size(1)); _5183 < _9304 ; ++_5183)
    {
      _9302.push_back(_5183);
    }
  }
  auto _9305 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9302.size()),_9302.begin(),_9302.end()));
  std::vector<double> _9306;
  for (int _5184 = (int)0, _9307 = (int)((_5179)->size(0)); _5184 < _9307 ; ++_5184)
  {
    for (int _5185 = (int)0, _9308 = (int)((_5179)->size(1)); _5185 < _9308 ; ++_5185)
    {
      _9306.push_back(((*_5179)(_5184,_5185)));
    }
  }
  auto _9309 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9306.size()),_9306.begin(),_9306.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_5179)->size(0)),(int)((_5179)->size(1)),_9301,_9305,_9309,_5178)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _5186,    monty::rc_ptr< ::mosek::fusion::Variable > _5187) { return mosek::fusion::p_Expr::mulDiag(_5186,_5187); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _5186,monty::rc_ptr< ::mosek::fusion::Variable > _5187){
  std::vector<int> _9310;
  for (int _5188 = (int)0, _9311 = (int)((_5186)->size(0)); _5188 < _9311 ; ++_5188)
  {
    for (int _5189 = (int)0, _9312 = (int)((_5186)->size(1)); _5189 < _9312 ; ++_5189)
    {
      _9310.push_back(_5188);
    }
  }
  auto _9313 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9310.size()),_9310.begin(),_9310.end()));
  std::vector<int> _9314;
  for (int _5190 = (int)0, _9315 = (int)((_5186)->size(0)); _5190 < _9315 ; ++_5190)
  {
    for (int _5191 = (int)0, _9316 = (int)((_5186)->size(1)); _5191 < _9316 ; ++_5191)
    {
      _9314.push_back(_5191);
    }
  }
  auto _9317 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9314.size()),_9314.begin(),_9314.end()));
  std::vector<double> _9318;
  for (int _5192 = (int)0, _9319 = (int)((_5186)->size(0)); _5192 < _9319 ; ++_5192)
  {
    for (int _5193 = (int)0, _9320 = (int)((_5186)->size(1)); _5193 < _9320 ; ++_5193)
    {
      _9318.push_back(((*_5186)(_5192,_5193)));
    }
  }
  auto _9321 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9318.size()),_9318.begin(),_9318.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_5186)->size(0)),(int)((_5186)->size(1)),_9313,_9317,_9321,_5187->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _5194,    monty::rc_ptr< ::mosek::fusion::Expression > _5195) { return mosek::fusion::p_Expr::mulDiag(_5194,_5195); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _5194,monty::rc_ptr< ::mosek::fusion::Expression > _5195){
  std::vector<int> _9322;
  for (int _5196 = (int)0, _9323 = (int)((_5194)->size(0)); _5196 < _9323 ; ++_5196)
  {
    for (int _5197 = (int)0, _9324 = (int)((_5194)->size(1)); _5197 < _9324 ; ++_5197)
    {
      _9322.push_back(_5196);
    }
  }
  auto _9325 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9322.size()),_9322.begin(),_9322.end()));
  std::vector<int> _9326;
  for (int _5198 = (int)0, _9327 = (int)((_5194)->size(0)); _5198 < _9327 ; ++_5198)
  {
    for (int _5199 = (int)0, _9328 = (int)((_5194)->size(1)); _5199 < _9328 ; ++_5199)
    {
      _9326.push_back(_5199);
    }
  }
  auto _9329 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9326.size()),_9326.begin(),_9326.end()));
  std::vector<double> _9330;
  for (int _5200 = (int)0, _9331 = (int)((_5194)->size(0)); _5200 < _9331 ; ++_5200)
  {
    for (int _5201 = (int)0, _9332 = (int)((_5194)->size(1)); _5201 < _9332 ; ++_5201)
    {
      _9330.push_back(((*_5194)(_5200,_5201)));
    }
  }
  auto _9333 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9330.size()),_9330.begin(),_9330.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_5194)->size(0)),(int)((_5194)->size(1)),_9325,_9329,_9333,_5195)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _5202,monty::rc_ptr< ::mosek::fusion::Expression > _5203){
  std::shared_ptr< monty::ndarray< int,1 > > _5204 = _5203->getShape();
  _checked_ptr_1<int> _ptr__5204(_5204 ? _5204->raw() : nullptr,_5204 ? _5204->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _5205 = _5203;
  if (((int)((_5204)->size(0)) == (int)1))
  {
    {
      _5204 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5204[(int)0]),(int)((int)1)});
      _ptr__5204.update(_5204 ? _5204->raw() : nullptr, _5204 ? _5204->size(0) : 0);
      _5205 = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5204,_5203)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_5204)->size(0)) != (int)2) || ((_5202->numRows() != _ptr__5204[(int)0]) || (_5202->numColumns() != _ptr__5204[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int _5206 = _5202->numColumns();
  long long _5207 = _5202->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _5208 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5207)));
  _checked_ptr_1<int> _ptr__5208(_5208 ? _5208->raw() : nullptr,_5208 ? _5208->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5209 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5207)));
  _checked_ptr_1<int> _ptr__5209(_5209 ? _5209->raw() : nullptr,_5209 ? _5209->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5210 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5207)));
  _checked_ptr_1<double> _ptr__5210(_5210 ? _5210->raw() : nullptr,_5210 ? _5210->size(0) : 0);
  _5202->getDataAsTriplets(_5208,_5209,_5210);
  std::vector<long long> _9334;
  for (long long _5211 = (int)0, _9335 = _5207; _5211 < _9335 ; ++_5211)
  {
    _9334.push_back(safe_add( safe_mul( _ptr__5208[_5211],_5206 ),_ptr__5209[_5211] ));
  }
  auto _9336 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9334.size()),_9334.begin(),_9334.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_5210,_9336,_5205,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _5212,monty::rc_ptr< ::mosek::fusion::Expression > _5213){
  _checked_ptr_1<double> _ptr__5212(_5212 ? _5212->raw() : nullptr, _5212 ? _5212->size(0) : 0);
  if (((NULL == _5212.get()) || (NULL == _5213.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_5213->getND() == (int)0) && ((int)((_5212)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__5212[(int)0],_5213)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_5213->getND() != (int)1) || (_5213->getDim((int)0) != (int)((_5212)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<long long> _9337;
      for (int _5214 = (int)0, _9338 = (int)((_5212)->size(0)); _5214 < _9338 ; ++_5214)
      {
        _9337.push_back(_5214);
      }
      auto _9339 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9337.size()),_9337.begin(),_9337.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_5212,_9339,_5213)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5215,monty::rc_ptr< ::mosek::fusion::Expression > _5216){
  if (((NULL == _5215.get()) || (NULL == _5216.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _5217 = _5216->getShape();
  _checked_ptr_1<int> _ptr__5217(_5217 ? _5217->raw() : nullptr,_5217 ? _5217->size(0) : 0);
  if (((int)((_5217)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5215)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int _9340 = (int)0;
  int _9341 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5215)->dims)->size(0));
  for (int _5218 = _9340; _5218 < _9341; ++_5218)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5215)->dims)(_5218)) != _ptr__5217[_5218]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_5215)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_5215)->inst,_5216)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5219,    double _5220) { return mosek::fusion::p_Expr::mul(_5219,_5220); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5219,double _5220){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_5220,_5219)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _5221,    monty::rc_ptr< ::mosek::fusion::Expression > _5222) { return mosek::fusion::p_Expr::mul(_5221,_5222); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _5221,monty::rc_ptr< ::mosek::fusion::Expression > _5222){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_5221,_5222)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5223,    std::shared_ptr< monty::ndarray< double,1 > > _5224) { return mosek::fusion::p_Expr::mul(_5223,_5224); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5223,std::shared_ptr< monty::ndarray< double,1 > > _5224){
  _checked_ptr_1<double> _ptr__5224(_5224 ? _5224->raw() : nullptr, _5224 ? _5224->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_5224,_5223);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _5225,    monty::rc_ptr< ::mosek::fusion::Expression > _5226) { return mosek::fusion::p_Expr::mul(_5225,_5226); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _5225,monty::rc_ptr< ::mosek::fusion::Expression > _5226){
  _checked_ptr_1<double> _ptr__5225(_5225 ? _5225->raw() : nullptr, _5225 ? _5225->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_5225,_5226);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5227,    std::shared_ptr< monty::ndarray< double,2 > > _5228) { return mosek::fusion::p_Expr::mul(_5227,_5228); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5227,std::shared_ptr< monty::ndarray< double,2 > > _5228){
  return ::mosek::fusion::p_Expr::mul(false,_5228,_5227);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _5229,    monty::rc_ptr< ::mosek::fusion::Expression > _5230) { return mosek::fusion::p_Expr::mul(_5229,_5230); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _5229,monty::rc_ptr< ::mosek::fusion::Expression > _5230){
  return ::mosek::fusion::p_Expr::mul(true,_5229,_5230);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5231,    monty::rc_ptr< ::mosek::fusion::Matrix > _5232) { return mosek::fusion::p_Expr::mul(_5231,_5232); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5231,monty::rc_ptr< ::mosek::fusion::Matrix > _5232){
  return ::mosek::fusion::p_Expr::mul(false,_5232,_5231);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5233,    monty::rc_ptr< ::mosek::fusion::Expression > _5234) { return mosek::fusion::p_Expr::mul(_5233,_5234); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _5233,monty::rc_ptr< ::mosek::fusion::Expression > _5234){
  return ::mosek::fusion::p_Expr::mul(true,_5233,_5234);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5235,std::shared_ptr< monty::ndarray< double,1 > > _5236,monty::rc_ptr< ::mosek::fusion::Expression > _5237){
  _checked_ptr_1<double> _ptr__5236(_5236 ? _5236->raw() : nullptr, _5236 ? _5236->size(0) : 0);
  int _5238 = (int)((_5236)->size(0));
  int _5239 = _5238;
  std::shared_ptr< monty::ndarray< double,1 > > _5240 = ::mosek::fusion::Utils::Tools::arraycopy(_5236);
  _checked_ptr_1<double> _ptr__5240(_5240 ? _5240->raw() : nullptr,_5240 ? _5240->size(0) : 0);
  int _5241 = _5237->getND();
  if ((_5241 == (int)0))
  {
    {
      std::vector<int> _9342;
      for (int _5242 = (int)0, _9343 = _5238; _5242 < _9343 ; ++_5242)
      {
        _9342.push_back(_5242);
      }
      auto _9344 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9342.size()),_9342.begin(),_9342.end()));
      std::vector<int> _9345;
      for (int _5243 = (int)0, _9346 = _5238; _5243 < _9346 ; ++_5243)
      {
        _9345.push_back((int)0);
      }
      auto _9347 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9345.size()),_9345.begin(),_9345.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5238)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5238,(int)1,_9344,_9347,_5240,_5237,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5241 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_5235 && (_5237->getDim((int)0) == (int)((_5236)->size(0)))))
  {
    {
      std::vector<int> _9348;
      for (int _5244 = (int)0, _9349 = _5238; _5244 < _9349 ; ++_5244)
      {
        _9348.push_back((int)0);
      }
      auto _9350 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9348.size()),_9348.begin(),_9348.end()));
      std::vector<int> _9351;
      for (int _5245 = (int)0, _9352 = _5238; _5245 < _9352 ; ++_5245)
      {
        _9351.push_back(_5245);
      }
      auto _9353 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9351.size()),_9351.begin(),_9351.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5237->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_5238,_9350,_9353,_5240,_5237)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5235 && (_5237->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int> _9354;
      for (int _5246 = (int)0, _9355 = _5238; _5246 < _9355 ; ++_5246)
      {
        _9354.push_back(_5246);
      }
      auto _9356 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9354.size()),_9354.begin(),_9354.end()));
      std::vector<int> _9357;
      for (int _5247 = (int)0, _9358 = _5238; _5247 < _9358 ; ++_5247)
      {
        _9357.push_back((int)0);
      }
      auto _9359 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9357.size()),_9357.begin(),_9357.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5238,(int)1,_9356,_9359,_5240,_5237,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_5235) && (_5237->getDim((int)1) == _5238)))
  {
    {
      std::vector<int> _9360;
      for (int _5248 = (int)0, _9361 = _5238; _5248 < _9361 ; ++_5248)
      {
        _9360.push_back(_5248);
      }
      auto _9362 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9360.size()),_9360.begin(),_9360.end()));
      std::vector<int> _9363;
      for (int _5249 = (int)0, _9364 = _5238; _5249 < _9364 ; ++_5249)
      {
        _9363.push_back((int)0);
      }
      auto _9365 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9363.size()),_9363.begin(),_9363.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5237->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5238,(int)1,_9362,_9365,_5240,_5237)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_5235) && (_5237->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int> _9366;
      for (int _5250 = (int)0, _9367 = _5238; _5250 < _9367 ; ++_5250)
      {
        _9366.push_back((int)0);
      }
      auto _9368 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9366.size()),_9366.begin(),_9366.end()));
      std::vector<int> _9369;
      for (int _5251 = (int)0, _9370 = _5238; _5251 < _9370 ; ++_5251)
      {
        _9369.push_back(_5251);
      }
      auto _9371 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9369.size()),_9369.begin(),_9369.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_5238,_9368,_9371,_5240,_5237,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5252,std::shared_ptr< monty::ndarray< double,2 > > _5253,monty::rc_ptr< ::mosek::fusion::Expression > _5254){
  int _5255 = (int)((_5253)->size(0));
  int _5256 = (int)((_5253)->size(1));
  int _5257 = safe_mul( _5255,_5256 );
  std::vector<int> _9372;
  for (int _5259 = (int)0, _9373 = _5255; _5259 < _9373 ; ++_5259)
  {
    for (int _5260 = (int)0, _9374 = _5256; _5260 < _9374 ; ++_5260)
    {
      _9372.push_back(_5259);
    }
  }
  auto _9375 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9372.size()),_9372.begin(),_9372.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5258 = _9375;
  _checked_ptr_1<int> _ptr__5258(_5258 ? _5258->raw() : nullptr,_5258 ? _5258->size(0) : 0);
  std::vector<int> _9376;
  for (int _5262 = (int)0, _9377 = _5255; _5262 < _9377 ; ++_5262)
  {
    for (int _5263 = (int)0, _9378 = _5256; _5263 < _9378 ; ++_5263)
    {
      _9376.push_back(_5263);
    }
  }
  auto _9379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9376.size()),_9376.begin(),_9376.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5261 = _9379;
  _checked_ptr_1<int> _ptr__5261(_5261 ? _5261->raw() : nullptr,_5261 ? _5261->size(0) : 0);
  std::vector<double> _9380;
  for (int _5265 = (int)0, _9381 = _5255; _5265 < _9381 ; ++_5265)
  {
    for (int _5266 = (int)0, _9382 = _5256; _5266 < _9382 ; ++_5266)
    {
      _9380.push_back(((*_5253)(_5265,_5266)));
    }
  }
  auto _9383 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9380.size()),_9380.begin(),_9380.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5264 = _9383;
  _checked_ptr_1<double> _ptr__5264(_5264 ? _5264->raw() : nullptr,_5264 ? _5264->size(0) : 0);
  long long _5267 = _5254->getSize();
  std::shared_ptr< monty::ndarray< int,1 > > _5268 = _5254->getShape();
  _checked_ptr_1<int> _ptr__5268(_5268 ? _5268->raw() : nullptr,_5268 ? _5268->size(0) : 0);
  if (((int)((_5268)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5255,_5256,_5258,_5261,_5264,_5254,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_5252)
  {
    {
      if (((int)((_5268)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5253)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5255,_5256,_5258,_5261,_5264,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5268[(int)0]),(int)((int)1)}),_5254)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_5268)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5255,_5256,_5258,_5261,_5264,_5254)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_5268)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5253)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5255,_5256,_5258,_5261,_5264,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5268[(int)0])}),_5254)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_5268)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5255,_5256,_5258,_5261,_5264,_5254)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5269,monty::rc_ptr< ::mosek::fusion::Matrix > _5270,monty::rc_ptr< ::mosek::fusion::Expression > _5271){
  long long _5272 = _5270->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _5273 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5272)));
  _checked_ptr_1<int> _ptr__5273(_5273 ? _5273->raw() : nullptr,_5273 ? _5273->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5274 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5272)));
  _checked_ptr_1<int> _ptr__5274(_5274 ? _5274->raw() : nullptr,_5274 ? _5274->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5275 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5272)));
  _checked_ptr_1<double> _ptr__5275(_5275 ? _5275->raw() : nullptr,_5275 ? _5275->size(0) : 0);
  int _5276 = _5270->numRows();
  int _5277 = _5270->numColumns();
  _5270->getDataAsTriplets(_5273,_5274,_5275);
  int _5278 = _5271->getND();
  if ((_5278 == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5276,_5277,_5273,_5274,_5275,_5271)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5278 == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5279 = _5271->getShape();
      _checked_ptr_1<int> _ptr__5279(_5279 ? _5279->raw() : nullptr,_5279 ? _5279->size(0) : 0);
      if (_5269)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5276)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5276,_5277,_5273,_5274,_5275,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5279[(int)0]),(int)((int)1)}),_5271)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5277)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5276,_5277,_5273,_5274,_5275,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5279[(int)0])}),_5271)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_5278 == (int)2))
  {
    {
      if (_5269)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5276,_5277,_5273,_5274,_5275,_5271)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5276,_5277,_5273,_5274,_5275,_5271)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5280,    monty::rc_ptr< ::mosek::fusion::Matrix > _5281) { return mosek::fusion::p_Expr::mul(_5280,_5281); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _5280,monty::rc_ptr< ::mosek::fusion::Matrix > _5281){
  int _5282 = _5281->numRows();
  int _5283 = _5281->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5284 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5281->numNonzeros())));
  _checked_ptr_1<double> _ptr__5284(_5284 ? _5284->raw() : nullptr,_5284 ? _5284->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5285 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5281->numNonzeros())));
  _checked_ptr_1<int> _ptr__5285(_5285 ? _5285->raw() : nullptr,_5285 ? _5285->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5286 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5281->numNonzeros())));
  _checked_ptr_1<int> _ptr__5286(_5286 ? _5286->raw() : nullptr,_5286 ? _5286->size(0) : 0);
  _5281->getDataAsTriplets(_5286,_5285,_5284);
  return ::mosek::fusion::p_Expr::mul(false,_5282,_5283,_5286,_5285,_5284,_5280);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5287,    monty::rc_ptr< ::mosek::fusion::Variable > _5288) { return mosek::fusion::p_Expr::mul(_5287,_5288); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _5287,monty::rc_ptr< ::mosek::fusion::Variable > _5288){
  int _5289 = _5287->numRows();
  int _5290 = _5287->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5291 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5287->numNonzeros())));
  _checked_ptr_1<double> _ptr__5291(_5291 ? _5291->raw() : nullptr,_5291 ? _5291->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5292 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5287->numNonzeros())));
  _checked_ptr_1<int> _ptr__5292(_5292 ? _5292->raw() : nullptr,_5292 ? _5292->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5293 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5287->numNonzeros())));
  _checked_ptr_1<int> _ptr__5293(_5293 ? _5293->raw() : nullptr,_5293 ? _5293->size(0) : 0);
  _5287->getDataAsTriplets(_5293,_5292,_5291);
  return ::mosek::fusion::p_Expr::mul(true,_5289,_5290,_5293,_5292,_5291,_5288);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5294,int _5295,int _5296,std::shared_ptr< monty::ndarray< int,1 > > _5297,std::shared_ptr< monty::ndarray< int,1 > > _5298,std::shared_ptr< monty::ndarray< double,1 > > _5299,monty::rc_ptr< ::mosek::fusion::Variable > _5300){
  _checked_ptr_1<int> _ptr__5297(_5297 ? _5297->raw() : nullptr, _5297 ? _5297->size(0) : 0);
  _checked_ptr_1<int> _ptr__5298(_5298 ? _5298->raw() : nullptr, _5298 ? _5298->size(0) : 0);
  _checked_ptr_1<double> _ptr__5299(_5299 ? _5299->raw() : nullptr, _5299 ? _5299->size(0) : 0);
  if ((_5300->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_5295,_5296,_5297,_5298,_5299,_5300)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5300->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5301 = _5300->getShape();
      _checked_ptr_1<int> _ptr__5301(_5301 ? _5301->raw() : nullptr,_5301 ? _5301->size(0) : 0);
      int _9384;
      bool _9385 = _5294;
      if (_9385)
      {
        _9384 = _5295;
      }
      else
      {
        _9384 = _5296;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _9386;
      bool _9387 = _5294;
      if (_9387)
      {
        _9386 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5301[(int)0]),(int)((int)1)});
      }
      else
      {
        _9386 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5301[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_9384)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_5294,_5295,_5296,_5297,_5298,_5299,::mosek::fusion::p_Var::reshape(_5300,_9386))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_5294,_5295,_5296,_5297,_5298,_5299,_5300)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5302,    monty::rc_ptr< ::mosek::fusion::Matrix > _5303) { return mosek::fusion::p_Expr::dot(_5302,_5303); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5302,monty::rc_ptr< ::mosek::fusion::Matrix > _5303){
  long long _5304 = _5303->numNonzeros();
  if ((!_5303->isSparse()))
  {
    {
      std::vector<long long> _9388;
      for (long long _5305 = (int)0, _9389 = _5304; _5305 < _9389 ; ++_5305)
      {
        _9388.push_back(_5305);
      }
      auto _9390 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9388.size()),_9388.begin(),_9388.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5302,_9390,_5303->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5306 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5304)));
      _checked_ptr_1<int> _ptr__5306(_5306 ? _5306->raw() : nullptr,_5306 ? _5306->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5307 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5304)));
      _checked_ptr_1<int> _ptr__5307(_5307 ? _5307->raw() : nullptr,_5307 ? _5307->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5308 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5304)));
      _checked_ptr_1<double> _ptr__5308(_5308 ? _5308->raw() : nullptr,_5308 ? _5308->size(0) : 0);
      int _5309 = _5303->numColumns();
      _5303->getDataAsTriplets(_5306,_5307,_5308);
      std::vector<long long> _9391;
      for (int _5310 = (int)0, _9392 = (int)((_5306)->size(0)); _5310 < _9392 ; ++_5310)
      {
        _9391.push_back(safe_add( safe_mul( _ptr__5306[_5310],_5309 ),_ptr__5307[_5310] ));
      }
      auto _9393 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9391.size()),_9391.begin(),_9391.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5302,_9393,_5308)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5311,    std::shared_ptr< monty::ndarray< double,2 > > _5312) { return mosek::fusion::p_Expr::dot(_5311,_5312); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5311,std::shared_ptr< monty::ndarray< double,2 > > _5312){
  std::vector<long long> _9394;
  for (int _5313 = (int)0, _9395 = safe_mul( (int)((_5312)->size(0)),(int)((_5312)->size(1)) ); _5313 < _9395 ; ++_5313)
  {
    _9394.push_back(_5313);
  }
  auto _9396 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9394.size()),_9394.begin(),_9394.end()));
  std::vector<double> _9397;
  for (int _5314 = (int)0, _9398 = (int)((_5312)->size(0)); _5314 < _9398 ; ++_5314)
  {
    for (int _5315 = (int)0, _9399 = (int)((_5312)->size(1)); _5315 < _9399 ; ++_5315)
    {
      _9397.push_back(((*_5312)(_5314,_5315)));
    }
  }
  auto _9400 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9397.size()),_9397.begin(),_9397.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5311,_9396,_9400)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5316,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5317) { return mosek::fusion::p_Expr::dot(_5316,_5317); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5316,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5317){
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5316,mosek::fusion::p_NDSparseArray::_get_impl(_5317)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5317)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5318,    std::shared_ptr< monty::ndarray< double,1 > > _5319) { return mosek::fusion::p_Expr::dot(_5318,_5319); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5318,std::shared_ptr< monty::ndarray< double,1 > > _5319){
  _checked_ptr_1<double> _ptr__5319(_5319 ? _5319->raw() : nullptr, _5319 ? _5319->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5320 = _5318->getShape();
  _checked_ptr_1<int> _ptr__5320(_5320 ? _5320->raw() : nullptr,_5320 ? _5320->size(0) : 0);
  if (((_5318->getSize() == (int)((_5319)->size(0))) && ((int)((_5320)->size(0)) > (int)1)))
  {
    {
      int _5321 = (int)0;
      int _9401 = (int)0;
      int _9402 = (int)((_5320)->size(0));
      for (int _5322 = _9401; _5322 < _9402; ++_5322)
      {
        {
          if ((_ptr__5320[_5322] > (int)1))
          {
            {
              ++ _5321;
            }
          }
          {}
        }
      }
      if ((_5321 > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5323 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)_5318->getSize())});
          _checked_ptr_1<int> _ptr__5323(_5323 ? _5323->raw() : nullptr,_5323 ? _5323->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5323,_5318)).as<::mosek::fusion::Expression>(),_5319)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5318,_5319)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5324,    monty::rc_ptr< ::mosek::fusion::Expression > _5325) { return mosek::fusion::p_Expr::dot(_5324,_5325); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _5324,monty::rc_ptr< ::mosek::fusion::Expression > _5325){
  return ::mosek::fusion::p_Expr::dot(_5325,_5324);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5326,    monty::rc_ptr< ::mosek::fusion::Expression > _5327) { return mosek::fusion::p_Expr::dot(_5326,_5327); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5326,monty::rc_ptr< ::mosek::fusion::Expression > _5327){
  return ::mosek::fusion::p_Expr::dot(_5327,_5326);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _5328,    monty::rc_ptr< ::mosek::fusion::Expression > _5329) { return mosek::fusion::p_Expr::dot(_5328,_5329); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _5328,monty::rc_ptr< ::mosek::fusion::Expression > _5329){
  return ::mosek::fusion::p_Expr::dot(_5329,_5328);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _5330,    monty::rc_ptr< ::mosek::fusion::Expression > _5331) { return mosek::fusion::p_Expr::dot(_5330,_5331); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _5330,monty::rc_ptr< ::mosek::fusion::Expression > _5331){
  _checked_ptr_1<double> _ptr__5330(_5330 ? _5330->raw() : nullptr, _5330 ? _5330->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_5331,_5330);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5332,    monty::rc_ptr< ::mosek::fusion::Expression > _5333) { return mosek::fusion::p_Expr::outer(_5332,_5333); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _5332,monty::rc_ptr< ::mosek::fusion::Expression > _5333){
  _checked_ptr_1<double> _ptr__5332(_5332 ? _5332->raw() : nullptr, _5332 ? _5332->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5334 = _5333->getShape();
  _checked_ptr_1<int> _ptr__5334(_5334 ? _5334->raw() : nullptr,_5334 ? _5334->size(0) : 0);
  if (((int)((_5334)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));
    }
  }
  {}
  if ((_ptr__5334[(int)0] != (int)((_5332)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Argument lengths do not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::FlatExpr > _5335 = _5333->__mosek_2fusion_2Expression__eval();
  std::vector<int> _9403;
  for (int _5336 = (int)0, _9404 = (int)((_5332)->size(0)); _5336 < _9404 ; ++_5336)
  {
    _9403.push_back(_5336);
  }
  auto _9405 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9403.size()),_9403.begin(),_9403.end()));
  return ::mosek::fusion::p_Expr::outer_(((*mosek::fusion::p_FlatExpr::_get_impl(_5335)->shape)((int)0)),mosek::fusion::p_FlatExpr::_get_impl(_5335)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5335)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5335)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5335)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5335)->inst,_5332,_9405,(int)((_5332)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _5337,    std::shared_ptr< monty::ndarray< double,1 > > _5338) { return mosek::fusion::p_Expr::outer(_5337,_5338); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _5337,std::shared_ptr< monty::ndarray< double,1 > > _5338){
  _checked_ptr_1<double> _ptr__5338(_5338 ? _5338->raw() : nullptr, _5338 ? _5338->size(0) : 0);
  if (((_5337->getND() != (int)1) || (_5337->getND() != (int)1)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::FlatExpr > _5339 = _5337->__mosek_2fusion_2Expression__eval();
  std::vector<int> _9406;
  for (int _5340 = (int)0, _9407 = (int)((_5338)->size(0)); _5340 < _9407 ; ++_5340)
  {
    _9406.push_back(_5340);
  }
  auto _9408 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9406.size()),_9406.begin(),_9406.end()));
  return ::mosek::fusion::p_Expr::outer_(((*mosek::fusion::p_FlatExpr::_get_impl(_5339)->shape)((int)0)),mosek::fusion::p_FlatExpr::_get_impl(_5339)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5339)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5339)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5339)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5339)->inst,_5338,_9408,(int)((_5338)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5341,    monty::rc_ptr< ::mosek::fusion::Variable > _5342) { return mosek::fusion::p_Expr::outer(_5341,_5342); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _5341,monty::rc_ptr< ::mosek::fusion::Variable > _5342){
  std::shared_ptr< monty::ndarray< int,1 > > _5343 = _5342->getShape();
  _checked_ptr_1<int> _ptr__5343(_5343 ? _5343->raw() : nullptr,_5343 ? _5343->size(0) : 0);
  if ((!(((int)((_5343)->size(0)) == (int)1) || (((int)((_5343)->size(0)) == (int)2) && (_ptr__5343[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_5341)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _9409 = _5341;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9409.get()))
  {
    ::mosek::fusion::DenseMatrix::t _5344 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9409.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_5342,_ptr__5343[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_5344)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5344)->data)->size(0)),true);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _5345 = _9409;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5346 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5345->numNonzeros())));
      _checked_ptr_1<double> _ptr__5346(_5346 ? _5346->raw() : nullptr,_5346 ? _5346->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5347 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5345->numNonzeros())));
      _checked_ptr_1<int> _ptr__5347(_5347 ? _5347->raw() : nullptr,_5347 ? _5347->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5348 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5345->numNonzeros())));
      _checked_ptr_1<int> _ptr__5348(_5348 ? _5348->raw() : nullptr,_5348 ? _5348->size(0) : 0);
      _5345->getDataAsTriplets(_5348,_5347,_5346);
      return ::mosek::fusion::p_Expr::outer_(_5342,_ptr__5343[(int)0],_5346,_5348,mosek::fusion::p_Matrix::_get_impl(_5345)->dimi,true);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5349,    monty::rc_ptr< ::mosek::fusion::Matrix > _5350) { return mosek::fusion::p_Expr::outer(_5349,_5350); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _5349,monty::rc_ptr< ::mosek::fusion::Matrix > _5350){
  std::shared_ptr< monty::ndarray< int,1 > > _5351 = _5349->getShape();
  _checked_ptr_1<int> _ptr__5351(_5351 ? _5351->raw() : nullptr,_5351 ? _5351->size(0) : 0);
  if ((!((_5349->getND() == (int)1) || ((_5349->getND() == (int)2) && (_ptr__5351[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_5350)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _9410 = _5350;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9410.get()))
  {
    ::mosek::fusion::DenseMatrix::t _5352 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9410.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_5349,_ptr__5351[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_5352)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5352)->data)->size(0)),false);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _5353 = _9410;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5354 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5353->numNonzeros())));
      _checked_ptr_1<double> _ptr__5354(_5354 ? _5354->raw() : nullptr,_5354 ? _5354->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5355 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5353->numNonzeros())));
      _checked_ptr_1<int> _ptr__5355(_5355 ? _5355->raw() : nullptr,_5355 ? _5355->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5356 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5350->numNonzeros())));
      _checked_ptr_1<int> _ptr__5356(_5356 ? _5356->raw() : nullptr,_5356 ? _5356->size(0) : 0);
      _5353->getDataAsTriplets(_5356,_5355,_5354);
      return ::mosek::fusion::p_Expr::outer_(_5349,((*_5349->getShape())((int)0)),_5354,_5356,mosek::fusion::p_Matrix::_get_impl(_5353)->dimi,false);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5357,    monty::rc_ptr< ::mosek::fusion::Variable > _5358) { return mosek::fusion::p_Expr::outer(_5357,_5358); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _5357,monty::rc_ptr< ::mosek::fusion::Variable > _5358){
  _checked_ptr_1<double> _ptr__5357(_5357 ? _5357->raw() : nullptr, _5357 ? _5357->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5359 = _5358->getShape();
  _checked_ptr_1<int> _ptr__5359(_5359 ? _5359->raw() : nullptr,_5359 ? _5359->size(0) : 0);
  if ((!((_5358->getND() == (int)1) || ((_5358->getND() == (int)2) && (_ptr__5359[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_5358,_ptr__5359[(int)0],_5357,nullptr,(int)((_5357)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5360,    std::shared_ptr< monty::ndarray< double,1 > > _5361) { return mosek::fusion::p_Expr::outer(_5360,_5361); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _5360,std::shared_ptr< monty::ndarray< double,1 > > _5361){
  _checked_ptr_1<double> _ptr__5361(_5361 ? _5361->raw() : nullptr, _5361 ? _5361->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5362 = _5360->getShape();
  _checked_ptr_1<int> _ptr__5362(_5362 ? _5362->raw() : nullptr,_5362 ? _5362->size(0) : 0);
  if ((!((_5360->getND() == (int)1) || ((_5360->getND() == (int)2) && (_ptr__5362[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_5360,_ptr__5362[(int)0],_5361,nullptr,(int)((_5361)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int _5363,std::shared_ptr< monty::ndarray< long long,1 > > _5364,std::shared_ptr< monty::ndarray< long long,1 > > _5365,std::shared_ptr< monty::ndarray< double,1 > > _5366,std::shared_ptr< monty::ndarray< double,1 > > _5367,std::shared_ptr< monty::ndarray< long long,1 > > _5368,std::shared_ptr< monty::ndarray< double,1 > > _5369,std::shared_ptr< monty::ndarray< int,1 > > _5370,int _5371,bool _5372){
  _checked_ptr_1<long long> _ptr__5364(_5364 ? _5364->raw() : nullptr, _5364 ? _5364->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5365(_5365 ? _5365->raw() : nullptr, _5365 ? _5365->size(0) : 0);
  _checked_ptr_1<double> _ptr__5366(_5366 ? _5366->raw() : nullptr, _5366 ? _5366->size(0) : 0);
  _checked_ptr_1<double> _ptr__5367(_5367 ? _5367->raw() : nullptr, _5367 ? _5367->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5368(_5368 ? _5368->raw() : nullptr, _5368 ? _5368->size(0) : 0);
  _checked_ptr_1<double> _ptr__5369(_5369 ? _5369->raw() : nullptr, _5369 ? _5369->size(0) : 0);
  _checked_ptr_1<int> _ptr__5370(_5370 ? _5370->raw() : nullptr, _5370 ? _5370->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9411;
  bool _9412 = (!_5372);
  if (_9412)
  {
    _9411 = ::mosek::fusion::p_Set::make(_5363,_5371);
  }
  else
  {
    _9411 = ::mosek::fusion::p_Set::make(_5371,_5363);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5373 = _9411;
  _checked_ptr_1<int> _ptr__5373(_5373 ? _5373->raw() : nullptr,_5373 ? _5373->size(0) : 0);
  int _5374 = safe_mul( (int)((_5369)->size(0)),(int)((_5368)->size(0)) );
  int _5375 = safe_mul( (int)((_5369)->size(0)),(int)((_5365)->size(0)) );
  std::shared_ptr< monty::ndarray< long long,1 > > _5376 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5374)));
  _checked_ptr_1<long long> _ptr__5376(_5376 ? _5376->raw() : nullptr,_5376 ? _5376->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _9413;
  bool _9414 = (NULL != _5367.get());
  if (_9414)
  {
    _9413 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5374)));
  }
  else
  {
    _9413 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5377 = _9413;
  _checked_ptr_1<double> _ptr__5377(_5377 ? _5377->raw() : nullptr,_5377 ? _5377->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5378 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5375)));
  _checked_ptr_1<double> _ptr__5378(_5378 ? _5378->raw() : nullptr,_5378 ? _5378->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5379 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5375)));
  _checked_ptr_1<long long> _ptr__5379(_5379 ? _5379->raw() : nullptr,_5379 ? _5379->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5380 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _5374,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5380(_5380 ? _5380->raw() : nullptr,_5380 ? _5380->size(0) : 0);
  int _5381 = (int)_ptr__5380[((int)((_5380)->size(0)) - (int)1)];
  if ((!_5372))
  {
    {
      long long _5382 = (long long)0;
      long long _5383 = (long long)0;
      int _9415 = (int)0;
      int _9416 = (int)((_5368)->size(0));
      for (int _5384 = _9415; _5384 < _9416; ++_5384)
      {
        {
          long long _5385 = (_ptr__5364[safe_add( _5384,(int)1 )] - _ptr__5364[_5384]);
          int _9417 = (int)0;
          int _9418 = (int)((_5369)->size(0));
          for (int _5386 = _9417; _5386 < _9418; ++_5386)
          {
            {
              _ptr__5368[_5382] = safe_add( safe_mul( _ptr__5368[_5384],_5371 ),_ptr__5370[_5386] );
              _ptr__5380[safe_add( _5382,(int)1 )] = safe_add( _ptr__5380[_5382],_5385 );
              ++ _5382;
              long long _9419 = _ptr__5364[_5384];
              long long _9420 = _ptr__5364[safe_add( _5384,(int)1 )];
              for (long long _5387 = _9419; _5387 < _9420; ++_5387)
              {
                {
                  _ptr__5379[_5383] = _ptr__5365[_5387];
                  _ptr__5378[_5383] = (_ptr__5366[_5387] * _ptr__5369[_5386]);
                  ++ _5383;
                }
              }
            }
          }
        }
      }
      if ((NULL != _5377.get()))
      {
        {
          int _5388 = (int)0;
          int _9421 = (int)0;
          int _9422 = (int)((_5368)->size(0));
          for (int _5389 = _9421; _5389 < _9422; ++_5389)
          {
            {
              int _9423 = (int)0;
              int _9424 = (int)((_5369)->size(0));
              for (int _5390 = _9423; _5390 < _9424; ++_5390)
              {
                {
                  _ptr__5377[_5388] = (_ptr__5369[_5390] * _ptr__5367[_5389]);
                  ++ _5388;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      long long _5391 = (long long)0;
      long long _5392 = (long long)0;
      int _9425 = (int)0;
      int _9426 = (int)((_5369)->size(0));
      for (int _5393 = _9425; _5393 < _9426; ++_5393)
      {
        {
          double _5394 = _ptr__5369[_5393];
          ::mosek::fusion::Utils::Tools::arraycopy(_5365,(long long)((int)0),_5379,_5392,(long long)(_5381));
          int _9427 = (int)0;
          int _9428 = _5381;
          for (int _5395 = _9427; _5395 < _9428; ++_5395)
          {
            {
              _ptr__5378[safe_add( _5392,_5395 )] = (_ptr__5366[_5395] * _ptr__5369[_5393]);
            }
          }
          int _9429 = (int)0;
          int _9430 = (int)((_5368)->size(0));
          for (int _5396 = _9429; _5396 < _9430; ++_5396)
          {
            {
              long long _5397 = (_ptr__5364[safe_add( _5396,(int)1 )] - _ptr__5364[_5396]);
              _ptr__5368[_5391] = safe_add( safe_mul( _ptr__5368[_5396],_5371 ),_ptr__5370[_5393] );
              _ptr__5380[safe_add( _5391,(int)1 )] = safe_add( _ptr__5380[_5391],_5397 );
              ++ _5391;
            }
          }
          _5392 += _5381;
        }
      }
      if ((NULL != _5377.get()))
      {
        {
          int _5398 = (int)0;
          int _9431 = (int)0;
          int _9432 = (int)((_5369)->size(0));
          for (int _5399 = _9431; _5399 < _9432; ++_5399)
          {
            {
              double _5400 = _ptr__5369[_5399];
              int _9433 = (int)0;
              int _9434 = (int)((_5368)->size(0));
              for (int _5401 = _9433; _5401 < _9434; ++_5401)
              {
                {
                  _ptr__5377[_5398] = (_ptr__5367[_5401] * _5400);
                  ++ _5398;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_5380,_5379,_5378,_5377,_5373,_5376)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _5402,int _5403,std::shared_ptr< monty::ndarray< double,1 > > _5404,std::shared_ptr< monty::ndarray< int,1 > > _5405,int _5406,bool _5407){
  _checked_ptr_1<double> _ptr__5404(_5404 ? _5404->raw() : nullptr, _5404 ? _5404->size(0) : 0);
  _checked_ptr_1<int> _ptr__5405(_5405 ? _5405->raw() : nullptr, _5405 ? _5405->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9435;
  bool _9436 = (!_5407);
  if (_9436)
  {
    _9435 = ::mosek::fusion::p_Set::make(_5403,_5406);
  }
  else
  {
    _9435 = ::mosek::fusion::p_Set::make(_5406,_5403);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5408 = _9435;
  _checked_ptr_1<int> _ptr__5408(_5408 ? _5408->raw() : nullptr,_5408 ? _5408->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _9437;
  bool _9438 = (_5406 == (int)((_5404)->size(0)));
  if (_9438)
  {
    _9437 = nullptr;
  }
  else
  {
    _9437 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_5404)->size(0)),_5403 ))));
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5409 = _9437;
  _checked_ptr_1<long long> _ptr__5409(_5409 ? _5409->raw() : nullptr,_5409 ? _5409->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5410 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_5404)->size(0)),_5403 ))));
  _checked_ptr_1<double> _ptr__5410(_5410 ? _5410->raw() : nullptr,_5410 ? _5410->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5411 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_5404)->size(0)),_5403 ))));
  _checked_ptr_1<double> _ptr__5411(_5411 ? _5411->raw() : nullptr,_5411 ? _5411->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5412 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_5404)->size(0)),_5403 ))));
  _checked_ptr_1<long long> _ptr__5412(_5412 ? _5412->raw() : nullptr,_5412 ? _5412->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5413 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( safe_mul( (int)((_5404)->size(0)),_5403 ),(int)1 ))));
  _checked_ptr_1<long long> _ptr__5413(_5413 ? _5413->raw() : nullptr,_5413 ? _5413->size(0) : 0);
  if ((_5406 == (int)((_5404)->size(0))))
  {
    {
      long long _5414 = (long long)0;
      if ((!_5407))
      {
        {
          int _9439 = (int)0;
          int _9440 = _5403;
          for (int _5415 = _9439; _5415 < _9440; ++_5415)
          {
            {
              int _9441 = (int)0;
              int _9442 = _5406;
              for (int _5416 = _9441; _5416 < _9442; ++_5416)
              {
                {
                  _ptr__5413[safe_add( _5414,(int)1 )] = safe_add( _5414,(int)1 );
                  _ptr__5412[_5414] = (long long)_5415;
                  _ptr__5411[_5414] = _ptr__5404[_5416];
                  ++ _5414;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _9443 = (int)0;
          int _9444 = _5406;
          for (int _5417 = _9443; _5417 < _9444; ++_5417)
          {
            {
              int _9445 = (int)0;
              int _9446 = _5403;
              for (int _5418 = _9445; _5418 < _9446; ++_5418)
              {
                {
                  _ptr__5413[safe_add( _5414,(int)1 )] = safe_add( _5414,(int)1 );
                  _ptr__5412[_5414] = (long long)_5418;
                  _ptr__5411[_5414] = _ptr__5404[_5417];
                  ++ _5414;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      long long _5419 = (long long)0;
      if ((!_5407))
      {
        {
          int _9447 = (int)0;
          int _9448 = _5403;
          for (int _5420 = _9447; _5420 < _9448; ++_5420)
          {
            {
              int _9449 = (int)0;
              int _9450 = (int)((_5404)->size(0));
              for (int _5421 = _9449; _5421 < _9450; ++_5421)
              {
                {
                  _ptr__5413[safe_add( _5419,(int)1 )] = safe_add( _5419,(int)1 );
                  _ptr__5412[_5419] = (long long)_5420;
                  _ptr__5411[_5419] = _ptr__5404[_5421];
                  _ptr__5409[_5419] = safe_add( safe_mul( _5420,_5406 ),_ptr__5405[_5421] );
                  ++ _5419;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _9451 = (int)0;
          int _9452 = (int)((_5404)->size(0));
          for (int _5422 = _9451; _5422 < _9452; ++_5422)
          {
            {
              int _9453 = (int)0;
              int _9454 = _5403;
              for (int _5423 = _9453; _5423 < _9454; ++_5423)
              {
                {
                  _ptr__5413[safe_add( _5419,(int)1 )] = safe_add( _5419,(int)1 );
                  _ptr__5412[_5419] = (long long)_5423;
                  _ptr__5411[_5419] = _ptr__5404[_5422];
                  _ptr__5409[_5419] = safe_add( safe_mul( _ptr__5405[_5422],_5403 ),_5423 );
                  ++ _5419;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_5413,_5412,_5411,_5410,_5408,_5409)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5424) { return mosek::fusion::p_Expr::stack(_5424); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5424){
  if ((NULL == _5424.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9455 = (int)0;
  int _9456 = (int)((_5424)->size(0));
  for (int _5425 = _9455; _5425 < _9456; ++_5425)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5426 = ((*_5424)(_5425));
      if ((NULL == _5426.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int _9457 = (int)0;
      int _9458 = (int)((_5426)->size(0));
      for (int _5427 = _9457; _5427 < _9458; ++_5427)
      {
        {
          if ((NULL == ((*_5426)(_5427)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _9459;
  for (int _5429 = (int)0, _9460 = (int)((_5424)->size(0)); _5429 < _9460 ; ++_5429)
  {
    _9459.push_back(::mosek::fusion::p_Expr::stack_(((*_5424)(_5429)),(int)1));
  }
  auto _9461 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9459.size()),_9459.begin(),_9459.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5428 = _9461;
  return ::mosek::fusion::p_Expr::stack_(_5428,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5430,    double _5431,    double _5432) { return mosek::fusion::p_Expr::vstack(_5430,_5431,_5432); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5430,double _5431,double _5432){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5430).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5431).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5432).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5433,    double _5434,    monty::rc_ptr< ::mosek::fusion::Expression > _5435) { return mosek::fusion::p_Expr::vstack(_5433,_5434,_5435); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5433,double _5434,monty::rc_ptr< ::mosek::fusion::Expression > _5435){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5433).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5434).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5435.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5436,    monty::rc_ptr< ::mosek::fusion::Expression > _5437,    double _5438) { return mosek::fusion::p_Expr::vstack(_5436,_5437,_5438); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5436,monty::rc_ptr< ::mosek::fusion::Expression > _5437,double _5438){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5436).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5437.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5438).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5439,    monty::rc_ptr< ::mosek::fusion::Expression > _5440,    monty::rc_ptr< ::mosek::fusion::Expression > _5441) { return mosek::fusion::p_Expr::vstack(_5439,_5440,_5441); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5439,monty::rc_ptr< ::mosek::fusion::Expression > _5440,monty::rc_ptr< ::mosek::fusion::Expression > _5441){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5439).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5440.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5441.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5442,    double _5443,    double _5444) { return mosek::fusion::p_Expr::vstack(_5442,_5443,_5444); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5442,double _5443,double _5444){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5442.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5443).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5444).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5445,    double _5446,    monty::rc_ptr< ::mosek::fusion::Expression > _5447) { return mosek::fusion::p_Expr::vstack(_5445,_5446,_5447); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5445,double _5446,monty::rc_ptr< ::mosek::fusion::Expression > _5447){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5445.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5446).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5447.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5448,    monty::rc_ptr< ::mosek::fusion::Expression > _5449,    double _5450) { return mosek::fusion::p_Expr::vstack(_5448,_5449,_5450); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5448,monty::rc_ptr< ::mosek::fusion::Expression > _5449,double _5450){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5448.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5449.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5450).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5451,    monty::rc_ptr< ::mosek::fusion::Expression > _5452,    monty::rc_ptr< ::mosek::fusion::Expression > _5453) { return mosek::fusion::p_Expr::vstack(_5451,_5452,_5453); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5451,monty::rc_ptr< ::mosek::fusion::Expression > _5452,monty::rc_ptr< ::mosek::fusion::Expression > _5453){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5451.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5452.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5453.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5454,    monty::rc_ptr< ::mosek::fusion::Expression > _5455) { return mosek::fusion::p_Expr::vstack(_5454,_5455); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5454,monty::rc_ptr< ::mosek::fusion::Expression > _5455){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5454).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5455.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5456,    double _5457) { return mosek::fusion::p_Expr::vstack(_5456,_5457); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5456,double _5457){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5456.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5457).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5458,    monty::rc_ptr< ::mosek::fusion::Expression > _5459) { return mosek::fusion::p_Expr::vstack(_5458,_5459); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5458,monty::rc_ptr< ::mosek::fusion::Expression > _5459){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5458.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5459.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5460) { return mosek::fusion::p_Expr::vstack(_5460); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5460){
  if ((NULL == _5460.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9462 = (int)0;
  int _9463 = (int)((_5460)->size(0));
  for (int _5461 = _9462; _5461 < _9463; ++_5461)
  {
    {
      if ((NULL == ((*_5460)(_5461)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_5460,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5462,    monty::rc_ptr< ::mosek::fusion::Expression > _5463,    monty::rc_ptr< ::mosek::fusion::Expression > _5464) { return mosek::fusion::p_Expr::hstack(_5462,_5463,_5464); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5462,monty::rc_ptr< ::mosek::fusion::Expression > _5463,monty::rc_ptr< ::mosek::fusion::Expression > _5464){
  if (((NULL == _5462.get()) || ((NULL == _5463.get()) || (NULL == _5464.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5462.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5463.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5464.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5465,    monty::rc_ptr< ::mosek::fusion::Expression > _5466,    double _5467) { return mosek::fusion::p_Expr::hstack(_5465,_5466,_5467); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5465,monty::rc_ptr< ::mosek::fusion::Expression > _5466,double _5467){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5465.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5466.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5467).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5468,    double _5469,    monty::rc_ptr< ::mosek::fusion::Expression > _5470) { return mosek::fusion::p_Expr::hstack(_5468,_5469,_5470); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5468,double _5469,monty::rc_ptr< ::mosek::fusion::Expression > _5470){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5468.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5469).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5470.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5471,    double _5472,    double _5473) { return mosek::fusion::p_Expr::hstack(_5471,_5472,_5473); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5471,double _5472,double _5473){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5471.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5472).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5473).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5474,    monty::rc_ptr< ::mosek::fusion::Expression > _5475,    monty::rc_ptr< ::mosek::fusion::Expression > _5476) { return mosek::fusion::p_Expr::hstack(_5474,_5475,_5476); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5474,monty::rc_ptr< ::mosek::fusion::Expression > _5475,monty::rc_ptr< ::mosek::fusion::Expression > _5476){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5474).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5475.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5476.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5477,    monty::rc_ptr< ::mosek::fusion::Expression > _5478,    double _5479) { return mosek::fusion::p_Expr::hstack(_5477,_5478,_5479); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5477,monty::rc_ptr< ::mosek::fusion::Expression > _5478,double _5479){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5477).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5478.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5479).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5480,    double _5481,    monty::rc_ptr< ::mosek::fusion::Expression > _5482) { return mosek::fusion::p_Expr::hstack(_5480,_5481,_5482); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5480,double _5481,monty::rc_ptr< ::mosek::fusion::Expression > _5482){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5480).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5481).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5482.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5483,    monty::rc_ptr< ::mosek::fusion::Expression > _5484) { return mosek::fusion::p_Expr::hstack(_5483,_5484); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5483,monty::rc_ptr< ::mosek::fusion::Expression > _5484){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5483).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5484.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5485,    double _5486) { return mosek::fusion::p_Expr::hstack(_5485,_5486); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5485,double _5486){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5485.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5486).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5487,    monty::rc_ptr< ::mosek::fusion::Expression > _5488) { return mosek::fusion::p_Expr::hstack(_5487,_5488); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5487,monty::rc_ptr< ::mosek::fusion::Expression > _5488){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5487.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5488.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5489) { return mosek::fusion::p_Expr::hstack(_5489); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5489){
  if ((NULL == _5489.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9464 = (int)0;
  int _9465 = (int)((_5489)->size(0));
  for (int _5490 = _9464; _5490 < _9465; ++_5490)
  {
    {
      if ((NULL == ((*_5489)(_5490)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_5489,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5491,    monty::rc_ptr< ::mosek::fusion::Expression > _5492,    monty::rc_ptr< ::mosek::fusion::Expression > _5493,    monty::rc_ptr< ::mosek::fusion::Expression > _5494) { return mosek::fusion::p_Expr::stack(_5491,_5492,_5493,_5494); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5491,monty::rc_ptr< ::mosek::fusion::Expression > _5492,monty::rc_ptr< ::mosek::fusion::Expression > _5493,monty::rc_ptr< ::mosek::fusion::Expression > _5494){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5492.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5493.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5494.get())}),_5491);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5495,    monty::rc_ptr< ::mosek::fusion::Expression > _5496,    monty::rc_ptr< ::mosek::fusion::Expression > _5497,    double _5498) { return mosek::fusion::p_Expr::stack(_5495,_5496,_5497,_5498); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5495,monty::rc_ptr< ::mosek::fusion::Expression > _5496,monty::rc_ptr< ::mosek::fusion::Expression > _5497,double _5498){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5496.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5497.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5498).get())}),_5495);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5499,    monty::rc_ptr< ::mosek::fusion::Expression > _5500,    double _5501,    monty::rc_ptr< ::mosek::fusion::Expression > _5502) { return mosek::fusion::p_Expr::stack(_5499,_5500,_5501,_5502); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5499,monty::rc_ptr< ::mosek::fusion::Expression > _5500,double _5501,monty::rc_ptr< ::mosek::fusion::Expression > _5502){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5500.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5501).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5502.get())}),_5499);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5503,    monty::rc_ptr< ::mosek::fusion::Expression > _5504,    double _5505,    double _5506) { return mosek::fusion::p_Expr::stack(_5503,_5504,_5505,_5506); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5503,monty::rc_ptr< ::mosek::fusion::Expression > _5504,double _5505,double _5506){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5504.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5505).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5506).get())}),_5503);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5507,    double _5508,    monty::rc_ptr< ::mosek::fusion::Expression > _5509,    monty::rc_ptr< ::mosek::fusion::Expression > _5510) { return mosek::fusion::p_Expr::stack(_5507,_5508,_5509,_5510); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5507,double _5508,monty::rc_ptr< ::mosek::fusion::Expression > _5509,monty::rc_ptr< ::mosek::fusion::Expression > _5510){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5508).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5509.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5510.get())}),_5507);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5511,    double _5512,    monty::rc_ptr< ::mosek::fusion::Expression > _5513,    double _5514) { return mosek::fusion::p_Expr::stack(_5511,_5512,_5513,_5514); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5511,double _5512,monty::rc_ptr< ::mosek::fusion::Expression > _5513,double _5514){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5512).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5513.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5514).get())}),_5511);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5515,    double _5516,    double _5517,    monty::rc_ptr< ::mosek::fusion::Expression > _5518) { return mosek::fusion::p_Expr::stack(_5515,_5516,_5517,_5518); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5515,double _5516,double _5517,monty::rc_ptr< ::mosek::fusion::Expression > _5518){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5516).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5517).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5518.get())}),_5515);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5519,    double _5520,    monty::rc_ptr< ::mosek::fusion::Expression > _5521) { return mosek::fusion::p_Expr::stack(_5519,_5520,_5521); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5519,double _5520,monty::rc_ptr< ::mosek::fusion::Expression > _5521){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5520).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5521.get())}),_5519);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5522,    monty::rc_ptr< ::mosek::fusion::Expression > _5523,    double _5524) { return mosek::fusion::p_Expr::stack(_5522,_5523,_5524); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5522,monty::rc_ptr< ::mosek::fusion::Expression > _5523,double _5524){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5523.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5524).get())}),_5522);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5525,    monty::rc_ptr< ::mosek::fusion::Expression > _5526,    monty::rc_ptr< ::mosek::fusion::Expression > _5527) { return mosek::fusion::p_Expr::stack(_5525,_5526,_5527); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5525,monty::rc_ptr< ::mosek::fusion::Expression > _5526,monty::rc_ptr< ::mosek::fusion::Expression > _5527){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5526.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5527.get())}),_5525);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5528,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5529) { return mosek::fusion::p_Expr::stack(_5528,_5529); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5528,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5529){
  return ::mosek::fusion::p_Expr::stack_(_5529,_5528);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5530,int _5531){
  if (((int)((_5530)->size(0)) == (int)1))
  {
    {
      return ((*_5530)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_5530,_5531),_5531)).as<::mosek::fusion::Expression>();
    }
  }
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5532,int _5533){
  int _5534 = (int)((_5532)->size(0));
  std::vector<int> _9466;
  for (int _5536 = (int)0, _9467 = _5534; _5536 < _9467 ; ++_5536)
  {
    _9466.push_back(((*_5532)(_5536))->getND());
  }
  auto _9468 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9466.size()),_9466.begin(),_9466.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5535 = _9468;
  _checked_ptr_1<int> _ptr__5535(_5535 ? _5535->raw() : nullptr,_5535 ? _5535->size(0) : 0);
  int _5537 = _ptr__5535[(int)0];
  int _5538 = _ptr__5535[(int)0];
  int _9469 = (int)1;
  int _9470 = _5534;
  for (int _5539 = _9469; _5539 < _9470; ++_5539)
  {
    {
      if ((_ptr__5535[_5539] < _5538))
      {
        {
          _5538 = _ptr__5535[_5539];
        }
      }
      {}
      if ((_ptr__5535[_5539] > _5537))
      {
        {
          _5537 = _ptr__5535[_5539];
        }
      }
      {}
    }
  }
  if ((_5537 < _5533))
  {
    {
      _5537 = _5533;
    }
  }
  {}
  if ((_5538 < _5537))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5540 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_5534)));
      std::shared_ptr< monty::ndarray< int,1 > > _5541 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5537)));
      _checked_ptr_1<int> _ptr__5541(_5541 ? _5541->raw() : nullptr,_5541 ? _5541->size(0) : 0);
      int _9471 = (int)0;
      int _9472 = _5534;
      for (int _5542 = _9471; _5542 < _9472; ++_5542)
      {
        {
          if ((((*_5532)(_5542))->getND() == _5537))
          {
            {
              ((*_5540)(_5542)) = ((*_5532)(_5542));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int,1 > > _5543 = ((*_5532)(_5542))->getShape();
              _checked_ptr_1<int> _ptr__5543(_5543 ? _5543->raw() : nullptr,_5543 ? _5543->size(0) : 0);
              int _9473 = (int)0;
              int _9474 = (int)((_5543)->size(0));
              for (int _5544 = _9473; _5544 < _9474; ++_5544)
              {
                {
                  _ptr__5541[_5544] = _ptr__5543[_5544];
                }
              }
              int _9475 = (int)((_5543)->size(0));
              int _9476 = _5537;
              for (int _5545 = _9475; _5545 < _9476; ++_5545)
              {
                {
                  _ptr__5541[_5545] = (int)1;
                }
              }
              ((*_5540)(_5542)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5541,((*_5532)(_5542)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _5540;
    }
  }
  else
  {
    {
      return _5532;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _5546,    int _5547,    int _5548) { return mosek::fusion::p_Expr::repeat(_5546,_5547,_5548); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _5546,int _5547,int _5548){
  if ((_5547 <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _9477;
  for (int _5549 = (int)0, _9478 = _5547; _5549 < _9478 ; ++_5549)
  {
    _9477.push_back(_5546);
  }
  auto _9479 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9477.size()),_9477.begin(),_9477.end()));
  return ::mosek::fusion::p_Expr::stack_(_9479,_5548);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5550) { return mosek::fusion::p_Expr::add(_5550); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5550){
  std::vector<double> _9480;
  for (int _5551 = (int)0, _9481 = (int)((_5550)->size(0)); _5551 < _9481 ; ++_5551)
  {
    _9480.push_back(1.0);
  }
  auto _9482 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9480.size()),_9480.begin(),_9480.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_5550,_9482)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5552) { return mosek::fusion::p_Expr::add(_5552); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5552){
  if ((NULL == _5552.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_5552)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)((int)0)}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_5552)->size(0)) > (int)0) && (NULL == ((*_5552)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int _5553 = ((*_5552)((int)0))->getND();
  int _9483 = (int)1;
  int _9484 = (int)((_5552)->size(0));
  for (int _5554 = _9483; _5554 < _9484; ++_5554)
  {
    {
      if ((_5553 < ((*_5552)(_5554))->getND()))
      {
        {
          _5553 = ((*_5552)(_5554))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,2 > > _5555 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_5552)->size(0)),_5553)));
  int _9485 = (int)0;
  int _9486 = (int)((_5552)->size(0));
  for (int _5556 = _9485; _5556 < _9486; ++_5556)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5557 = ((*_5552)(_5556))->getShape();
      _checked_ptr_1<int> _ptr__5557(_5557 ? _5557->raw() : nullptr,_5557 ? _5557->size(0) : 0);
      int _9487 = (int)0;
      int _9488 = (int)((_5557)->size(0));
      for (int _5558 = _9487; _5558 < _9488; ++_5558)
      {
        {
          ((*_5555)(_5556,_5558)) = _ptr__5557[_5558];
        }
      }
      int _9489 = (int)((_5557)->size(0));
      int _9490 = _5553;
      for (int _5559 = _9489; _5559 < _9490; ++_5559)
      {
        {
          ((*_5555)(_5556,_5559)) = (int)1;
        }
      }
    }
  }
  int _9491 = (int)1;
  int _9492 = (int)((_5552)->size(0));
  for (int _5560 = _9491; _5560 < _9492; ++_5560)
  {
    {
      int _9493 = (int)0;
      int _9494 = _5553;
      for (int _5561 = _9493; _5561 < _9494; ++_5561)
      {
        {
          if ((((*_5555)((int)0,_5561)) != ((*_5555)(_5560,_5561))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _9495;
  for (int _5563 = (int)0, _9496 = _5553; _5563 < _9496 ; ++_5563)
  {
    _9495.push_back(((*_5555)((int)0,_5563)));
  }
  auto _9497 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9495.size()),_9495.begin(),_9495.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5562 = _9497;
  _checked_ptr_1<int> _ptr__5562(_5562 ? _5562->raw() : nullptr,_5562 ? _5562->size(0) : 0);
  int _5564 = (int)1;
  int _9498 = (int)0;
  int _9499 = _5553;
  for (int _5565 = _9498; _5565 < _9499; ++_5565)
  {
    {
      _5564 *= _ptr__5562[_5565];
    }
  }
  int _5566 = (int)0;
  int _5567 = (int)0;
  int _9500 = (int)0;
  int _9501 = (int)((_5552)->size(0));
  for (int _5568 = _9500; _5568 < _9501; ++_5568)
  {
    {
      int _5569 = ((*_5552)(_5568))->numInst();
      _5566 += _5569;
      int _9502;
      bool _9503 = (_5567 > _5569);
      if (_9503)
      {
        _9502 = _5567;
      }
      else
      {
        _9502 = _5569;
      }
      _5567 = _9502;
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5570 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _5564,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5570(_5570 ? _5570->raw() : nullptr,_5570 ? _5570->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5571 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5566)));
  _checked_ptr_1<long long> _ptr__5571(_5571 ? _5571->raw() : nullptr,_5571 ? _5571->size(0) : 0);
  std::vector<double> _9504;
  for (int _5573 = (int)0, _9505 = _5566; _5573 < _9505 ; ++_5573)
  {
    _9504.push_back(1.0);
  }
  auto _9506 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9504.size()),_9504.begin(),_9504.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5572 = _9506;
  _checked_ptr_1<double> _ptr__5572(_5572 ? _5572->raw() : nullptr,_5572 ? _5572->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< long long,1 > > _5574 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5567)));
    _checked_ptr_1<long long> _ptr__5574(_5574 ? _5574->raw() : nullptr,_5574 ? _5574->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _5575 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5567)));
    _checked_ptr_1<long long> _ptr__5575(_5575 ? _5575->raw() : nullptr,_5575 ? _5575->size(0) : 0);
    int _9507 = (int)0;
    int _9508 = (int)((_5552)->size(0));
    for (int _5576 = _9507; _5576 < _9508; ++_5576)
    {
      {
        int _5577 = ((*_5552)(_5576))->inst((int)0,_5574,(int)0,_5575);
        int _9509 = (int)0;
        int _9510 = _5577;
        for (int _5578 = _9509; _5578 < _9510; ++_5578)
        {
          {
            _ptr__5570[safe_add( _ptr__5574[_5578],(int)1 )] += (int)1;
          }
        }
      }
    }
    int _9511 = (int)0;
    int _9512 = _5564;
    for (int _5579 = _9511; _5579 < _9512; ++_5579)
    {
      {
        _ptr__5570[safe_add( _5579,(int)1 )] += _ptr__5570[_5579];
      }
    }
    int _9513 = (int)0;
    int _9514 = (int)((_5552)->size(0));
    for (int _5580 = _9513; _5580 < _9514; ++_5580)
    {
      {
        int _5581 = ((*_5552)(_5580))->inst((int)0,_5574,(int)0,_5575);
        int _9515 = (int)0;
        int _9516 = _5581;
        for (int _5582 = _9515; _5582 < _9516; ++_5582)
        {
          {
            _ptr__5571[_ptr__5570[_ptr__5574[_5582]]] = _ptr__5575[_5582];
            ++ _ptr__5570[_ptr__5574[_5582]];
          }
        }
      }
    }
    int _9517 = (int)0;
    int _9518 = _5564;
    for (int _5583 = _9517; _5583 < _9518; ++_5583)
    {
      {
        _ptr__5570[(_5564 - _5583)] = _ptr__5570[((_5564 - _5583) - (int)1)];
      }
    }
    _ptr__5570[(int)0] = (int)0;
  }
  std::vector<double> _9519;
  for (int _5584 = (int)0, _9520 = _5564; _5584 < _9520 ; ++_5584)
  {
    _9519.push_back(0.0);
  }
  auto _9521 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9519.size()),_9519.begin(),_9519.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_5570,_5571,_5572,_9521,_5562,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _5585,double _5586,monty::rc_ptr< ::mosek::fusion::Expression > _5587,double _5588){
  int _5589 = _5585->getND();
  int _5590 = _5587->getND();
  if ((_5589 == _5590))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_5585,_5587,_5586,_5588)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _9522;
      bool _9523 = (_5589 > _5590);
      if (_9523)
      {
        _9522 = _5589;
      }
      else
      {
        _9522 = _5590;
      }
      int _5591 = _9522;
      std::shared_ptr< monty::ndarray< int,1 > > _5592 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5591)));
      _checked_ptr_1<int> _ptr__5592(_5592 ? _5592->raw() : nullptr,_5592 ? _5592->size(0) : 0);
      if ((_5589 < _5590))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5593 = _5585->getShape();
          _checked_ptr_1<int> _ptr__5593(_5593 ? _5593->raw() : nullptr,_5593 ? _5593->size(0) : 0);
          int _9524 = (int)0;
          int _9525 = _5589;
          for (int _5594 = _9524; _5594 < _9525; ++_5594)
          {
            {
              _ptr__5592[_5594] = _ptr__5593[_5594];
            }
          }
          int _9526 = _5589;
          int _9527 = _5591;
          for (int _5595 = _9526; _5595 < _9527; ++_5595)
          {
            {
              _ptr__5592[_5595] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5592,_5585)).as<::mosek::fusion::Expression>(),_5587,_5586,_5588)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5596 = _5587->getShape();
          _checked_ptr_1<int> _ptr__5596(_5596 ? _5596->raw() : nullptr,_5596 ? _5596->size(0) : 0);
          int _9528 = (int)0;
          int _9529 = _5590;
          for (int _5597 = _9528; _5597 < _9529; ++_5597)
          {
            {
              _ptr__5592[_5597] = _ptr__5596[_5597];
            }
          }
          int _9530 = _5590;
          int _9531 = _5591;
          for (int _5598 = _9530; _5598 < _9531; ++_5598)
          {
            {
              _ptr__5592[_5598] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_5585,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5592,_5587)).as<::mosek::fusion::Expression>(),_5586,_5588)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( monty::rc_ptr< ::mosek::fusion::Expression > _5599) { return mosek::fusion::p_Expr::transpose(_5599); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _5599){
  if ((_5599->getND() == (int)0))
  {
    {
      return _5599;
    }
  }
  else if((_5599->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_5599->getDim((int)0))}),_5599)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5599->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_5599)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5600,    monty::rc_ptr< ::mosek::fusion::Expression > _5601) { return mosek::fusion::p_Expr::mulElm(_5600,_5601); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _5600,monty::rc_ptr< ::mosek::fusion::Expression > _5601){
  return ::mosek::fusion::p_Expr::mulElm_(_5600,_5601);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5602,    monty::rc_ptr< ::mosek::fusion::Expression > _5603) { return mosek::fusion::p_Expr::mulElm(_5602,_5603); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5602,monty::rc_ptr< ::mosek::fusion::Expression > _5603){
  return ::mosek::fusion::p_Expr::mulElm_(_5602,_5603);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _5604,    monty::rc_ptr< ::mosek::fusion::Expression > _5605) { return mosek::fusion::p_Expr::mulElm(_5604,_5605); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _5604,monty::rc_ptr< ::mosek::fusion::Expression > _5605){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_5604),_5605);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _5606,    monty::rc_ptr< ::mosek::fusion::Expression > _5607) { return mosek::fusion::p_Expr::mulElm(_5606,_5607); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _5606,monty::rc_ptr< ::mosek::fusion::Expression > _5607){
  _checked_ptr_1<double> _ptr__5606(_5606 ? _5606->raw() : nullptr, _5606 ? _5606->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_5606,_5607);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5608,    monty::rc_ptr< ::mosek::fusion::Matrix > _5609) { return mosek::fusion::p_Expr::mulElm(_5608,_5609); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5608,monty::rc_ptr< ::mosek::fusion::Matrix > _5609){
  return ::mosek::fusion::p_Expr::mulElm_(_5609,_5608);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5610,    std::shared_ptr< monty::ndarray< double,2 > > _5611) { return mosek::fusion::p_Expr::mulElm(_5610,_5611); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5610,std::shared_ptr< monty::ndarray< double,2 > > _5611){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_5611),_5610);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5612,    std::shared_ptr< monty::ndarray< double,1 > > _5613) { return mosek::fusion::p_Expr::mulElm(_5612,_5613); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5612,std::shared_ptr< monty::ndarray< double,1 > > _5613){
  _checked_ptr_1<double> _ptr__5613(_5613 ? _5613->raw() : nullptr, _5613 ? _5613->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_5613,_5612);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5614,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5615) { return mosek::fusion::p_Expr::mulElm(_5614,_5615); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5614,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5615){
  return ::mosek::fusion::p_Expr::mulElm_(_5615,_5614);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5616,    monty::rc_ptr< ::mosek::fusion::Expression > _5617) { return mosek::fusion::p_Expr::sub(_5616,_5617); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5616,monty::rc_ptr< ::mosek::fusion::Expression > _5617){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5616),1.0,_5617,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5618,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5619) { return mosek::fusion::p_Expr::sub(_5618,_5619); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5618,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5619){
  return ::mosek::fusion::p_Expr::add_(_5618,1.0,::mosek::fusion::p_Expr::constTerm(_5619),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5620,    monty::rc_ptr< ::mosek::fusion::Expression > _5621) { return mosek::fusion::p_Expr::sub(_5620,_5621); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _5620,monty::rc_ptr< ::mosek::fusion::Expression > _5621){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5620),1.0,_5621,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5622,    monty::rc_ptr< ::mosek::fusion::Matrix > _5623) { return mosek::fusion::p_Expr::sub(_5622,_5623); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5622,monty::rc_ptr< ::mosek::fusion::Matrix > _5623){
  return ::mosek::fusion::p_Expr::add_(_5622,1.0,::mosek::fusion::p_Expr::constTerm(_5623),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _5624,    monty::rc_ptr< ::mosek::fusion::Expression > _5625) { return mosek::fusion::p_Expr::sub(_5624,_5625); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _5624,monty::rc_ptr< ::mosek::fusion::Expression > _5625){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5625->getShape(),_5624),1.0,_5625,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5626,    double _5627) { return mosek::fusion::p_Expr::sub(_5626,_5627); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5626,double _5627){
  return ::mosek::fusion::p_Expr::add_(_5626,1.0,::mosek::fusion::p_Expr::constTerm(_5626->getShape(),_5627),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _5628,    monty::rc_ptr< ::mosek::fusion::Expression > _5629) { return mosek::fusion::p_Expr::sub(_5628,_5629); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _5628,monty::rc_ptr< ::mosek::fusion::Expression > _5629){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5628),1.0,_5629,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _5630,    monty::rc_ptr< ::mosek::fusion::Expression > _5631) { return mosek::fusion::p_Expr::sub(_5630,_5631); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _5630,monty::rc_ptr< ::mosek::fusion::Expression > _5631){
  _checked_ptr_1<double> _ptr__5630(_5630 ? _5630->raw() : nullptr, _5630 ? _5630->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5630),1.0,_5631,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5632,    std::shared_ptr< monty::ndarray< double,2 > > _5633) { return mosek::fusion::p_Expr::sub(_5632,_5633); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5632,std::shared_ptr< monty::ndarray< double,2 > > _5633){
  return ::mosek::fusion::p_Expr::add_(_5632,1.0,::mosek::fusion::p_Expr::constTerm(_5633),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5634,    std::shared_ptr< monty::ndarray< double,1 > > _5635) { return mosek::fusion::p_Expr::sub(_5634,_5635); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5634,std::shared_ptr< monty::ndarray< double,1 > > _5635){
  _checked_ptr_1<double> _ptr__5635(_5635 ? _5635->raw() : nullptr, _5635 ? _5635->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5634,1.0,::mosek::fusion::p_Expr::constTerm(_5635),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5636,    monty::rc_ptr< ::mosek::fusion::Expression > _5637) { return mosek::fusion::p_Expr::sub(_5636,_5637); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5636,monty::rc_ptr< ::mosek::fusion::Expression > _5637){
  return ::mosek::fusion::p_Expr::add_(_5636,1.0,_5637,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5638,    monty::rc_ptr< ::mosek::fusion::Expression > _5639) { return mosek::fusion::p_Expr::add(_5638,_5639); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5638,monty::rc_ptr< ::mosek::fusion::Expression > _5639){
  return ::mosek::fusion::p_Expr::add_(_5639,1.0,::mosek::fusion::p_Expr::constTerm(_5638),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5640,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5641) { return mosek::fusion::p_Expr::add(_5640,_5641); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5640,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5641){
  return ::mosek::fusion::p_Expr::add_(_5640,1.0,::mosek::fusion::p_Expr::constTerm(_5641),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5642,    monty::rc_ptr< ::mosek::fusion::Expression > _5643) { return mosek::fusion::p_Expr::add(_5642,_5643); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _5642,monty::rc_ptr< ::mosek::fusion::Expression > _5643){
  return ::mosek::fusion::p_Expr::add_(_5643,1.0,::mosek::fusion::p_Expr::constTerm(_5642),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5644,    monty::rc_ptr< ::mosek::fusion::Matrix > _5645) { return mosek::fusion::p_Expr::add(_5644,_5645); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5644,monty::rc_ptr< ::mosek::fusion::Matrix > _5645){
  return ::mosek::fusion::p_Expr::add_(_5644,1.0,::mosek::fusion::p_Expr::constTerm(_5645),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _5646,    monty::rc_ptr< ::mosek::fusion::Expression > _5647) { return mosek::fusion::p_Expr::add(_5646,_5647); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _5646,monty::rc_ptr< ::mosek::fusion::Expression > _5647){
  return ::mosek::fusion::p_Expr::add_(_5647,1.0,::mosek::fusion::p_Expr::constTerm(_5647->getShape(),_5646),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5648,    double _5649) { return mosek::fusion::p_Expr::add(_5648,_5649); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5648,double _5649){
  return ::mosek::fusion::p_Expr::add_(_5648,1.0,::mosek::fusion::p_Expr::constTerm(_5648->getShape(),_5649),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _5650,    monty::rc_ptr< ::mosek::fusion::Expression > _5651) { return mosek::fusion::p_Expr::add(_5650,_5651); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _5650,monty::rc_ptr< ::mosek::fusion::Expression > _5651){
  return ::mosek::fusion::p_Expr::add_(_5651,1.0,::mosek::fusion::p_Expr::constTerm(_5650),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _5652,    monty::rc_ptr< ::mosek::fusion::Expression > _5653) { return mosek::fusion::p_Expr::add(_5652,_5653); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _5652,monty::rc_ptr< ::mosek::fusion::Expression > _5653){
  _checked_ptr_1<double> _ptr__5652(_5652 ? _5652->raw() : nullptr, _5652 ? _5652->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5653,1.0,::mosek::fusion::p_Expr::constTerm(_5652),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5654,    std::shared_ptr< monty::ndarray< double,2 > > _5655) { return mosek::fusion::p_Expr::add(_5654,_5655); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5654,std::shared_ptr< monty::ndarray< double,2 > > _5655){
  return ::mosek::fusion::p_Expr::add_(_5654,1.0,::mosek::fusion::p_Expr::constTerm(_5655),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5656,    std::shared_ptr< monty::ndarray< double,1 > > _5657) { return mosek::fusion::p_Expr::add(_5656,_5657); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5656,std::shared_ptr< monty::ndarray< double,1 > > _5657){
  _checked_ptr_1<double> _ptr__5657(_5657 ? _5657->raw() : nullptr, _5657 ? _5657->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5656,1.0,::mosek::fusion::p_Expr::constTerm(_5657),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5658,    monty::rc_ptr< ::mosek::fusion::Expression > _5659) { return mosek::fusion::p_Expr::add(_5658,_5659); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5658,monty::rc_ptr< ::mosek::fusion::Expression > _5659){
  return ::mosek::fusion::p_Expr::add_(_5658,1.0,_5659,1.0);
}
int mosek::fusion::Expr :: getND() { return mosek::fusion::p_Expr::_get_impl(this)->getND(); }int mosek::fusion::p_Expr::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Expr :: getShape() { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Expr::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5660,monty::rc_ptr< ::mosek::fusion::WorkStack > _5661,monty::rc_ptr< ::mosek::fusion::WorkStack > _5662) { mosek::fusion::p_Expr::_get_impl(this)->eval(_5660,_5661,_5662); }void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5660,monty::rc_ptr< ::mosek::fusion::WorkStack > _5661,monty::rc_ptr< ::mosek::fusion::WorkStack > _5662){
  std::vector<int> _9532;
  for (int _5663 = (int)0, _9533 = (int)((ptrb)->size(0)); _5663 < _9533 ; ++_5663)
  {
    _9532.push_back((int)((*ptrb)(_5663)));
  }
  auto _9534 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9532.size()),_9532.begin(),_9532.end()));
  ::mosek::fusion::p_BaseExpression::storeexpr(_5660,shape,_9534,inst,subj,cof_v,bfix);
}
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< long long,1 > > _5664,std::shared_ptr< monty::ndarray< long long,1 > > _5665,std::shared_ptr< monty::ndarray< double,1 > > _5666,std::shared_ptr< monty::ndarray< double,1 > > _5667,std::shared_ptr< monty::ndarray< int,1 > > _5668,std::shared_ptr< monty::ndarray< long long,1 > > _5669){
  _checked_ptr_1<long long> _ptr__5664(_5664 ? _5664->raw() : nullptr, _5664 ? _5664->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5665(_5665 ? _5665->raw() : nullptr, _5665 ? _5665->size(0) : 0);
  _checked_ptr_1<double> _ptr__5666(_5666 ? _5666->raw() : nullptr, _5666 ? _5666->size(0) : 0);
  _checked_ptr_1<double> _ptr__5667(_5667 ? _5667->raw() : nullptr, _5667 ? _5667->size(0) : 0);
  _checked_ptr_1<int> _ptr__5668(_5668 ? _5668->raw() : nullptr, _5668 ? _5668->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5669(_5669 ? _5669->raw() : nullptr, _5669 ? _5669->size(0) : 0);
  if ((NULL == _5668.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int _5670 = ((int)((_5664)->size(0)) - (int)1);
  long long _5671 = _ptr__5664[((int)((_5664)->size(0)) - (int)1)];
  int _5672 = (int)((_5668)->size(0));
  long long _5673 = (long long)1;
  int _9535 = (int)0;
  int _9536 = _5672;
  for (int _5674 = _9535; _5674 < _9536; ++_5674)
  {
    {
      _5673 *= _ptr__5668[_5674];
    }
  }
  if (((int)((_5664)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_5671 != (int)((_5665)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_5671 != (int)((_5666)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _5667.get()) || (_5670 != (int)((_5667)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _5669.get()) && ((int)((_5669)->size(0)) < _5673)))
  {
    {
      if (((int)((_5669)->size(0)) != ((int)((_5664)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_5669)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5669[(int)0] < (int)0) || (_ptr__5669[(int)0] >= _5673)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _5675 = true;
          long long _5676 = _5673;
          int _9537 = (int)1;
          int _9538 = (int)((_5669)->size(0));
          for (int _5677 = _9537; _5677 < _9538; ++_5677)
          {
            {
              _5675 = (_5675 && ((_ptr__5669[_5677] >= (int)0) && ((_ptr__5669[_5677] < _5676) && (_ptr__5669[_5677] > _ptr__5669[(_5677 - (int)1)]))));
            }
          }
          if ((!_5675))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_5673 != ((long long)((_5664)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _5678 = false;
  bool _5679 = false;
  if ((_ptr__5664[(int)0] != (long long)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _5680 = true;
  int _9539 = (int)0;
  int _9540 = _5670;
  for (int _5681 = _9539; _5681 < _9540; ++_5681)
  {
    {
      _5680 = (_5680 && (_ptr__5664[_5681] <= _ptr__5664[safe_add( _5681,(int)1 )]));
    }
  }
  if ((!_5680))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5682){
  monty::rc_ptr< ::mosek::fusion::Model > _9541;
  bool _9542 = ((NULL == _5682.get()) || ((int)((_5682)->size(0)) == (int)0));
  if (_9542)
  {
    _9541 = nullptr;
  }
  else
  {
    _9541 = ((*_5682)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _9541;
}
void mosek::fusion::p_Expr::destroy(){inst.reset();cof_v.reset();subj.reset();ptrb.reset();bfix.reset();shape.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,2 > > _5683) { return __mosek_2fusion_2Expression__pick(_5683); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,1 > > _5684) { return __mosek_2fusion_2Expression__pick(_5684); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int,1 > > _5685) { return __mosek_2fusion_2Expression__index(_5685); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int _5686) { return __mosek_2fusion_2Expression__index(_5686); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int,1 > > _5687,std::shared_ptr< monty::ndarray< int,1 > > _5688) { return __mosek_2fusion_2Expression__slice(_5687,_5688); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int _5689,int _5690) { return __mosek_2fusion_2Expression__slice(_5689,_5690); }
monty::rc_ptr< mosek::fusion::FlatExpr > mosek::fusion::Expression::eval() { return __mosek_2fusion_2Expression__eval(); }
mosek::fusion::FlatExpr::FlatExpr(mosek::fusion::p_FlatExpr *_impl) : _impl(_impl) { /*std::cout << "FlatExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::FlatExpr::~FlatExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_FlatExpr::p_FlatExpr  (::mosek::fusion::FlatExpr * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_inst() { return _impl->inst; }
void mosek::fusion::FlatExpr::set_inst(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->inst = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::FlatExpr::get_shape() { return _impl->shape; }
void mosek::fusion::FlatExpr::set_shape(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->shape = _val; }
long long mosek::fusion::FlatExpr::get_nnz() { return _impl->nnz; }
void mosek::fusion::FlatExpr::set_nnz(long long _val) { _impl->nnz = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::FlatExpr::get_cof() { return _impl->cof; }
void mosek::fusion::FlatExpr::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_subj() { return _impl->subj; }
void mosek::fusion::FlatExpr::set_subj(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::FlatExpr::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::FlatExpr::get_bfix() { return _impl->bfix; }
void mosek::fusion::FlatExpr::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5695){ return new mosek::fusion::FlatExpr(_5695); }mosek::fusion::FlatExpr::FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5695) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_5695); }void mosek::fusion::p_FlatExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5695){monty::rc_reserve __reserve_this(_pubthis);   {
    bfix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5695)->bfix);
    ptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5695)->ptrb);
    subj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5695)->subj);
    cof = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5695)->cof);
    nnz = mosek::fusion::p_FlatExpr::_get_impl(_5695)->nnz;
    shape = mosek::fusion::p_FlatExpr::_get_impl(_5695)->shape;
    inst = mosek::fusion::p_FlatExpr::_get_impl(_5695)->inst;
  }
}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _5696,    std::shared_ptr< monty::ndarray< long long,1 > > _5697,    std::shared_ptr< monty::ndarray< long long,1 > > _5698,    std::shared_ptr< monty::ndarray< double,1 > > _5699,    std::shared_ptr< monty::ndarray< int,1 > > _5700,    std::shared_ptr< monty::ndarray< long long,1 > > _5701){ return new mosek::fusion::FlatExpr(_5696,_5697,_5698,_5699,_5700,_5701); }mosek::fusion::FlatExpr::FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _5696,    std::shared_ptr< monty::ndarray< long long,1 > > _5697,    std::shared_ptr< monty::ndarray< long long,1 > > _5698,    std::shared_ptr< monty::ndarray< double,1 > > _5699,    std::shared_ptr< monty::ndarray< int,1 > > _5700,    std::shared_ptr< monty::ndarray< long long,1 > > _5701) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_5696,_5697,_5698,_5699,_5700,_5701); }void mosek::fusion::p_FlatExpr::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5696,    std::shared_ptr< monty::ndarray< long long,1 > > _5697,    std::shared_ptr< monty::ndarray< long long,1 > > _5698,    std::shared_ptr< monty::ndarray< double,1 > > _5699,    std::shared_ptr< monty::ndarray< int,1 > > _5700,    std::shared_ptr< monty::ndarray< long long,1 > > _5701){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5696(_5696 ? _5696->raw() : nullptr, _5696 ? _5696->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5697(_5697 ? _5697->raw() : nullptr, _5697 ? _5697->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5698(_5698 ? _5698->raw() : nullptr, _5698 ? _5698->size(0) : 0);
    _checked_ptr_1<double> _ptr__5699(_5699 ? _5699->raw() : nullptr, _5699 ? _5699->size(0) : 0);
    _checked_ptr_1<int> _ptr__5700(_5700 ? _5700->raw() : nullptr, _5700 ? _5700->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5701(_5701 ? _5701->raw() : nullptr, _5701 ? _5701->size(0) : 0);
    if (((NULL != _5696.get()) && ((int)((_5696)->size(0)) != ((int)((_5697)->size(0)) - (int)1))))
    {
      {
        throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of bfix and ptrb"));
      }
    }
    {}
    if (((NULL == _5699.get()) || ((NULL == _5698.get()) || ((int)((_5698)->size(0)) != (int)((_5699)->size(0))))))
    {
      {
        throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of subj and cof"));
      }
    }
    {}
    if ((NULL != _5700.get()))
    {
      {
        if ((NULL != _5701.get()))
        {
          {
            if (((int)((_5701)->size(0)) != ((int)((_5697)->size(0)) - (int)1)))
            {
              {
                throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of inst and ptrb"));
              }
            }
            {}
          }
        }
        else if((::mosek::fusion::p_Set::size(_5700) != ((long long)((_5697)->size(0)) - (int)1)))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching shape and ptrb"));
          }
        }
        {}
      }
    }
    {}
    bfix = _5696;
    ptrb = _5697;
    subj = _5698;
    cof = _5699;
    nnz = ((*ptrb)(((int)((ptrb)->size(0)) - (int)1)));
    shape = _5700;
    inst = _5701;
  }
}std::string mosek::fusion::FlatExpr :: toString() { return mosek::fusion::p_FlatExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_FlatExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5702 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5702->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("FlatExpr:"))->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("+-----------------"))->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| ptrb["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((ptrb)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(ptrb)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| subj["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((subj)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(subj)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| cof ["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((cof)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(cof)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| bfix["));
  if ((NULL != bfix.get()))
  {
    {
      _5702->__mosek_2fusion_2Utils_2StringBuffer__a((int)((bfix)->size(0)));
    }
  }
  {}
  _5702->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(bfix)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| inst["));
  if ((NULL != inst.get()))
  {
    {
      _5702->__mosek_2fusion_2Utils_2StringBuffer__a((int)((inst)->size(0)));
    }
  }
  {}
  _5702->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(inst)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("+-----------------"));
  return _5702->toString();
}
int mosek::fusion::FlatExpr :: size() { return mosek::fusion::p_FlatExpr::_get_impl(this)->size(); }int mosek::fusion::p_FlatExpr::size(){
  return ((int)((ptrb)->size(0)) - (int)1);
}
void mosek::fusion::p_FlatExpr::destroy(){inst.reset();shape.reset();cof.reset();subj.reset();ptrb.reset();bfix.reset();}void mosek::fusion::FlatExpr::destroy() { mosek::fusion::p_FlatExpr::_get_impl(this)->destroy(); }mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _5703,    int _5704,    std::shared_ptr< monty::ndarray< int,1 > > _5705,    std::shared_ptr< monty::ndarray< int,1 > > _5706,    std::shared_ptr< monty::ndarray< double,1 > > _5707,    std::shared_ptr< monty::ndarray< int,1 > > _5708,    std::shared_ptr< monty::ndarray< int,1 > > _5709,    std::shared_ptr< monty::ndarray< double,1 > > _5710,    double _5711){ return new mosek::fusion::SymmetricMatrix(_5703,_5704,_5705,_5706,_5707,_5708,_5709,_5710,_5711); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _5703,    int _5704,    std::shared_ptr< monty::ndarray< int,1 > > _5705,    std::shared_ptr< monty::ndarray< int,1 > > _5706,    std::shared_ptr< monty::ndarray< double,1 > > _5707,    std::shared_ptr< monty::ndarray< int,1 > > _5708,    std::shared_ptr< monty::ndarray< int,1 > > _5709,    std::shared_ptr< monty::ndarray< double,1 > > _5710,    double _5711) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_5703,_5704,_5705,_5706,_5707,_5708,_5709,_5710,_5711); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _5703,    int _5704,    std::shared_ptr< monty::ndarray< int,1 > > _5705,    std::shared_ptr< monty::ndarray< int,1 > > _5706,    std::shared_ptr< monty::ndarray< double,1 > > _5707,    std::shared_ptr< monty::ndarray< int,1 > > _5708,    std::shared_ptr< monty::ndarray< int,1 > > _5709,    std::shared_ptr< monty::ndarray< double,1 > > _5710,    double _5711){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5705(_5705 ? _5705->raw() : nullptr, _5705 ? _5705->size(0) : 0);
    _checked_ptr_1<int> _ptr__5706(_5706 ? _5706->raw() : nullptr, _5706 ? _5706->size(0) : 0);
    _checked_ptr_1<double> _ptr__5707(_5707 ? _5707->raw() : nullptr, _5707 ? _5707->size(0) : 0);
    _checked_ptr_1<int> _ptr__5708(_5708 ? _5708->raw() : nullptr, _5708 ? _5708->size(0) : 0);
    _checked_ptr_1<int> _ptr__5709(_5709 ? _5709->raw() : nullptr, _5709 ? _5709->size(0) : 0);
    _checked_ptr_1<double> _ptr__5710(_5710 ? _5710->raw() : nullptr, _5710 ? _5710->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _5703;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _5704;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _5705;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _5706;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _5707;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _5708;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _5709;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _5710;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _5711;
    nnz = (-(int)1);
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _5712,    std::shared_ptr< monty::ndarray< int,1 > > _5713,    std::shared_ptr< monty::ndarray< double,1 > > _5714) { return mosek::fusion::p_SymmetricMatrix::rankOne(_5712,_5713,_5714); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int _5712,std::shared_ptr< monty::ndarray< int,1 > > _5713,std::shared_ptr< monty::ndarray< double,1 > > _5714){
  _checked_ptr_1<int> _ptr__5713(_5713 ? _5713->raw() : nullptr, _5713 ? _5713->size(0) : 0);
  _checked_ptr_1<double> _ptr__5714(_5714 ? _5714->raw() : nullptr, _5714 ? _5714->size(0) : 0);
  if (((int)((_5713)->size(0)) != (int)((_5714)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int _9543 = (int)0;
  int _9544 = (int)((_5713)->size(0));
  for (int _5715 = _9543; _5715 < _9544; ++_5715)
  {
    {
      if (((_ptr__5713[_5715] < (int)0) || (_ptr__5713[_5715] >= _5712)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int> _9545;
  for (int _5717 = (int)0, _9546 = (int)((_5713)->size(0)); _5717 < _9546 ; ++_5717)
  {
    _9545.push_back(_ptr__5713[_5717]);
  }
  auto _9547 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9545.size()),_9545.begin(),_9545.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5716 = _9547;
  _checked_ptr_1<int> _ptr__5716(_5716 ? _5716->raw() : nullptr,_5716 ? _5716->size(0) : 0);
  std::vector<int> _9548;
  for (int _5719 = (int)0, _9549 = (int)((_5713)->size(0)); _5719 < _9549 ; ++_5719)
  {
    _9548.push_back((int)1);
  }
  auto _9550 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9548.size()),_9548.begin(),_9548.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5718 = _9550;
  _checked_ptr_1<int> _ptr__5718(_5718 ? _5718->raw() : nullptr,_5718 ? _5718->size(0) : 0);
  std::vector<double> _9551;
  for (int _5721 = (int)0, _9552 = (int)((_5714)->size(0)); _5721 < _9552 ; ++_5721)
  {
    _9551.push_back(_ptr__5714[_5721]);
  }
  auto _9553 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9551.size()),_9551.begin(),_9551.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5720 = _9553;
  _checked_ptr_1<double> _ptr__5720(_5720 ? _5720->raw() : nullptr,_5720 ? _5720->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5712,(int)1,_5716,_5718,_5720,_5716,_5718,_5720,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _5722) { return mosek::fusion::p_SymmetricMatrix::rankOne(_5722); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _5722){
  _checked_ptr_1<double> _ptr__5722(_5722 ? _5722->raw() : nullptr, _5722 ? _5722->size(0) : 0);
  int _5723 = (int)((_5722)->size(0));
  std::vector<int> _9554;
  for (int _5725 = (int)0, _9555 = _5723; _5725 < _9555 ; ++_5725)
  {
    _9554.push_back(_5725);
  }
  auto _9556 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9554.size()),_9554.begin(),_9554.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5724 = _9556;
  _checked_ptr_1<int> _ptr__5724(_5724 ? _5724->raw() : nullptr,_5724 ? _5724->size(0) : 0);
  std::vector<int> _9557;
  for (int _5727 = (int)0, _9558 = _5723; _5727 < _9558 ; ++_5727)
  {
    _9557.push_back((int)1);
  }
  auto _9559 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9557.size()),_9557.begin(),_9557.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5726 = _9559;
  _checked_ptr_1<int> _ptr__5726(_5726 ? _5726->raw() : nullptr,_5726 ? _5726->size(0) : 0);
  std::vector<double> _9560;
  for (int _5729 = (int)0, _9561 = _5723; _5729 < _9561 ; ++_5729)
  {
    _9560.push_back(_ptr__5722[_5729]);
  }
  auto _9562 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9560.size()),_9560.begin(),_9560.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5728 = _9562;
  _checked_ptr_1<double> _ptr__5728(_5728 ? _5728->raw() : nullptr,_5728 ? _5728->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5723,(int)1,_5724,_5726,_5728,_5724,_5726,_5728,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5730) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_5730); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _5730){
  _checked_ptr_1<double> _ptr__5730(_5730 ? _5730->raw() : nullptr, _5730 ? _5730->size(0) : 0);
  int _5731 = (int)((_5730)->size(0));
  std::vector<int> _9563;
  for (int _5733 = (int)0, _9564 = _5731; _5733 < _9564 ; ++_5733)
  {
    _9563.push_back(_5733);
  }
  auto _9565 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9563.size()),_9563.begin(),_9563.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5732 = _9565;
  _checked_ptr_1<int> _ptr__5732(_5732 ? _5732->raw() : nullptr,_5732 ? _5732->size(0) : 0);
  std::vector<int> _9566;
  for (int _5734 = (int)0, _9567 = _5731; _5734 < _9567 ; ++_5734)
  {
    _9566.push_back((_5731 - _5734));
  }
  auto _9568 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9566.size()),_9566.begin(),_9566.end()));
  std::vector<double> _9569;
  for (int _5735 = (int)0, _9570 = _5731; _5735 < _9570 ; ++_5735)
  {
    _9569.push_back(_ptr__5730[_5735]);
  }
  auto _9571 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9569.size()),_9569.begin(),_9569.end()));
  std::vector<double> _9572;
  for (int _5736 = (int)0, _9573 = _5731; _5736 < _9573 ; ++_5736)
  {
    _9572.push_back(1.0);
  }
  auto _9574 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9572.size()),_9572.begin(),_9572.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5731,_5731,_5732,_9568,_9571,_5732,_5732,_9574,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5737) { return mosek::fusion::p_SymmetricMatrix::diag(_5737); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5737){
  _checked_ptr_1<double> _ptr__5737(_5737 ? _5737->raw() : nullptr, _5737 ? _5737->size(0) : 0);
  int _5738 = (int)((_5737)->size(0));
  std::vector<int> _9575;
  for (int _5740 = (int)0, _9576 = _5738; _5740 < _9576 ; ++_5740)
  {
    _9575.push_back(_5740);
  }
  auto _9577 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9575.size()),_9575.begin(),_9575.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5739 = _9577;
  _checked_ptr_1<int> _ptr__5739(_5739 ? _5739->raw() : nullptr,_5739 ? _5739->size(0) : 0);
  std::vector<double> _9578;
  for (int _5741 = (int)0, _9579 = _5738; _5741 < _9579 ; ++_5741)
  {
    _9578.push_back(_ptr__5737[_5741]);
  }
  auto _9580 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9578.size()),_9578.begin(),_9578.end()));
  std::vector<double> _9581;
  for (int _5742 = (int)0, _9582 = _5738; _5742 < _9582 ; ++_5742)
  {
    _9581.push_back(1.0);
  }
  auto _9583 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9581.size()),_9581.begin(),_9581.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5738,_5738,_5739,_5739,_9580,_5739,_5739,_9583,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5743) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_5743); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5743) { return __mosek_2fusion_2SymmetricMatrix__add(_5743); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5743){
  int _5744 = _pubthis->getdim();
  if ((_5743->getdim() != _5744))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int _5745 = (int)((usubi)->size(0));
  int _5746 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->usubi)->size(0));
  int _5747 = safe_add( _5745,_5746 );
  int _5748 = (int)((vsubi)->size(0));
  int _5749 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->vsubi)->size(0));
  int _5750 = safe_add( _5748,_5749 );
  std::shared_ptr< monty::ndarray< double,1 > > _5751 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5750)));
  _checked_ptr_1<double> _ptr__5751(_5751 ? _5751->raw() : nullptr,_5751 ? _5751->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5752 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5750)));
  _checked_ptr_1<int> _ptr__5752(_5752 ? _5752->raw() : nullptr,_5752 ? _5752->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5753 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5750)));
  _checked_ptr_1<int> _ptr__5753(_5753 ? _5753->raw() : nullptr,_5753 ? _5753->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5754 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5747)));
  _checked_ptr_1<double> _ptr__5754(_5754 ? _5754->raw() : nullptr,_5754 ? _5754->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5755 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5747)));
  _checked_ptr_1<int> _ptr__5755(_5755 ? _5755->raw() : nullptr,_5755 ? _5755->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5756 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5747)));
  _checked_ptr_1<int> _ptr__5756(_5756 ? _5756->raw() : nullptr,_5756 ? _5756->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_5756,(int)0,_5745);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->usubi,(int)0,_5756,_5745,_5746);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_5755,(int)0,_5745);
  int _9584 = (int)0;
  int _9585 = _5746;
  for (int _5757 = _9584; _5757 < _9585; ++_5757)
  {
    {
      _ptr__5755[safe_add( _5757,_5745 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->usubj)(_5757)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_5754,(int)0,_5745);
    }
  }
  else
  {
    {
      int _9586 = (int)0;
      int _9587 = _5745;
      for (int _5758 = _9586; _5758 < _9587; ++_5758)
      {
        {
          _ptr__5754[_5758] = (scale * ((*uval)(_5758)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->uval,(int)0,_5754,_5745,_5746);
    }
  }
  else
  {
    {
      int _9588 = (int)0;
      int _9589 = _5746;
      for (int _5759 = _9588; _5759 < _9589; ++_5759)
      {
        {
          _ptr__5754[safe_add( _5759,_5745 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->uval)(_5759)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_5756,(int)0,_5745);
  int _9590 = (int)0;
  int _9591 = _5749;
  for (int _5760 = _9590; _5760 < _9591; ++_5760)
  {
    {
      _ptr__5753[safe_add( _5760,_5748 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->vsubi)(_5760)),mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_5752,(int)0,_5748);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->vsubj,_5748,_5752,_5748,_5749);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_5751,(int)0,_5748);
    }
  }
  else
  {
    {
      int _9592 = (int)0;
      int _9593 = _5748;
      for (int _5761 = _9592; _5761 < _9593; ++_5761)
      {
        {
          _ptr__5751[_5761] = (scale * ((*vval)(_5761)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->vval,(int)0,_5751,_5748,_5749);
    }
  }
  else
  {
    {
      int _9594 = (int)0;
      int _9595 = _5749;
      for (int _5762 = _9594; _5762 < _9595; ++_5762)
      {
        {
          _ptr__5751[safe_add( _5762,_5748 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->vval)(_5762)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_5743)->d1 ),_5756,_5755,_5754,_5753,_5752,_5751,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5763) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_5763); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5763) { return __mosek_2fusion_2SymmetricMatrix__sub(_5763); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5763){
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_5763->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _5764) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_5764); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _5764) { return __mosek_2fusion_2SymmetricMatrix__mul(_5764); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _5764){
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _5764));
}
int mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim(){
  return d0;
}
void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5765,    std::shared_ptr< monty::ndarray< int,2 > > _5766,    std::shared_ptr< monty::ndarray< double,1 > > _5767){ return new mosek::fusion::NDSparseArray(_5765,_5766,_5767); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5765,    std::shared_ptr< monty::ndarray< int,2 > > _5766,    std::shared_ptr< monty::ndarray< double,1 > > _5767) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5765,_5766,_5767); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _5765,    std::shared_ptr< monty::ndarray< int,2 > > _5766,    std::shared_ptr< monty::ndarray< double,1 > > _5767){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5765(_5765 ? _5765->raw() : nullptr, _5765 ? _5765->size(0) : 0);
    _checked_ptr_1<double> _ptr__5767(_5767 ? _5767->raw() : nullptr, _5767 ? _5767->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _5768 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5766)->size(0)))));
    _checked_ptr_1<long long> _ptr__5768(_5768 ? _5768->raw() : nullptr,_5768 ? _5768->size(0) : 0);
    size = (long long)1;
    int _9596 = (int)0;
    int _9597 = (int)((_5765)->size(0));
    for (int _5769 = _9596; _5769 < _9597; ++_5769)
    {
      {
        size = safe_mul( size,_ptr__5765[_5769] );
      }
    }
    int _5770 = (int)((_5765)->size(0));
    if (((int)((_5766)->size(0)) != (int)((_5767)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_5766)->size(1)) != _5770))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _5771 = false;
    int _9598 = (int)0;
    int _9599 = (int)((_5766)->size(0));
    for (int _5772 = _9598; _5772 < _9599; ++_5772)
    {
      {
        int _9600 = (int)0;
        int _9601 = (int)((_5766)->size(1));
        for (int _5773 = _9600; _5773 < _9601; ++_5773)
        {
          {
            if (((((*_5766)(_5772,_5773)) < (int)0) || (((*_5766)(_5772,_5773)) >= _ptr__5765[_5773])))
            {
              {
                _5771 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_5771)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int _9602 = (int)0;
    int _9603 = (int)((_5766)->size(0));
    for (int _5774 = _9602; _5774 < _9603; ++_5774)
    {
      {
        long long _5775 = (long long)0;
        int _9604 = (int)0;
        int _9605 = (int)((_5766)->size(1));
        for (int _5776 = _9604; _5776 < _9605; ++_5776)
        {
          {
            _5775 = safe_add( safe_mul( _5775,_ptr__5765[_5776] ),((*_5766)(_5774,_5776)) );
          }
        }
        _ptr__5768[_5774] = _5775;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_5765);
    bool _5777 = true;
    int _9606 = (int)1;
    int _9607 = (int)((_5768)->size(0));
    for (int _5778 = _9606; _5778 < _9607; ++_5778)
    {
      {
        _5777 = (_5777 && (_ptr__5768[_5778] >= _ptr__5768[(_5778 - (int)1)]));
      }
    }
    if (_5777)
    {
      {
        int _5779 = (int)1;
        int _9608 = (int)1;
        int _9609 = (int)((_5768)->size(0));
        for (int _5780 = _9608; _5780 < _9609; ++_5780)
        {
          {
            if ((_ptr__5768[(_5780 - (int)1)] < _ptr__5768[_5780]))
            {
              {
                ++ _5779;
              }
            }
            {}
          }
        }
        if ((_5779 == (int)((_5768)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_5768);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_5767);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5779)));
            ((*inst)((int)0)) = _ptr__5768[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5779)));
            ((*cof)((int)0)) = _ptr__5767[(int)0];
            int _5781 = (int)0;
            int _9610 = (int)1;
            int _9611 = (int)((_5768)->size(0));
            for (int _5782 = _9610; _5782 < _9611; ++_5782)
            {
              {
                if ((_ptr__5768[_5782] > _ptr__5768[(_5782 - (int)1)]))
                {
                  {
                    ++ _5781;
                    ((*inst)(_5781)) = _ptr__5768[_5782];
                    ((*cof)(_5781)) = _ptr__5767[_5782];
                  }
                }
                else
                {
                  {
                    ((*cof)(_5781)) = (((*cof)(_5781)) + _ptr__5767[_5782]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _5783 = ::mosek::fusion::Utils::Tools::range((long long)((_5768)->size(0)));
        _checked_ptr_1<long long> _ptr__5783(_5783 ? _5783->raw() : nullptr,_5783 ? _5783->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_5783,_5768,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_5768)->size(0)));
        int _5784 = (int)1;
        int _9612 = (int)1;
        int _9613 = (int)((_5768)->size(0));
        for (int _5785 = _9612; _5785 < _9613; ++_5785)
        {
          {
            if ((_ptr__5768[_ptr__5783[(_5785 - (int)1)]] < _ptr__5768[_ptr__5783[_5785]]))
            {
              {
                ++ _5784;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5784)));
        ((*inst)((int)0)) = _ptr__5768[_ptr__5783[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5784)));
        ((*cof)((int)0)) = _ptr__5767[_ptr__5783[(int)0]];
        int _5786 = (int)0;
        int _9614 = (int)1;
        int _9615 = (int)((_5768)->size(0));
        for (int _5787 = _9614; _5787 < _9615; ++_5787)
        {
          {
            if ((_ptr__5768[_ptr__5783[_5787]] > _ptr__5768[_ptr__5783[(_5787 - (int)1)]]))
            {
              {
                ++ _5786;
                ((*inst)(_5786)) = _ptr__5768[_ptr__5783[_5787]];
                ((*cof)(_5786)) = _ptr__5767[_ptr__5783[_5787]];
              }
            }
            else
            {
              {
                ((*cof)(_5786)) = (((*cof)(_5786)) + _ptr__5767[_ptr__5783[_5787]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5788,    std::shared_ptr< monty::ndarray< long long,1 > > _5789,    std::shared_ptr< monty::ndarray< double,1 > > _5790){ return new mosek::fusion::NDSparseArray(_5788,_5789,_5790); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5788,    std::shared_ptr< monty::ndarray< long long,1 > > _5789,    std::shared_ptr< monty::ndarray< double,1 > > _5790) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5788,_5789,_5790); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _5788,    std::shared_ptr< monty::ndarray< long long,1 > > _5789,    std::shared_ptr< monty::ndarray< double,1 > > _5790){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5788(_5788 ? _5788->raw() : nullptr, _5788 ? _5788->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5789(_5789 ? _5789->raw() : nullptr, _5789 ? _5789->size(0) : 0);
    _checked_ptr_1<double> _ptr__5790(_5790 ? _5790->raw() : nullptr, _5790 ? _5790->size(0) : 0);
    size = (long long)1;
    int _9616 = (int)0;
    int _9617 = (int)((_5788)->size(0));
    for (int _5791 = _9616; _5791 < _9617; ++_5791)
    {
      {
        size = safe_mul( size,_ptr__5788[_5791] );
      }
    }
    if (((int)((_5789)->size(0)) != (int)((_5790)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _5792 = false;
      int _9618 = (int)0;
      int _9619 = (int)((_5789)->size(0));
      for (int _5793 = _9618; _5793 < _9619; ++_5793)
      {
        {
          _5792 = (_5792 || ((_ptr__5789[_5793] < (int)0) || (_ptr__5789[_5793] >= size)));
        }
      }
      if (_5792)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_5788);
    bool _5794 = true;
    int _9620 = (int)1;
    int _9621 = (int)((_5789)->size(0));
    for (int _5795 = _9620; _5795 < _9621; ++_5795)
    {
      {
        _5794 = (_5794 && (_ptr__5789[_5795] >= _ptr__5789[(_5795 - (int)1)]));
      }
    }
    if (_5794)
    {
      {
        int _5796 = (int)1;
        int _9622 = (int)1;
        int _9623 = (int)((_5789)->size(0));
        for (int _5797 = _9622; _5797 < _9623; ++_5797)
        {
          {
            if ((_ptr__5789[(_5797 - (int)1)] < _ptr__5789[_5797]))
            {
              {
                ++ _5796;
              }
            }
            {}
          }
        }
        if ((_5796 == (int)((_5789)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_5789);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_5790);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5796)));
            ((*inst)((int)0)) = _ptr__5789[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5796)));
            ((*cof)((int)0)) = _ptr__5790[(int)0];
            int _5798 = (int)0;
            int _9624 = (int)1;
            int _9625 = (int)((_5789)->size(0));
            for (int _5799 = _9624; _5799 < _9625; ++_5799)
            {
              {
                if ((_ptr__5789[_5799] > _ptr__5789[(_5799 - (int)1)]))
                {
                  {
                    ++ _5798;
                    ((*inst)(_5798)) = _ptr__5789[_5799];
                    ((*cof)(_5798)) = _ptr__5790[_5799];
                  }
                }
                else
                {
                  {
                    ((*cof)(_5798)) = (((*cof)(_5798)) + _ptr__5790[_5799]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _5800 = ::mosek::fusion::Utils::Tools::range((long long)((_5789)->size(0)));
        _checked_ptr_1<long long> _ptr__5800(_5800 ? _5800->raw() : nullptr,_5800 ? _5800->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_5800,_5789,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_5789)->size(0)));
        int _5801 = (int)1;
        int _9626 = (int)1;
        int _9627 = (int)((_5789)->size(0));
        for (int _5802 = _9626; _5802 < _9627; ++_5802)
        {
          {
            if ((_ptr__5789[_ptr__5800[(_5802 - (int)1)]] < _ptr__5789[_ptr__5800[_5802]]))
            {
              {
                ++ _5801;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5801)));
        ((*inst)((int)0)) = _ptr__5789[_ptr__5800[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5801)));
        ((*cof)((int)0)) = _ptr__5790[_ptr__5800[(int)0]];
        int _5803 = (int)0;
        int _9628 = (int)1;
        int _9629 = (int)((_5789)->size(0));
        for (int _5804 = _9628; _5804 < _9629; ++_5804)
        {
          {
            if ((_ptr__5789[_ptr__5800[_5804]] > ((*inst)(_ptr__5800[(_5804 - (int)1)]))))
            {
              {
                ++ _5803;
                ((*inst)(_5803)) = _ptr__5789[_ptr__5800[_5804]];
                ((*cof)(_5803)) = _ptr__5790[_ptr__5800[_5804]];
              }
            }
            else
            {
              {
                ((*cof)(_5803)) = (((*cof)(_5803)) + _ptr__5790[_ptr__5800[_5804]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _5805){ return new mosek::fusion::NDSparseArray(_5805); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _5805) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5805); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _5805){monty::rc_reserve __reserve_this(_pubthis);   {
    long long _5806 = _5805->numNonzeros();
    int _5807 = _5805->numColumns();
    int _5808 = _5805->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _5809 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5806)));
    _checked_ptr_1<double> _ptr__5809(_5809 ? _5809->raw() : nullptr,_5809 ? _5809->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _5810 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5806)));
    _checked_ptr_1<int> _ptr__5810(_5810 ? _5810->raw() : nullptr,_5810 ? _5810->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _5811 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5806)));
    _checked_ptr_1<int> _ptr__5811(_5811 ? _5811->raw() : nullptr,_5811 ? _5811->size(0) : 0);
    _5805->getDataAsTriplets(_5811,_5810,_5809);
    size = safe_mul( (long long)_5805->numRows(),(long long)_5805->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5808),(int)(_5807)});
    std::vector<long long> _9630;
    for (long long _5812 = (long long)0, _9631 = _5806; _5812 < _9631 ; ++_5812)
    {
      _9630.push_back(safe_add( safe_mul( (long long)_ptr__5811[_5812],_5807 ),(long long)_ptr__5810[_5812] ));
    }
    auto _9632 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9630.size()),_9630.begin(),_9630.end()));
    inst = _9632;
    cof = _5809;
  }
}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5813) { return mosek::fusion::p_NDSparseArray::make(_5813); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _5813){
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5813);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _5814,    std::shared_ptr< monty::ndarray< long long,1 > > _5815,    std::shared_ptr< monty::ndarray< double,1 > > _5816) { return mosek::fusion::p_NDSparseArray::make(_5814,_5815,_5816); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _5814,std::shared_ptr< monty::ndarray< long long,1 > > _5815,std::shared_ptr< monty::ndarray< double,1 > > _5816){
  _checked_ptr_1<int> _ptr__5814(_5814 ? _5814->raw() : nullptr, _5814 ? _5814->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5815(_5815 ? _5815->raw() : nullptr, _5815 ? _5815->size(0) : 0);
  _checked_ptr_1<double> _ptr__5816(_5816 ? _5816->raw() : nullptr, _5816 ? _5816->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5814,_5815,_5816);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _5817,    std::shared_ptr< monty::ndarray< int,2 > > _5818,    std::shared_ptr< monty::ndarray< double,1 > > _5819) { return mosek::fusion::p_NDSparseArray::make(_5817,_5818,_5819); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _5817,std::shared_ptr< monty::ndarray< int,2 > > _5818,std::shared_ptr< monty::ndarray< double,1 > > _5819){
  _checked_ptr_1<int> _ptr__5817(_5817 ? _5817->raw() : nullptr, _5817 ? _5817->size(0) : 0);
  _checked_ptr_1<double> _ptr__5819(_5819 ? _5819->raw() : nullptr, _5819 ? _5819->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5817,_5818,_5819);
}
void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _5820,    int _5821,    std::shared_ptr< monty::ndarray< double,1 > > _5822){ return new mosek::fusion::DenseMatrix(_5820,_5821,_5822); }mosek::fusion::DenseMatrix::DenseMatrix  (int _5820,    int _5821,    std::shared_ptr< monty::ndarray< double,1 > > _5822) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5820,_5821,_5822); }void mosek::fusion::p_DenseMatrix::_initialize  (int _5820,    int _5821,    std::shared_ptr< monty::ndarray< double,1 > > _5822){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5822(_5822 ? _5822->raw() : nullptr, _5822 ? _5822->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5820,_5821);
    nnz = (long long)safe_mul( _5820,_5821 );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _5820,_5821 ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_5822,(int)0,data,(int)0,safe_mul( _5820,_5821 ));
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _5823){ return new mosek::fusion::DenseMatrix(_5823); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _5823) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5823); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _5823){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_5823)->dimi,mosek::fusion::p_Matrix::_get_impl(_5823)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _9633 = _5823;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9633.get()))
    {
      ::mosek::fusion::DenseMatrix::t _5824 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9633.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_5824)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_9633.get()))
    {
      ::mosek::fusion::SparseMatrix::t _5825 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_9633.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_5825)->dimi,mosek::fusion::p_Matrix::_get_impl(_5825)->dimj ));
        long long _9634 = (long long)0;
        long long _9635 = mosek::fusion::p_SparseMatrix::_get_impl(_5825)->nnz;
        for (long long _5827 = _9634; _5827 < _9635; ++_5827)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_5825)->subi)(_5827)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_5825)->subj)(_5827)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_5825)->val)(_5827));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _5826 = _9633;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _5828){ return new mosek::fusion::DenseMatrix(_5828); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _5828) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5828); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _5828){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize((int)((_5828)->size(0)),(int)((_5828)->size(1)));
    std::vector<double> _9636;
    for (int _5829 = (int)0, _9637 = dimi; _5829 < _9637 ; ++_5829)
    {
      for (int _5830 = (int)0, _9638 = dimj; _5830 < _9638 ; ++_5830)
      {
        _9636.push_back(((*_5828)(_5829,_5830)));
      }
    }
    auto _9639 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9636.size()),_9636.begin(),_9636.end()));
    data = _9639;
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _5831,    int _5832,    double _5833){ return new mosek::fusion::DenseMatrix(_5831,_5832,_5833); }mosek::fusion::DenseMatrix::DenseMatrix  (int _5831,    int _5832,    double _5833) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5831,_5832,_5833); }void mosek::fusion::p_DenseMatrix::_initialize  (int _5831,    int _5832,    double _5833){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(_5831,_5832);
    std::vector<double> _9640;
    for (int _5834 = (int)0, _9641 = _5831; _5834 < _9641 ; ++_5834)
    {
      for (int _5835 = (int)0, _9642 = _5832; _5835 < _9642 ; ++_5835)
      {
        _9640.push_back(_5833);
      }
    }
    auto _9643 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9640.size()),_9640.begin(),_9640.end()));
    data = _9643;
    nnz = (long long)safe_mul( _5831,_5832 );
  }
}std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5836 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5836->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _5836->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _5836->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _5836->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _5836->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int _5837 = (int)0;
  {
    int _5838 = (int)0;
    for(;(_5838 < dimi);++ _5838)
    {
      {
        if ((_5838 > (int)0))
        {
          {
            _5836->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _5836->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _5836->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_5837)));
        ++ _5837;
        {
          int _5839 = (int)1;
          for(;(_5839 < dimj);++ _5839)
          {
            {
              _5836->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _5836->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_5837)));
              ++ _5837;
            }
          }
        }
        _5836->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _5836->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _5836->toString();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose(){
  std::shared_ptr< monty::ndarray< double,1 > > _5840 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__5840(_5840 ? _5840->raw() : nullptr,_5840 ? _5840->size(0) : 0);
  int _5841 = (int)0;
  int _5842 = dimi;
  int _9644 = (int)0;
  int _9645 = dimi;
  for (int _5843 = _9644; _5843 < _9645; ++_5843)
  {
    {
      int _5844 = _5843;
      int _9646 = (int)0;
      int _9647 = dimj;
      for (int _5845 = _9646; _5845 < _9647; ++_5845)
      {
        {
          _ptr__5840[_5844] = ((*data)(_5841));
          _5844 = safe_add( _5844,_5842 );
          ++ _5841;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_5840)).as<::mosek::fusion::Matrix>();
}
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse(){
  return false;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray(){
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5846,std::shared_ptr< monty::ndarray< int,1 > > _5847,std::shared_ptr< monty::ndarray< double,1 > > _5848) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_5846,_5847,_5848); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5846,std::shared_ptr< monty::ndarray< int,1 > > _5847,std::shared_ptr< monty::ndarray< double,1 > > _5848){
  _checked_ptr_1<int> _ptr__5846(_5846 ? _5846->raw() : nullptr, _5846 ? _5846->size(0) : 0);
  _checked_ptr_1<int> _ptr__5847(_5847 ? _5847->raw() : nullptr, _5847 ? _5847->size(0) : 0);
  _checked_ptr_1<double> _ptr__5848(_5848 ? _5848->raw() : nullptr, _5848 ? _5848->size(0) : 0);
  if ((((int)((_5846)->size(0)) < nnz) || (((int)((_5847)->size(0)) < nnz) || ((int)((_5848)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_5848,(int)0,(int)((data)->size(0)));
  int _5849 = (int)0;
  int _9648 = (int)0;
  int _9649 = dimi;
  for (int _5850 = _9648; _5850 < _9649; ++_5850)
  {
    {
      int _9650 = (int)0;
      int _9651 = dimj;
      for (int _5851 = _9650; _5851 < _9651; ++_5851)
      {
        {
          _ptr__5846[_5849] = _5850;
          _ptr__5847[_5849] = _5851;
          ++ _5849;
        }
      }
    }
  }
}
double mosek::fusion::DenseMatrix :: get(int _5852,int _5853) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_5852,_5853); }double mosek::fusion::p_DenseMatrix::get(int _5852,int _5853){
  return ((*data)(safe_add( safe_mul( _5852,dimj ),_5853 )));
}
long long mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros(){
  return (long long)safe_mul( dimi,dimj );
}
void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _5854,    int _5855,    std::shared_ptr< monty::ndarray< int,1 > > _5856,    std::shared_ptr< monty::ndarray< int,1 > > _5857,    std::shared_ptr< monty::ndarray< double,1 > > _5858,    long long _5859){ return new mosek::fusion::SparseMatrix(_5854,_5855,_5856,_5857,_5858,_5859); }mosek::fusion::SparseMatrix::SparseMatrix  (int _5854,    int _5855,    std::shared_ptr< monty::ndarray< int,1 > > _5856,    std::shared_ptr< monty::ndarray< int,1 > > _5857,    std::shared_ptr< monty::ndarray< double,1 > > _5858,    long long _5859) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_5854,_5855,_5856,_5857,_5858,_5859); }void mosek::fusion::p_SparseMatrix::_initialize  (int _5854,    int _5855,    std::shared_ptr< monty::ndarray< int,1 > > _5856,    std::shared_ptr< monty::ndarray< int,1 > > _5857,    std::shared_ptr< monty::ndarray< double,1 > > _5858,    long long _5859){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5856(_5856 ? _5856->raw() : nullptr, _5856 ? _5856->size(0) : 0);
    _checked_ptr_1<int> _ptr__5857(_5857 ? _5857->raw() : nullptr, _5857 ? _5857->size(0) : 0);
    _checked_ptr_1<double> _ptr__5858(_5858 ? _5858->raw() : nullptr, _5858 ? _5858->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5854,_5855);
    if ((_5859 > (int)0))
    {
      {
        if ((((int)((_5856)->size(0)) < _5859) || (((int)((_5857)->size(0)) < _5859) || ((int)((_5858)->size(0)) < _5859))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _5860 = false;
        long long _9652 = (long long)0;
        long long _9653 = _5859;
        for (long long _5861 = _9652; _5861 < _9653; ++_5861)
        {
          {
            if (((_ptr__5856[_5861] < (int)0) || ((_ptr__5856[_5861] >= dimi) || ((_ptr__5857[_5861] < (int)0) || (_ptr__5857[_5861] >= dimj)))))
            {
              {
                _5860 = true;
              }
            }
            {}
          }
        }
        if (_5860)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5862 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5863 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _5864 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_5856,_5857,_5858,_5862,_5863,_5864,_5859,dimi,dimj);
        subi = ((*_5862)((int)0));
        subj = ((*_5863)((int)0));
        val = ((*_5864)((int)0));
        nnz = (long long)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (long long)0;
      }
    }
  }
}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _5865,    int _5866,    std::shared_ptr< monty::ndarray< int,1 > > _5867,    std::shared_ptr< monty::ndarray< int,1 > > _5868,    std::shared_ptr< monty::ndarray< double,1 > > _5869){ return new mosek::fusion::SparseMatrix(_5865,_5866,_5867,_5868,_5869); }mosek::fusion::SparseMatrix::SparseMatrix  (int _5865,    int _5866,    std::shared_ptr< monty::ndarray< int,1 > > _5867,    std::shared_ptr< monty::ndarray< int,1 > > _5868,    std::shared_ptr< monty::ndarray< double,1 > > _5869) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_5865,_5866,_5867,_5868,_5869); }void mosek::fusion::p_SparseMatrix::_initialize  (int _5865,    int _5866,    std::shared_ptr< monty::ndarray< int,1 > > _5867,    std::shared_ptr< monty::ndarray< int,1 > > _5868,    std::shared_ptr< monty::ndarray< double,1 > > _5869){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5867(_5867 ? _5867->raw() : nullptr, _5867 ? _5867->size(0) : 0);
    _checked_ptr_1<int> _ptr__5868(_5868 ? _5868->raw() : nullptr, _5868 ? _5868->size(0) : 0);
    _checked_ptr_1<double> _ptr__5869(_5869 ? _5869->raw() : nullptr, _5869 ? _5869->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5865,_5866);
    int _5870 = (int)0;
    int _9654 = (int)0;
    int _9655 = (int)((_5869)->size(0));
    for (int _5871 = _9654; _5871 < _9655; ++_5871)
    {
      {
        if (((_ptr__5869[_5871] > (int)0) || (_ptr__5869[_5871] < (int)0)))
        {
          {
            ++ _5870;
          }
        }
        {}
      }
    }
    if (((_5870 > (int)0) && (_5870 < (int)((_5867)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5870)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5870)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5870)));
        nnz = _5870;
        int _5872 = (int)0;
        int _9656 = (int)0;
        int _9657 = (int)((_5869)->size(0));
        for (int _5873 = _9656; _5873 < _9657; ++_5873)
        {
          {
            if (((_ptr__5869[_5873] < (int)0) || (_ptr__5869[_5873] > (int)0)))
            {
              {
                ((*val)(_5872)) = _ptr__5869[_5873];
                ((*subj)(_5872)) = _ptr__5868[_5873];
                ((*subi)(_5872)) = _ptr__5867[_5873];
                ++ _5872;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _5867;
        subj = _5868;
        val = _5869;
        if ((NULL == _5867.get()))
        {
          {
            nnz = (long long)0;
          }
        }
        else
        {
          {
            nnz = (long long)((subi)->size(0));
          }
        }
      }
    }
  }
}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb(){
  std::shared_ptr< monty::ndarray< long long,1 > > _5874 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5874(_5874 ? _5874->raw() : nullptr,_5874 ? _5874->size(0) : 0);
  long long _5875 = (long long)0;
  int _9658 = (int)0;
  int _9659 = dimi;
  for (int _5876 = _9658; _5876 < _9659; ++_5876)
  {
    {
      _ptr__5874[_5876] = _5875;
      {
        for(;((_5875 < nnz) && (((*subi)(_5875)) == _5876));++ _5875)
        {
          {
          }
        }
      }
    }
  }
  _ptr__5874[dimi] = _5875;
  return _5874;
}
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5877 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5877->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _5877->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int _9660 = (int)1;
      int _9661 = (int)((subi)->size(0));
      for (int _5878 = _9660; _5878 < _9661; ++_5878)
      {
        {
          _5877->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_5878)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_5878)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_5878)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _5877->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _5877->toString();
}
long long mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros(){
  return nnz;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose(){
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse(){
  return true;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray(){
  std::shared_ptr< monty::ndarray< double,1 > > _5879 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__5879(_5879 ? _5879->raw() : nullptr,_5879 ? _5879->size(0) : 0);
  int _9662 = (int)0;
  int _9663 = (int)((subi)->size(0));
  for (int _5880 = _9662; _5880 < _9663; ++_5880)
  {
    {
      _ptr__5879[safe_add( safe_mul( ((*subi)(_5880)),dimj ),((*subj)(_5880)) )] = ((*val)(_5880));
    }
  }
  return _5879;
}
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5881,std::shared_ptr< monty::ndarray< int,1 > > _5882,std::shared_ptr< monty::ndarray< double,1 > > _5883) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_5881,_5882,_5883); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5881,std::shared_ptr< monty::ndarray< int,1 > > _5882,std::shared_ptr< monty::ndarray< double,1 > > _5883){
  _checked_ptr_1<int> _ptr__5881(_5881 ? _5881->raw() : nullptr, _5881 ? _5881->size(0) : 0);
  _checked_ptr_1<int> _ptr__5882(_5882 ? _5882->raw() : nullptr, _5882 ? _5882->size(0) : 0);
  _checked_ptr_1<double> _ptr__5883(_5883 ? _5883->raw() : nullptr, _5883 ? _5883->size(0) : 0);
  if ((((long long)((_5881)->size(0)) < nnz) || (((long long)((_5882)->size(0)) < nnz) || ((long long)((_5883)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_5881,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_5882,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_5883,(long long)0,nnz);
    }
  }
  {}
}
double mosek::fusion::SparseMatrix :: get(int _5884,int _5885) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_5884,_5885); }double mosek::fusion::p_SparseMatrix::get(int _5884,int _5885){
  if (((_5884 < (int)0) || ((_5884 >= dimi) || ((_5885 < (int)0) || (_5885 >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int _5886 = (int)((subi)->size(0));
  int _5887 = (int)0;
  while ( ((_5886 - _5887) > (int)1) )
  {
    {
      int _5888 = (safe_add( _5887,_5886 ) / (int)2);
      if (((((*subi)(_5888)) < _5884) || ((((*subi)(_5888)) == _5884) && (((*subj)(_5888)) < _5885))))
      {
        {
          _5887 = _5888;
        }
      }
      else if(((((*subi)(_5888)) > _5884) || ((((*subi)(_5888)) == _5884) && (((*subj)(_5888)) > _5885))))
      {
        {
          _5886 = _5888;
        }
      }
      else
      {
        {
          return ((*val)(_5888));
        }
      }
    }
  }
  if (((((*subi)(_5887)) == _5884) && (((*subj)(_5887)) == _5885)))
  {
    {
      return ((*val)(_5887));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _5889,    int _5890){monty::rc_reserve __reserve_this(_pubthis);   {
    if (((_5889 < (int)0) || (_5890 < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _5889;
    dimj = _5890;
  }
}std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString(){
  return std::string ("");
}
void mosek::fusion::p_Matrix::switchDims(){
  int _5891 = dimi;
  dimi = dimj;
  dimj = _5891;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5892,    monty::rc_ptr< ::mosek::fusion::Matrix > _5893) { return mosek::fusion::p_Matrix::diag(_5892,_5893); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5892,monty::rc_ptr< ::mosek::fusion::Matrix > _5893){
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _9664;
  for (int _5894 = (int)0, _9665 = _5892; _5894 < _9665 ; ++_5894)
  {
    _9664.push_back(_5893);
  }
  auto _9666 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_9664.size()),_9664.begin(),_9664.end()));
  return ::mosek::fusion::p_Matrix::diag(_9666);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5895) { return mosek::fusion::p_Matrix::diag(_5895); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5895){
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5896 = _5895;
  long long _5897 = (long long)0;
  int _5898 = (int)0;
  int _5899 = (int)0;
  int _9667 = (int)0;
  int _9668 = (int)((_5895)->size(0));
  for (int _5900 = _9667; _5900 < _9668; ++_5900)
  {
    {
      _5899 = safe_add( _5899,mosek::fusion::p_Matrix::_get_impl(((*_5895)(_5900)))->dimi );
      _5898 = safe_add( _5898,mosek::fusion::p_Matrix::_get_impl(((*_5895)(_5900)))->dimj );
      _5897 = safe_add( _5897,((*_5895)(_5900))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5901 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5897)));
  _checked_ptr_1<int> _ptr__5901(_5901 ? _5901->raw() : nullptr,_5901 ? _5901->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5902 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5897)));
  _checked_ptr_1<int> _ptr__5902(_5902 ? _5902->raw() : nullptr,_5902 ? _5902->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5903 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5897)));
  _checked_ptr_1<double> _ptr__5903(_5903 ? _5903->raw() : nullptr,_5903 ? _5903->size(0) : 0);
  {
    int _5904 = (int)0;
    int _5905 = (int)0;
    long long _5906 = (long long)0;
    int _9669 = (int)0;
    int _9670 = (int)((_5895)->size(0));
    for (int _5907 = _9669; _5907 < _9670; ++_5907)
    {
      {
        long long _5908 = ((*_5895)(_5907))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _5909 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5908)));
        _checked_ptr_1<double> _ptr__5909(_5909 ? _5909->raw() : nullptr,_5909 ? _5909->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _5910 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5908)));
        _checked_ptr_1<int> _ptr__5910(_5910 ? _5910->raw() : nullptr,_5910 ? _5910->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _5911 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5908)));
        _checked_ptr_1<int> _ptr__5911(_5911 ? _5911->raw() : nullptr,_5911 ? _5911->size(0) : 0);
        ((*_5895)(_5907))->getDataAsTriplets(_5911,_5910,_5909);
        ::mosek::fusion::Utils::Tools::arraycopy(_5909,(long long)0,_5903,_5906,_5908);
        long long _9671 = (long long)0;
        long long _9672 = _5908;
        for (long long _5912 = _9671; _5912 < _9672; ++_5912)
        {
          {
            _ptr__5901[safe_add( _5906,_5912 )] = safe_add( _ptr__5911[_5912],_5905 );
            _ptr__5902[safe_add( _5906,_5912 )] = safe_add( _ptr__5911[_5912],_5904 );
          }
        }
        _5906 = safe_add( _5906,_5908 );
        _5905 = safe_add( _5905,mosek::fusion::p_Matrix::_get_impl(((*_5895)(_5907)))->dimi );
        _5904 = safe_add( _5904,mosek::fusion::p_Matrix::_get_impl(((*_5895)(_5907)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5899,_5898,_5901,_5902,_5903)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _5913,    double _5914,    int _5915) { return mosek::fusion::p_Matrix::antidiag(_5913,_5914,_5915); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _5913,double _5914,int _5915){
  if (((_5915 < _5913) && (_5915 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5914,(_5913 - _5915)),_5915);
    }
  }
  else if(((_5915 > (-_5913)) && (_5915 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5914,safe_add( _5913,_5915 )),_5915);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _5916,    double _5917) { return mosek::fusion::p_Matrix::antidiag(_5916,_5917); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _5916,double _5917){
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5917,_5916),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5918,    double _5919,    int _5920) { return mosek::fusion::p_Matrix::diag(_5918,_5919,_5920); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5918,double _5919,int _5920){
  if (((_5920 < _5918) && (_5920 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5919,(_5918 - _5920)),_5920);
    }
  }
  else if(((_5920 > (-_5918)) && (_5920 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5919,safe_add( _5918,_5920 )),_5920);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5921,    double _5922) { return mosek::fusion::p_Matrix::diag(_5921,_5922); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5921,double _5922){
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5922,_5921),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5923,    int _5924) { return mosek::fusion::p_Matrix::antidiag(_5923,_5924); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _5923,int _5924){
  _checked_ptr_1<double> _ptr__5923(_5923 ? _5923->raw() : nullptr, _5923 ? _5923->size(0) : 0);
  int _9673;
  bool _9674 = (_5924 > (int)0);
  if (_9674)
  {
    _9673 = _5924;
  }
  else
  {
    _9673 = (-_5924);
  }
  int _5925 = _9673;
  int _5926 = safe_add( (int)((_5923)->size(0)),_5925 );
  int _5927 = (int)((_5923)->size(0));
  if ((_5924 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5928 = ::mosek::fusion::Utils::Tools::range(_5924,safe_add( _5927,_5924 ));
      _checked_ptr_1<int> _ptr__5928(_5928 ? _5928->raw() : nullptr,_5928 ? _5928->size(0) : 0);
      std::vector<int> _9675;
      for (int _5930 = (int)1, _9676 = safe_add( _5927,(int)1 ); _5930 < _9676 ; ++_5930)
      {
        _9675.push_back((safe_add( _5927,_5924 ) - _5930));
      }
      auto _9677 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9675.size()),_9675.begin(),_9675.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _5929 = _9677;
      _checked_ptr_1<int> _ptr__5929(_5929 ? _5929->raw() : nullptr,_5929 ? _5929->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5926,_5926,_5928,_5929,_5923)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5931 = ::mosek::fusion::Utils::Tools::range((int)0,_5927);
      _checked_ptr_1<int> _ptr__5931(_5931 ? _5931->raw() : nullptr,_5931 ? _5931->size(0) : 0);
      std::vector<int> _9678;
      for (int _5933 = (int)1, _9679 = safe_add( _5927,(int)1 ); _5933 < _9679 ; ++_5933)
      {
        _9678.push_back((_5927 - _5933));
      }
      auto _9680 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9678.size()),_9678.begin(),_9678.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _5932 = _9680;
      _checked_ptr_1<int> _ptr__5932(_5932 ? _5932->raw() : nullptr,_5932 ? _5932->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5926,_5926,_5931,_5932,_5923)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5934) { return mosek::fusion::p_Matrix::antidiag(_5934); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _5934){
  _checked_ptr_1<double> _ptr__5934(_5934 ? _5934->raw() : nullptr, _5934 ? _5934->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_5934,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5935,    int _5936) { return mosek::fusion::p_Matrix::diag(_5935,_5936); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5935,int _5936){
  _checked_ptr_1<double> _ptr__5935(_5935 ? _5935->raw() : nullptr, _5935 ? _5935->size(0) : 0);
  int _9681;
  bool _9682 = (_5936 > (int)0);
  if (_9682)
  {
    _9681 = _5936;
  }
  else
  {
    _9681 = (-_5936);
  }
  int _5937 = _9681;
  int _5938 = safe_add( (int)((_5935)->size(0)),_5937 );
  int _5939 = (int)((_5935)->size(0));
  if ((_5936 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5940 = ::mosek::fusion::Utils::Tools::range((int)0,_5939);
      _checked_ptr_1<int> _ptr__5940(_5940 ? _5940->raw() : nullptr,_5940 ? _5940->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5941 = ::mosek::fusion::Utils::Tools::range(_5937,safe_add( _5939,_5937 ));
      _checked_ptr_1<int> _ptr__5941(_5941 ? _5941->raw() : nullptr,_5941 ? _5941->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5938,_5938,_5940,_5941,_5935)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5942 = ::mosek::fusion::Utils::Tools::range(_5937,safe_add( _5939,_5937 ));
      _checked_ptr_1<int> _ptr__5942(_5942 ? _5942->raw() : nullptr,_5942 ? _5942->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5943 = ::mosek::fusion::Utils::Tools::range((int)0,_5939);
      _checked_ptr_1<int> _ptr__5943(_5943 ? _5943->raw() : nullptr,_5943 ? _5943->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5938,_5938,_5942,_5943,_5935)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5944) { return mosek::fusion::p_Matrix::diag(_5944); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5944){
  _checked_ptr_1<double> _ptr__5944(_5944 ? _5944->raw() : nullptr, _5944 ? _5944->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_5944,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _5945,    int _5946) { return mosek::fusion::p_Matrix::ones(_5945,_5946); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int _5945,int _5946){
  return ::mosek::fusion::p_Matrix::dense(_5945,_5946,1.0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _5947) { return mosek::fusion::p_Matrix::eye(_5947); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int _5947){
  std::vector<double> _9683;
  for (int _5948 = (int)0, _9684 = _5947; _5948 < _9684 ; ++_5948)
  {
    _9683.push_back(1.0);
  }
  auto _9685 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9683.size()),_9683.begin(),_9683.end()));
  return ::mosek::fusion::p_Matrix::diag(_9685);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5949) { return mosek::fusion::p_Matrix::dense(_5949); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _5949){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5949)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _5950,    int _5951,    double _5952) { return mosek::fusion::p_Matrix::dense(_5950,_5951,_5952); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _5950,int _5951,double _5952){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5950,_5951,_5952)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _5953,    int _5954,    std::shared_ptr< monty::ndarray< double,1 > > _5955) { return mosek::fusion::p_Matrix::dense(_5953,_5954,_5955); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _5953,int _5954,std::shared_ptr< monty::ndarray< double,1 > > _5955){
  _checked_ptr_1<double> _ptr__5955(_5955 ? _5955->raw() : nullptr, _5955 ? _5955->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5953,_5954,_5955)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _5956) { return mosek::fusion::p_Matrix::dense(_5956); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _5956){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5956)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5957) { return mosek::fusion::p_Matrix::sparse(_5957); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _5957){
  std::shared_ptr< monty::ndarray< int,1 > > _5958 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5957->numNonzeros())));
  _checked_ptr_1<int> _ptr__5958(_5958 ? _5958->raw() : nullptr,_5958 ? _5958->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5959 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5957->numNonzeros())));
  _checked_ptr_1<int> _ptr__5959(_5959 ? _5959->raw() : nullptr,_5959 ? _5959->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5960 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5957->numNonzeros())));
  _checked_ptr_1<double> _ptr__5960(_5960 ? _5960->raw() : nullptr,_5960 ? _5960->size(0) : 0);
  _5957->getDataAsTriplets(_5958,_5959,_5960);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5957->numRows(),_5957->numColumns(),_5958,_5959,_5960)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _5961) { return mosek::fusion::p_Matrix::sparse(_5961); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _5961){
  int _5962 = (int)((_5961)->size(0));
  int _5963 = (int)((((*_5961)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _5964 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5962)));
  _checked_ptr_1<int> _ptr__5964(_5964 ? _5964->raw() : nullptr,_5964 ? _5964->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5965 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5963)));
  _checked_ptr_1<int> _ptr__5965(_5965 ? _5965->raw() : nullptr,_5965 ? _5965->size(0) : 0);
  long long _5966 = (long long)0;
  int _5967 = (int)0;
  {
    int _5968 = (int)0;
    for(;(_5968 < _5962);++ _5968)
    {
      {
        {
          int _5969 = (int)0;
          for(;(_5969 < _5963);++ _5969)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _5970 = ((*((*_5961)(_5968)))(_5969));
              if ((NULL != _5970.get()))
              {
                {
                  if ((_ptr__5965[_5969] == (int)0))
                  {
                    {
                      _ptr__5965[_5969] = mosek::fusion::p_Matrix::_get_impl(_5970)->dimj;
                    }
                  }
                  else if((_ptr__5965[_5969] != mosek::fusion::p_Matrix::_get_impl(_5970)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__5964[_5968] == (int)0))
                  {
                    {
                      _ptr__5964[_5968] = mosek::fusion::p_Matrix::_get_impl(_5970)->dimi;
                    }
                  }
                  else if((_ptr__5964[_5968] != mosek::fusion::p_Matrix::_get_impl(_5970)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _5966 = safe_add( _5966,_5970->numNonzeros() );
                }
              }
              {}
              ++ _5967;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5971 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5966)));
  _checked_ptr_1<double> _ptr__5971(_5971 ? _5971->raw() : nullptr,_5971 ? _5971->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5972 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5966)));
  _checked_ptr_1<int> _ptr__5972(_5972 ? _5972->raw() : nullptr,_5972 ? _5972->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5973 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5966)));
  _checked_ptr_1<int> _ptr__5973(_5973 ? _5973->raw() : nullptr,_5973 ? _5973->size(0) : 0);
  int _5974 = (int)0;
  int _5975 = (int)0;
  {
    int _5976 = (int)0;
    for(;(_5976 < _5962);++ _5976)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _5977 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5963)));
        _checked_ptr_1<int> _ptr__5977(_5977 ? _5977->raw() : nullptr,_5977 ? _5977->size(0) : 0);
        {
          int _5978 = (int)0;
          for(;(_5978 < _ptr__5964[_5976]);++ _5978)
          {
            {
              int _5979 = (int)0;
              {
                int _5980 = (int)0;
                for(;(_5980 < _5963);++ _5980)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _5981 = ((*((*_5961)(_5976)))(_5980));
                    if ((NULL != _5981.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _9686 = _5981;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9686.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _5982 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9686.get()));
                          {
                            int _5985 = _ptr__5977[_5980];
                            {
                              int _5986 = (int)0;
                              for(;(_5986 < mosek::fusion::p_Matrix::_get_impl(_5982)->dimj);++ _5986)
                              {
                                {
                                  _ptr__5971[_5974] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_5982)->data)(_5985));
                                  _ptr__5972[_5974] = safe_add( _5975,_5978 );
                                  _ptr__5973[_5974] = safe_add( _5979,_5986 );
                                  ++ _5985;
                                  ++ _5974;
                                }
                              }
                            }
                            _ptr__5977[_5980] = _5985;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_9686.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _5983 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_9686.get()));
                          {
                            int _5987;
                            {
                              _5987 = _ptr__5977[_5980];
                              for(;((_5987 < mosek::fusion::p_SparseMatrix::_get_impl(_5983)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_5983)->subi)(_5987)) == _5978));++ _5987)
                              {
                                {
                                  _ptr__5971[_5974] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_5983)->val)(_5987));
                                  _ptr__5973[_5974] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_5983)->subj)(_5987)),_5979 );
                                  _ptr__5972[_5974] = safe_add( _5975,_5978 );
                                  ++ _5974;
                                }
                              }
                            }
                            _ptr__5977[_5980] = _5987;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _5984 = _9686;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _5979 = safe_add( _5979,_ptr__5965[_5980] );
                  }
                }
              }
            }
          }
        }
        _5975 = safe_add( _5975,_ptr__5964[_5976] );
      }
    }
  }
  int _5988 = (int)0;
  int _5989 = (int)0;
  {
    int _5990 = (int)0;
    for(;(_5990 < _5962);++ _5990)
    {
      {
        _5988 = safe_add( _5988,_ptr__5964[_5990] );
      }
    }
  }
  {
    int _5991 = (int)0;
    for(;(_5991 < _5963);++ _5991)
    {
      {
        _5989 = safe_add( _5989,_ptr__5965[_5991] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5988,_5989,_5972,_5973,_5971)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _5992) { return mosek::fusion::p_Matrix::sparse(_5992); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _5992){
  int _5993 = (int)((_5992)->size(0));
  int _5994 = (int)((_5992)->size(1));
  long long _5995 = (long long)safe_mul( _5993,_5994 );
  int _5996 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _5997 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5995)));
  _checked_ptr_1<int> _ptr__5997(_5997 ? _5997->raw() : nullptr,_5997 ? _5997->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5998 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5995)));
  _checked_ptr_1<int> _ptr__5998(_5998 ? _5998->raw() : nullptr,_5998 ? _5998->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5999 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5995)));
  _checked_ptr_1<double> _ptr__5999(_5999 ? _5999->raw() : nullptr,_5999 ? _5999->size(0) : 0);
  {
    int _6000 = (int)0;
    for(;(_6000 < _5993);++ _6000)
    {
      {
        {
          int _6001 = (int)0;
          for(;(_6001 < _5994);++ _6001)
          {
            {
              _ptr__5997[_5996] = _6000;
              _ptr__5998[_5996] = _6001;
              _ptr__5999[_5996] = ((*_5992)(_6000,_6001));
              ++ _5996;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5993,_5994,_5997,_5998,_5999)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6002,    int _6003) { return mosek::fusion::p_Matrix::sparse(_6002,_6003); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _6002,int _6003){
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6002,_6003,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6004,    int _6005,    std::shared_ptr< monty::ndarray< int,1 > > _6006,    std::shared_ptr< monty::ndarray< int,1 > > _6007,    double _6008) { return mosek::fusion::p_Matrix::sparse(_6004,_6005,_6006,_6007,_6008); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _6004,int _6005,std::shared_ptr< monty::ndarray< int,1 > > _6006,std::shared_ptr< monty::ndarray< int,1 > > _6007,double _6008){
  _checked_ptr_1<int> _ptr__6006(_6006 ? _6006->raw() : nullptr, _6006 ? _6006->size(0) : 0);
  _checked_ptr_1<int> _ptr__6007(_6007 ? _6007->raw() : nullptr, _6007 ? _6007->size(0) : 0);
  int _6009 = (int)0;
  if ((NULL != _6006.get()))
  {
    {
      _6009 = (int)((_6006)->size(0));
    }
  }
  else if((NULL != _6007.get()))
  {
    {
      _6009 = (int)((_6007)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_6004,_6005,_6006,_6007,::mosek::fusion::Utils::Tools::makevector(_6008,_6009));
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6010,    std::shared_ptr< monty::ndarray< int,1 > > _6011,    double _6012) { return mosek::fusion::p_Matrix::sparse(_6010,_6011,_6012); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _6010,std::shared_ptr< monty::ndarray< int,1 > > _6011,double _6012){
  _checked_ptr_1<int> _ptr__6010(_6010 ? _6010->raw() : nullptr, _6010 ? _6010->size(0) : 0);
  _checked_ptr_1<int> _ptr__6011(_6011 ? _6011->raw() : nullptr, _6011 ? _6011->size(0) : 0);
  int _6013 = (int)0;
  int _6014 = (int)0;
  int _6015 = (int)((_6010)->size(0));
  if ((_6015 > (int)((_6011)->size(0))))
  {
    {
      _6015 = (int)((_6011)->size(0));
    }
  }
  {}
  int _9687 = (int)0;
  int _9688 = _6015;
  for (int _6016 = _9687; _6016 < _9688; ++_6016)
  {
    {
      if ((_6014 < _ptr__6010[_6016]))
      {
        {
          _6014 = _ptr__6010[_6016];
        }
      }
      {}
      if ((_6013 < _ptr__6011[_6016]))
      {
        {
          _6013 = _ptr__6011[_6016];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _6014,(int)1 ),safe_add( _6013,(int)1 ),_6010,_6011,_6012);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6017,    std::shared_ptr< monty::ndarray< int,1 > > _6018,    std::shared_ptr< monty::ndarray< double,1 > > _6019) { return mosek::fusion::p_Matrix::sparse(_6017,_6018,_6019); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _6017,std::shared_ptr< monty::ndarray< int,1 > > _6018,std::shared_ptr< monty::ndarray< double,1 > > _6019){
  _checked_ptr_1<int> _ptr__6017(_6017 ? _6017->raw() : nullptr, _6017 ? _6017->size(0) : 0);
  _checked_ptr_1<int> _ptr__6018(_6018 ? _6018->raw() : nullptr, _6018 ? _6018->size(0) : 0);
  _checked_ptr_1<double> _ptr__6019(_6019 ? _6019->raw() : nullptr, _6019 ? _6019->size(0) : 0);
  int _6020 = (int)0;
  int _6021 = (int)0;
  int _6022 = (int)((_6017)->size(0));
  if ((_6022 > (int)((_6018)->size(0))))
  {
    {
      _6022 = (int)((_6018)->size(0));
    }
  }
  {}
  if ((_6022 > (int)((_6019)->size(0))))
  {
    {
      _6022 = (int)((_6019)->size(0));
    }
  }
  {}
  int _9689 = (int)0;
  int _9690 = _6022;
  for (int _6023 = _9689; _6023 < _9690; ++_6023)
  {
    {
      if ((_6021 < _ptr__6017[_6023]))
      {
        {
          _6021 = _ptr__6017[_6023];
        }
      }
      {}
      if ((_6020 < _ptr__6018[_6023]))
      {
        {
          _6020 = _ptr__6018[_6023];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _6021,(int)1 ),safe_add( _6020,(int)1 ),_6017,_6018,_6019);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6024,    int _6025,    std::shared_ptr< monty::ndarray< int,1 > > _6026,    std::shared_ptr< monty::ndarray< int,1 > > _6027,    std::shared_ptr< monty::ndarray< double,1 > > _6028) { return mosek::fusion::p_Matrix::sparse(_6024,_6025,_6026,_6027,_6028); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _6024,int _6025,std::shared_ptr< monty::ndarray< int,1 > > _6026,std::shared_ptr< monty::ndarray< int,1 > > _6027,std::shared_ptr< monty::ndarray< double,1 > > _6028){
  _checked_ptr_1<int> _ptr__6026(_6026 ? _6026->raw() : nullptr, _6026 ? _6026->size(0) : 0);
  _checked_ptr_1<int> _ptr__6027(_6027 ? _6027->raw() : nullptr, _6027 ? _6027->size(0) : 0);
  _checked_ptr_1<double> _ptr__6028(_6028 ? _6028->raw() : nullptr, _6028 ? _6028->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _9691;
  bool _9692 = (NULL != _6028.get());
  if (_9692)
  {
    _9691 = _6028;
  }
  else
  {
    _9691 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _6029 = _9691;
  _checked_ptr_1<double> _ptr__6029(_6029 ? _6029->raw() : nullptr,_6029 ? _6029->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9693;
  bool _9694 = (NULL != _6027.get());
  if (_9694)
  {
    _9693 = _6027;
  }
  else
  {
    _9693 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6030 = _9693;
  _checked_ptr_1<int> _ptr__6030(_6030 ? _6030->raw() : nullptr,_6030 ? _6030->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9695;
  bool _9696 = (NULL != _6026.get());
  if (_9696)
  {
    _9695 = _6026;
  }
  else
  {
    _9695 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6031 = _9695;
  _checked_ptr_1<int> _ptr__6031(_6031 ? _6031->raw() : nullptr,_6031 ? _6031->size(0) : 0);
  long long _6032 = (long long)((_6031)->size(0));
  if ((((long long)((_6030)->size(0)) != _6032) || ((long long)((_6029)->size(0)) != _6032)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6024,_6025,_6031,_6030,_6029,_6032)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
int mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns(){
  return dimj;
}
int mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows(){
  return dimi;
}
void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _6038) : RuntimeException(_6038)  {
  }
mosek::fusion::FatalError::FatalError  ( const std::string &  _6039) : RuntimeException(_6039)  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _6040) : RuntimeException(_6040.toString())  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _6041) : RuntimeException(_6041)  {
  }
mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _6042) : mosek::fusion::FusionRuntimeException(_6042)  {
  }
mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))  {
  }
mosek::fusion::SolutionError::SolutionError  ( const std::string &  _6043) : mosek::fusion::FusionException(_6043)  {
  }
mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))  {
  }
mosek::fusion::SliceError::SliceError  ( const std::string &  _6044) : mosek::fusion::FusionRuntimeException(_6044)  {
  }
mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _6045) : mosek::fusion::FusionRuntimeException(_6045)  {
  }
mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _6046) : mosek::fusion::FusionRuntimeException(_6046)  {
  }
mosek::fusion::NameError::NameError  ( const std::string &  _6047) : mosek::fusion::FusionRuntimeException(_6047)  {
  }
mosek::fusion::ModelError::ModelError  ( const std::string &  _6048) : mosek::fusion::FusionRuntimeException(_6048)  {
  }
mosek::fusion::MatrixError::MatrixError  ( const std::string &  _6049) : mosek::fusion::FusionRuntimeException(_6049)  {
  }
mosek::fusion::DimensionError::DimensionError  ( const std::string &  _6050) : mosek::fusion::FusionRuntimeException(_6050)  {
  }
mosek::fusion::LengthError::LengthError  ( const std::string &  _6051) : mosek::fusion::FusionRuntimeException(_6051)  {
  }
mosek::fusion::RangeError::RangeError  ( const std::string &  _6052) : mosek::fusion::FusionRuntimeException(_6052)  {
  }
mosek::fusion::IndexError::IndexError  ( const std::string &  _6053) : mosek::fusion::FusionRuntimeException(_6053)  {
  }
mosek::fusion::DomainError::DomainError  ( const std::string &  _6054) : mosek::fusion::FusionRuntimeException(_6054)  {
  }
mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _6055) : mosek::fusion::FusionRuntimeException(_6055)  {
  }
mosek::fusion::ParameterError::ParameterError  ( const std::string &  _6056) : mosek::fusion::FusionRuntimeException(_6056)  {
  }
mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _6057) : mosek::fusion::FusionRuntimeException(_6057)  {
  }
mosek::fusion::IOError::IOError  ( const std::string &  _6058) : mosek::fusion::FusionRuntimeException(_6058)  {
  }
mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _6059) : RuntimeException(_6059)  {
    msg = _6059;
  }
std::string mosek::fusion::FusionRuntimeException::toString(){
  return msg;
}
mosek::fusion::FusionException::FusionException  ( const std::string &  _6060) : Exception(_6060)  {
    msg = _6060;
  }
std::string mosek::fusion::FusionException::toString(){
  return msg;
}
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedBlocks::p_LinkedBlocks  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (){ return new mosek::fusion::LinkedBlocks(); }mosek::fusion::LinkedBlocks::LinkedBlocks  () :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedBlocks::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (int _6061){ return new mosek::fusion::LinkedBlocks(_6061); }mosek::fusion::LinkedBlocks::LinkedBlocks  (int _6061) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_6061); }void mosek::fusion::p_LinkedBlocks::_initialize  (int _6061){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_6061);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _6062){ return new mosek::fusion::LinkedBlocks(_6062); }mosek::fusion::LinkedBlocks::LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _6062) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_6062); }void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _6062){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_6062)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_6062)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_6062)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_6062)->bfirst);
  }
}void mosek::fusion::LinkedBlocks :: free(int _6063) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_6063); }void mosek::fusion::p_LinkedBlocks::free(int _6063){
  int _6064 = ((*bfirst)(_6063));
  ints->free(_6063,((*bsize)(_6063)));
  ((*bsize)(_6063)) = (-(int)1);
  ((*bfirst)(_6063)) = (-(int)1);
  blocks->free(_6064,(int)1);
}
int mosek::fusion::LinkedBlocks :: alloc(int _6065) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_6065); }int mosek::fusion::p_LinkedBlocks::alloc(int _6065){
  int _9697;
  bool _9698 = (_6065 > (int)0);
  if (_9698)
  {
    _9697 = ints->alloc(_6065);
  }
  else
  {
    _9697 = (-(int)1);
  }
  int _6066 = _9697;
  int _6067 = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _6068 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__6068(_6068 ? _6068->raw() : nullptr,_6068 ? _6068->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6069 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__6069(_6069 ? _6069->raw() : nullptr,_6069 ? _6069->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_6068,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_6069,(int)0,(int)((bfirst)->size(0)));
      bsize = _6068;
      bfirst = _6069;
    }
  }
  {}
  ((*bfirst)(_6067)) = _6066;
  ((*bsize)(_6067)) = _6065;
  return _6067;
}
int mosek::fusion::LinkedBlocks :: maxidx(int _6070) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_6070); }int mosek::fusion::p_LinkedBlocks::maxidx(int _6070){
  return ints->maxidx(((*bfirst)(_6070)),((*bsize)(_6070)));
}
void mosek::fusion::LinkedBlocks :: get(int _6071,std::shared_ptr< monty::ndarray< int,1 > > _6072,int _6073) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_6071,_6072,_6073); }void mosek::fusion::p_LinkedBlocks::get(int _6071,std::shared_ptr< monty::ndarray< int,1 > > _6072,int _6073){
  _checked_ptr_1<int> _ptr__6072(_6072 ? _6072->raw() : nullptr, _6072 ? _6072->size(0) : 0);
  ints->get(((*bfirst)(_6071)),((*bsize)(_6071)),_6072,_6073);
}
int mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }int mosek::fusion::p_LinkedBlocks::numblocks(){
  return (int)((bsize)->size(0));
}
int mosek::fusion::LinkedBlocks :: blocksize(int _6074) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_6074); }int mosek::fusion::p_LinkedBlocks::blocksize(int _6074){
  return ((*bsize)(_6074));
}
int mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedBlocks::capacity(){
  return ints->capacity();
}
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedBlocks::validate(){
  return (ints->validate() && blocks->validate());
}
void mosek::fusion::p_LinkedBlocks::destroy(){bfirst.reset();bsize.reset();blocks.reset();ints.reset();}void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedInts::p_LinkedInts  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (int _6075){ return new mosek::fusion::LinkedInts(_6075); }mosek::fusion::LinkedInts::LinkedInts  (int _6075) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_6075); }void mosek::fusion::p_LinkedInts::_initialize  (int _6075){monty::rc_reserve __reserve_this(_pubthis);   {
    int _9699;
    bool _9700 = (_6075 > (int)0);
    if (_9700)
    {
      _9699 = _6075;
    }
    else
    {
      _9699 = (int)128;
    }
    int _6076 = _9699;
    next = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6076)));
    prev = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6076)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_6076 - (int)1);
    int _9701 = (int)1;
    int _9702 = _6076;
    for (int _6077 = _9701; _6077 < _9702; ++_6077)
    {
      {
        ((*prev)(_6077)) = (_6077 - (int)1);
        ((*next)((_6077 - (int)1))) = _6077;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_6076 - (int)1))) = (-(int)1);
    nfree = _6076;
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (){ return new mosek::fusion::LinkedInts(); }mosek::fusion::LinkedInts::LinkedInts  () :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedInts::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6078){ return new mosek::fusion::LinkedInts(_6078); }mosek::fusion::LinkedInts::LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6078) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_6078); }void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6078){monty::rc_reserve __reserve_this(_pubthis);   {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_6078)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_6078)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_6078)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_6078)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_6078)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_6078)->nfree;
  }
}void mosek::fusion::LinkedInts :: free(int _6079,int _6080) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_6079,_6080); }void mosek::fusion::p_LinkedInts::free(int _6079,int _6080){
  int _6081 = _6079;
  int _6082 = _6081;
  int _9703 = (int)0;
  int _9704 = (_6080 - (int)1);
  for (int _6083 = _9703; _6083 < _9704; ++_6083)
  {
    {
      _6082 = ((*next)(_6082));
    }
  }
  int _6084 = ((*prev)(_6081));
  int _6085 = ((*next)(_6082));
  if ((_6084 >= (int)0))
  {
    {
      ((*next)(_6084)) = _6085;
    }
  }
  {}
  if ((_6085 >= (int)0))
  {
    {
      ((*prev)(_6085)) = _6084;
    }
  }
  {}
  ((*prev)(_6081)) = (-(int)1);
  ((*next)(_6082)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _6082;
    }
  }
  {}
  first_free = _6081;
  nfree += _6080;
}
int mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }int mosek::fusion::p_LinkedInts::alloc(){
  return allocblock((int)1);
}
int mosek::fusion::LinkedInts :: alloc(int _6086) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_6086); }int mosek::fusion::p_LinkedInts::alloc(int _6086){
  return allocblock(_6086);
}
void mosek::fusion::LinkedInts :: alloc(int _6087,std::shared_ptr< monty::ndarray< int,1 > > _6088,int _6089) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_6087,_6088,_6089); }void mosek::fusion::p_LinkedInts::alloc(int _6087,std::shared_ptr< monty::ndarray< int,1 > > _6088,int _6089){
  _checked_ptr_1<int> _ptr__6088(_6088 ? _6088->raw() : nullptr, _6088 ? _6088->size(0) : 0);
  int _6090 = allocblock(_6087);
  int _9705 = (int)0;
  int _9706 = _6087;
  for (int _6091 = _9705; _6091 < _9706; ++_6091)
  {
    {
      _ptr__6088[safe_add( _6091,_6089 )] = _6090;
      _6090 = ((*next)(_6090));
    }
  }
}
void mosek::fusion::LinkedInts :: get(int _6092,int _6093,std::shared_ptr< monty::ndarray< int,1 > > _6094,int _6095) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_6092,_6093,_6094,_6095); }void mosek::fusion::p_LinkedInts::get(int _6092,int _6093,std::shared_ptr< monty::ndarray< int,1 > > _6094,int _6095){
  _checked_ptr_1<int> _ptr__6094(_6094 ? _6094->raw() : nullptr, _6094 ? _6094->size(0) : 0);
  int _6096 = _6092;
  int _9707 = (int)0;
  int _9708 = _6093;
  for (int _6097 = _9707; _6097 < _9708; ++_6097)
  {
    {
      _ptr__6094[safe_add( _6097,_6095 )] = _6096;
      _6096 = ((*next)(_6096));
    }
  }
}
int mosek::fusion::LinkedInts :: maxidx(int _6098,int _6099) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_6098,_6099); }int mosek::fusion::p_LinkedInts::maxidx(int _6098,int _6099){
  int _6100 = _6098;
  int _6101 = _6098;
  int _9709 = (int)1;
  int _9710 = _6099;
  for (int _6102 = _9709; _6102 < _9710; ++_6102)
  {
    {
      _6101 = ((*next)(_6101));
      if ((_6100 < _6101))
      {
        {
          _6100 = _6101;
        }
      }
      {}
    }
  }
  return _6100;
}
int mosek::fusion::p_LinkedInts::allocblock(int _6103){
  int _6104 = (int)((next)->size(0));
  if ((nfree < _6103))
  {
    {
      int _6105 = (_6103 - nfree);
      if ((_6105 < _6104))
      {
        {
          _6105 = _6104;
        }
      }
      {}
      recap(safe_add( _6105,_6104 ));
    }
  }
  {}
  int _6106 = first_free;
  int _6107 = _6106;
  int _9711 = (int)0;
  int _9712 = (_6103 - (int)1);
  for (int _6108 = _9711; _6108 < _9712; ++_6108)
  {
    {
      _6107 = ((*next)(_6107));
    }
  }
  first_free = ((*next)(_6107));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_6107)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _6107;
    }
  }
  {}
  first_used = _6106;
  nfree -= _6103;
  return _6106;
}
void mosek::fusion::p_LinkedInts::recap(int _6109){
  int _6110 = (int)((next)->size(0));
  if ((_6109 > _6110))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_6109);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_6109);
      int _9713 = _6110;
      int _9714 = (_6109 - (int)1);
      for (int _6111 = _9713; _6111 < _9714; ++_6111)
      {
        {
          ((*next)(_6111)) = safe_add( _6111,(int)1 );
          ((*prev)(safe_add( _6111,(int)1 ))) = _6111;
        }
      }
      ((*next)((_6109 - (int)1))) = (-(int)1);
      ((*prev)(_6110)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _6110;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _6110;
        }
      }
      last_free = (_6109 - (int)1);
      nfree += (_6109 - _6110);
    }
  }
  {}
}
int mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedInts::capacity(){
  return (int)((next)->size(0));
}
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedInts::validate(){
  std::shared_ptr< monty::ndarray< bool,1 > > _6112 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int _6113 = first_used;
  while ( (_6113 >= (int)0) )
  {
    {
      ((*_6112)(_6113)) = true;
      _6113 = ((*next)(_6113));
      if (((_6113 >= (int)0) && ((*_6112)(_6113))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _6113 = first_free;
  int _6114 = (int)0;
  while ( (_6113 >= (int)0) )
  {
    {
      ++ _6114;
      ((*_6112)(_6113)) = true;
      _6113 = ((*next)(_6113));
      if (((_6113 >= (int)0) && ((*_6112)(_6113))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_6114 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int _9715 = (int)0;
  int _9716 = (int)((_6112)->size(0));
  for (int _6115 = _9715; _6115 < _9716; ++_6115)
  {
    {
      if ((!((*_6112)(_6113))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int _9717 = (int)0;
  int _9718 = (int)((_6112)->size(0));
  for (int _6116 = _9717; _6116 < _9718; ++_6116)
  {
    {
      ((*_6112)(_6116)) = false;
    }
  }
  _6113 = last_free;
  int _6117 = (int)0;
  while ( (_6113 >= (int)0) )
  {
    {
      ++ _6117;
      ((*_6112)(_6113)) = true;
      _6113 = ((*prev)(_6113));
      if (((_6113 >= (int)0) && ((*_6112)(_6113))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_6117 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinkedInts::destroy(){prev.reset();next.reset();}void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6118,    const std::string & _6119,    double _6120) { mosek::fusion::p_Parameters::setParameter(_6118,_6119,_6120); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6118,const std::string & _6119,double _6120){
  if (false)
  {
    {
    }
  }
  else if((_6119 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_6119 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_6119 == std::string ("numThreads")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6121 = _6120;
          if (((int)0 <= _6121))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6121);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_6119 == std::string ("mtSpincount")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6122 = _6120;
          if ((((int)0 <= _6122) && (_6122 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6122);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_6119 == std::string ("biMaxIterations")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6123 = _6120;
          if (((int)0 <= _6123))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6123);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6124 = _6120;
          if (((int)0 <= _6124))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6124);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logCutSecondOpt")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6125 = _6120;
          if (((int)0 <= _6125))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6125);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logResponse")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6126 = _6120;
          if (((int)0 <= _6126))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6126);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_6119 == std::string ("logBi")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6127 = _6120;
          if (((int)0 <= _6127))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6127);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logBiFreq")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6128 = _6120;
          if (((int)0 <= _6128))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6128);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_6119 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_6119 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_6119 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_6119 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_6119 == std::string ("logIntpnt")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6129 = _6120;
          if (((int)0 <= _6129))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6129);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntMaxIterations")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6130 = _6120;
          if (((int)0 <= _6130))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6130);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntOffColTrh")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6131 = _6120;
          if (((int)0 <= _6131))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6131);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_6119 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6132 = _6120;
          if (((int)0 <= _6132))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6132);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_6119 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_6119 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_6119 == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6133 = _6120;
          if (((-(int)1) <= _6133))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6133);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_6119 == std::string ("presolveLevel")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6134 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6134);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logPresolve")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6135 = _6120;
          if (((int)0 <= _6135))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6135);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_6119 == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6136 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6136);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6137 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6137);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6138 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6138);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("simPrimalCrash")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6139 = _6120;
          if (((int)0 <= _6139))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6139);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logSim")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6140 = _6120;
          if (((int)0 <= _6140))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6140);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logSimMinor")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6141 = _6120;
          if (((int)0 <= _6141))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6141);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logSimFreq")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6142 = _6120;
          if (((int)0 <= _6142))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6142);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6143 = _6120;
          if ((((int)0 <= _6143) && (_6143 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6143);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_6119 == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6144 = _6120;
          if ((((int)0 <= _6144) && (_6144 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6144);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_6119 == std::string ("simMaxIterations")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6145 = _6120;
          if (((int)0 <= _6145))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6145);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_6119 == std::string ("simRefactorFreq")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6146 = _6120;
          if (((int)0 <= _6146))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6146);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("simSeed")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6147 = _6120;
          if ((((int)0 <= _6147) && (_6147 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6147);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_6119 == std::string ("logMio")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6148 = _6120;
          if (((int)0 <= _6148))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6148);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logMioFreq")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6149 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6149);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6150 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6150);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6151 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6151);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6152 = _6120;
          if (((int)0 <= _6152))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6152);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6153 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6153);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_6119 == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6154 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6154);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioProbingLevel")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6155 = _6120;
          if ((((-(int)1) <= _6155) && (_6155 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6155);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6156 = _6120;
          if ((((-(int)1) <= _6156) && (_6156 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6156);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6157 = _6120;
          if ((((-(int)1) <= _6157) && (_6157 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6157);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_6119 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_6119 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_6119 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_6119 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_6119 == std::string ("mioSeed")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6158 = _6120;
          if (((int)0 <= _6158))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6158);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_6119 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_6119 == std::string ("writeLpLineWidth")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6159 = _6120;
          if (((int)40 <= _6159))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6159);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("writeLpTermsPerLine")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6160 = _6120;
          if (((int)0 <= _6160))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6160);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_6119 == std::string ("logInfeasAna")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6161 = _6120;
          if (((int)0 <= _6161))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6161);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_6119 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_6119 == std::string ("licensePauseTime")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6162 = _6120;
          if ((((int)0 <= _6162) && (_6162 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6162);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_6119 == std::string ("log")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6163 = _6120;
          if (((int)0 <= _6163))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6163);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logExpand")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6164 = _6120;
          if (((int)0 <= _6164))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6164);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logFile")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6165 = _6120;
          if (((int)0 <= _6165))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6165);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("logOrder")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6166 = _6120;
          if (((int)0 <= _6166))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6166);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_6119 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_6119 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6167 = _6120;
          if ((((int)0 <= _6167) && (_6167 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6167);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6168 = _6120;
          if ((((int)0 <= _6168) && (_6168 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6168);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6169 = _6120;
          if (((int)0 <= _6169))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6169);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_6119 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_6119 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_6119 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_6119 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_6119 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_6119 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_6119 == std::string ("simDualCrash")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6170 = _6120;
          if (((int)0 <= _6170))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6170);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_6119 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6171 = _6120;
          if ((((-(int)1) <= _6171) && (_6171 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6171);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_6119 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_6119 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_6119 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_6119 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_6119 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6172 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6172);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6173 = _6120;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6173);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_6119 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_6119 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_6119 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_6119 == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6174 = _6120;
          if (((-(int)1) <= _6174))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6174);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_6120 - (int)_6120) == 0.0))
      {
        {
          double _6175 = _6120;
          if ((((-(int)1) <= _6175) && (_6175 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6175);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("optimizerMaxTime")))
  {
    {
      double _6176 = _6120;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6176);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("lowerObjCut")))
  {
    {
      double _6177 = _6120;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6177);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("upperObjCut")))
  {
    {
      double _6178 = _6120;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6178);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _6179 = _6120;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6179);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _6180 = _6120;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6180);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolRelGap")))
  {
    {
      double _6181 = _6120;
      if ((1.000000e-14 <= _6181))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6181);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolStepSize")))
  {
    {
      double _6182 = _6120;
      if (((0.000000e+00 <= _6182) && (_6182 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6182);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("simLuTolRelPiv")))
  {
    {
      double _6183 = _6120;
      if (((1.000000e-06 <= _6183) && (_6183 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6183);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolRelStep")))
  {
    {
      double _6184 = _6120;
      if (((1.000000e-04 <= _6184) && (_6184 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6184);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolPath")))
  {
    {
      double _6185 = _6120;
      if (((0.000000e+00 <= _6185) && (_6185 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6185);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolPfeas")))
  {
    {
      double _6186 = _6120;
      if (((0.000000e+00 <= _6186) && (_6186 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6186);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolDfeas")))
  {
    {
      double _6187 = _6120;
      if (((0.000000e+00 <= _6187) && (_6187 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6187);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolMuRed")))
  {
    {
      double _6188 = _6120;
      if (((0.000000e+00 <= _6188) && (_6188 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6188);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolInfeas")))
  {
    {
      double _6189 = _6120;
      if (((0.000000e+00 <= _6189) && (_6189 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6189);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _6190 = _6120;
      if (((0.000000e+00 <= _6190) && (_6190 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6190);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _6191 = _6120;
      if (((0.000000e+00 <= _6191) && (_6191 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6191);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _6192 = _6120;
      if (((0.000000e+00 <= _6192) && (_6192 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6192);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _6193 = _6120;
      if (((0.000000e+00 <= _6193) && (_6193 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6193);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _6194 = _6120;
      if ((1.000000e+00 <= _6194))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6194);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _6195 = _6120;
      if (((0.000000e+00 <= _6195) && (_6195 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6195);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolPsafe")))
  {
    {
      double _6196 = _6120;
      if ((1.000000e-04 <= _6196))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6196);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("intpntTolDsafe")))
  {
    {
      double _6197 = _6120;
      if ((1.000000e-04 <= _6197))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6197);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioMaxTime")))
  {
    {
      double _6198 = _6120;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6198);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioRelGapConst")))
  {
    {
      double _6199 = _6120;
      if ((1.000000e-15 <= _6199))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6199);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioTolRelGap")))
  {
    {
      double _6200 = _6120;
      if ((0.000000e+00 <= _6200))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6200);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioTolAbsGap")))
  {
    {
      double _6201 = _6120;
      if ((0.000000e+00 <= _6201))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6201);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _6202 = _6120;
      if ((1.000000e-09 <= _6202))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6202);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("basisTolX")))
  {
    {
      double _6203 = _6120;
      if ((1.000000e-09 <= _6203))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6203);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("basisTolS")))
  {
    {
      double _6204 = _6120;
      if ((1.000000e-09 <= _6204))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6204);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("basisRelTolS")))
  {
    {
      double _6205 = _6120;
      if ((0.000000e+00 <= _6205))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6205);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("presolveTolX")))
  {
    {
      double _6206 = _6120;
      if ((0.000000e+00 <= _6206))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6206);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("presolveTolS")))
  {
    {
      double _6207 = _6120;
      if ((0.000000e+00 <= _6207))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6207);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("presolveTolAij")))
  {
    {
      double _6208 = _6120;
      if ((1.000000e-15 <= _6208))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6208);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _6209 = _6120;
      if ((0.000000e+00 <= _6209))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6209);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("presolveTolRelLindep")))
  {
    {
      double _6210 = _6120;
      if ((0.000000e+00 <= _6210))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6210);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _6211 = _6120;
      if ((1.000000e-12 <= _6211))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6211);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioTolFeas")))
  {
    {
      double _6212 = _6120;
      if (((1.000000e-09 <= _6212) && (_6212 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6212);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6119 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _6213 = _6120;
      if (((0.000000e+00 <= _6213) && (_6213 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6118.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6213);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_6119 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_6119 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_6119 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_6119 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_6119 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_6119 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6214,    const std::string & _6215,    int _6216) { mosek::fusion::p_Parameters::setParameter(_6214,_6215,_6216); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6214,const std::string & _6215,int _6216){
  if (false)
  {
    {
    }
  }
  else if((_6215 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_6215 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_6215 == std::string ("numThreads")))
  {
    {
      int _6217 = _6216;
      if (((int)0 <= _6217))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6217);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_6215 == std::string ("mtSpincount")))
  {
    {
      int _6218 = _6216;
      if ((((int)0 <= _6218) && (_6218 <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6218);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_6215 == std::string ("biMaxIterations")))
  {
    {
      int _6219 = _6216;
      if (((int)0 <= _6219))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6219);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int _6220 = _6216;
      if (((int)0 <= _6220))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6220);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logCutSecondOpt")))
  {
    {
      int _6221 = _6216;
      if (((int)0 <= _6221))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6221);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logResponse")))
  {
    {
      int _6222 = _6216;
      if (((int)0 <= _6222))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6222);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_6215 == std::string ("logBi")))
  {
    {
      int _6223 = _6216;
      if (((int)0 <= _6223))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6223);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logBiFreq")))
  {
    {
      int _6224 = _6216;
      if (((int)0 <= _6224))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6224);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_6215 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_6215 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_6215 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_6215 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_6215 == std::string ("logIntpnt")))
  {
    {
      int _6225 = _6216;
      if (((int)0 <= _6225))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6225);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntMaxIterations")))
  {
    {
      int _6226 = _6216;
      if (((int)0 <= _6226))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6226);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntOffColTrh")))
  {
    {
      int _6227 = _6216;
      if (((int)0 <= _6227))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6227);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_6215 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int _6228 = _6216;
      if (((int)0 <= _6228))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6228);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_6215 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_6215 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_6215 == std::string ("intpntMaxNumCor")))
  {
    {
      int _6229 = _6216;
      if (((-(int)1) <= _6229))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6229);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_6215 == std::string ("presolveLevel")))
  {
    {
      int _6230 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6230);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logPresolve")))
  {
    {
      int _6231 = _6216;
      if (((int)0 <= _6231))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6231);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_6215 == std::string ("presolveMaxNumPass")))
  {
    {
      int _6232 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6232);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int _6233 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6233);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int _6234 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6234);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("simPrimalCrash")))
  {
    {
      int _6235 = _6216;
      if (((int)0 <= _6235))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6235);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logSim")))
  {
    {
      int _6236 = _6216;
      if (((int)0 <= _6236))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6236);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logSimMinor")))
  {
    {
      int _6237 = _6216;
      if (((int)0 <= _6237))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6237);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logSimFreq")))
  {
    {
      int _6238 = _6216;
      if (((int)0 <= _6238))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6238);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("simPrimalRestrictSelection")))
  {
    {
      int _6239 = _6216;
      if ((((int)0 <= _6239) && (_6239 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6239);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_6215 == std::string ("simDualRestrictSelection")))
  {
    {
      int _6240 = _6216;
      if ((((int)0 <= _6240) && (_6240 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6240);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_6215 == std::string ("simMaxIterations")))
  {
    {
      int _6241 = _6216;
      if (((int)0 <= _6241))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6241);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_6215 == std::string ("simRefactorFreq")))
  {
    {
      int _6242 = _6216;
      if (((int)0 <= _6242))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6242);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("simSeed")))
  {
    {
      int _6243 = _6216;
      if ((((int)0 <= _6243) && (_6243 <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6243);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_6215 == std::string ("logMio")))
  {
    {
      int _6244 = _6216;
      if (((int)0 <= _6244))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6244);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logMioFreq")))
  {
    {
      int _6245 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6245);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioMaxNumRelaxs")))
  {
    {
      int _6246 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6246);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioMaxNumBranches")))
  {
    {
      int _6247 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6247);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int _6248 = _6216;
      if (((int)0 <= _6248))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6248);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioMaxNumSolutions")))
  {
    {
      int _6249 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6249);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_6215 == std::string ("mioHeuristicLevel")))
  {
    {
      int _6250 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6250);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioProbingLevel")))
  {
    {
      int _6251 = _6216;
      if ((((-(int)1) <= _6251) && (_6251 <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6251);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioCutSelectionLevel")))
  {
    {
      int _6252 = _6216;
      if ((((-(int)1) <= _6252) && (_6252 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6252);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioVbDetectionLevel")))
  {
    {
      int _6253 = _6216;
      if ((((-(int)1) <= _6253) && (_6253 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6253);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_6215 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_6215 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_6215 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_6215 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_6215 == std::string ("mioSeed")))
  {
    {
      int _6254 = _6216;
      if (((int)0 <= _6254))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6254);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_6215 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_6215 == std::string ("writeLpLineWidth")))
  {
    {
      int _6255 = _6216;
      if (((int)40 <= _6255))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6255);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("writeLpTermsPerLine")))
  {
    {
      int _6256 = _6216;
      if (((int)0 <= _6256))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6256);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_6215 == std::string ("logInfeasAna")))
  {
    {
      int _6257 = _6216;
      if (((int)0 <= _6257))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6257);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_6215 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_6215 == std::string ("licensePauseTime")))
  {
    {
      int _6258 = _6216;
      if ((((int)0 <= _6258) && (_6258 <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6258);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_6215 == std::string ("log")))
  {
    {
      int _6259 = _6216;
      if (((int)0 <= _6259))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6259);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logExpand")))
  {
    {
      int _6260 = _6216;
      if (((int)0 <= _6260))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6260);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logFile")))
  {
    {
      int _6261 = _6216;
      if (((int)0 <= _6261))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6261);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("logOrder")))
  {
    {
      int _6262 = _6216;
      if (((int)0 <= _6262))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6262);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_6215 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_6215 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int _6263 = _6216;
      if ((((int)0 <= _6263) && (_6263 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6263);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("simDualPhaseoneMethod")))
  {
    {
      int _6264 = _6216;
      if ((((int)0 <= _6264) && (_6264 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6264);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("simMaxNumSetbacks")))
  {
    {
      int _6265 = _6216;
      if (((int)0 <= _6265))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6265);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_6215 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_6215 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_6215 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_6215 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_6215 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_6215 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_6215 == std::string ("simDualCrash")))
  {
    {
      int _6266 = _6216;
      if (((int)0 <= _6266))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6266);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_6215 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int _6267 = _6216;
      if ((((-(int)1) <= _6267) && (_6267 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6267);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_6215 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_6215 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_6215 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_6215 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_6215 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int _6268 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6268);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int _6269 = _6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6269);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_6215 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_6215 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_6215 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_6215 == std::string ("mioRinsMaxNodes")))
  {
    {
      int _6270 = _6216;
      if (((-(int)1) <= _6270))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6270);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioFeaspumpLevel")))
  {
    {
      int _6271 = _6216;
      if ((((-(int)1) <= _6271) && (_6271 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6271);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("optimizerMaxTime")))
  {
    {
      double _6272 = (double)_6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6272);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("lowerObjCut")))
  {
    {
      double _6273 = (double)_6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6273);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("upperObjCut")))
  {
    {
      double _6274 = (double)_6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6274);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _6275 = (double)_6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6275);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _6276 = (double)_6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6276);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolRelGap")))
  {
    {
      double _6277 = (double)_6216;
      if ((1.000000e-14 <= _6277))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6277);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolStepSize")))
  {
    {
      double _6278 = (double)_6216;
      if (((0.000000e+00 <= _6278) && (_6278 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6278);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("simLuTolRelPiv")))
  {
    {
      double _6279 = (double)_6216;
      if (((1.000000e-06 <= _6279) && (_6279 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6279);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolRelStep")))
  {
    {
      double _6280 = (double)_6216;
      if (((1.000000e-04 <= _6280) && (_6280 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6280);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolPath")))
  {
    {
      double _6281 = (double)_6216;
      if (((0.000000e+00 <= _6281) && (_6281 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6281);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolPfeas")))
  {
    {
      double _6282 = (double)_6216;
      if (((0.000000e+00 <= _6282) && (_6282 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6282);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolDfeas")))
  {
    {
      double _6283 = (double)_6216;
      if (((0.000000e+00 <= _6283) && (_6283 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6283);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolMuRed")))
  {
    {
      double _6284 = (double)_6216;
      if (((0.000000e+00 <= _6284) && (_6284 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6284);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolInfeas")))
  {
    {
      double _6285 = (double)_6216;
      if (((0.000000e+00 <= _6285) && (_6285 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6285);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _6286 = (double)_6216;
      if (((0.000000e+00 <= _6286) && (_6286 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6286);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _6287 = (double)_6216;
      if (((0.000000e+00 <= _6287) && (_6287 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6287);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _6288 = (double)_6216;
      if (((0.000000e+00 <= _6288) && (_6288 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6288);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _6289 = (double)_6216;
      if (((0.000000e+00 <= _6289) && (_6289 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6289);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _6290 = (double)_6216;
      if ((1.000000e+00 <= _6290))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6290);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _6291 = (double)_6216;
      if (((0.000000e+00 <= _6291) && (_6291 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6291);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolPsafe")))
  {
    {
      double _6292 = (double)_6216;
      if ((1.000000e-04 <= _6292))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6292);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("intpntTolDsafe")))
  {
    {
      double _6293 = (double)_6216;
      if ((1.000000e-04 <= _6293))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6293);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioMaxTime")))
  {
    {
      double _6294 = (double)_6216;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6294);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioRelGapConst")))
  {
    {
      double _6295 = (double)_6216;
      if ((1.000000e-15 <= _6295))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6295);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioTolRelGap")))
  {
    {
      double _6296 = (double)_6216;
      if ((0.000000e+00 <= _6296))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6296);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioTolAbsGap")))
  {
    {
      double _6297 = (double)_6216;
      if ((0.000000e+00 <= _6297))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6297);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _6298 = (double)_6216;
      if ((1.000000e-09 <= _6298))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6298);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("basisTolX")))
  {
    {
      double _6299 = (double)_6216;
      if ((1.000000e-09 <= _6299))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6299);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("basisTolS")))
  {
    {
      double _6300 = (double)_6216;
      if ((1.000000e-09 <= _6300))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6300);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("basisRelTolS")))
  {
    {
      double _6301 = (double)_6216;
      if ((0.000000e+00 <= _6301))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6301);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("presolveTolX")))
  {
    {
      double _6302 = (double)_6216;
      if ((0.000000e+00 <= _6302))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6302);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("presolveTolS")))
  {
    {
      double _6303 = (double)_6216;
      if ((0.000000e+00 <= _6303))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6303);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("presolveTolAij")))
  {
    {
      double _6304 = (double)_6216;
      if ((1.000000e-15 <= _6304))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6304);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _6305 = (double)_6216;
      if ((0.000000e+00 <= _6305))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6305);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("presolveTolRelLindep")))
  {
    {
      double _6306 = (double)_6216;
      if ((0.000000e+00 <= _6306))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6306);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _6307 = (double)_6216;
      if ((1.000000e-12 <= _6307))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6307);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioTolFeas")))
  {
    {
      double _6308 = (double)_6216;
      if (((1.000000e-09 <= _6308) && (_6308 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6308);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6215 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _6309 = (double)_6216;
      if (((0.000000e+00 <= _6309) && (_6309 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6214.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6309);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_6215 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_6215 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_6215 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_6215 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_6215 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_6215 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6310,    const std::string & _6311,    const std::string & _6312) { mosek::fusion::p_Parameters::setParameter(_6310,_6311,_6312); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6310,const std::string & _6311,const std::string & _6312){
  if (false)
  {
    {
    }
  }
  {}
  if ((_6311 == std::string ("autoUpdateSolInfo")))
  {
    {
      int _6313 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6313 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_6313);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("removeUnusedSolutions")))
  {
    {
      int _6314 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6314 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_6314);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("numThreads")))
  {
    {
      try
      {
        {
          int _6316 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6316))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6316);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6315)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntMultiThread")))
  {
    {
      int _6317 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6317 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_6317);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mtSpincount")))
  {
    {
      try
      {
        {
          int _6319 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((int)0 <= _6319) && (_6319 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6319);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6318)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("optimizer")))
  {
    {
      int _6320 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6312);
      if ((_6320 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_6320);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("biMaxIterations")))
  {
    {
      try
      {
        {
          int _6322 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6322))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6322);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6321)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      try
      {
        {
          int _6324 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6324))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6324);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6323)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logCutSecondOpt")))
  {
    {
      try
      {
        {
          int _6326 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6326))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6326);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6325)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logResponse")))
  {
    {
      try
      {
        {
          int _6328 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6328))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6328);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6327)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logLocalInfo")))
  {
    {
      int _6329 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6329 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_6329);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("logBi")))
  {
    {
      try
      {
        {
          int _6331 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6331))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6331);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6330)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logBiFreq")))
  {
    {
      try
      {
        {
          int _6333 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6333))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6333);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6332)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("biCleanOptimizer")))
  {
    {
      int _6334 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6312);
      if ((_6334 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_6334);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("intpntStartingPoint")))
  {
    {
      int _6335 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_6312);
      if ((_6335 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_6335);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("intpntDiffStep")))
  {
    {
      int _6336 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6336 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_6336);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("intpntScaling")))
  {
    {
      int _6337 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6312);
      if ((_6337 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_6337);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("intpntSolveForm")))
  {
    {
      int _6338 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6312);
      if ((_6338 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_6338);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("logIntpnt")))
  {
    {
      try
      {
        {
          int _6340 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6340))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6340);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6339)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntMaxIterations")))
  {
    {
      try
      {
        {
          int _6342 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6342))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6342);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6341)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntOffColTrh")))
  {
    {
      try
      {
        {
          int _6344 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6344))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6344);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6343)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntOrderMethod")))
  {
    {
      int _6345 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_6312);
      if ((_6345 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_6345);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      try
      {
        {
          int _6347 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6347))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6347);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6346)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntBasis")))
  {
    {
      int _6348 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_6312);
      if ((_6348 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_6348);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("biIgnoreMaxIter")))
  {
    {
      int _6349 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6349 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_6349);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("biIgnoreNumError")))
  {
    {
      int _6350 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6350 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_6350);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("intpntMaxNumCor")))
  {
    {
      try
      {
        {
          int _6352 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((-(int)1) <= _6352))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6352);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6351)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveUse")))
  {
    {
      int _6353 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_6312);
      if ((_6353 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_6353);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("presolveLevel")))
  {
    {
      try
      {
        {
          int _6355 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6355);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6354)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logPresolve")))
  {
    {
      try
      {
        {
          int _6357 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6357))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6357);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6356)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveLindepUse")))
  {
    {
      int _6358 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6358 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_6358);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("presolveMaxNumPass")))
  {
    {
      try
      {
        {
          int _6360 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6360);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6359)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      try
      {
        {
          int _6362 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6362);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6361)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      try
      {
        {
          int _6364 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6364);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6363)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simPrimalCrash")))
  {
    {
      try
      {
        {
          int _6366 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6366))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6366);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6365)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logSim")))
  {
    {
      try
      {
        {
          int _6368 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6368))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6368);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6367)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logSimMinor")))
  {
    {
      try
      {
        {
          int _6370 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6370))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6370);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6369)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logSimFreq")))
  {
    {
      try
      {
        {
          int _6372 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6372))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6372);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6371)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simPrimalRestrictSelection")))
  {
    {
      try
      {
        {
          int _6374 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((int)0 <= _6374) && (_6374 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6374);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6373)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simPrimalSelection")))
  {
    {
      int _6375 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6312);
      if ((_6375 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_6375);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simDualRestrictSelection")))
  {
    {
      try
      {
        {
          int _6377 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((int)0 <= _6377) && (_6377 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6377);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6376)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simDualSelection")))
  {
    {
      int _6378 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6312);
      if ((_6378 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_6378);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simMaxIterations")))
  {
    {
      try
      {
        {
          int _6380 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6380))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6380);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6379)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simHotstartLu")))
  {
    {
      int _6381 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6381 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_6381);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simRefactorFreq")))
  {
    {
      try
      {
        {
          int _6383 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6383))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6383);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6382)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simSeed")))
  {
    {
      try
      {
        {
          int _6385 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((int)0 <= _6385) && (_6385 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6385);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6384)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioMode")))
  {
    {
      int _6386 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_6312);
      if ((_6386 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_6386);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("logMio")))
  {
    {
      try
      {
        {
          int _6388 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6388))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6388);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6387)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logMioFreq")))
  {
    {
      try
      {
        {
          int _6390 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6390);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6389)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioMaxNumRelaxs")))
  {
    {
      try
      {
        {
          int _6392 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6392);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6391)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioMaxNumBranches")))
  {
    {
      try
      {
        {
          int _6394 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6394);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6393)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      try
      {
        {
          int _6396 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6396))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6396);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6395)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioMaxNumSolutions")))
  {
    {
      try
      {
        {
          int _6398 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6398);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6397)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioNodeSelection")))
  {
    {
      int _6399 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_6312);
      if ((_6399 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_6399);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioHeuristicLevel")))
  {
    {
      try
      {
        {
          int _6401 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6401);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6400)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioProbingLevel")))
  {
    {
      try
      {
        {
          int _6403 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((-(int)1) <= _6403) && (_6403 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6403);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6402)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioCutSelectionLevel")))
  {
    {
      try
      {
        {
          int _6405 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((-(int)1) <= _6405) && (_6405 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6405);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6404)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioVbDetectionLevel")))
  {
    {
      try
      {
        {
          int _6407 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((-(int)1) <= _6407) && (_6407 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6407);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6406)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioBranchDir")))
  {
    {
      int _6408 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_6312);
      if ((_6408 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_6408);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioRootOptimizer")))
  {
    {
      int _6409 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6312);
      if ((_6409 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_6409);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioNodeOptimizer")))
  {
    {
      int _6410 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6312);
      if ((_6410 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_6410);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioPerspectiveReformulate")))
  {
    {
      int _6411 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6411 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_6411);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int _6412 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6412 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_6412);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioSeed")))
  {
    {
      try
      {
        {
          int _6414 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6414))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6414);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6413)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioConicOuterApproximation")))
  {
    {
      int _6415 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6415 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_6415);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("writeLpQuotedNames")))
  {
    {
      int _6416 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6416 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_6416);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("writeLpLineWidth")))
  {
    {
      try
      {
        {
          int _6418 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)40 <= _6418))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6418);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6417)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("writeLpTermsPerLine")))
  {
    {
      try
      {
        {
          int _6420 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6420))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6420);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6419)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("writeLpFullObj")))
  {
    {
      int _6421 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6421 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_6421);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("logInfeasAna")))
  {
    {
      try
      {
        {
          int _6423 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6423))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6423);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6422)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("licenseWait")))
  {
    {
      int _6424 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6424 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_6424);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int _6425 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6425 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_6425);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("licensePauseTime")))
  {
    {
      try
      {
        {
          int _6427 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((int)0 <= _6427) && (_6427 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6427);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6426)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("licenseDebug")))
  {
    {
      int _6428 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6428 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_6428);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("log")))
  {
    {
      try
      {
        {
          int _6430 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6430))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6430);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6429)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logExpand")))
  {
    {
      try
      {
        {
          int _6432 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6432))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6432);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6431)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logFile")))
  {
    {
      try
      {
        {
          int _6434 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6434))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6434);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6433)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("logOrder")))
  {
    {
      try
      {
        {
          int _6436 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6436))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6436);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6435)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simScaling")))
  {
    {
      int _6437 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6312);
      if ((_6437 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_6437);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simScalingMethod")))
  {
    {
      int _6438 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_6312);
      if ((_6438 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_6438);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _6440 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((int)0 <= _6440) && (_6440 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6440);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6439)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simDualPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _6442 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((int)0 <= _6442) && (_6442 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6442);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6441)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simMaxNumSetbacks")))
  {
    {
      try
      {
        {
          int _6444 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6444))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6444);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6443)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simHotstart")))
  {
    {
      int _6445 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_6312);
      if ((_6445 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_6445);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simBasisFactorUse")))
  {
    {
      int _6446 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6446 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_6446);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simDegen")))
  {
    {
      int _6447 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_6312);
      if ((_6447 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_6447);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simReformulation")))
  {
    {
      int _6448 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_6312);
      if ((_6448 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_6448);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simExploitDupvec")))
  {
    {
      int _6449 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_6312);
      if ((_6449 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_6449);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simSaveLu")))
  {
    {
      int _6450 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6450 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_6450);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simNonSingular")))
  {
    {
      int _6451 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6451 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_6451);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simDualCrash")))
  {
    {
      try
      {
        {
          int _6453 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((int)0 <= _6453))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6453);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6452)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("infeasPreferPrimal")))
  {
    {
      int _6454 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6454 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_6454);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      try
      {
        {
          int _6456 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((-(int)1) <= _6456) && (_6456 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6456);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6455)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioCutCmir")))
  {
    {
      int _6457 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6457 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_6457);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioCutClique")))
  {
    {
      int _6458 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6458 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_6458);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioCutImpliedBound")))
  {
    {
      int _6459 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6459 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_6459);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioCutKnapsackCover")))
  {
    {
      int _6460 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6460 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_6460);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioCutGmi")))
  {
    {
      int _6461 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6461 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_6461);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      try
      {
        {
          int _6463 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6463);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6462)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      try
      {
        {
          int _6465 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6465);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6464)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("cacheLicense")))
  {
    {
      int _6466 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6466 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_6466);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("intpntRegularizationUse")))
  {
    {
      int _6467 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6467 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_6467);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simSolveForm")))
  {
    {
      int _6468 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6312);
      if ((_6468 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_6468);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("simSwitchOptimizer")))
  {
    {
      int _6469 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6312);
      if ((_6469 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_6469);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("mioRinsMaxNodes")))
  {
    {
      try
      {
        {
          int _6471 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if (((-(int)1) <= _6471))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6471);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6470)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioFeaspumpLevel")))
  {
    {
      try
      {
        {
          int _6473 = ::mosek::fusion::Utils::Tools::toInt(_6312);
          if ((((-(int)1) <= _6473) && (_6473 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6473);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6472)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("optimizerMaxTime")))
  {
    {
      try
      {
        {
          double _6475 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6475);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6474)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("lowerObjCut")))
  {
    {
      try
      {
        {
          double _6477 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6477);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6476)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("upperObjCut")))
  {
    {
      try
      {
        {
          double _6479 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6479);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6478)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _6481 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6481);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6480)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _6483 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6483);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6482)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolRelGap")))
  {
    {
      try
      {
        {
          double _6485 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e-14 <= _6485))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6485);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6484)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolStepSize")))
  {
    {
      try
      {
        {
          double _6487 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6487) && (_6487 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6487);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6486)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simLuTolRelPiv")))
  {
    {
      try
      {
        {
          double _6489 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((1.000000e-06 <= _6489) && (_6489 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6489);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6488)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolRelStep")))
  {
    {
      try
      {
        {
          double _6491 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((1.000000e-04 <= _6491) && (_6491 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6491);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6490)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolPath")))
  {
    {
      try
      {
        {
          double _6493 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6493) && (_6493 <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6493);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6492)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolPfeas")))
  {
    {
      try
      {
        {
          double _6495 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6495) && (_6495 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6495);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6494)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolDfeas")))
  {
    {
      try
      {
        {
          double _6497 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6497) && (_6497 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6497);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6496)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolMuRed")))
  {
    {
      try
      {
        {
          double _6499 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6499) && (_6499 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6499);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6498)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolInfeas")))
  {
    {
      try
      {
        {
          double _6501 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6501) && (_6501 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6501);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6500)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntCoTolRelGap")))
  {
    {
      try
      {
        {
          double _6503 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6503) && (_6503 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6503);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6502)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntCoTolPfeas")))
  {
    {
      try
      {
        {
          double _6505 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6505) && (_6505 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6505);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6504)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntCoTolDfeas")))
  {
    {
      try
      {
        {
          double _6507 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6507) && (_6507 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6507);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6506)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntCoTolMuRed")))
  {
    {
      try
      {
        {
          double _6509 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6509) && (_6509 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6509);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6508)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntCoTolNearRel")))
  {
    {
      try
      {
        {
          double _6511 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e+00 <= _6511))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6511);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6510)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntCoTolInfeas")))
  {
    {
      try
      {
        {
          double _6513 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6513) && (_6513 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6513);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6512)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolPsafe")))
  {
    {
      try
      {
        {
          double _6515 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e-04 <= _6515))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6515);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6514)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("intpntTolDsafe")))
  {
    {
      try
      {
        {
          double _6517 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e-04 <= _6517))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6517);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6516)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioMaxTime")))
  {
    {
      try
      {
        {
          double _6519 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6519);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6518)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioRelGapConst")))
  {
    {
      try
      {
        {
          double _6521 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e-15 <= _6521))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6521);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6520)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioTolRelGap")))
  {
    {
      try
      {
        {
          double _6523 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((0.000000e+00 <= _6523))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6523);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6522)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioTolAbsGap")))
  {
    {
      try
      {
        {
          double _6525 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((0.000000e+00 <= _6525))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6525);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6524)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      try
      {
        {
          double _6527 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e-09 <= _6527))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6527);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6526)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("basisTolX")))
  {
    {
      try
      {
        {
          double _6529 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e-09 <= _6529))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6529);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6528)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("basisTolS")))
  {
    {
      try
      {
        {
          double _6531 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e-09 <= _6531))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6531);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6530)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("basisRelTolS")))
  {
    {
      try
      {
        {
          double _6533 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((0.000000e+00 <= _6533))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6533);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6532)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveTolX")))
  {
    {
      try
      {
        {
          double _6535 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((0.000000e+00 <= _6535))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6535);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6534)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveTolS")))
  {
    {
      try
      {
        {
          double _6537 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((0.000000e+00 <= _6537))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6537);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6536)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveTolAij")))
  {
    {
      try
      {
        {
          double _6539 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e-15 <= _6539))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6539);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6538)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveTolAbsLindep")))
  {
    {
      try
      {
        {
          double _6541 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((0.000000e+00 <= _6541))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6541);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6540)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("presolveTolRelLindep")))
  {
    {
      try
      {
        {
          double _6543 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((0.000000e+00 <= _6543))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6543);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6542)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("simplexAbsTolPiv")))
  {
    {
      try
      {
        {
          double _6545 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if ((1.000000e-12 <= _6545))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6545);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6544)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioTolFeas")))
  {
    {
      try
      {
        {
          double _6547 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((1.000000e-09 <= _6547) && (_6547 <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6547);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6546)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      try
      {
        {
          double _6549 = ::mosek::fusion::Utils::Tools::toDouble(_6312);
          if (((0.000000e+00 <= _6549) && (_6549 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6549);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6548)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_6311 == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_6312);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_6312);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_6312);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_6312);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_6312);
      return;
    }
  }
  {}
  if ((_6311 == std::string ("remoteAccessToken")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6310.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_ACCESS_TOKEN"),_6312);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
int mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _6550){
  if ((_6550 == std::string ("mioAnz")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6550 == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6550 == std::string ("mioSimplexIter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6550 == std::string ("mioIntpntIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6550 == std::string ("biPrimalIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6550 == std::string ("biDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6550 == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6550 == std::string ("biCleanDualIter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6550 == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6550 == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6550 == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6550 == std::string ("rdNumanz")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6550 == std::string ("rdNumqnz")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _6551){
  if ((_6551 == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6551 == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _6552){
  if ((_6552 == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6552 == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _6553){
  if ((_6553 == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6553 == std::string ("sensitivityDualTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6553 == std::string ("intpntGfeas")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6553 == std::string ("intpntMu")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6553 == std::string ("intpntInitIterTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6553 == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6553 == std::string ("intpntUpdateTime")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6553 == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6553 == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6553 == std::string ("intpntSolveTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6553 == std::string ("intpntIterRefTime")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6553 == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6553 == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6553 == std::string ("presolveAcoltTime")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6553 == std::string ("presolveSetupTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6553 == std::string ("presolveCheckproTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6553 == std::string ("presolveDupconTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6553 == std::string ("presolveDupvarTime")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6553 == std::string ("presolveFinalTime")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6553 == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6553 == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6553 == std::string ("primalSimplexInftime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6553 == std::string ("dualSimplexInftime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6553 == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6553 == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6553 == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6553 == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6553 == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6553 == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6553 == std::string ("biPrimalDone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6553 == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6553 == std::string ("simPrimalObj")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6553 == std::string ("simPrimalFeas")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6553 == std::string ("simDualObj")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6553 == std::string ("simDualFeas")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6553 == std::string ("biPrimalObj")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6553 == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6553 == std::string ("biPrimalFeas")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6553 == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6553 == std::string ("intpntPurifyTime")))
  {
    {
      return (int)63;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _6554){
  if ((_6554 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6554 == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6554 == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6554 == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6554 == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6554 == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _6555){
  if ((_6555 == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6555 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6555 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6555 == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6555 == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6555 == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6555 == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6555 == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6555 == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _6556){
  if ((_6556 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6556 == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6556 == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6556 == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6556 == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6556 == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _6557){
  if ((_6557 == std::string ("intpntLenbarvar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6557 == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6557 == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6557 == std::string ("intpntFactorMlOrderSparseLNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6557 == std::string ("intpntFactorGpOrderSparseLNz")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6557 == std::string ("presolveStackSize")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6557 == std::string ("intpntFactorVNz")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6557 == std::string ("intpntFactorUpdatedVNz")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _6558){
  if ((_6558 == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6558 == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _6559){
  if ((_6559 == std::string ("beginRootCutgen")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6559 == std::string ("imRootCutgen")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6559 == std::string ("endRootCutgen")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6559 == std::string ("beginOptimizer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6559 == std::string ("endOptimizer")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6559 == std::string ("beginPresolve")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6559 == std::string ("updatePresolve")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6559 == std::string ("imPresolve")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6559 == std::string ("endPresolve")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6559 == std::string ("beginIntpnt")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6559 == std::string ("intpnt")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6559 == std::string ("imIntpnt")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6559 == std::string ("endIntpnt")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6559 == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6559 == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6559 == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6559 == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6559 == std::string ("primalSimplex")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6559 == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6559 == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6559 == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6559 == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6559 == std::string ("beginPrimalBi")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6559 == std::string ("imPrimalBi")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6559 == std::string ("updatePrimalBi")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6559 == std::string ("endPrimalBi")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6559 == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6559 == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6559 == std::string ("updateDualBi")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6559 == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6559 == std::string ("beginSimplexBi")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6559 == std::string ("imSimplexBi")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6559 == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6559 == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6559 == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6559 == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6559 == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6559 == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6559 == std::string ("endSimplexBi")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6559 == std::string ("beginMio")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6559 == std::string ("imMio")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6559 == std::string ("newIntMio")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6559 == std::string ("endMio")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6559 == std::string ("beginSimplex")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6559 == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6559 == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6559 == std::string ("updateDualSimplex")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6559 == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6559 == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6559 == std::string ("imPrimalSimplex")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6559 == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6559 == std::string ("endPrimalSimplex")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6559 == std::string ("endSimplex")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6559 == std::string ("beginInfeasAna")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6559 == std::string ("endInfeasAna")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6559 == std::string ("imPrimalSensivity")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6559 == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6559 == std::string ("imMioIntpnt")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6559 == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6559 == std::string ("imMioDualSimplex")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6559 == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6559 == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6559 == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6559 == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6559 == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6559 == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6559 == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6559 == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6559 == std::string ("beginLicenseWait")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6559 == std::string ("endLicenseWait")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6559 == std::string ("imLicenseWait")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6559 == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6559 == std::string ("endQcqoReformulate")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6559 == std::string ("imQoReformulate")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6559 == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6559 == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6559 == std::string ("beginFullConvexityCheck")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6559 == std::string ("endFullConvexityCheck")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6559 == std::string ("imFullConvexityCheck")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6559 == std::string ("beginPrimalRepair")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6559 == std::string ("endPrimalRepair")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6559 == std::string ("beginRead")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6559 == std::string ("imRead")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6559 == std::string ("endRead")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6559 == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6559 == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6559 == std::string ("readOpfSection")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6559 == std::string ("imLu")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6559 == std::string ("imOrder")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6559 == std::string ("imSimplex")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6559 == std::string ("readOpf")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6559 == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6559 == std::string ("solvingRemote")))
  {
    {
      return (int)84;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_language_value(const std::string & _6560){
  if ((_6560 == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6560 == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _6561){
  if ((_6561 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6561 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6561 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _6562){
  if ((_6562 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6562 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _6563){
  if ((_6563 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6563 == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6563 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _6564){
  if ((_6564 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6564 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6564 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6564 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _6565){
  if ((_6565 == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6565 == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6565 == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6565 == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _6566){
  if ((_6566 == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6566 == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_6566 == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6566 == std::string ("intpntPurify")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6566 == std::string ("numThreads")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6566 == std::string ("intpntMultiThread")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6566 == std::string ("timingLevel")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_6566 == std::string ("mtSpincount")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6566 == std::string ("maxNumWarnings")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6566 == std::string ("optimizer")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6566 == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6566 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6566 == std::string ("logIncludeSummary")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6566 == std::string ("logCutSecondOpt")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6566 == std::string ("logAnaPro")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6566 == std::string ("logResponse")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6566 == std::string ("logLocalInfo")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6566 == std::string ("logBi")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6566 == std::string ("logBiFreq")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6566 == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6566 == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6566 == std::string ("intpntStartingPoint")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6566 == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6566 == std::string ("intpntScaling")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6566 == std::string ("intpntSolveForm")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6566 == std::string ("logIntpnt")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6566 == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6566 == std::string ("intpntOffColTrh")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6566 == std::string ("intpntOrderMethod")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6566 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6566 == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6566 == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6566 == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6566 == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6566 == std::string ("presolveUse")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_6566 == std::string ("presolveLevel")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_6566 == std::string ("logPresolve")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6566 == std::string ("presolveLindepUse")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_6566 == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_6566 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_6566 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_6566 == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_6566 == std::string ("simStabilityPriority")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_6566 == std::string ("simPrimalCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_6566 == std::string ("logSim")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6566 == std::string ("logSimMinor")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6566 == std::string ("logSimFreq")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6566 == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_6566 == std::string ("simPrimalSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_6566 == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_6566 == std::string ("simDualSelection")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_6566 == std::string ("simMaxIterations")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_6566 == std::string ("simHotstartLu")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_6566 == std::string ("simRefactorFreq")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_6566 == std::string ("simSeed")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_6566 == std::string ("mioMode")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6566 == std::string ("logMio")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6566 == std::string ("logMioFreq")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6566 == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6566 == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6566 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6566 == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6566 == std::string ("mioNodeSelection")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6566 == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6566 == std::string ("mioProbingLevel")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6566 == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6566 == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6566 == std::string ("mioBranchDir")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6566 == std::string ("mioRootOptimizer")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6566 == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6566 == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6566 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6566 == std::string ("mioSeed")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6566 == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6566 == std::string ("readKeepFreeCon")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_6566 == std::string ("readMpsFormat")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_6566 == std::string ("writeMpsFormat")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_6566 == std::string ("readMpsWidth")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_6566 == std::string ("readDebug")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_6566 == std::string ("readLpQuotedNames")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_6566 == std::string ("writeDataParam")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_6566 == std::string ("writeFreeCon")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_6566 == std::string ("writeGenericNames")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_6566 == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_6566 == std::string ("writeCompression")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_6566 == std::string ("writeMpsInt")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_6566 == std::string ("writeLpStrictFormat")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_6566 == std::string ("writeLpQuotedNames")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_6566 == std::string ("writeLpLineWidth")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_6566 == std::string ("writeLpTermsPerLine")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_6566 == std::string ("writeLpFullObj")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_6566 == std::string ("writePrecision")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_6566 == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_6566 == std::string ("writeSolHead")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_6566 == std::string ("writeSolConstraints")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_6566 == std::string ("writeSolVariables")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_6566 == std::string ("writeSolBarvariables")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_6566 == std::string ("writeBasHead")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_6566 == std::string ("writeBasConstraints")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_6566 == std::string ("writeBasVariables")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_6566 == std::string ("writeIntHead")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_6566 == std::string ("writeIntConstraints")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_6566 == std::string ("writeIntVariables")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_6566 == std::string ("solReadNameWidth")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_6566 == std::string ("solReadWidth")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_6566 == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6566 == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6566 == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6566 == std::string ("logInfeasAna")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6566 == std::string ("licenseWait")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6566 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6566 == std::string ("licensePauseTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6566 == std::string ("licenseDebug")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6566 == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_6566 == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_6566 == std::string ("log")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6566 == std::string ("logExpand")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6566 == std::string ("logFile")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6566 == std::string ("logOrder")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6566 == std::string ("logSensitivity")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6566 == std::string ("logSensitivityOpt")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6566 == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_6566 == std::string ("writeTaskIncSol")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_6566 == std::string ("paramReadCaseName")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_6566 == std::string ("paramReadIgnError")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_6566 == std::string ("solutionCallback")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_6566 == std::string ("simScaling")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_6566 == std::string ("simScalingMethod")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_6566 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_6566 == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_6566 == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_6566 == std::string ("simHotstart")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_6566 == std::string ("simBasisFactorUse")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_6566 == std::string ("simDegen")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_6566 == std::string ("simReformulation")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_6566 == std::string ("simExploitDupvec")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_6566 == std::string ("simSaveLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_6566 == std::string ("simNonSingular")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_6566 == std::string ("simDualCrash")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_6566 == std::string ("logStorage")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6566 == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6566 == std::string ("readLpDropNewVarsInBou")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_6566 == std::string ("opfWriteLineLength")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6566 == std::string ("opfWriteHints")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6566 == std::string ("opfWriteParameters")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6566 == std::string ("opfWriteProblem")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6566 == std::string ("opfWriteHeader")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6566 == std::string ("opfWriteSolutions")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6566 == std::string ("opfWriteSolBas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6566 == std::string ("opfWriteSolItg")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6566 == std::string ("opfWriteSolItr")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6566 == std::string ("ptfWriteTransform")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_6566 == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_6566 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6566 == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6566 == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6566 == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6566 == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6566 == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6566 == std::string ("sensitivityType")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_6566 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_6566 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_6566 == std::string ("sensitivityAll")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_6566 == std::string ("logFeasRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6566 == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6566 == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6566 == std::string ("simSolveForm")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_6566 == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_6566 == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_6566 == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6566 == std::string ("logCheckConvexity")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6566 == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6566 == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_6566 == std::string ("writeXmlMode")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_6566 == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6566 == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6566 == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6566 == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6566 == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6566 == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _6567){
  if ((_6567 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6567 == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6567 == std::string ("moderate")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6567 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _6568){
  if ((_6568 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6568 == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6568 == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _6569){
  if ((_6569 == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6569 == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6569 == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _6570){
  if ((_6570 == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6570 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6570 == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6570 == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6570 == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6570 == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6570 == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _6571){
  if ((_6571 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6571 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _6572){
  if ((_6572 == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6572 == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _6573){
  if ((_6573 == std::string ("versionMajor")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6573 == std::string ("versionMinor")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6573 == std::string ("versionRevision")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6573 == std::string ("presolveLindepWork")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6573 == std::string ("presolveLindepPivots")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6573 == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6573 == std::string ("presolveOutofspace")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6573 == std::string ("presolveBadPrecision")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6573 == std::string ("optObjectiveSense")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6573 == std::string ("optimizer")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6573 == std::string ("intpntFirRefIter")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6573 == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6573 == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6573 == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6573 == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6573 == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumcon")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumvar")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumbarvar")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumblo")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumbup")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumbfr")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumbfx")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumcone")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumconevar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumbndcone")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumrqcones")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumqcones")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6573 == std::string ("intpntNumppowcones")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6573 == std::string ("intpntMinconedim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6573 == std::string ("intpntMaxconedim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6573 == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumcfr")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumcfx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumclo")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumcup")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumcra")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumcnl")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumvfr")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumvfx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumvlo")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumvup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumvra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumvnl")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumnza")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumcon")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumcfr")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumcfx")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumclo")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumcup")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumcra")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumcnl")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumvar")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumvfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumvfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumvlo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumvup")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumvra")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumvnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6573 == std::string ("presolveFnumnza")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumElimns")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6573 == std::string ("presolveEliNumTries")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6573 == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6573 == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6573 == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6573 == std::string ("presolveLindepNum")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6573 == std::string ("presolveForceConNum")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6573 == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6573 == std::string ("presolveForceVarNum")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6573 == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6573 == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6573 == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6573 == std::string ("presolveNumQuadConeOrthoTrans")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6573 == std::string ("intpntFactorNum")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6573 == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6573 == std::string ("simPrimalHotstartNumBasics")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6573 == std::string ("simPrimalHotstartBasisRank")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6573 == std::string ("simDualHotstartNumBasics")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6573 == std::string ("simDualHotstartBasisRank")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6573 == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6573 == std::string ("numLuFactorizations")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6573 == std::string ("simPrimalTrust")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6573 == std::string ("simDualTrust")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6573 == std::string ("simPrimalNumSetbacks")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6573 == std::string ("simDualNumSetbacks")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6573 == std::string ("simNumDupvec")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6573 == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6573 == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6573 == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6573 == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6573 == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6573 == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)57;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scopr_value(const std::string & _6574){
  if ((_6574 == std::string ("ent")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6574 == std::string ("exp")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6574 == std::string ("log")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6574 == std::string ("pow")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6574 == std::string ("sqrt")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _6575){
  if ((_6575 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6575 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6575 == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6575 == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6575 == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6575 == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6575 == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6575 == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _6576){
  if ((_6576 == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6576 == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6576 == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6576 == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6576 == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _6577){
  if ((_6577 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6577 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6577 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6577 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6577 == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _6578){
  if ((_6578 == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _6579){
  if ((_6579 == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6579 == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6579 == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6579 == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6579 == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6579 == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6579 == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6579 == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _6580){
  if ((_6580 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6580 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6580 == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _6581){
  if ((_6581 == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6581 == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6581 == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6581 == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _6582){
  if ((_6582 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6582 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6582 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _6583){
  if ((_6583 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6583 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6583 == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6583 == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _6584){
  if ((_6584 == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6584 == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6584 == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _6585){
  if ((_6585 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6585 == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6585 == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6585 == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _6586){
  if ((_6586 == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6586 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _6587){
  if ((_6587 == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6587 == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _6588){
  if ((_6588 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6588 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6588 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _6589){
  if ((_6589 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6589 == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6589 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6589 == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _6590){
  if ((_6590 == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6590 == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _6591){
  if ((_6591 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6591 == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6591 == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6591 == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6591 == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6591 == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6591 == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6591 == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6591 == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_6591 == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_6591 == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_6591 == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_6591 == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_6591 == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_6591 == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_6591 == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_6591 == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_6591 == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_6591 == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_6591 == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_6591 == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_6591 == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_6591 == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_6591 == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_6591 == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_6591 == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_6591 == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_6591 == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_6591 == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_6591 == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_6591 == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_6591 == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_6591 == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_6591 == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)804;
    }
  }
  {}
  if ((_6591 == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_6591 == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_6591 == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_6591 == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_6591 == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_6591 == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_6591 == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_6591 == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_6591 == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_6591 == std::string ("wrnQuadConesWithRootFixedAtZero")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_6591 == std::string ("wrnRquadConesWithRootFixedAtZero")))
  {
    {
      return (int)931;
    }
  }
  {}
  if ((_6591 == std::string ("wrnExpConesWithVariablesFixedAtZero")))
  {
    {
      return (int)932;
    }
  }
  {}
  if ((_6591 == std::string ("wrnPowConesWithRootFixedAtZero")))
  {
    {
      return (int)933;
    }
  }
  {}
  if ((_6591 == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_6591 == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_6591 == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_6591 == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_6591 == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_6591 == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_6591 == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_6591 == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_6591 == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_6591 == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_6591 == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_6591 == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_6591 == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_6591 == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_6591 == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_6591 == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_6591 == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_6591 == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_6591 == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_6591 == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_6591 == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_6591 == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_6591 == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_6591 == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_6591 == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_6591 == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_6591 == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_6591 == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_6591 == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_6591 == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_6591 == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_6591 == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_6591 == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_6591 == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_6591 == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_6591 == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_6591 == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_6591 == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_6591 == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_6591 == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsInvConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsInvBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsInvSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_6591 == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_6591 == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_6591 == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_6591 == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_6591 == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_6591 == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_6591 == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_6591 == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_6591 == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_6591 == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_6591 == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_6591 == std::string ("errLpFormat")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_6591 == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_6591 == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_6591 == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_6591 == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_6591 == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_6591 == std::string ("errPtfFormat")))
  {
    {
      return (int)1167;
    }
  }
  {}
  if ((_6591 == std::string ("errOpfFormat")))
  {
    {
      return (int)1168;
    }
  }
  {}
  if ((_6591 == std::string ("errOpfNewVariable")))
  {
    {
      return (int)1169;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_6591 == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_6591 == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1172;
    }
  }
  {}
  if ((_6591 == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_6591 == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_6591 == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_6591 == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_6591 == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_6591 == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_6591 == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_6591 == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_6591 == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_6591 == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_6591 == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_6591 == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_6591 == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_6591 == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_6591 == std::string ("errParamName")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_6591 == std::string ("errParamNameDou")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_6591 == std::string ("errParamNameInt")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_6591 == std::string ("errParamNameStr")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_6591 == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_6591 == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_6591 == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_6591 == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_6591 == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_6591 == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_6591 == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_6591 == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_6591 == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_6591 == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_6591 == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_6591 == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_6591 == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_6591 == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_6591 == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_6591 == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_6591 == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_6591 == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_6591 == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_6591 == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_6591 == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_6591 == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_6591 == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_6591 == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_6591 == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_6591 == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_6591 == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_6591 == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_6591 == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_6591 == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_6591 == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_6591 == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_6591 == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_6591 == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_6591 == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_6591 == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_6591 == std::string ("errUndefSolution")))
  {
    {
      return (int)1265;
    }
  }
  {}
  if ((_6591 == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_6591 == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_6591 == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_6591 == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_6591 == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_6591 == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_6591 == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_6591 == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_6591 == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_6591 == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_6591 == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_6591 == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_6591 == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_6591 == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_6591 == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_6591 == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_6591 == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_6591 == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_6591 == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_6591 == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_6591 == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_6591 == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_6591 == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_6591 == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_6591 == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_6591 == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_6591 == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_6591 == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_6591 == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_6591 == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_6591 == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_6591 == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_6591 == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_6591 == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_6591 == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_6591 == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_6591 == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_6591 == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_6591 == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_6591 == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_6591 == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_6591 == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_6591 == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_6591 == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_6591 == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_6591 == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_6591 == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_6591 == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_6591 == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_6591 == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_6591 == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_6591 == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_6591 == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_6591 == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_6591 == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_6591 == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_6591 == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_6591 == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_6591 == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_6591 == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_6591 == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_6591 == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_6591 == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_6591 == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_6591 == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_6591 == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_6591 == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_6591 == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_6591 == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_6591 == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_6591 == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_6591 == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_6591 == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_6591 == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_6591 == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_6591 == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_6591 == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_6591 == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_6591 == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_6591 == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_6591 == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_6591 == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_6591 == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_6591 == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_6591 == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_6591 == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_6591 == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_6591 == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_6591 == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_6591 == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_6591 == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_6591 == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_6591 == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_6591 == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_6591 == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_6591 == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_6591 == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_6591 == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_6591 == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_6591 == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_6591 == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_6591 == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_6591 == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_6591 == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_6591 == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_6591 == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_6591 == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_6591 == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_6591 == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_6591 == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_6591 == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_6591 == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_6591 == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_6591 == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_6591 == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_6591 == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_6591 == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_6591 == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_6591 == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_6591 == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_6591 == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_6591 == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_6591 == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_6591 == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_6591 == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_6591 == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_6591 == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_6591 == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_6591 == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_6591 == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_6591 == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_6591 == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_6591 == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_6591 == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_6591 == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_6591 == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_6591 == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_6591 == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_6591 == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_6591 == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_6591 == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_6591 == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_6591 == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_6591 == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_6591 == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_6591 == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_6591 == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_6591 == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_6591 == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_6591 == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_6591 == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_6591 == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_6591 == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_6591 == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_6591 == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7109;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7740;
    }
  }
  {}
  if ((_6591 == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7741;
    }
  }
  {}
  if ((_6591 == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_6591 == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_6591 == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_6591 == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_6591 == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_6591 == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_6591 == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_6591 == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_6591 == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_6591 == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_6591 == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_6591 == std::string ("trmMaxIterations")))
  {
    {
      return (int)10000;
    }
  }
  {}
  if ((_6591 == std::string ("trmMaxTime")))
  {
    {
      return (int)10001;
    }
  }
  {}
  if ((_6591 == std::string ("trmObjectiveRange")))
  {
    {
      return (int)10002;
    }
  }
  {}
  if ((_6591 == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)10008;
    }
  }
  {}
  if ((_6591 == std::string ("trmMioNumBranches")))
  {
    {
      return (int)10009;
    }
  }
  {}
  if ((_6591 == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)10015;
    }
  }
  {}
  if ((_6591 == std::string ("trmStall")))
  {
    {
      return (int)10006;
    }
  }
  {}
  if ((_6591 == std::string ("trmUserCallback")))
  {
    {
      return (int)10007;
    }
  }
  {}
  if ((_6591 == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)10020;
    }
  }
  {}
  if ((_6591 == std::string ("trmNumericalProblem")))
  {
    {
      return (int)10025;
    }
  }
  {}
  if ((_6591 == std::string ("trmInternal")))
  {
    {
      return (int)10030;
    }
  }
  {}
  if ((_6591 == std::string ("trmInternalStop")))
  {
    {
      return (int)10031;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _6592){
  if ((_6592 == std::string ("biTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6592 == std::string ("biPrimalTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6592 == std::string ("biDualTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6592 == std::string ("biCleanTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6592 == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6592 == std::string ("biCleanDualTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6592 == std::string ("intpntTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6592 == std::string ("intpntOrderTime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6592 == std::string ("intpntPrimalObj")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6592 == std::string ("intpntDualObj")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6592 == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6592 == std::string ("intpntDualFeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6592 == std::string ("intpntOptStatus")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6592 == std::string ("simTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6592 == std::string ("simPrimalTime")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6592 == std::string ("simDualTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6592 == std::string ("simObj")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6592 == std::string ("simFeas")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6592 == std::string ("mioTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6592 == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6592 == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6592 == std::string ("toConicTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6592 == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6592 == std::string ("mioObjInt")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6592 == std::string ("mioObjBound")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6592 == std::string ("mioObjRelGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6592 == std::string ("mioObjAbsGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6592 == std::string ("mioUserObjCut")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6592 == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6592 == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6592 == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6592 == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6592 == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6592 == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6592 == std::string ("mioProbingTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6592 == std::string ("optimizerTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6592 == std::string ("presolveTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6592 == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6592 == std::string ("presolveEliTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6592 == std::string ("presolveLindepTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6592 == std::string ("rdTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6592 == std::string ("solItrPrimalObj")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6592 == std::string ("solItrPviolcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6592 == std::string ("solItrPviolvar")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6592 == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6592 == std::string ("solItrPviolcones")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6592 == std::string ("solItrDualObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6592 == std::string ("solItrDviolcon")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6592 == std::string ("solItrDviolvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6592 == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6592 == std::string ("solItrDviolcones")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmXc")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmXx")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmBarx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmY")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmSlc")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmSuc")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmSlx")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmSux")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmSnx")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6592 == std::string ("solItrNrmBars")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6592 == std::string ("solBasPrimalObj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6592 == std::string ("solBasPviolcon")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6592 == std::string ("solBasPviolvar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6592 == std::string ("solBasDualObj")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6592 == std::string ("solBasDviolcon")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6592 == std::string ("solBasDviolvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6592 == std::string ("solBasNrmXc")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6592 == std::string ("solBasNrmXx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6592 == std::string ("solBasNrmBarx")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6592 == std::string ("solBasNrmY")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6592 == std::string ("solBasNrmSlc")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6592 == std::string ("solBasNrmSuc")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6592 == std::string ("solBasNrmSlx")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6592 == std::string ("solBasNrmSux")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6592 == std::string ("solItgPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6592 == std::string ("solItgPviolcon")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6592 == std::string ("solItgPviolvar")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6592 == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6592 == std::string ("solItgPviolcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6592 == std::string ("solItgPviolitg")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6592 == std::string ("solItgNrmXc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6592 == std::string ("solItgNrmXx")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6592 == std::string ("solItgNrmBarx")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6592 == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6592 == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6592 == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6592 == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6592 == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6592 == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)35;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _6593){
  if ((_6593 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6593 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6593 == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6593 == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6593 == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _6594){
  if ((_6594 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6594 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _6595){
  if ((_6595 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6595 == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6595 == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6595 == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6595 == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _6596){
  if ((_6596 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6596 == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6596 == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6596 == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6596 == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _6597){
  if ((_6597 == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6597 == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6597 == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6597 == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6597 == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6597 == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6597 == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6597 == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6597 == std::string ("solFilterXcLow")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6597 == std::string ("solFilterXcUpr")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6597 == std::string ("solFilterXxLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6597 == std::string ("solFilterXxUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6597 == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6597 == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6597 == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6597 == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6597 == std::string ("statFileName")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6597 == std::string ("statName")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6597 == std::string ("statKey")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6597 == std::string ("writeLpGenVarName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6597 == std::string ("sensitivityResFileName")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6597 == std::string ("sensitivityFileName")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6597 == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6597 == std::string ("remoteAccessToken")))
  {
    {
      return (int)13;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _6598){
  if ((_6598 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6598 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6598 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6598 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _6599){
  if ((_6599 == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6599 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6599 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _6600){
  if ((_6600 == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6600 == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6600 == std::string ("optimizeResponse")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6600 == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6600 == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6600 == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6600 == std::string ("mioNodeDepth")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumbin")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumint")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumcont")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumcon")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumcone")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumqcones")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumrqcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumpexpcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumdexpcones")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumppowcones")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumdpowcones")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumconevar")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumbinconevar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumintconevar")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumcontconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6600 == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6600 == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6600 == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6600 == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumRelax")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumBranch")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6600 == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6600 == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6600 == std::string ("mioUserObjCut")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6600 == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6600 == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6600 == std::string ("rdProtype")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6600 == std::string ("rdNumcon")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6600 == std::string ("rdNumvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6600 == std::string ("rdNumbarvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6600 == std::string ("rdNumintvar")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6600 == std::string ("rdNumq")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6600 == std::string ("simDualDegIter")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6600 == std::string ("simDualInfIter")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6600 == std::string ("simDualHotstartLu")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6600 == std::string ("simPrimalIter")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6600 == std::string ("simDualIter")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6600 == std::string ("simPrimalInfIter")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6600 == std::string ("simPrimalDegIter")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6600 == std::string ("simPrimalHotstart")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6600 == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6600 == std::string ("simDualHotstart")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6600 == std::string ("solItrProsta")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_6600 == std::string ("solItrSolsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_6600 == std::string ("solBasProsta")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6600 == std::string ("solBasSolsta")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6600 == std::string ("solItgProsta")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6600 == std::string ("solItgSolsta")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6600 == std::string ("simNumcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6600 == std::string ("simNumvar")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6600 == std::string ("optNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6600 == std::string ("optNumvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6600 == std::string ("stoNumARealloc")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_6600 == std::string ("rdNumcone")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6600 == std::string ("simSolveDual")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6600 == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6600 == std::string ("purifyDualSuccess")))
  {
    {
      return (int)72;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _6601){
  if ((_6601 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6601 == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6601 == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6601 == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _6602){
  if ((_6602 == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6602 == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6602 == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6602 == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6602 == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6602 == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6602 == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _6603){
  if ((_6603 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6603 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6603 == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6603 == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6603 == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _6604){
  if ((_6604 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6604 == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6604 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6604 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6604 == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6604 == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6604 == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6604 == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6604 == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _6605){
  if ((_6605 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6605 == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6605 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6605 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6605 == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6605 == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6605 == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6605 == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6605 == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6605 == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _6606){
  if ((_6606 == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6606 == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6606 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6606 == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_value_value(const std::string & _6607){
  if ((_6607 == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_6607 == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _6608){
  if ((_6608 == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6608 == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6608 == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _6609){
  if ((_6609 == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _6610){
  if ((_6610 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6610 == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6610 == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6610 == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6610 == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6610 == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6610 == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _6611){
  if ((_6611 == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6611 == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6611 == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6611 == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6611 == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6611 == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6611 == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6611 == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6611 == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6611 == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6611 == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6611 == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6611 == std::string ("optimizerMaxTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6611 == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6611 == std::string ("upperObjCut")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6611 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6611 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6611 == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6611 == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6611 == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6611 == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6611 == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6611 == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6611 == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6611 == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6611 == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6611 == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6611 == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6611 == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6611 == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6611 == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6611 == std::string ("mioMaxTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6611 == std::string ("mioRelGapConst")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6611 == std::string ("mioTolRelGap")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6611 == std::string ("mioTolAbsGap")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6611 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6611 == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6611 == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6611 == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6611 == std::string ("presolveTolX")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6611 == std::string ("presolveTolS")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6611 == std::string ("presolveTolAij")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6611 == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6611 == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6611 == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6611 == std::string ("mioTolFeas")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6611 == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6611 == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6611 == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6611 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)45;
    }
  }
  {}
  return (-(int)1);
}
void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }